This file is a merged representation of the entire codebase, combined into a single document by Repomix.
The content has been processed where content has been compressed (code blocks are separated by ⋮---- delimiter).

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Content has been compressed - code blocks are separated by ⋮---- delimiter
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.editorconfig
.gitattributes
.gitignore
addons/better-terrain/BetterTerrain.cs
addons/better-terrain/BetterTerrain.gd
addons/better-terrain/BetterTerrain.gd.uid
addons/better-terrain/BetterTerrainData.gd
addons/better-terrain/BetterTerrainData.gd.uid
addons/better-terrain/editor/Dock.gd
addons/better-terrain/editor/Dock.gd.uid
addons/better-terrain/editor/Dock.tscn
addons/better-terrain/editor/TerrainEntry.gd
addons/better-terrain/editor/TerrainEntry.gd.uid
addons/better-terrain/editor/TerrainEntry.tscn
addons/better-terrain/editor/TerrainProperties.gd
addons/better-terrain/editor/TerrainProperties.gd.uid
addons/better-terrain/editor/TerrainProperties.tscn
addons/better-terrain/editor/TerrainUndo.gd
addons/better-terrain/editor/TerrainUndo.gd.uid
addons/better-terrain/editor/TileView.gd
addons/better-terrain/editor/TileView.gd.uid
addons/better-terrain/icon.svg
addons/better-terrain/icon.svg.import
addons/better-terrain/icons/Decoration.svg
addons/better-terrain/icons/Decoration.svg.import
addons/better-terrain/icons/EditSymmetry.svg
addons/better-terrain/icons/EditSymmetry.svg.import
addons/better-terrain/icons/EditTerrain.svg
addons/better-terrain/icons/EditTerrain.svg.import
addons/better-terrain/icons/EditType.svg
addons/better-terrain/icons/EditType.svg.import
addons/better-terrain/icons/MatchTiles.svg
addons/better-terrain/icons/MatchTiles.svg.import
addons/better-terrain/icons/MatchVertices.svg
addons/better-terrain/icons/MatchVertices.svg.import
addons/better-terrain/icons/NonModifying.svg
addons/better-terrain/icons/NonModifying.svg.import
addons/better-terrain/icons/paint-symmetry/SymmetryAll.svg
addons/better-terrain/icons/paint-symmetry/SymmetryAll.svg.import
addons/better-terrain/icons/paint-symmetry/SymmetryFlip.svg
addons/better-terrain/icons/paint-symmetry/SymmetryFlip.svg.import
addons/better-terrain/icons/paint-symmetry/SymmetryMirror.svg
addons/better-terrain/icons/paint-symmetry/SymmetryMirror.svg.import
addons/better-terrain/icons/paint-symmetry/SymmetryReflect.svg
addons/better-terrain/icons/paint-symmetry/SymmetryReflect.svg.import
addons/better-terrain/icons/paint-symmetry/SymmetryRotate180.svg
addons/better-terrain/icons/paint-symmetry/SymmetryRotate180.svg.import
addons/better-terrain/icons/paint-symmetry/SymmetryRotateAll.svg
addons/better-terrain/icons/paint-symmetry/SymmetryRotateAll.svg.import
addons/better-terrain/icons/paint-symmetry/SymmetryRotateClockwise.svg
addons/better-terrain/icons/paint-symmetry/SymmetryRotateClockwise.svg.import
addons/better-terrain/icons/paint-symmetry/SymmetryRotateCounterClockwise.svg
addons/better-terrain/icons/paint-symmetry/SymmetryRotateCounterClockwise.svg.import
addons/better-terrain/icons/Replace.svg
addons/better-terrain/icons/Replace.svg.import
addons/better-terrain/icons/ShuffleRandom.svg
addons/better-terrain/icons/ShuffleRandom.svg.import
addons/better-terrain/icons/SymmetryAll.svg
addons/better-terrain/icons/SymmetryAll.svg.import
addons/better-terrain/icons/SymmetryFlip.svg
addons/better-terrain/icons/SymmetryFlip.svg.import
addons/better-terrain/icons/SymmetryMirror.svg
addons/better-terrain/icons/SymmetryMirror.svg.import
addons/better-terrain/icons/SymmetryReflect.svg
addons/better-terrain/icons/SymmetryReflect.svg.import
addons/better-terrain/icons/SymmetryRotate180.svg
addons/better-terrain/icons/SymmetryRotate180.svg.import
addons/better-terrain/icons/SymmetryRotateAll.svg
addons/better-terrain/icons/SymmetryRotateAll.svg.import
addons/better-terrain/icons/SymmetryRotateClockwise.svg
addons/better-terrain/icons/SymmetryRotateClockwise.svg.import
addons/better-terrain/icons/SymmetryRotateCounterClockwise.svg
addons/better-terrain/icons/SymmetryRotateCounterClockwise.svg.import
addons/better-terrain/icons/Warning.svg
addons/better-terrain/icons/Warning.svg.import
addons/better-terrain/plugin.cfg
addons/better-terrain/TerrainPlugin.gd
addons/better-terrain/TerrainPlugin.gd.uid
addons/better-terrain/Watcher.gd
addons/better-terrain/Watcher.gd.uid
addons/Inventory/Inventory.gd
addons/Inventory/Inventory.gd.uid
addons/Inventory/InventoryItem.gd
addons/Inventory/InventoryItem.gd.uid
addons/Inventory/InventoryItemType.gd
addons/Inventory/InventoryItemType.gd.uid
addons/Inventory/InventorySlot.gd
addons/Inventory/InventorySlot.gd.uid
addons/Inventory/UI/InventoryGridUI/inventory.tres
addons/Inventory/UI/InventoryGridUI/InventoryGridItemUI.gd
addons/Inventory/UI/InventoryGridUI/InventoryGridItemUI.gd.uid
addons/Inventory/UI/InventoryGridUI/InventoryGridUI.tscn
addons/Inventory/UI/InventoryGridUI/InventoryPopupTooltip.gd
addons/Inventory/UI/InventoryGridUI/InventoryPopupTooltip.gd.uid
addons/Inventory/UI/List/InventoryListItemUI.gd
addons/Inventory/UI/List/InventoryListItemUI.gd.uid
addons/Inventory/UI/List/InventoryListUI.gd
addons/Inventory/UI/List/InventoryListUI.gd.uid
addons/Inventory/UI/PingPongScroller.gd
addons/Inventory/UI/PingPongScroller.gd.uid
addons/Inventory/UI/SimpleInventoryItemUI.gd
addons/Inventory/UI/SimpleInventoryItemUI.gd.uid
addons/Inventory/UI/SimpleInventoryUI.gd
addons/Inventory/UI/SimpleInventoryUI.gd.uid
assets/inventory/ammolite.tres
assets/inventory/ladder.tres
assets/inventory/stone1.tres
assets/inventory/stone2.tres
assets/music/steam_gardens_slowed.wav.import
assets/music/time_for_adventure.mp3.import
assets/scenes/crt_shader.tscn
assets/scenes/game.tscn
assets/scenes/InventoryGridItemUI.tscn
assets/scenes/InventoryGridUI.tscn
assets/scenes/InventoryListItemUI.tscn
assets/scenes/InventoryListUI.tscn
assets/scenes/ladder.tscn
assets/scenes/player_inventory.tres
assets/scenes/player_inventory.tscn
assets/scenes/player.tscn
assets/scenes/title_screen.tscn
assets/sounds/coin.wav.import
assets/sounds/dig1.mp3.import
assets/sounds/dig2.mp3.import
assets/sounds/explosion.wav.import
assets/sounds/hurt.wav.import
assets/sounds/jump.wav.import
assets/sounds/ladder-climbing.mp3.import
assets/sounds/ladder-create.ogg.import
assets/sounds/ladder-destroy.ogg.import
assets/sounds/power_up.wav.import
assets/sounds/tap.wav.import
assets/sounds/walk1.wav.import
assets/sounds/walk2.ogg.import
assets/sounds/walk3.ogg.import
assets/sounds/walk4.ogg.import
assets/sprites/other/scenes/crt_shader.tscn
assets/sprites/other/scenes/game.tscn
assets/sprites/other/scenes/game.tscn20151021202.tmp
assets/sprites/other/scenes/ladder.tscn
assets/sprites/other/scenes/player.tscn
assets/sprites/other/scenes/player.tscn20153892974.tmp
icon.svg
icon.svg.import
LICENSE
project.godot
README.md
scripts/game_over_ui.gd
scripts/game_over_ui.gd.uid
scripts/game.gd
scripts/game.gd.uid
scripts/ladder.gd
scripts/ladder.gd.uid
scripts/pause_menu.gd
scripts/pause_menu.gd.uid
scripts/player.gd
scripts/player.gd.uid
scripts/title_screen.gd
scripts/title_screen.gd.uid
scripts/ui.gd
scripts/ui.gd.uid
shaders/crt.gdshader
shaders/crt.gdshader.uid
shaders/grayscale_shader.gdshader
shaders/grayscale_shader.gdshader.uid
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".editorconfig">
root = true

[*]
charset = utf-8
</file>

<file path=".gitattributes">
# Normalize EOL for all files that Git considers text files.
* text=auto eol=lf
</file>

<file path="addons/better-terrain/BetterTerrain.cs">
/*

This is a lightweight wrapper for Better Terrain in C#.

It is not a C# implementation, it merely provides a type safe interface to access
the BetterTerrain autoload from C#. If you are not using Godot in C#, you can ignore
this file.

The interface is created for a specific tilemap node, which it uses to locate the
autoload, and to fill in as a parameter to simplify all the subsequent calls.
Very simple example:

```
    BetterTerrain betterTerrain;

    public override void _Ready()
    {
        TileMapLayer tileMapLayer = GetNode<TileMapLayer>("TileMapLayer");
        betterTerrain = new BetterTerrain(tm);

        var coordinates = new Vector2I(0, 0);
        betterTerrain.SetCell(coordinates, 1);
        betterTerrain.UpdateTerrainCell(coordinates);
    }
```

The functions available are the same as BetterTerrain's, though the TileMapLayer or
TileSet parameters are automatically filled in. The help is not duplicated here,
refer to the GDScript version for specifics.

*/
⋮----
public class BetterTerrain
⋮----
Mirror = 1, // Horizontally mirror
Flip = 2, // Vertically flip
Reflect = 3, // All four reflections
⋮----
RotateAll = 7, // All four rotated forms
All = 8 // All rotated and reflected forms
⋮----
private static readonly NodePath nodePath = new("/root/BetterTerrain");
private readonly Node betterTerrain;
private readonly TileMapLayer tileMapLayer;
⋮----
betterTerrain = tileMapLayer.GetNode(nodePath);
⋮----
public Array<Godot.Collections.Dictionary<string, Variant>> GetTerrainCategories()
⋮----
return (Array<Godot.Collections.Dictionary<string, Variant>>)betterTerrain.Call(MethodName.GetTerrainCategories, tileMapLayer.TileSet);
⋮----
public bool AddTerrain(string name, Color color, TerrainType type, Array<int> categories = null, Godot.Collections.Dictionary<Variant, Variant> icon = null)
⋮----
return (bool)betterTerrain.Call(MethodName.AddTerrain, tileMapLayer.TileSet, name, color, (int)type, categories, icon);
⋮----
public bool RemoveTerrain(int index)
⋮----
return (bool)betterTerrain.Call(MethodName.RemoveTerrain, tileMapLayer.TileSet, index);
⋮----
public int TerrainCount()
⋮----
return (int)betterTerrain.Call(MethodName.TerrainCount, tileMapLayer.TileSet);
⋮----
public Godot.Collections.Dictionary<string, Variant> GetTerrain(int index)
⋮----
return (Godot.Collections.Dictionary<string, Variant>)betterTerrain.Call(MethodName.GetTerrain, tileMapLayer.TileSet, index);
⋮----
public bool SetTerrain(int index, string name, Color color, TerrainType type, Array<int> categories = null, Godot.Collections.Dictionary<Variant, Variant> icon = null)
⋮----
return (bool)betterTerrain.Call(MethodName.SetTerrain, tileMapLayer.TileSet, index, name, color, (int)type, categories, icon);
⋮----
public bool SwapTerrains(int index1, int index2)
⋮----
return (bool)betterTerrain.Call(MethodName.SwapTerrains, tileMapLayer.TileSet, index1, index2);
⋮----
public bool SetTileTerrainType(TileData tileData, int type)
⋮----
return (bool)betterTerrain.Call(MethodName.SetTileTerrainType, tileMapLayer.TileSet, tileData, type);
⋮----
public int GetTileTerrainType(TileData tileData)
⋮----
return (int)betterTerrain.Call(MethodName.GetTileTerrainType, tileData);
⋮----
public bool SetTileSymmetryType(TileData tileData, SymmetryType type)
⋮----
return (bool)betterTerrain.Call(MethodName.SetTileSymmetryType, tileMapLayer.TileSet, tileData, (int)type);
⋮----
public SymmetryType GetTileSymmetryType(TileData tileData)
⋮----
return (SymmetryType)(int)betterTerrain.Call(MethodName.GetTileSymmetryType, tileData);
⋮----
public Array<TileData> GetTilesInTerrain(int type)
⋮----
return (Array<TileData>)betterTerrain.Call(MethodName.GetTilesInTerrain, tileMapLayer.TileSet, type);
⋮----
public Array<Godot.Collections.Dictionary<string, Variant>> GetTileSourcesInTerrain(int type)
⋮----
return (Array<Godot.Collections.Dictionary<string, Variant>>)betterTerrain.Call(MethodName.GetTileSourcesInTerrain, tileMapLayer.TileSet, type);
⋮----
public bool AddTilePeeringType(TileData tileData, TileSet.CellNeighbor peering, int type)
⋮----
return (bool)betterTerrain.Call(MethodName.AddTilePeeringType, tileMapLayer.TileSet, tileData, (int)peering, type);
⋮----
public bool RemoveTilePeeringType(TileData tileData, TileSet.CellNeighbor peering, int type)
⋮----
return (bool)betterTerrain.Call(MethodName.RemoveTilePeeringType, tileMapLayer.TileSet, tileData, (int)peering, type);
⋮----
public Array<TileSet.CellNeighbor> TilePeeringKeys(TileData tileData)
⋮----
return (Array<TileSet.CellNeighbor>)betterTerrain.Call(MethodName.TilePeeringKeys, tileData);
⋮----
public Array<int> TilePeeringTypes(TileData tileData, TileSet.CellNeighbor peering)
⋮----
return (Array<int>)betterTerrain.Call(MethodName.TilePeeringTypes, tileData, (int)peering);
⋮----
public Array<TileSet.CellNeighbor> TilePeeringForType(TileData tileData, int type)
⋮----
return (Array<TileSet.CellNeighbor>)betterTerrain.Call(MethodName.TilePeeringForType, tileData, type);
⋮----
public bool SetCell(Vector2I coordinate, int type)
⋮----
return (bool)betterTerrain.Call(MethodName.SetCell, tileMapLayer, coordinate, type);
⋮----
public bool SetCells(Array<Vector2I> coordinates, int type)
⋮----
return (bool)betterTerrain.Call(MethodName.SetCells, tileMapLayer, coordinates, type);
⋮----
public bool ReplaceCell(Vector2I coordinate, int type)
⋮----
return (bool)betterTerrain.Call(MethodName.ReplaceCell, tileMapLayer, coordinate, type);
⋮----
public bool ReplaceCells(Array<Vector2I> coordinates, int type)
⋮----
return (bool)betterTerrain.Call(MethodName.ReplaceCells, tileMapLayer, coordinates, type);
⋮----
public int GetCell(Vector2I coordinate)
⋮----
return (int)betterTerrain.Call(MethodName.GetCell, tileMapLayer, coordinate);
⋮----
public void UpdateTerrainCells(Array<Vector2I> cells, bool updateSurroundingCells = true)
⋮----
betterTerrain.Call(MethodName.UpdateTerrainCells, tileMapLayer, cells, updateSurroundingCells);
⋮----
public void UpdateTerrainCell(Vector2I cell, bool updateSurroundingCells = true)
⋮----
betterTerrain.Call(MethodName.UpdateTerrainCell, tileMapLayer, cell, updateSurroundingCells);
⋮----
public void UpdateTerrainArea(Rect2I area, bool updateSurroundingCells = true)
⋮----
betterTerrain.Call(MethodName.UpdateTerrainArea, tileMapLayer, area, updateSurroundingCells);
⋮----
public Godot.Collections.Dictionary<Variant, Variant> CreateTerrainChangeset(Godot.Collections.Dictionary<Vector2I, int> paint)
⋮----
return (Godot.Collections.Dictionary<Variant, Variant>)betterTerrain.Call(MethodName.CreateTerrainChangeset, tileMapLayer, paint);
⋮----
public bool IsTerrainChangesetReady(Godot.Collections.Dictionary<Variant, Variant> changeset)
⋮----
return (bool)betterTerrain.Call(MethodName.IsTerrainChangesetReady, changeset);
⋮----
public void WaitForTerrainChangeset(Godot.Collections.Dictionary<Variant, Variant> changeset)
⋮----
betterTerrain.Call(MethodName.WaitForTerrainChangeset, changeset);
⋮----
public void ApplyTerrainChangeset(Godot.Collections.Dictionary<Variant, Variant> changeset)
⋮----
betterTerrain.Call(MethodName.ApplyTerrainChangeset, changeset);
⋮----
private static class MethodName
⋮----
public static readonly StringName GetTerrainCategories = "get_terrain_categories";
public static readonly StringName AddTerrain = "add_terrain";
public static readonly StringName RemoveTerrain = "remove_terrain";
public static readonly StringName TerrainCount = "terrain_count";
public static readonly StringName GetTerrain = "get_terrain";
public static readonly StringName SetTerrain = "set_terrain";
public static readonly StringName SwapTerrains = "swap_terrains";
public static readonly StringName SetTileTerrainType = "set_tile_terrain_type";
public static readonly StringName GetTileTerrainType = "get_tile_terrain_type";
public static readonly StringName SetTileSymmetryType = "set_tile_symmetry_type";
public static readonly StringName GetTileSymmetryType = "get_tile_symmetry_type";
public static readonly StringName GetTilesInTerrain = "get_tiles_in_terrain";
public static readonly StringName GetTileSourcesInTerrain = "get_tile_sources_in_terrain";
public static readonly StringName AddTilePeeringType = "add_tile_peering_type";
public static readonly StringName RemoveTilePeeringType = "remove_tile_peering_type";
public static readonly StringName TilePeeringKeys = "tile_peering_keys";
public static readonly StringName TilePeeringTypes = "tile_peering_types";
public static readonly StringName TilePeeringForType = "tile_peering_for_type";
public static readonly StringName SetCell = "set_cell";
public static readonly StringName SetCells = "set_cells";
public static readonly StringName ReplaceCell = "replace_cell";
public static readonly StringName ReplaceCells = "replace_cells";
public static readonly StringName GetCell = "get_cell";
public static readonly StringName UpdateTerrainCells = "update_terrain_cells";
public static readonly StringName UpdateTerrainCell = "update_terrain_cell";
public static readonly StringName UpdateTerrainArea = "update_terrain_area";
public static readonly StringName CreateTerrainChangeset = "create_terrain_changeset";
public static readonly StringName IsTerrainChangesetReady = "is_terrain_changeset_ready";
public static readonly StringName WaitForTerrainChangeset = "wait_for_terrain_changeset";
public static readonly StringName ApplyTerrainChangeset = "apply_terrain_changeset";
</file>

<file path="addons/better-terrain/BetterTerrain.gd">
@tool
extends Node

## A [TileMapLayer] terrain / auto-tiling system.
##
## This is a drop-in replacement for Godot 4's tilemap terrain system, offering
## more versatile and straightforward autotiling. It can be used with any
## existing [TileMapLayer] or [TileSet], either through the editor plugin, or
## directly via code.
## [br][br]
## The [b]BetterTerrain[/b] class contains only static functions, each of which
## either takes a [TileMapLayer], a [TileSet], and sometimes a [TileData].
## Meta-data is embedded inside the [TileSet] and the [TileData] types to store
## the terrain information. See [method Object.get_meta] for information.
## [br][br]
## Once terrain is set up, it can be written to the tilemap using [method set_cells].
## Similar to Godot 3.x, setting the cells does not run the terrain solver, so once
## the cells have been set, you need to call an update function such as [method update_terrain_cells].


## The meta-data key used to store terrain information.
const TERRAIN_META = &"_better_terrain"

## The current version. Used to handle future upgrades.
const TERRAIN_SYSTEM_VERSION = "0.2"

var _tile_cache = {}
var rng = RandomNumberGenerator.new()
var use_seed := true

## A helper class that provides functions detailing valid peering bits and
## polygons for different tile types.
var data := load("res://addons/better-terrain/BetterTerrainData.gd"):
	get:
		return data

enum TerrainType {
	MATCH_TILES, ## Selects tiles by matching against adjacent tiles.
	MATCH_VERTICES, ## Select tiles by analysing vertices, similar to wang-style tiles.
	CATEGORY, ## Declares a matching type for more sophisticated rules.
	DECORATION, ## Fills empty tiles by matching adjacent tiles
	MAX,
}

enum TileCategory {
	EMPTY = -1, ## An empty cell, or a tile marked as decoration
	NON_TERRAIN = -2, ## A non-empty cell that does not contain a terrain tile
	ERROR = -3
}

enum SymmetryType {
	NONE,
	MIRROR, ## Horizontally mirror
	FLIP, ## Vertically flip
	REFLECT, ## All four reflections
	ROTATE_CLOCKWISE,
	ROTATE_COUNTER_CLOCKWISE,
	ROTATE_180,
	ROTATE_ALL, ## All four rotated forms
	ALL ## All rotated and reflected forms
}


func _intersect(first: Array, second: Array) -> bool:
	if first.size() > second.size():
		return _intersect(second, first) # Array 'has' is fast compared to gdscript loop
	for f in first:
		if second.has(f):
			return true
	return false


# Meta-data functions

func _get_terrain_meta(ts: TileSet) -> Dictionary:
	return ts.get_meta(TERRAIN_META) if ts and ts.has_meta(TERRAIN_META) else {
		terrains = [],
		decoration = ["Decoration", Color.DIM_GRAY, TerrainType.DECORATION, [], {path = "res://addons/better-terrain/icons/Decoration.svg"}],
		version = TERRAIN_SYSTEM_VERSION
	}


func _set_terrain_meta(ts: TileSet, meta : Dictionary) -> void:
	ts.set_meta(TERRAIN_META, meta)
	ts.emit_changed()


func _get_tile_meta(td: TileData) -> Dictionary:
	return td.get_meta(TERRAIN_META) if td.has_meta(TERRAIN_META) else {
		type = TileCategory.NON_TERRAIN
	}


func _set_tile_meta(ts: TileSet, td: TileData, meta) -> void:
	td.set_meta(TERRAIN_META, meta)
	ts.emit_changed()


func _get_cache(ts: TileSet) -> Array:
	if _tile_cache.has(ts):
		return _tile_cache[ts]
	
	var cache := []
	if !ts:
		return cache
	_tile_cache[ts] = cache

	var watcher = Node.new()
	watcher.set_script(load("res://addons/better-terrain/Watcher.gd"))
	watcher.tileset = ts
	watcher.trigger.connect(_purge_cache.bind(ts))
	add_child(watcher)
	ts.changed.connect(watcher.activate)
	
	var types = {}
	
	var ts_meta := _get_terrain_meta(ts)
	for t in ts_meta.terrains.size():
		var terrain = ts_meta.terrains[t]
		var bits = terrain[3].duplicate()
		bits.push_back(t)
		types[t] = bits
		cache.push_back([])
	
	# Decoration
	types[-1] = [TileCategory.EMPTY]
	cache.push_back([[-1, Vector2.ZERO, -1, {}, 1.0]])
	
	for s in ts.get_source_count():
		var source_id := ts.get_source_id(s)
		var source := ts.get_source(source_id) as TileSetAtlasSource
		if !source:
			continue
		source.changed.connect(watcher.activate)
		for c in source.get_tiles_count():
			var coord := source.get_tile_id(c)
			for a in source.get_alternative_tiles_count(coord):
				var alternate := source.get_alternative_tile_id(coord, a)
				var td := source.get_tile_data(coord, alternate)
				var td_meta := _get_tile_meta(td)
				if td_meta.type < TileCategory.EMPTY or td_meta.type >= cache.size():
					continue
				
				td.changed.connect(watcher.activate)
				var peering := {}
				for key in td_meta.keys():
					if !(key is int):
						continue
					
					var targets := []
					for k in types:
						if _intersect(types[k], td_meta[key]):
							targets.push_back(k)
					
					peering[key] = targets
				
				# Decoration tiles without peering are skipped
				if td_meta.type == TileCategory.EMPTY and !peering:
					continue
				
				var symmetry = td_meta.get("symmetry", SymmetryType.NONE)
				# Branch out no symmetry tiles early
				if symmetry == SymmetryType.NONE:
					cache[td_meta.type].push_back([source_id, coord, alternate, peering, td.probability])
					continue
				
				# calculate the symmetry order for this tile
				var symmetry_order := 0
				for flags in data.symmetry_mapping[symmetry]:
					var symmetric_peering = data.peering_bits_after_symmetry(peering, flags)
					if symmetric_peering == peering:
						symmetry_order += 1
				
				var adjusted_probability = td.probability / symmetry_order
				for flags in data.symmetry_mapping[symmetry]:
					var symmetric_peering = data.peering_bits_after_symmetry(peering, flags)
					cache[td_meta.type].push_back([source_id, coord, alternate | flags, symmetric_peering, adjusted_probability])
	
	return cache


func _get_cache_terrain(ts_meta : Dictionary, index: int) -> Array:
	# the cache and the terrains in ts_meta don't line up because
	# decorations are cached too
	if index < 0 or index >= ts_meta.terrains.size():
		return ts_meta.decoration
	return ts_meta.terrains[index]


func _purge_cache(ts: TileSet) -> void:
	_tile_cache.erase(ts)
	for c in get_children():
		if c.tileset == ts:
			c.tidy()
			break


func _clear_invalid_peering_types(ts: TileSet) -> void:
	var ts_meta := _get_terrain_meta(ts)
	
	var cache := _get_cache(ts)
	for t in cache.size():
		var type = _get_cache_terrain(ts_meta, t)[2]
		var valid_peering_types = data.get_terrain_peering_cells(ts, type)
		
		for c in cache[t]:
			if c[0] < 0:
				continue
			var source := ts.get_source(c[0]) as TileSetAtlasSource
			if !source:
				continue
			var td := source.get_tile_data(c[1], c[2])
			var td_meta := _get_tile_meta(td)
			
			for peering in c[3].keys():
				if valid_peering_types.has(peering):
					continue
				td_meta.erase(peering)
			
			_set_tile_meta(ts, td, td_meta)
	
	# Not strictly necessary
	_purge_cache(ts)


func _has_invalid_peering_types(ts: TileSet) -> bool:
	var ts_meta := _get_terrain_meta(ts)
	
	var cache := _get_cache(ts)
	for t in cache.size():
		var type = _get_cache_terrain(ts_meta, t)[2]
		var valid_peering_types = data.get_terrain_peering_cells(ts, type)
		
		for c in cache[t]:
			for peering in c[3].keys():
				if !valid_peering_types.has(peering):
					return true
	
	return false


func _update_terrain_data(ts: TileSet) -> void:
	var ts_meta = _get_terrain_meta(ts)
	var previous_version = ts_meta.get("version")
	
	# First release: no version info
	if !ts_meta.has("version"):
		ts_meta["version"] = "0.0"
	
	# 0.0 -> 0.1: add categories
	if ts_meta.version == "0.0":
		for t in ts_meta.terrains:
			if t.size() == 3:
				t.push_back([])
		ts_meta.version = "0.1"
	
	# 0.1 -> 0.2: add decoration tiles and terrain icons
	if ts_meta.version == "0.1":
		# Add terrain icon containers
		for t in ts_meta.terrains:
			if t.size() == 4:
				t.push_back({})
		
		# Add default decoration data
		ts_meta["decoration"] = ["Decoration", Color.DIM_GRAY, TerrainType.DECORATION, [], {path = "res://addons/better-terrain/icons/Decoration.svg"}]
		ts_meta.version = "0.2"
	
	if previous_version != ts_meta.version:
		_set_terrain_meta(ts, ts_meta)


func _weighted_selection(choices: Array, apply_empty_probability: bool):
	if choices.is_empty():
		return null
	
	var weight = choices.reduce(func(a, c): return a + c[4], 0.0)
	
	if apply_empty_probability and weight < 1.0 and rng.randf() > weight:
		return [-1, Vector2.ZERO, -1, null, 1.0]
	
	if choices.size() == 1:
		return choices[0]
	
	if weight == 0.0:
		return choices[rng.randi() % choices.size()]
	
	var pick = rng.randf() * weight
	for c in choices:
		if pick < c[4]:
			return c
		pick -= c[4]
	return choices.back()


func _weighted_selection_seeded(choices: Array, coord: Vector2i, apply_empty_probability: bool):
	if use_seed:
		rng.seed = hash(coord)
	return _weighted_selection(choices, apply_empty_probability)


func _update_tile_tiles(tm: TileMapLayer, coord: Vector2i, types: Dictionary, cache: Array, apply_empty_probability: bool):
	var type = types[coord]
	
	const reward := 3
	var penalty := -2000 if apply_empty_probability else -10
	
	var best_score := -1000 # Impossibly bad score
	var best := []
	for t in cache[type]:
		var score := 0
		for peering in t[3]:
			score += reward if t[3][peering].has(types[tm.get_neighbor_cell(coord, peering)]) else penalty
		
		if score > best_score:
			best_score = score
			best = [t]
		elif score == best_score:
			best.append(t)
	
	return _weighted_selection_seeded(best, coord, apply_empty_probability)


func _probe(tm: TileMapLayer, coord: Vector2i, peering: int, type: int, types: Dictionary) -> int:
	var targets = data.associated_vertex_cells(tm, coord, peering)
	targets = targets.map(func(c): return types[c])
	
	var first = targets[0]
	if targets.all(func(t): return t == first):
		return first
	
	# if different, use the lowest  non-same
	targets = targets.filter(func(t): return t != type)
	return targets.reduce(func(a, t): return min(a, t))


func _update_tile_vertices(tm: TileMapLayer, coord: Vector2i, types: Dictionary, cache: Array):
	var type = types[coord]
	
	const reward := 3
	const penalty := -10
	
	var best_score := -1000 # Impossibly bad score
	var best := []
	for t in cache[type]:
		var score := 0
		for peering in t[3]:
			score += reward if _probe(tm, coord, peering, type, types) in t[3][peering] else penalty
		
		if score > best_score:
			best_score = score
			best = [t]
		elif score == best_score:
			best.append(t)
	
	return _weighted_selection_seeded(best, coord, false)


func _update_tile_immediate(tm: TileMapLayer, coord: Vector2i, ts_meta: Dictionary, types: Dictionary, cache: Array) -> void:
	var type = types[coord]
	if type < TileCategory.EMPTY or type >= ts_meta.terrains.size():
		return
	
	var placement
	var terrain = _get_cache_terrain(ts_meta, type)
	if terrain[2] in [TerrainType.MATCH_TILES, TerrainType.DECORATION]:
		placement = _update_tile_tiles(tm, coord, types, cache, terrain[2] == TerrainType.DECORATION)
	elif terrain[2] == TerrainType.MATCH_VERTICES:
		placement = _update_tile_vertices(tm, coord, types, cache)
	else:
		return
	
	if placement:
		tm.set_cell(coord, placement[0], placement[1], placement[2])


func _update_tile_deferred(tm: TileMapLayer, coord: Vector2i, ts_meta: Dictionary, types: Dictionary, cache: Array):
	var type = types[coord]
	if type >= TileCategory.EMPTY and type < ts_meta.terrains.size():
		var terrain = _get_cache_terrain(ts_meta, type)
		if terrain[2] in [TerrainType.MATCH_TILES, TerrainType.DECORATION]:
			return _update_tile_tiles(tm, coord, types, cache, terrain[2] == TerrainType.DECORATION)
		elif terrain[2] == TerrainType.MATCH_VERTICES:
			return _update_tile_vertices(tm, coord, types, cache)
	return null


func _widen(tm: TileMapLayer, coords: Array) -> Array:
	var result := {}
	var peering_neighbors = data.get_terrain_peering_cells(tm.tile_set, TerrainType.MATCH_TILES)
	for c in coords:
		result[c] = true
		var neighbors = data.neighboring_coords(tm, c, peering_neighbors)
		for t in neighbors:
			result[t] = true
	return result.keys()


func _widen_with_exclusion(tm: TileMapLayer, coords: Array, exclusion: Rect2i) -> Array:
	var result := {}
	var peering_neighbors = data.get_terrain_peering_cells(tm.tile_set, TerrainType.MATCH_TILES)
	for c in coords:
		if !exclusion.has_point(c):
			result[c] = true
		var neighbors = data.neighboring_coords(tm, c, peering_neighbors)
		for t in neighbors:
			if !exclusion.has_point(t):
				result[t] = true
	return result.keys()

# Terrains

## Returns an [Array] of categories. These are the terrains in the [TileSet] which
## are marked with [enum TerrainType] of [code]CATEGORY[/code]. Each entry in the
## array is a [Dictionary] with [code]name[/code], [code]color[/code], and [code]id[/code].
func get_terrain_categories(ts: TileSet) -> Array:
	var result := []
	if !ts:
		return result
	
	var ts_meta := _get_terrain_meta(ts)
	for id in ts_meta.terrains.size():
		var t = ts_meta.terrains[id]
		if t[2] == TerrainType.CATEGORY:
			result.push_back({name = t[0], color = t[1], id = id})
	
	return result


## Adds a new terrain to the [TileSet]. Returns [code]true[/code] if this is successful.
## [br][br]
## [code]type[/code] must be one of [enum TerrainType].[br]
## [code]categories[/code] is an indexed list of terrain categories that this terrain
## can match as. The indexes must be valid terrains of the CATEGORY type.
## [code]icon[/code] is a [Dictionary] with either a [code]path[/code] string pointing
## to a resource, or a [code]source_id[/code] [int] and a [code]coord[/code] [Vector2i].
## The former takes priority if both are present.
func add_terrain(ts: TileSet, name: String, color: Color, type: int, categories: Array = [], icon: Dictionary = {}) -> bool:
	if !ts or name.is_empty() or type < 0 or type == TerrainType.DECORATION or type >= TerrainType.MAX:
		return false
	
	var ts_meta := _get_terrain_meta(ts)
	
	# check categories
	if type == TerrainType.CATEGORY and !categories.is_empty():
		return false
	for c in categories:
		if c < 0 or c >= ts_meta.terrains.size() or ts_meta.terrains[c][2] != TerrainType.CATEGORY:
			return false
	
	if icon and not (icon.has("path") or (icon.has("source_id") and icon.has("coord"))):
		return false
	
	ts_meta.terrains.push_back([name, color, type, categories, icon])
	_set_terrain_meta(ts, ts_meta)
	_purge_cache(ts)
	return true


## Removes the terrain at [code]index[/code] from the [TileSet]. Returns [code]true[/code]
## if the deletion is successful.
func remove_terrain(ts: TileSet, index: int) -> bool:
	if !ts or index < 0:
		return false
	
	var ts_meta := _get_terrain_meta(ts)
	if index >= ts_meta.terrains.size():
		return false
	
	if ts_meta.terrains[index][2] == TerrainType.CATEGORY:
		for t in ts_meta.terrains:
			t[3].erase(index)
	
	for s in ts.get_source_count():
		var source := ts.get_source(ts.get_source_id(s)) as TileSetAtlasSource
		if !source:
			continue
		for t in source.get_tiles_count():
			var coord := source.get_tile_id(t)
			for a in source.get_alternative_tiles_count(coord):
				var alternate := source.get_alternative_tile_id(coord, a)
				var td := source.get_tile_data(coord, alternate)
				
				var td_meta := _get_tile_meta(td)
				if td_meta.type == TileCategory.NON_TERRAIN:
					continue
				
				if td_meta.type == index:
					_set_tile_meta(ts, td, null)
					continue
				
				if td_meta.type > index:
					td_meta.type -= 1
				
				for peering in td_meta.keys():
					if !(peering is int):
						continue
					
					var fixed_peering = []
					for p in td_meta[peering]:
						if p < index:
							fixed_peering.append(p)
						elif p > index:
							fixed_peering.append(p - 1)
					
					if fixed_peering.is_empty():
						td_meta.erase(peering)
					else:
						td_meta[peering] = fixed_peering
				
				_set_tile_meta(ts, td, td_meta)
	
	ts_meta.terrains.remove_at(index)
	_set_terrain_meta(ts, ts_meta)
	
	_purge_cache(ts)	
	return true


## Returns the number of terrains in the [TileSet].
func terrain_count(ts: TileSet) -> int:
	if !ts:
		return 0
	
	var ts_meta := _get_terrain_meta(ts)
	return ts_meta.terrains.size()


## Retrieves information about the terrain at [code]index[/code] in the [TileSet].
## [br][br]
## Returns a [Dictionary] describing the terrain. If it succeeds, the key [code]valid[/code]
## will be set to [code]true[/code]. Other keys are [code]name[/code], [code]color[/code],
## [code]type[/code] (a [enum TerrainType]), [code]categories[/code] which is
## an [Array] of category type terrains that this terrain matches as, and
## [code]icon[/code] which is a [Dictionary] with a [code]path[/code] [String] or
## a [code]source_id[/code] [int] and [code]coord[/code] [Vector2i]
func get_terrain(ts: TileSet, index: int) -> Dictionary:
	if !ts or index < TileCategory.EMPTY:
		return {valid = false}
	
	var ts_meta := _get_terrain_meta(ts)
	if index >= ts_meta.terrains.size():
		return {valid = false}
	
	var terrain := _get_cache_terrain(ts_meta, index)
	return {
		id = index,
		name = terrain[0],
		color = terrain[1],
		type = terrain[2],
		categories = terrain[3].duplicate(),
		icon = terrain[4].duplicate(),
		valid = true
	}


## Updates the details of the terrain at [code]index[/code] in [TileSet]. Returns
## [code]true[/code] if this succeeds.
## [br][br]
## If supplied, the [code]categories[/code] must be a list of indexes to other [code]CATEGORY[/code]
## type terrains.
## [code]icon[/code] is a [Dictionary] with either a [code]path[/code] string pointing
## to a resource, or a [code]source_id[/code] [int] and a [code]coord[/code] [Vector2i].
func set_terrain(ts: TileSet, index: int, name: String, color: Color, type: int, categories: Array = [], icon: Dictionary = {valid = false}) -> bool:
	if !ts or name.is_empty() or index < 0 or type < 0 or type == TerrainType.DECORATION or type >= TerrainType.MAX:
		return false
	
	var ts_meta := _get_terrain_meta(ts)
	if index >= ts_meta.terrains.size():
		return false
	
	if type == TerrainType.CATEGORY and !categories.is_empty():
		return false
	for c in categories:
		if c < 0 or c == index or c >= ts_meta.terrains.size() or ts_meta.terrains[c][2] != TerrainType.CATEGORY:
			return false
	
	var icon_valid = icon.get("valid", "true")
	if icon_valid:
		match icon:
			{}, {"path"}, {"source_id", "coord"}: pass
			_: return false
	
	if type != TerrainType.CATEGORY:
		for t in ts_meta.terrains:
			t[3].erase(index)
	
	ts_meta.terrains[index] = [name, color, type, categories, icon]
	_set_terrain_meta(ts, ts_meta)
	
	_clear_invalid_peering_types(ts)
	_purge_cache(ts)
	return true


## Swaps the terrains at [code]index1[/code] and [code]index2[/code] in [TileSet].
func swap_terrains(ts: TileSet, index1: int, index2: int) -> bool:
	if !ts or index1 < 0 or index2 < 0 or index1 == index2:
		return false
	
	var ts_meta := _get_terrain_meta(ts)
	if index1 >= ts_meta.terrains.size() or index2 >= ts_meta.terrains.size():
		return false
	
	for t in ts_meta.terrains:
		var has1 = t[3].has(index1)
		var has2 = t[3].has(index2)
		
		if has1 and !has2:
			t[3].erase(index1)
			t[3].push_back(index2)
		elif has2 and !has1:
			t[3].erase(index2)
			t[3].push_back(index1)
	
	for s in ts.get_source_count():
		var source := ts.get_source(ts.get_source_id(s)) as TileSetAtlasSource
		if !source:
			continue
		for t in source.get_tiles_count():
			var coord := source.get_tile_id(t)
			for a in source.get_alternative_tiles_count(coord):
				var alternate := source.get_alternative_tile_id(coord, a)
				var td := source.get_tile_data(coord, alternate)
				
				var td_meta := _get_tile_meta(td)
				if td_meta.type == TileCategory.NON_TERRAIN:
					continue
				
				if td_meta.type == index1:
					td_meta.type = index2
				elif td_meta.type == index2:
					td_meta.type = index1
				
				for peering in td_meta.keys():
					if !(peering is int):
						continue
					
					var fixed_peering = []
					for p in td_meta[peering]:
						if p == index1:
							fixed_peering.append(index2)
						elif p == index2:
							fixed_peering.append(index1)
						else:
							fixed_peering.append(p)
					td_meta[peering] = fixed_peering
				
				_set_tile_meta(ts, td, td_meta)
	
	var temp = ts_meta.terrains[index1]
	ts_meta.terrains[index1] = ts_meta.terrains[index2]
	ts_meta.terrains[index2] = temp
	_set_terrain_meta(ts, ts_meta)
	
	_purge_cache(ts)
	return true


# Terrain tile data

## For a tile in a [TileSet] as specified by [TileData], set the terrain associated
## with that tile to [code]type[/code], which is an index of an existing terrain.
## Returns [code]true[/code] on success.
func set_tile_terrain_type(ts: TileSet, td: TileData, type: int) -> bool:
	if !ts or !td or type < TileCategory.NON_TERRAIN:
		return false
	
	var td_meta = _get_tile_meta(td)
	td_meta.type = type
	if type == TileCategory.NON_TERRAIN:
		td_meta = null
	_set_tile_meta(ts, td, td_meta)
	
	_clear_invalid_peering_types(ts)
	_purge_cache(ts)
	return true


## Returns the terrain type associated with tile specified by [TileData]. Returns
## -1 if the tile has no associated terrain.
func get_tile_terrain_type(td: TileData) -> int:
	if !td:
		return TileCategory.ERROR
	var td_meta := _get_tile_meta(td)
	return td_meta.type


## For a tile represented by [TileData] [code]td[/code] in [TileSet]
## [code]ts[/code], sets [enum SymmetryType] [code]type[/code]. This controls
## how the tile is rotated/mirrored during placement.
func set_tile_symmetry_type(ts: TileSet, td: TileData, type: int) -> bool:
	if !ts or !td or type < SymmetryType.NONE or type > SymmetryType.ALL:
		return false
	
	var td_meta := _get_tile_meta(td)
	if td_meta.type == TileCategory.NON_TERRAIN:
		return false
	
	td_meta.symmetry = type
	_set_tile_meta(ts, td, td_meta)
	_purge_cache(ts)
	return true


## For a tile [code]td[/code], returns the [enum SymmetryType] which that
## tile uses.
func get_tile_symmetry_type(td: TileData) -> int:
	if !td:
		return SymmetryType.NONE
	
	var td_meta := _get_tile_meta(td)
	return td_meta.get("symmetry", SymmetryType.NONE)


## Returns an Array of all [TileData] tiles included in the specified
## terrain [code]type[/code] for the [TileSet] [code]ts[/code]
func get_tiles_in_terrain(ts: TileSet, type: int) -> Array[TileData]:
	var result:Array[TileData] = []
	if !ts or type < TileCategory.EMPTY:
		return result
	
	var cache := _get_cache(ts)
	if type > cache.size():
		return result
	
	var tiles = cache[type]
	if !tiles:
		return result
	for c in tiles:
		if c[0] < 0:
			continue
		var source := ts.get_source(c[0]) as TileSetAtlasSource
		var td := source.get_tile_data(c[1], c[2])
		result.push_back(td)
	
	return result


## Returns an [Array] of [Dictionary] items including information about each 
## tile included in the specified terrain [code]type[/code] for 
## the [TileSet] [code]ts[/code]. Each Dictionary item includes 
## [TileSetAtlasSource] [code]source[/code], [TileData] [code]td[/code], 
## [Vector2i] [code]coord[/code], and [int] [code]alt_id[/code].
func get_tile_sources_in_terrain(ts: TileSet, type: int) -> Array[Dictionary]:
	var result:Array[Dictionary] = []
	
	var cache := _get_cache(ts)
	var tiles = cache[type]
	if !tiles:
		return result
	for c in tiles:
		if c[0] < 0:
			continue
		var source := ts.get_source(c[0]) as TileSetAtlasSource
		if not source:
			continue
		var td := source.get_tile_data(c[1], c[2])
		result.push_back({
			source = source,
			td = td,
			coord = c[1],
			alt_id = c[2]
		})
	
	return result


## For a [TileSet]'s tile, specified by [TileData], add terrain [code]type[/code]
## (an index of a terrain) to match this tile in direction [code]peering[/code],
## which is of type [enum TileSet.CellNeighbor]. Returns [code]true[/code] on success.
func add_tile_peering_type(ts: TileSet, td: TileData, peering: int, type: int) -> bool:
	if !ts or !td or peering < 0 or peering > 15 or type < TileCategory.EMPTY:
		return false
	
	var ts_meta := _get_terrain_meta(ts)
	var td_meta := _get_tile_meta(td)
	if td_meta.type < TileCategory.EMPTY or td_meta.type >= ts_meta.terrains.size():
		return false
	
	if !td_meta.has(peering):
		td_meta[peering] = [type]
	elif !td_meta[peering].has(type):
		td_meta[peering].append(type)
	else:
		return false
	_set_tile_meta(ts, td, td_meta)
	_purge_cache(ts)
	return true


## For a [TileSet]'s tile, specified by [TileData], remove terrain [code]type[/code]
## from matching in direction [code]peering[/code], which is of type [enum TileSet.CellNeighbor].
## Returns [code]true[/code] on success.
func remove_tile_peering_type(ts: TileSet, td: TileData, peering: int, type: int) -> bool:
	if !ts or !td or peering < 0 or peering > 15 or type < TileCategory.EMPTY:
		return false
	
	var td_meta := _get_tile_meta(td)
	if !td_meta.has(peering):
		return false
	if !td_meta[peering].has(type):
		return false
	td_meta[peering].erase(type)
	if td_meta[peering].is_empty():
		td_meta.erase(peering)
	_set_tile_meta(ts, td, td_meta)
	_purge_cache(ts)
	return true


## For the tile specified by [TileData], return an [Array] of peering directions
## for which terrain matching is set up. These will be of type [enum TileSet.CellNeighbor].
func tile_peering_keys(td: TileData) -> Array:
	if !td:
		return []
	
	var td_meta := _get_tile_meta(td)
	var result := []
	for k in td_meta:
		if k is int:
			result.append(k)
	return result


## For the tile specified by [TileData], return the [Array] of terrains that match
## for the direction [code]peering[/code] which should be of type [enum TileSet.CellNeighbor].
func tile_peering_types(td: TileData, peering: int) -> Array:
	if !td or peering < 0 or peering > 15:
		return []
	
	var td_meta := _get_tile_meta(td)
	return td_meta[peering].duplicate() if td_meta.has(peering) else []


## For the tile specified by [TileData], return the [Array] of peering directions
## for the specified terrain type [code]type[/code].
func tile_peering_for_type(td: TileData, type: int) -> Array:
	if !td:
		return []
	
	var td_meta := _get_tile_meta(td)
	var result := []
	var sides := tile_peering_keys(td)
	for side in sides:
		if td_meta[side].has(type):
			result.push_back(side)
	
	result.sort()
	return result


# Painting

## Applies the terrain [code]type[/code] to the [TileMapLayer] for the [Vector2i]
## [code]coord[/code]. Returns [code]true[/code] if it succeeds. Use [method set_cells]
## to change multiple tiles at once.
## [br][br]
## Use terrain type -1 to erase cells.
func set_cell(tm: TileMapLayer, coord: Vector2i, type: int) -> bool:
	if !tm or !tm.tile_set or type < TileCategory.EMPTY:
		return false
	
	if type == TileCategory.EMPTY:
		tm.erase_cell(coord)
		return true
	
	var cache := _get_cache(tm.tile_set)
	if type >= cache.size():
		return false
	
	if cache[type].is_empty():
		return false
	
	var tile = cache[type].front()
	tm.set_cell(coord, tile[0], tile[1], tile[2])
	return true


## Applies the terrain [code]type[/code] to the [TileMapLayer] for the
## [Vector2i] [code]coords[/code]. Returns [code]true[/code] if it succeeds.
## [br][br]
## Note that this does not cause the terrain solver to run, so this will just place
## an arbitrary terrain-associated tile in the given position. To run the solver,
## you must set the require cells, and then call either [method update_terrain_cell],
## [method update_terrain_cels], or [method update_terrain_area].
## [br][br]
## If you want to prepare changes to the tiles in advance, you can use [method create_terrain_changeset]
## and the associated functions.
## [br][br]
## Use terrain type -1 to erase cells.
func set_cells(tm: TileMapLayer, coords: Array, type: int) -> bool:
	if !tm or !tm.tile_set or type < TileCategory.EMPTY:
		return false
	
	if type == TileCategory.EMPTY:
		for c in coords:
			tm.erase_cell(c)
		return true
	
	var cache := _get_cache(tm.tile_set)
	if type >= cache.size():
		return false
	
	if cache[type].is_empty():
		return false
	
	var tile = cache[type].front()
	for c in coords:
		tm.set_cell(c, tile[0], tile[1], tile[2])
	return true


## Replaces an existing tile on the [TileMapLayer] for the [Vector2i]
## [code]coord[/code] with a new tile in the provided terrain [code]type[/code] 
## *only if* there is a tile with a matching set of peering sides in this terrain.
## Returns [code]true[/code] if any tiles were changed. Use [method replace_cells]
## to replace multiple tiles at once.
func replace_cell(tm: TileMapLayer, coord: Vector2i, type: int) -> bool:
	if !tm or !tm.tile_set or type < 0:
		return false
	
	var cache := _get_cache(tm.tile_set)
	if type >= cache.size():
		return false
	
	if cache[type].is_empty():
		return false
	
	var td = tm.get_cell_tile_data(coord)
	if !td:
		return false
	
	var ts_meta := _get_terrain_meta(tm.tile_set)
	var categories = ts_meta.terrains[type][3]
	var check_types = [type] + categories
	
	for check_type in check_types:
		var placed_peering = tile_peering_for_type(td, check_type)
		for pt in get_tiles_in_terrain(tm.tile_set, type):
			var check_peering := tile_peering_for_type(pt, check_type)
			if placed_peering == check_peering:
				var tile = cache[type].front()
				tm.set_cell(coord, tile[0], tile[1], tile[2])
				return true
	
	return false


## Replaces existing tiles on the [TileMapLayer] for the [Vector2i]
## [code]coords[/code] with new tiles in the provided terrain [code]type[/code] 
## *only if* there is a tile with a matching set of peering sides in this terrain
## for each tile.
## Returns [code]true[/code] if any tiles were changed.
func replace_cells(tm: TileMapLayer, coords: Array, type: int) -> bool:
	if !tm or !tm.tile_set or type < 0:
		return false
	
	var cache := _get_cache(tm.tile_set)
	if type >= cache.size():
		return false
	
	if cache[type].is_empty():
		return false
	
	var ts_meta := _get_terrain_meta(tm.tile_set)
	var categories = ts_meta.terrains[type][3]
	var check_types = [type] + categories
	
	var changed = false
	var potential_tiles = get_tiles_in_terrain(tm.tile_set, type)
	for c in coords:
		var found = false
		var td = tm.get_cell_tile_data(c)
		if !td:
			continue
		for check_type in check_types:
			var placed_peering = tile_peering_for_type(td, check_type)
			for pt in potential_tiles:
				var check_peering = tile_peering_for_type(pt, check_type)
				if placed_peering == check_peering:
					var tile = cache[type].front()
					tm.set_cell(c, tile[0], tile[1], tile[2])
					changed = true
					found = true
					break
			
			if found:
				break
	
	return changed


## Returns the terrain type detected in the [TileMapLayer] at specified [Vector2i]
## [code]coord[/code]. Returns -1 if tile is not valid or does not contain a
## tile associated with a terrain.
func get_cell(tm: TileMapLayer, coord: Vector2i) -> int:
	if !tm or !tm.tile_set:
		return TileCategory.ERROR
	
	if tm.get_cell_source_id(coord) == -1:
		return TileCategory.EMPTY
	
	var t := tm.get_cell_tile_data(coord)
	if !t:
		return TileCategory.NON_TERRAIN
	
	return _get_tile_meta(t).type


## Runs the tile solving algorithm on the [TileMapLayer] for the given
## [Vector2i] coordinates in the [code]cells[/code] parameter. By default,
## the surrounding cells are also solved, but this can be adjusted by passing [code]false[/code]
## to the [code]and_surrounding_cells[/code] parameter.
## [br][br]
## See also [method update_terrain_area] and [method update_terrain_cell].
func update_terrain_cells(tm: TileMapLayer, cells: Array, and_surrounding_cells := true) -> void:
	if !tm or !tm.tile_set:
		return
	
	if and_surrounding_cells:
		cells = _widen(tm, cells)
	var needed_cells := _widen(tm, cells)
	
	var types := {}
	for c in needed_cells:
		types[c] = get_cell(tm, c)
	
	var ts_meta := _get_terrain_meta(tm.tile_set)
	var cache := _get_cache(tm.tile_set)
	for c in cells:
		_update_tile_immediate(tm, c, ts_meta, types, cache)


## Runs the tile solving algorithm on the [TileMapLayer] for the given [Vector2i]
## [code]cell[/code]. By default, the surrounding cells are also solved, but
## this can be adjusted by passing [code]false[/code] to the [code]and_surrounding_cells[/code]
## parameter. This calls through to [method update_terrain_cells].
func update_terrain_cell(tm: TileMapLayer, cell: Vector2i, and_surrounding_cells := true) -> void:
	update_terrain_cells(tm, [cell], and_surrounding_cells)


## Runs the tile solving algorithm on the [TileMapLayer] for the given [Rect2i]
## [code]area[/code]. By default, the surrounding cells are also solved, but
## this can be adjusted by passing [code]false[/code] to the [code]and_surrounding_cells[/code]
## parameter.
## [br][br]
## See also [method update_terrain_cells].
func update_terrain_area(tm: TileMapLayer, area: Rect2i, and_surrounding_cells := true) -> void:
	if !tm or !tm.tile_set:
		return
	
	# Normalize area and extend so tiles cover inclusive space
	area = area.abs()
	area.size += Vector2i.ONE
	
	var edges = []
	for x in range(area.position.x, area.end.x):
		edges.append(Vector2i(x, area.position.y))
		edges.append(Vector2i(x, area.end.y - 1))
	for y in range(area.position.y + 1, area.end.y - 1):
		edges.append(Vector2i(area.position.x, y))
		edges.append(Vector2i(area.end.x - 1, y))
	
	var additional_cells := []
	var needed_cells := _widen_with_exclusion(tm, edges, area)
	
	if and_surrounding_cells:
		additional_cells = needed_cells
		needed_cells = _widen_with_exclusion(tm, needed_cells, area)
	
	var types := {}
	for y in range(area.position.y, area.end.y):
		for x in range(area.position.x, area.end.x):
			var coord = Vector2i(x, y)
			types[coord] = get_cell(tm, coord)
	for c in needed_cells:
		types[c] = get_cell(tm, c)
	
	var ts_meta := _get_terrain_meta(tm.tile_set)
	var cache := _get_cache(tm.tile_set)
	for y in range(area.position.y, area.end.y):
		for x in range(area.position.x, area.end.x):
			var coord := Vector2i(x, y)
			_update_tile_immediate(tm, coord, ts_meta, types, cache)
	for c in additional_cells:
		_update_tile_immediate(tm, c, ts_meta, types, cache)


## For a [TileMapLayer], create a changeset that will
## be calculated via a [WorkerThreadPool], so it will not delay processing the current
## frame or affect the framerate.
## [br][br]
## The [code]paint[/code] parameter must be a [Dictionary] with keys of type [Vector2i]
## representing map coordinates, and integer values representing terrain types.
## [br][br]
## Returns a [Dictionary] with internal details. See also [method is_terrain_changeset_ready],
## [method apply_terrain_changeset], and [method wait_for_terrain_changeset].
func create_terrain_changeset(tm: TileMapLayer, paint: Dictionary) -> Dictionary:
	# Force cache rebuild if required
	var _cache := _get_cache(tm.tile_set)
	
	var cells := paint.keys()
	var needed_cells := _widen(tm, cells)
	
	var types := {}
	for c in needed_cells:
		types[c] = paint[c] if paint.has(c) else get_cell(tm, c)
	
	var placements := []
	placements.resize(cells.size())
	
	var ts_meta := _get_terrain_meta(tm.tile_set)
	var work := func(n: int):
		placements[n] = _update_tile_deferred(tm, cells[n], ts_meta, types, _cache)
	
	return {
		"valid": true,
		"tilemap": tm,
		"cells": cells,
		"placements": placements,
		"group_id": WorkerThreadPool.add_group_task(work, cells.size(), -1, false, "BetterTerrain")
	}


## Returns [code]true[/code] if a changeset created by [method create_terrain_changeset]
## has finished the threaded calculation and is ready to be applied by [method apply_terrain_changeset].
## See also [method wait_for_terrain_changeset].
func is_terrain_changeset_ready(change: Dictionary) -> bool:
	if !change.has("group_id"):
		return false
	
	return WorkerThreadPool.is_group_task_completed(change.group_id)


## Blocks until a changeset created by [method create_terrain_changeset] finishes.
## This is useful to tidy up threaded work in the event that a node is to be removed
## whilst still waiting on threads.
## [br][br]
## Usage example:
## [codeblock]
## func _exit_tree():
##     if changeset.valid:
##         BetterTerrain.wait_for_terrain_changeset(changeset)
## [/codeblock]
func wait_for_terrain_changeset(change: Dictionary) -> void:
	if change.has("group_id"):
		WorkerThreadPool.wait_for_group_task_completion(change.group_id)


## Apply the changes in a changeset created by [method create_terrain_changeset]
## once it is confirmed by [method is_terrain_changeset_ready]. The changes will
## be applied to the [TileMapLayer] that the changeset was initialized with.
## [br][br]
## Completed changesets can be applied multiple times, and stored for as long as
## needed once calculated.
func apply_terrain_changeset(change: Dictionary) -> void:
	for n in change.cells.size():
		var placement = change.placements[n]
		if placement:
			change.tilemap.set_cell(change.cells[n], placement[0], placement[1], placement[2])
</file>

<file path="addons/better-terrain/BetterTerrain.gd.uid">
uid://uakaispc7dfo
</file>

<file path="addons/better-terrain/BetterTerrainData.gd">
@tool

## Data functions for [TileSet] properties.
##
## This data class has functions for retrieving data regarding the mathematical
## properties of a tile set.

const _terrain_peering_square_tiles : Array[int] = [0, 3, 4, 7, 8, 11, 12, 15]
const _terrain_peering_square_vertices : Array[int] = [3, 7, 11, 15]
const _terrain_peering_isometric_tiles : Array[int] = [1, 2, 5, 6, 9, 10, 13, 14]
const _terrain_peering_isometric_vertices : Array[int] = [1, 5, 9, 13]
const _terrain_peering_horiztonal_tiles : Array[int] = [0, 2, 6, 8, 10, 14]
const _terrain_peering_horiztonal_vertices : Array[int] = [3, 5, 7, 11, 13, 15]
const _terrain_peering_vertical_tiles : Array[int] = [2, 4, 6, 10, 12, 14]
const _terrain_peering_vertical_vertices : Array[int] = [1, 3, 7, 9, 11, 15]
const _terrain_peering_non_modifying : Array[int] = []

const _terrain_peering_hflip : Array[int] = [8, 9, 6, 7, 4, 5, 2, 3, 0, 1, 14, 15, 12, 13, 10, 11]
const _terrain_peering_vflip : Array[int] = [0, 1, 14, 15, 12, 13, 10, 11, 8, 9, 6, 7, 4, 5, 2, 3]
const _terrain_peering_transpose : Array[int] = [4, 5, 2, 3, 0, 1, 14, 15, 12, 13, 10, 11, 8, 9, 6, 7]

const symmetry_mapping := {
	BetterTerrain.SymmetryType.NONE: [0],
	BetterTerrain.SymmetryType.MIRROR: [0, TileSetAtlasSource.TRANSFORM_FLIP_H],
	BetterTerrain.SymmetryType.FLIP: [0, TileSetAtlasSource.TRANSFORM_FLIP_V],
	BetterTerrain.SymmetryType.REFLECT: [
		0,
		TileSetAtlasSource.TRANSFORM_FLIP_H,
		TileSetAtlasSource.TRANSFORM_FLIP_V,
		TileSetAtlasSource.TRANSFORM_FLIP_H | TileSetAtlasSource.TRANSFORM_FLIP_V
	],
	BetterTerrain.SymmetryType.ROTATE_CLOCKWISE: [0, TileSetAtlasSource.TRANSFORM_FLIP_H | TileSetAtlasSource.TRANSFORM_TRANSPOSE],
	BetterTerrain.SymmetryType.ROTATE_COUNTER_CLOCKWISE: [0, TileSetAtlasSource.TRANSFORM_FLIP_V | TileSetAtlasSource.TRANSFORM_TRANSPOSE],
	BetterTerrain.SymmetryType.ROTATE_180: [0, TileSetAtlasSource.TRANSFORM_FLIP_H | TileSetAtlasSource.TRANSFORM_FLIP_V],
	BetterTerrain.SymmetryType.ROTATE_ALL: [
		0,
		TileSetAtlasSource.TRANSFORM_FLIP_H | TileSetAtlasSource.TRANSFORM_TRANSPOSE,
		TileSetAtlasSource.TRANSFORM_FLIP_H | TileSetAtlasSource.TRANSFORM_FLIP_V,
		TileSetAtlasSource.TRANSFORM_FLIP_V | TileSetAtlasSource.TRANSFORM_TRANSPOSE
	],
	BetterTerrain.SymmetryType.ALL: [
		0,
		TileSetAtlasSource.TRANSFORM_FLIP_H,
		TileSetAtlasSource.TRANSFORM_FLIP_V,
		TileSetAtlasSource.TRANSFORM_FLIP_H | TileSetAtlasSource.TRANSFORM_FLIP_V,
		TileSetAtlasSource.TRANSFORM_TRANSPOSE,
		TileSetAtlasSource.TRANSFORM_FLIP_H | TileSetAtlasSource.TRANSFORM_TRANSPOSE,
		TileSetAtlasSource.TRANSFORM_FLIP_V | TileSetAtlasSource.TRANSFORM_TRANSPOSE,
		TileSetAtlasSource.TRANSFORM_FLIP_H | TileSetAtlasSource.TRANSFORM_FLIP_V | TileSetAtlasSource.TRANSFORM_TRANSPOSE
	]
}


## Returns an [Array] of ints of type [enum TileSet.CellNeighbor] which represent
## the valid neighboring tiles for a terrain of [code]type[/code] in TileSet
static func get_terrain_peering_cells(ts: TileSet, type: int) -> Array[int]:
	if !ts or type < 0 or type >= BetterTerrain.TerrainType.MAX:
		return []
	
	if type == BetterTerrain.TerrainType.CATEGORY:
		return _terrain_peering_non_modifying
	if type == BetterTerrain.TerrainType.DECORATION:
		type = BetterTerrain.TerrainType.MATCH_TILES
	
	match [ts.tile_shape, type]:
		[TileSet.TILE_SHAPE_SQUARE, BetterTerrain.TerrainType.MATCH_TILES]:
			return _terrain_peering_square_tiles
		[TileSet.TILE_SHAPE_SQUARE, BetterTerrain.TerrainType.MATCH_VERTICES]:
			return _terrain_peering_square_vertices
		[TileSet.TILE_SHAPE_ISOMETRIC, BetterTerrain.TerrainType.MATCH_TILES]:
			return _terrain_peering_isometric_tiles
		[TileSet.TILE_SHAPE_ISOMETRIC, BetterTerrain.TerrainType.MATCH_VERTICES]:
			return _terrain_peering_isometric_vertices
	
	match [ts.tile_offset_axis, type]:
		[TileSet.TILE_OFFSET_AXIS_VERTICAL, BetterTerrain.TerrainType.MATCH_TILES]:
			return _terrain_peering_vertical_tiles
		[TileSet.TILE_OFFSET_AXIS_VERTICAL, BetterTerrain.TerrainType.MATCH_VERTICES]:
			return _terrain_peering_vertical_vertices
		[TileSet.TILE_OFFSET_AXIS_HORIZONTAL, BetterTerrain.TerrainType.MATCH_TILES]:
			return _terrain_peering_horiztonal_tiles
		[TileSet.TILE_OFFSET_AXIS_HORIZONTAL, BetterTerrain.TerrainType.MATCH_VERTICES]:
			return _terrain_peering_horiztonal_vertices
	
	return []


## Returns true if [code]peering[/code] is a valid neighboring cell for a terrain of
## [code]type[/code] in [TileSet]
static func is_terrain_peering_cell(ts: TileSet, type: int, peering: int) -> bool:
	return peering in get_terrain_peering_cells(ts, type)


static func _peering_polygon_square_tiles(peering: int) -> PackedVector2Array:
	const t := 1.0 / 3.0
	var result : PackedVector2Array
	match peering:
		TileSet.CELL_NEIGHBOR_RIGHT_SIDE: result.append(Vector2(2*t, t))
		TileSet.CELL_NEIGHBOR_BOTTOM_RIGHT_CORNER: result.append(Vector2(2*t, 2*t))
		TileSet.CELL_NEIGHBOR_BOTTOM_SIDE: result.append(Vector2(t, 2*t))
		TileSet.CELL_NEIGHBOR_BOTTOM_LEFT_CORNER: result.append(Vector2(0, 2*t))
		TileSet.CELL_NEIGHBOR_LEFT_SIDE: result.append(Vector2(0, t))
		TileSet.CELL_NEIGHBOR_TOP_LEFT_CORNER: result.append(Vector2(0, 0))
		TileSet.CELL_NEIGHBOR_TOP_SIDE: result.append(Vector2(t, 0))
		TileSet.CELL_NEIGHBOR_TOP_RIGHT_CORNER: result.append(Vector2(2*t, 0))
		-1: result.append(Vector2(t, t))
	result.append(result[0] + Vector2(t, 0))
	result.append(result[0] + Vector2(t, t))
	result.append(result[0] + Vector2(0, t))
	return result


static func _peering_polygon_square_vertices(peering: int) -> PackedVector2Array:
	const t := 1.0 / 2.0
	var result : PackedVector2Array
	match peering:
		TileSet.CELL_NEIGHBOR_BOTTOM_RIGHT_CORNER:
			result.append(Vector2(1, t))
			result.append(Vector2(1, 1))
			result.append(Vector2(t, 1))
		TileSet.CELL_NEIGHBOR_BOTTOM_LEFT_CORNER:
			result.append(Vector2(0, t))
			result.append(Vector2(t, 1))
			result.append(Vector2(0, 1))
		TileSet.CELL_NEIGHBOR_TOP_LEFT_CORNER:
			result.append(Vector2(0, 0))
			result.append(Vector2(t, 0))
			result.append(Vector2(0, t))
		TileSet.CELL_NEIGHBOR_TOP_RIGHT_CORNER:
			result.append(Vector2(t, 0))
			result.append(Vector2(1, 0))
			result.append(Vector2(1, t))
		-1:
			result.append(Vector2(t, 0))
			result.append(Vector2(1, t))
			result.append(Vector2(t, 1))
			result.append(Vector2(0, t))
	return result


static func _peering_polygon_isometric_tiles(peering: int) -> PackedVector2Array:
	const t := 1.0 / 4.0
	match peering:
		-1: return PackedVector2Array([Vector2(2 * t, t), Vector2(3 * t, 2 * t), Vector2(2 * t, 3 * t), Vector2(t, 2 * t)])
		TileSet.CELL_NEIGHBOR_RIGHT_CORNER:
			return PackedVector2Array([Vector2(3 * t, 2 * t), Vector2(1, t), Vector2(1, 3 * t)])
		TileSet.CELL_NEIGHBOR_BOTTOM_RIGHT_SIDE:
			return PackedVector2Array([Vector2(3 * t, 2 * t), Vector2(1, 3 * t), Vector2(3 * t, 1), Vector2(2 * t, 3 * t)])
		TileSet.CELL_NEIGHBOR_BOTTOM_CORNER:
			return PackedVector2Array([Vector2(2 * t, 3 * t), Vector2(3 * t, 1), Vector2(t, 1)])
		TileSet.CELL_NEIGHBOR_BOTTOM_LEFT_SIDE:
			return PackedVector2Array([Vector2(t, 2 * t), Vector2(2 * t, 3 * t), Vector2(t, 1), Vector2(0, 3 * t)])
		TileSet.CELL_NEIGHBOR_LEFT_CORNER:
			return PackedVector2Array([Vector2(0, t), Vector2(t, 2 * t), Vector2(0, 3 * t)])
		TileSet.CELL_NEIGHBOR_TOP_LEFT_SIDE:
			return PackedVector2Array([Vector2(t, 0), Vector2(2 * t, t), Vector2(t, 2 * t), Vector2(0, t)])
		TileSet.CELL_NEIGHBOR_TOP_CORNER:
			return PackedVector2Array([Vector2(t, 0), Vector2(3 * t, 0), Vector2(2 * t, t)])
		TileSet.CELL_NEIGHBOR_TOP_RIGHT_SIDE:
			return PackedVector2Array([Vector2(3 * t, 0), Vector2(1, t), Vector2(3 * t, 2 * t), Vector2(2 * t, t)])
	return PackedVector2Array()


static func _peering_polygon_isometric_vertices(peering: int) -> PackedVector2Array:
	const t := 1.0 / 4.0
	const ttt := 3.0 * t
	match peering:
		-1: return PackedVector2Array([Vector2(t, t), Vector2(ttt, t), Vector2(ttt, ttt), Vector2(t, ttt)])
		TileSet.CELL_NEIGHBOR_RIGHT_CORNER:
			return PackedVector2Array([Vector2(ttt, t), Vector2(1, 0), Vector2(1, 1), Vector2(ttt, ttt)])
		TileSet.CELL_NEIGHBOR_BOTTOM_CORNER:
			return PackedVector2Array([Vector2(t, ttt), Vector2(ttt, ttt), Vector2(1, 1), Vector2(0, 1)])
		TileSet.CELL_NEIGHBOR_LEFT_CORNER:
			return PackedVector2Array([Vector2(0, 0), Vector2(t, t), Vector2(t, ttt), Vector2(0, 1)])
		TileSet.CELL_NEIGHBOR_TOP_CORNER:
			return PackedVector2Array([Vector2(0, 0), Vector2(1, 0), Vector2(ttt, t), Vector2(t, t)])
	return PackedVector2Array()


static func _peering_polygon_horizontal_tiles(peering: int) -> PackedVector2Array:
	const e := 1.0 / (2.0 * sqrt(3.0))
	const w := sqrt(3.0) / 8.0
	const t := 1.0 / 2.0
	const s := 1.0 / 8.0
	match peering:
		-1:
			return PackedVector2Array([
				Vector2(t, 2 * s),
				Vector2(t + w, t - s),
				Vector2(t + w, t + s),
				Vector2(t, 6 * s),
				Vector2(t - w, t + s),
				Vector2(t - w, t - s)
			])
		TileSet.CELL_NEIGHBOR_RIGHT_SIDE:
			return PackedVector2Array([
				Vector2(t + w, t - s),
				Vector2(1, t - e),
				Vector2(1, t + e),
				Vector2(t + w, t + s)
			])
		TileSet.CELL_NEIGHBOR_BOTTOM_RIGHT_SIDE:
			return PackedVector2Array([
				Vector2(t + w, t + s),
				Vector2(1, t + e),
				Vector2(t, 1),
				Vector2(t, 6 * s)
			])
		TileSet.CELL_NEIGHBOR_BOTTOM_LEFT_SIDE:
			return PackedVector2Array([
				Vector2(t, 6 * s),
				Vector2(t, 1),
				Vector2(0, t + e),
				Vector2(t - w, t + s)
			])
		TileSet.CELL_NEIGHBOR_LEFT_SIDE:
			return PackedVector2Array([
				Vector2(t - w, t + s),
				Vector2(0, t + e),
				Vector2(0, t - e),
				Vector2(t - w, t - s)
			])
		TileSet.CELL_NEIGHBOR_TOP_LEFT_SIDE:
			return PackedVector2Array([
				Vector2(t - w, t - s),
				Vector2(0, t - e),
				Vector2(t, 0),
				Vector2(t, 2 * s)
			])
		TileSet.CELL_NEIGHBOR_TOP_RIGHT_SIDE:
			return PackedVector2Array([
				Vector2(t, 2 * s),
				Vector2(t, 0),
				Vector2(1, t - e),
				Vector2(t + w, t - s)
			])
	return PackedVector2Array()


static func _peering_polygon_horizontal_vertices(peering: int) -> PackedVector2Array:
	const e := 1.0 / (2.0 * sqrt(3.0))
	const w := sqrt(3.0) / 8.0
	const t := 1.0 / 2.0
	const s := 1.0 / 8.0
	match peering:
		-1:
			return PackedVector2Array([
				Vector2(t - s, t - w),
				Vector2(t + s, t - w),
				Vector2(6 * s, t),
				Vector2(t + s, t + w),
				Vector2(t - s, t + w),
				Vector2(2 * s, t)
			])
		TileSet.CELL_NEIGHBOR_BOTTOM_RIGHT_CORNER:
			return PackedVector2Array([
				Vector2(6 * s, t),
				Vector2(1, t),
				Vector2(1, t + e),
				Vector2(t + e, 1 - s),
				Vector2(t + s, t +  w)
			])
		TileSet.CELL_NEIGHBOR_BOTTOM_CORNER:
			return PackedVector2Array([
				Vector2(t - s, t + w),
				Vector2(t + s, t + w),
				Vector2(t + e, 1 - s),
				Vector2(t, 1),
				Vector2(t - e, 1 - s)
			])
		TileSet.CELL_NEIGHBOR_BOTTOM_LEFT_CORNER:
			return PackedVector2Array([
				Vector2(0, t),
				Vector2(2 * s, t),
				Vector2(t - s, t +  w),
				Vector2(t - e, 1 - s),
				Vector2(0, t + e)
			])
		TileSet.CELL_NEIGHBOR_TOP_LEFT_CORNER:
			return PackedVector2Array([
				Vector2(t - e, s),
				Vector2(t - s, t - w),
				Vector2(2 * s, t),
				Vector2(0, t),
				Vector2(0, t - e)
			])
		TileSet.CELL_NEIGHBOR_TOP_CORNER:
			return PackedVector2Array([
				Vector2(t, 0),
				Vector2(t + e, s),
				Vector2(t + s, t - w),
				Vector2(t - s, t - w),
				Vector2(t - e, s)
			])
		TileSet.CELL_NEIGHBOR_TOP_RIGHT_CORNER:
			return PackedVector2Array([
				Vector2(t + e, s),
				Vector2(1, t - e),
				Vector2(1, t),
				Vector2(6 * s, t),
				Vector2(t + s, t - w)
			])
	return PackedVector2Array()


static func _peering_polygon_vertical_tiles(peering: int) -> PackedVector2Array:
	const e := 1.0 / (2.0 * sqrt(3.0))
	const w := sqrt(3.0) / 8.0
	const t := 1.0 / 2.0
	const s := 1.0 / 8.0
	match peering:
		-1:
			return PackedVector2Array([
				Vector2(t - s, t - w),
				Vector2(t + s, t - w),
				Vector2(6 * s, t),
				Vector2(t + s, t + w),
				Vector2(t - s, t + w),
				Vector2(2 * s, t)
			])
		TileSet.CELL_NEIGHBOR_BOTTOM_RIGHT_SIDE:
			return PackedVector2Array([
				Vector2(6 * s, t),
				Vector2(1, t),
				Vector2(t + e, 1),
				Vector2(t + s, t + w)
			])
		TileSet.CELL_NEIGHBOR_BOTTOM_SIDE:
			return PackedVector2Array([
				Vector2(t - s, t + w),
				Vector2(t + s, t + w),
				Vector2(t + e, 1),
				Vector2(t - e, 1)
			])
		TileSet.CELL_NEIGHBOR_BOTTOM_LEFT_SIDE:
			return PackedVector2Array([
				Vector2(0, t),
				Vector2(2 * s, t),
				Vector2(t - s, t + w),
				Vector2(t - e, 1)
			])
		TileSet.CELL_NEIGHBOR_TOP_LEFT_SIDE:
			return PackedVector2Array([
				Vector2(t - e, 0),
				Vector2(t - s, t - w),
				Vector2(2 * s, t),
				Vector2(0, t)
			])
		TileSet.CELL_NEIGHBOR_TOP_SIDE:
			return PackedVector2Array([
				Vector2(t - e, 0),
				Vector2(t + e, 0),
				Vector2(t + s, t - w),
				Vector2(t - s, t - w)
			])
		TileSet.CELL_NEIGHBOR_TOP_RIGHT_SIDE:
			return PackedVector2Array([
				Vector2(t + e, 0),
				Vector2(1, t),
				Vector2(6 * s, t),
				Vector2(t + s, t - w)
			])
	return PackedVector2Array()


static func _peering_polygon_vertical_vertices(peering: int) -> PackedVector2Array:
	const e := 1.0 / (2.0 * sqrt(3.0))
	const w := sqrt(3.0) / 8.0
	const t := 1.0 / 2.0
	const s := 1.0 / 8.0
	match peering:
		-1:
			return PackedVector2Array([
				Vector2(t, 2 * s),
				Vector2(t + w, t - s),
				Vector2(t + w, t + s),
				Vector2(t, 6 * s),
				Vector2(t - w, t + s),
				Vector2(t - w, t - s)
			])
		TileSet.CELL_NEIGHBOR_RIGHT_CORNER:
			return PackedVector2Array([
				Vector2(1 - s, t - e),
				Vector2(1, t),
				Vector2(1 - s, t + e),
				Vector2(t + w, t + s),
				Vector2(t + w, t - s)
			])
		TileSet.CELL_NEIGHBOR_BOTTOM_RIGHT_CORNER:			
			return PackedVector2Array([
				Vector2(t + w, t + s),
				Vector2(1 - s, t + e),
				Vector2(t + e, 1),
				Vector2(t, 1),
				Vector2(t, 6 * s)
			])
		TileSet.CELL_NEIGHBOR_BOTTOM_LEFT_CORNER:
			return PackedVector2Array([
				Vector2(t - w, t + s),
				Vector2(t, 6 * s),
				Vector2(t, 1),
				Vector2(t - e, 1),
				Vector2(s, t + e)
			])
		TileSet.CELL_NEIGHBOR_LEFT_CORNER:
			return PackedVector2Array([
				Vector2(s, t - e),
				Vector2(t - w, t - s),
				Vector2(t - w, t + s),
				Vector2(s, t + e),
				Vector2(0, t)
			])
		TileSet.CELL_NEIGHBOR_TOP_LEFT_CORNER:
			return PackedVector2Array([
				Vector2(t - e, 0),
				Vector2(t, 0),
				Vector2(t, 2 * s),
				Vector2(t - w, t - s),
				Vector2(s, t - e)
			])
		TileSet.CELL_NEIGHBOR_TOP_RIGHT_CORNER:
			return PackedVector2Array([
				Vector2(t, 0),
				Vector2(t + e, 0),
				Vector2(1 - s, t - e),
				Vector2(t + w, t - s),
				Vector2(t, 2 * s)
			])
	return PackedVector2Array()


static func _peering_non_modifying() -> PackedVector2Array:
	const t := 1.0 / 3.0
	return PackedVector2Array([
		Vector2(t, 0),
		Vector2(2 * t, 0),
		Vector2(1, t),
		Vector2(1, 2 * t),
		Vector2(2 * t, 1),
		Vector2(t, 1),
		Vector2(0, 2 * t),
		Vector2(0, t)
	])


## Returns a parameterized polygon (coordinated are between 0 and 1) for [code]peering[/code]
## direction for a terrain of [code]type[/code] in [TileSet]
static func peering_polygon(ts: TileSet, type: int, peering: int) -> PackedVector2Array:
	if type == BetterTerrain.TerrainType.CATEGORY:
		return _peering_non_modifying()
	if type == BetterTerrain.TerrainType.DECORATION:
		type = BetterTerrain.TerrainType.MATCH_TILES
	
	match [ts.tile_shape, type]:
		[TileSet.TILE_SHAPE_SQUARE, BetterTerrain.TerrainType.MATCH_TILES]:
			return _peering_polygon_square_tiles(peering)
		[TileSet.TILE_SHAPE_SQUARE, BetterTerrain.TerrainType.MATCH_VERTICES]:
			return _peering_polygon_square_vertices(peering)
		[TileSet.TILE_SHAPE_ISOMETRIC, BetterTerrain.TerrainType.MATCH_TILES]:
			return _peering_polygon_isometric_tiles(peering)
		[TileSet.TILE_SHAPE_ISOMETRIC, BetterTerrain.TerrainType.MATCH_VERTICES]:
			return _peering_polygon_isometric_vertices(peering)
	
	match [ts.tile_offset_axis, type]:
		[TileSet.TILE_OFFSET_AXIS_VERTICAL, BetterTerrain.TerrainType.MATCH_TILES]:
			return _peering_polygon_vertical_tiles(peering)
		[TileSet.TILE_OFFSET_AXIS_VERTICAL, BetterTerrain.TerrainType.MATCH_VERTICES]:
			return _peering_polygon_vertical_vertices(peering)
		[TileSet.TILE_OFFSET_AXIS_HORIZONTAL, BetterTerrain.TerrainType.MATCH_TILES]:
			return _peering_polygon_horizontal_tiles(peering)
		[TileSet.TILE_OFFSET_AXIS_HORIZONTAL, BetterTerrain.TerrainType.MATCH_VERTICES]:
			return _peering_polygon_horizontal_vertices(peering)
	
	return PackedVector2Array()


## Returns as polygon centered on 0, 0 which represents the shape of the cell of
## a tile from [TileSet].
static func cell_polygon(ts: TileSet) -> PackedVector2Array:
	const t := 1.0 / 2.0
	if ts.tile_shape in [TileSet.TILE_SHAPE_SQUARE, TileSet.TILE_SHAPE_HALF_OFFSET_SQUARE]:
		return PackedVector2Array([Vector2(-t, -t), Vector2(t, -t), Vector2(t, t), Vector2(-t, t)])
	if ts.tile_shape == TileSet.TILE_SHAPE_ISOMETRIC:
		return PackedVector2Array([Vector2(0, -t), Vector2(t, 0), Vector2(0, t), Vector2(-t, 0)])
	
	const e := t - 1.0 / (2.0 * sqrt(3.0))
	if ts.tile_offset_axis == TileSet.TILE_OFFSET_AXIS_HORIZONTAL:
		return PackedVector2Array([
			Vector2(0, -t),
			Vector2(t, -e),
			Vector2(t, e),
			Vector2(0, t),
			Vector2(-t, e),
			Vector2(-t, -e),
		])
	
	return PackedVector2Array([
		Vector2(-t, 0),
		Vector2(-e, -t),
		Vector2(e, -t),
		Vector2(t, 0),
		Vector2(e, t),
		Vector2(-e, t),
	])


## Returns an [Array] of coordinated that neighbor [code]coord[/code] based on [code]peering[/code]
## [Array] of [enum TileSet.CellNeighbor] for a [TileSet].
static func neighboring_coords(tm: TileMapLayer, coord: Vector2i, peerings: Array) -> Array:
	return peerings.map(func(p): return tm.get_neighbor_cell(coord, p))


## Returns an [Array] of coordinates which neighbor the vertex describe by [code]corner[/code]
## (which is of type [enum TileSet.CellNeighbor]) from [code]coord[/code] in [TileSet].
static func associated_vertex_cells(tm: TileMapLayer, coord: Vector2i, corner: int) -> Array:
	# get array of associated peering bits
	if tm.tile_set.tile_shape in [TileSet.TILE_SHAPE_SQUARE, TileSet.TILE_SHAPE_ISOMETRIC]:
		match corner:
			# Square
			TileSet.CELL_NEIGHBOR_BOTTOM_RIGHT_CORNER:
				return neighboring_coords(tm, coord, [0, 3, 4])
			TileSet.CELL_NEIGHBOR_BOTTOM_LEFT_CORNER:
				return neighboring_coords(tm, coord, [4, 7, 8])
			TileSet.CELL_NEIGHBOR_TOP_LEFT_CORNER:
				return neighboring_coords(tm, coord, [8, 11, 12])
			TileSet.CELL_NEIGHBOR_TOP_RIGHT_CORNER:
				return neighboring_coords(tm, coord, [12, 15, 0])
			# Isometric
			TileSet.CELL_NEIGHBOR_RIGHT_CORNER:
				return neighboring_coords(tm, coord, [14, 1, 2])
			TileSet.CELL_NEIGHBOR_BOTTOM_CORNER:
				return neighboring_coords(tm, coord, [2, 5, 6])
			TileSet.CELL_NEIGHBOR_LEFT_CORNER:
				return neighboring_coords(tm, coord, [6, 9, 10])
			TileSet.CELL_NEIGHBOR_TOP_CORNER:
				return neighboring_coords(tm, coord, [10, 13, 14])
	
	if tm.tile_set.tile_offset_axis == TileSet.TILE_OFFSET_AXIS_HORIZONTAL:
		match corner:
			TileSet.CELL_NEIGHBOR_BOTTOM_RIGHT_CORNER:
				return neighboring_coords(tm, coord, [0, 2])
			TileSet.CELL_NEIGHBOR_BOTTOM_CORNER:
				return neighboring_coords(tm, coord, [2, 6])
			TileSet.CELL_NEIGHBOR_BOTTOM_LEFT_CORNER:
				return neighboring_coords(tm, coord, [6, 8])
			TileSet.CELL_NEIGHBOR_TOP_LEFT_CORNER:
				return neighboring_coords(tm, coord, [8, 10])
			TileSet.CELL_NEIGHBOR_TOP_CORNER:
				return neighboring_coords(tm, coord, [10, 14])
			TileSet.CELL_NEIGHBOR_TOP_RIGHT_CORNER:
				return neighboring_coords(tm, coord, [14, 0])
	
	# TileSet.TILE_OFFSET_AXIS_VERTICAL
	match corner:
		TileSet.CELL_NEIGHBOR_RIGHT_CORNER:
			return neighboring_coords(tm, coord, [14, 2])
		TileSet.CELL_NEIGHBOR_BOTTOM_RIGHT_CORNER:
			return neighboring_coords(tm, coord, [2, 4])
		TileSet.CELL_NEIGHBOR_BOTTOM_LEFT_CORNER:
			return neighboring_coords(tm, coord, [4, 6])
		TileSet.CELL_NEIGHBOR_LEFT_CORNER:
			return neighboring_coords(tm, coord, [6, 10])
		TileSet.CELL_NEIGHBOR_TOP_LEFT_CORNER:
			return neighboring_coords(tm, coord, [10, 12])
		TileSet.CELL_NEIGHBOR_TOP_RIGHT_CORNER:
			return neighboring_coords(tm, coord, [12, 14])
	
	return []


## Returns an [Array] of [enum TileSet.CellNeighbor] suitable for flood filling
## an area in [TileSet].
static func cells_adjacent_for_fill(ts: TileSet) -> Array[int]:
	if ts.tile_shape == TileSet.TILE_SHAPE_SQUARE:
		return [0, 4, 8, 12]
	if ts.tile_shape == TileSet.TILE_SHAPE_ISOMETRIC:
		return [2, 6, 10, 14]
	if ts.tile_offset_axis == TileSet.TILE_OFFSET_AXIS_HORIZONTAL:
		return _terrain_peering_horiztonal_tiles
	return _terrain_peering_vertical_tiles


static func peering_bit_after_symmetry(bit: int, altflags: int) -> int:
	if altflags & TileSetAtlasSource.TRANSFORM_TRANSPOSE:
		bit = _terrain_peering_transpose[bit]
	if altflags & TileSetAtlasSource.TRANSFORM_FLIP_H:
		bit = _terrain_peering_hflip[bit]
	if altflags & TileSetAtlasSource.TRANSFORM_FLIP_V:
		bit = _terrain_peering_vflip[bit]
	return bit


static func peering_bits_after_symmetry(dict: Dictionary, altflags: int) -> Dictionary:
	# rearrange dictionary keys based on altflags
	var result := {}
	for k in dict:
		result[peering_bit_after_symmetry(k, altflags)] = dict[k]
	return result
</file>

<file path="addons/better-terrain/BetterTerrainData.gd.uid">
uid://p3fnptjevpot
</file>

<file path="addons/better-terrain/editor/Dock.gd">
@tool
extends Control

signal update_overlay
signal force_show_terrains

# The maximum individual tiles the overlay will draw before shortcutting the display
# To prevent editor lag when drawing large rectangles or filling large areas
const MAX_CANVAS_RENDER_TILES = 1500
const TERRAIN_PROPERTIES_SCENE := preload("res://addons/better-terrain/editor/TerrainProperties.tscn")
const TERRAIN_ENTRY_SCENE := preload("res://addons/better-terrain/editor/TerrainEntry.tscn")
const MIN_ZOOM_SETTING := "editor/better_terrain/min_zoom_amount"
const MAX_ZOOM_SETTING := "editor/better_terrain/max_zoom_amount"


# Buttons
@onready var draw_button: Button = $VBox/Toolbar/Draw
@onready var line_button: Button = $VBox/Toolbar/Line
@onready var rectangle_button: Button = $VBox/Toolbar/Rectangle
@onready var fill_button: Button = $VBox/Toolbar/Fill
@onready var replace_button: Button = $VBox/Toolbar/Replace

@onready var paint_type: Button = $VBox/Toolbar/PaintType
@onready var paint_terrain: Button = $VBox/Toolbar/PaintTerrain
@onready var select_tiles: Button = $VBox/Toolbar/SelectTiles

@onready var paint_symmetry: Button = $VBox/Toolbar/PaintSymmetry
@onready var symmetry_options: OptionButton = $VBox/Toolbar/SymmetryOptions

@onready var shuffle_random: Button = $VBox/Toolbar/ShuffleRandom
@onready var zoom_slider_container: VBoxContainer = $VBox/Toolbar/ZoomContainer

@onready var source_selector: MenuBar = $VBox/Toolbar/Sources
@onready var source_selector_popup: PopupMenu = $VBox/Toolbar/Sources/Sources

@onready var clean_button: Button = $VBox/Toolbar/Clean
@onready var layer_up: Button = $VBox/Toolbar/LayerUp
@onready var layer_down: Button = $VBox/Toolbar/LayerDown
@onready var layer_highlight: Button = $VBox/Toolbar/LayerHighlight
@onready var layer_grid: Button = $VBox/Toolbar/LayerGrid

@onready var grid_mode_button: Button = $VBox/HSplit/Terrains/LowerToolbar/GridMode
@onready var quick_mode_button: Button = $VBox/HSplit/Terrains/LowerToolbar/QuickMode

@onready var edit_tool_buttons: HBoxContainer = $VBox/HSplit/Terrains/LowerToolbar/EditTools
@onready var add_terrain_button: Button = $VBox/HSplit/Terrains/LowerToolbar/EditTools/AddTerrain
@onready var edit_terrain_button: Button = $VBox/HSplit/Terrains/LowerToolbar/EditTools/EditTerrain
@onready var pick_icon_button: Button = $VBox/HSplit/Terrains/LowerToolbar/EditTools/PickIcon
@onready var move_up_button: Button = $VBox/HSplit/Terrains/LowerToolbar/EditTools/MoveUp
@onready var move_down_button: Button = $VBox/HSplit/Terrains/LowerToolbar/EditTools/MoveDown
@onready var remove_terrain_button: Button = $VBox/HSplit/Terrains/LowerToolbar/EditTools/RemoveTerrain

@onready var scroll_container: ScrollContainer = $VBox/HSplit/Terrains/Panel/ScrollContainer
@onready var terrain_list: HFlowContainer = $VBox/HSplit/Terrains/Panel/ScrollContainer/TerrainList
@onready var tile_view: Control = $VBox/HSplit/Panel/ScrollArea/TileView


var selected_entry := -2

var tilemap : TileMapLayer
var tileset : TileSet

var undo_manager : EditorUndoRedoManager
var terrain_undo

var draw_overlay := false
var initial_click : Vector2i
var prev_position : Vector2i
var current_position : Vector2i
var tileset_dirty := false
var zoom_slider : HSlider

enum PaintMode {
	NO_PAINT,
	PAINT,
	ERASE
}

enum PaintAction {
	NO_ACTION,
	LINE,
	RECT
}

enum SourceSelectors {
	ALL = 1000000,
	NONE = 1000001,
}

var paint_mode := PaintMode.NO_PAINT

var paint_action := PaintAction.NO_ACTION


# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	draw_button.icon = get_theme_icon("Edit", "EditorIcons")
	line_button.icon = get_theme_icon("Line", "EditorIcons")
	rectangle_button.icon = get_theme_icon("Rectangle", "EditorIcons")
	fill_button.icon = get_theme_icon("Bucket", "EditorIcons")
	select_tiles.icon = get_theme_icon("ToolSelect", "EditorIcons")
	add_terrain_button.icon = get_theme_icon("Add", "EditorIcons")
	edit_terrain_button.icon = get_theme_icon("Tools", "EditorIcons")
	pick_icon_button.icon = get_theme_icon("ColorPick", "EditorIcons")
	move_up_button.icon = get_theme_icon("ArrowUp", "EditorIcons")
	move_down_button.icon = get_theme_icon("ArrowDown", "EditorIcons")
	remove_terrain_button.icon = get_theme_icon("Remove", "EditorIcons")
	grid_mode_button.icon = get_theme_icon("FileThumbnail", "EditorIcons")
	quick_mode_button.icon = get_theme_icon("GuiVisibilityVisible", "EditorIcons")
	layer_up.icon = get_theme_icon("MoveUp", "EditorIcons")
	layer_down.icon = get_theme_icon("MoveDown", "EditorIcons")
	layer_highlight.icon = get_theme_icon("TileMapHighlightSelected", "EditorIcons")
	layer_grid.icon = get_theme_icon("Grid", "EditorIcons")
	
	select_tiles.button_group.pressed.connect(_on_bit_button_pressed)
	
	terrain_undo = load("res://addons/better-terrain/editor/TerrainUndo.gd").new()
	add_child(terrain_undo)
	tile_view.undo_manager = undo_manager
	tile_view.terrain_undo = terrain_undo
	
	tile_view.paste_occurred.connect(_on_paste_occurred)
	tile_view.change_zoom_level.connect(_on_change_zoom_level)
	tile_view.terrain_updated.connect(_on_terrain_updated)
	
	# Zoom slider is manipulated by settings, make it at runtime
	zoom_slider = HSlider.new()
	zoom_slider.custom_minimum_size = Vector2(100, 0)
	zoom_slider.value_changed.connect(tile_view._on_zoom_value_changed)
	zoom_slider_container.add_child(zoom_slider)
	
	# Init settings if needed
	if !ProjectSettings.has_setting(MIN_ZOOM_SETTING):
		ProjectSettings.set(MIN_ZOOM_SETTING, 1.0)
	ProjectSettings.add_property_info({
		"name": MIN_ZOOM_SETTING,
		"type": TYPE_FLOAT,
		"hint": PROPERTY_HINT_RANGE,
		"hint_string": "0.1,1.0,0.1"
	})
	ProjectSettings.set_initial_value(MIN_ZOOM_SETTING, 1.0)
	ProjectSettings.set_as_basic(MIN_ZOOM_SETTING, true)
	
	if !ProjectSettings.has_setting(MAX_ZOOM_SETTING):
		ProjectSettings.set(MAX_ZOOM_SETTING, 8.0)
	ProjectSettings.add_property_info({
		"name": MAX_ZOOM_SETTING,
		"type": TYPE_FLOAT,
		"hint": PROPERTY_HINT_RANGE,
		"hint_string": "2.0,32.0,1.0"
	})
	ProjectSettings.set_initial_value(MAX_ZOOM_SETTING, 8.0)
	ProjectSettings.set_as_basic(MAX_ZOOM_SETTING, true)
	ProjectSettings.set_order(MAX_ZOOM_SETTING, ProjectSettings.get_order(MIN_ZOOM_SETTING) + 1)
	
	ProjectSettings.settings_changed.connect(_on_adjust_settings)
	_on_adjust_settings()
	zoom_slider.value = 1.0


func _process(delta):
	scroll_container.scroll_horizontal = 0


func _on_adjust_settings():
	zoom_slider.min_value = ProjectSettings.get_setting(MIN_ZOOM_SETTING, 1.0)
	zoom_slider.max_value = ProjectSettings.get_setting(MAX_ZOOM_SETTING, 8.0)
	zoom_slider.step = (zoom_slider.max_value - zoom_slider.min_value) / 100.0


func _get_fill_cells(target: Vector2i) -> Array:
	var pick := BetterTerrain.get_cell(tilemap, target)
	var bounds := tilemap.get_used_rect()
	var neighbors = BetterTerrain.data.cells_adjacent_for_fill(tileset)
	
	# No sets yet, so use a dictionary
	var checked := {}
	var pending := [target]
	var goal := []
	
	while !pending.is_empty():
		var p = pending.pop_front()
		if checked.has(p):
			continue
		checked[p] = true
		if !bounds.has_point(p) or BetterTerrain.get_cell(tilemap, p) != pick:
			continue
		
		goal.append(p)
		pending.append_array(BetterTerrain.data.neighboring_coords(tilemap, p, neighbors))
	
	return goal


func tiles_about_to_change() -> void:
	if tileset and tileset.changed.is_connected(queue_tiles_changed):
		tileset.changed.disconnect(queue_tiles_changed)


func tiles_changed() -> void:
	# ensure up to date
	BetterTerrain._update_terrain_data(tileset)
	
	# clear terrains
	for c in terrain_list.get_children():
		terrain_list.remove_child(c)
		c.queue_free()
	
	# load terrains from tileset
	var terrain_count := BetterTerrain.terrain_count(tileset)
	var item_count = terrain_count + 1
	for i in terrain_count:
		var terrain := BetterTerrain.get_terrain(tileset, i)
		if i >= terrain_list.get_child_count():
			add_terrain_entry(terrain, i)
	
	if item_count > terrain_list.get_child_count():
		var terrain := BetterTerrain.get_terrain(tileset, BetterTerrain.TileCategory.EMPTY)
		if terrain.valid:
			add_terrain_entry(terrain, item_count - 1)
	
	while item_count < terrain_list.get_child_count():
		var child = terrain_list.get_child(terrain_list.get_child_count() - 1)
		terrain_list.remove_child(child)
		child.free()
	
	source_selector_popup.clear()
	source_selector_popup.add_item("All", SourceSelectors.ALL)
	source_selector_popup.add_item("None", SourceSelectors.NONE)
	var source_count = tileset.get_source_count() if tileset else 0
	for s in source_count:
		var source_id = tileset.get_source_id(s)
		var source := tileset.get_source(source_id)
		if !(source is TileSetAtlasSource):
			continue
		
		var name := source.resource_name
		if name.is_empty():
			var texture := (source as TileSetAtlasSource).texture
			var texture_name := texture.resource_name if texture else ""
			if !texture_name.is_empty():
				name = texture_name
			else:
				var texture_path := texture.resource_path if texture else ""
				if !texture_path.is_empty():
					name = texture_path.get_file()
		
		if !name.is_empty():
			name += " "
		name += " (ID: %d)" % source_id
		
		source_selector_popup.add_check_item(name, source_id)
		source_selector_popup.set_item_checked(source_selector_popup.get_item_index(source_id), true)
	source_selector.visible = source_selector_popup.item_count > 3 # All, None and more than one source
	
	update_tile_view_paint()
	tile_view.refresh_tileset(tileset)
	
	if tileset and !tileset.changed.is_connected(queue_tiles_changed):
		tileset.changed.connect(queue_tiles_changed)
	
	clean_button.visible = BetterTerrain._has_invalid_peering_types(tileset)
	
	tileset_dirty = false
	_on_grid_mode_pressed()
	_on_quick_mode_pressed()


func about_to_be_visible(visible: bool) -> void:
	if !visible:
		return
	
	if tileset != tilemap.tile_set:
		tiles_about_to_change()
		tileset = tilemap.tile_set
		tiles_changed()
	
	var settings := EditorInterface.get_editor_settings()
	layer_highlight.set_pressed_no_signal(settings.get_setting("editors/tiles_editor/highlight_selected_layer"))
	layer_grid.set_pressed_no_signal(settings.get_setting("editors/tiles_editor/display_grid"))


func queue_tiles_changed() -> void:
	# Bring terrain data up to date with complex tileset changes
	if !tileset or tileset_dirty:
		return
	
	tileset_dirty = true
	tiles_changed.call_deferred()


func _on_entry_select(index:int):
	selected_entry = index
	if selected_entry >= BetterTerrain.terrain_count(tileset):
		selected_entry = BetterTerrain.TileCategory.EMPTY
	for i in range(terrain_list.get_child_count()):
		if i != index:
			terrain_list.get_child(i).set_selected(false)
	update_tile_view_paint()


func _on_clean_pressed() -> void:
	var confirmed := [false]
	var popup := ConfirmationDialog.new()
	popup.dialog_text = tr("Tile set changes have caused terrain to become invalid. Remove invalid terrain data?")
	popup.dialog_hide_on_ok = false
	popup.confirmed.connect(func():
		confirmed[0] = true
		popup.hide()
	)
	EditorInterface.popup_dialog_centered(popup)
	await popup.visibility_changed
	popup.queue_free()
	
	if confirmed[0]:
		undo_manager.create_action("Clean invalid terrain peering data", UndoRedo.MERGE_DISABLE, tileset)
		undo_manager.add_do_method(BetterTerrain, &"_clear_invalid_peering_types", tileset)
		undo_manager.add_do_method(self, &"tiles_changed")
		terrain_undo.create_peering_restore_point(undo_manager, tileset)
		undo_manager.add_undo_method(self, &"tiles_changed")
		undo_manager.commit_action()


func _on_grid_mode_pressed() -> void:
	for c in terrain_list.get_children():
		c.grid_mode = grid_mode_button.button_pressed
		c.update_style()


func _on_quick_mode_pressed() -> void:
	edit_tool_buttons.visible = !quick_mode_button.button_pressed
	for c in terrain_list.get_children():
		c.visible = !quick_mode_button.button_pressed or c.terrain.type in [BetterTerrain.TerrainType.MATCH_TILES, BetterTerrain.TerrainType.MATCH_VERTICES]


func update_tile_view_paint() -> void:
	tile_view.paint = selected_entry
	tile_view.queue_redraw()
	
	var editable = tile_view.paint != BetterTerrain.TileCategory.EMPTY
	edit_terrain_button.disabled = !editable
	move_up_button.disabled = !editable or tile_view.paint == 0
	move_down_button.disabled = !editable or tile_view.paint == BetterTerrain.terrain_count(tileset) - 1
	remove_terrain_button.disabled = !editable
	pick_icon_button.disabled = !editable


func _on_add_terrain_pressed() -> void:
	if !tileset:
		return
	
	var popup := TERRAIN_PROPERTIES_SCENE.instantiate()
	popup.set_category_data(BetterTerrain.get_terrain_categories(tileset))
	popup.terrain_name = "New terrain"
	popup.terrain_color = Color.from_hsv(randf(), 0.3 + 0.7 * randf(), 0.6 + 0.4 * randf())
	popup.terrain_icon = ""
	popup.terrain_type = 0
	EditorInterface.popup_dialog_centered(popup)
	await popup.visibility_changed
	if popup.accepted:
		undo_manager.create_action("Add terrain type", UndoRedo.MERGE_DISABLE, tileset)
		undo_manager.add_do_method(self, &"perform_add_terrain", popup.terrain_name, popup.terrain_color, popup.terrain_type, popup.terrain_categories, {path = popup.terrain_icon})
		undo_manager.add_undo_method(self, &"perform_remove_terrain", terrain_list.get_child_count() - 1)
		undo_manager.commit_action()
	popup.queue_free()


func _on_edit_terrain_pressed() -> void:
	if !tileset:
		return
	
	if selected_entry < 0:
		return
	
	var t := BetterTerrain.get_terrain(tileset, selected_entry)
	var categories = BetterTerrain.get_terrain_categories(tileset)
	categories = categories.filter(func(x): return x.id != selected_entry)
	
	var popup := TERRAIN_PROPERTIES_SCENE.instantiate()
	popup.set_category_data(categories)
	
	t.icon = t.icon.duplicate()
	
	popup.terrain_name = t.name
	popup.terrain_type = t.type
	popup.terrain_color = t.color
	if t.has("icon") and t.icon.has("path"):
		popup.terrain_icon = t.icon.path
	popup.terrain_categories = t.categories
	EditorInterface.popup_dialog_centered(popup)
	await popup.visibility_changed
	if popup.accepted:
		undo_manager.create_action("Edit terrain details", UndoRedo.MERGE_DISABLE, tileset)
		undo_manager.add_do_method(self, &"perform_edit_terrain", selected_entry, popup.terrain_name, popup.terrain_color, popup.terrain_type, popup.terrain_categories, {path = popup.terrain_icon})
		undo_manager.add_undo_method(self, &"perform_edit_terrain", selected_entry, t.name, t.color, t.type, t.categories, t.icon)
		if t.type != popup.terrain_type:
			terrain_undo.create_terrain_type_restore_point(undo_manager, tileset)
			terrain_undo.create_peering_restore_point_specific(undo_manager, tileset, selected_entry)
		undo_manager.commit_action()
	popup.queue_free()


func _on_pick_icon_pressed():
	if selected_entry < 0:
		return
	tile_view.pick_icon_terrain = selected_entry


func _on_pick_icon_focus_exited():
	tile_view.pick_icon_terrain_cancel = true
	pick_icon_button.button_pressed = false


func _on_move_pressed(down: bool) -> void:
	if !tileset:
		return
	
	if selected_entry < 0:
		return
	
	var index1 = selected_entry
	var index2 = index1 + (1 if down else -1)
	if index2 < 0 or index2 >= terrain_list.get_child_count():
		return
	
	undo_manager.create_action("Reorder terrains", UndoRedo.MERGE_DISABLE, tileset)
	undo_manager.add_do_method(self, &"perform_swap_terrain", index1, index2)
	undo_manager.add_undo_method(self, &"perform_swap_terrain", index1, index2)
	undo_manager.commit_action()


func _on_remove_terrain_pressed() -> void:
	if !tileset:
		return
	
	if selected_entry < 0:
		return
	
	# store confirmation in array to pass by ref
	var t := BetterTerrain.get_terrain(tileset, selected_entry)
	var confirmed := [false]
	var popup := ConfirmationDialog.new()
	popup.dialog_text = tr("Are you sure you want to remove {0}?").format([t.name])
	popup.dialog_hide_on_ok = false
	popup.confirmed.connect(func():
		confirmed[0] = true
		popup.hide()
	)
	EditorInterface.popup_dialog_centered(popup)
	await popup.visibility_changed
	popup.queue_free()
	
	if confirmed[0]:
		undo_manager.create_action("Remove terrain type", UndoRedo.MERGE_DISABLE, tileset)
		undo_manager.add_do_method(self, &"perform_remove_terrain", selected_entry)
		undo_manager.add_undo_method(self, &"perform_add_terrain", t.name, t.color, t.type, t.categories, t.icon)
		for n in range(terrain_list.get_child_count() - 2, selected_entry, -1):
			undo_manager.add_undo_method(self, &"perform_swap_terrain", n, n - 1)
		if t.type == BetterTerrain.TerrainType.CATEGORY:
			terrain_undo.create_terrain_type_restore_point(undo_manager, tileset)
		terrain_undo.create_peering_restore_point_specific(undo_manager, tileset, selected_entry)
		undo_manager.commit_action()


func add_terrain_entry(terrain:Dictionary, index:int = -1):
	if index < 0:
		index = terrain_list.get_child_count()
	
	var entry = TERRAIN_ENTRY_SCENE.instantiate()
	entry.tileset = tileset
	entry.terrain = terrain
	entry.grid_mode = grid_mode_button.button_pressed
	entry.select.connect(_on_entry_select)
	
	terrain_list.add_child(entry)
	terrain_list.move_child(entry, index)


func remove_terrain_entry(index: int):
	terrain_list.get_child(index).free()
	for i in range(index, terrain_list.get_child_count()):
		var child = terrain_list.get_child(i)
		child.terrain = BetterTerrain.get_terrain(tileset, i)
		child.update()


func perform_add_terrain(name: String, color: Color, type: int, categories: Array, icon:Dictionary = {}) -> void:
	if BetterTerrain.add_terrain(tileset, name, color, type, categories, icon):
		var index = BetterTerrain.terrain_count(tileset) - 1
		var terrain = BetterTerrain.get_terrain(tileset, index)
		add_terrain_entry(terrain, index)


func perform_remove_terrain(index: int) -> void:
	if index >= BetterTerrain.terrain_count(tileset):
		return
	if BetterTerrain.remove_terrain(tileset, index):
		remove_terrain_entry(index)
		update_tile_view_paint()


func perform_swap_terrain(index1: int, index2: int) -> void:
	var lower := min(index1, index2)
	var higher := max(index1, index2)
	if lower >= terrain_list.get_child_count() or higher >= terrain_list.get_child_count():
		return
	var item1 = terrain_list.get_child(lower)
	var item2 = terrain_list.get_child(higher)
	if BetterTerrain.swap_terrains(tileset, lower, higher):
		terrain_list.move_child(item1, higher)
		item1.terrain = BetterTerrain.get_terrain(tileset, higher)
		item1.update()
		item2.terrain = BetterTerrain.get_terrain(tileset, lower)
		item2.update()
		selected_entry = index2
		terrain_list.get_child(index2).set_selected(true)
		update_tile_view_paint()


func perform_edit_terrain(index: int, name: String, color: Color, type: int, categories: Array, icon: Dictionary = {}) -> void:
	if index >= terrain_list.get_child_count():
		return
	var entry = terrain_list.get_child(index)
	# don't overwrite empty icon
	var valid_icon = icon
	if icon.has("path") and icon.path.is_empty():
		var terrain = BetterTerrain.get_terrain(tileset, index)
		valid_icon = terrain.icon
	if BetterTerrain.set_terrain(tileset, index, name, color, type, categories, valid_icon):
		entry.terrain = BetterTerrain.get_terrain(tileset, index)
		entry.update()
		tile_view.queue_redraw()


func _on_shuffle_random_pressed():
	BetterTerrain.use_seed = !shuffle_random.button_pressed 


func _on_bit_button_pressed(button: BaseButton) -> void:
	match select_tiles.button_group.get_pressed_button():
		select_tiles: tile_view.paint_mode = tile_view.PaintMode.SELECT
		paint_type: tile_view.paint_mode = tile_view.PaintMode.PAINT_TYPE
		paint_terrain: tile_view.paint_mode = tile_view.PaintMode.PAINT_PEERING
		paint_symmetry: tile_view.paint_mode = tile_view.PaintMode.PAINT_SYMMETRY
		_: tile_view.paint_mode = tile_view.PaintMode.NO_PAINT
	tile_view.queue_redraw()
	
	symmetry_options.visible = paint_symmetry.button_pressed


func _on_symmetry_selected(index):
	tile_view.paint_symmetry = index


func _on_paste_occurred():
	select_tiles.button_pressed = true


func _on_change_zoom_level(value):
	zoom_slider.value = value


func _on_terrain_updated(index):
	var entry = terrain_list.get_child(index)
	entry.terrain = BetterTerrain.get_terrain(tileset, index)
	entry.update()


func canvas_tilemap_transform() -> Transform2D:
	var transform := tilemap.get_viewport_transform() * tilemap.global_transform
	
	# Handle subviewport
	var editor_viewport := EditorInterface.get_editor_viewport_2d()
	if tilemap.get_viewport() != editor_viewport:
		var container = tilemap.get_viewport().get_parent() as SubViewportContainer
		if container:
			transform = editor_viewport.global_canvas_transform * container.get_transform() * transform
	
	return transform


func canvas_draw(overlay: Control) -> void:
	if !draw_overlay:
		return
	
	if selected_entry < 0:
		return
	
	var type = selected_entry
	var terrain := BetterTerrain.get_terrain(tileset, type)
	if !terrain.valid:
		return
	
	var tiles := []
	var transform := canvas_tilemap_transform()
	
	if paint_action == PaintAction.RECT and paint_mode != PaintMode.NO_PAINT:
		var area := Rect2i(initial_click, current_position - initial_click).abs()

		# Shortcut fill for large areas
		if area.size.x > 1 and area.size.y > 1 and area.size.x * area.size.y > MAX_CANVAS_RENDER_TILES:
			var shortcut := PackedVector2Array([
				tilemap.map_to_local(area.position),
				tilemap.map_to_local(Vector2i(area.end.x, area.position.y)),
				tilemap.map_to_local(area.end),
				tilemap.map_to_local(Vector2i(area.position.x, area.end.y))
			])
			overlay.draw_colored_polygon(transform * shortcut, Color(terrain.color, 0.5))
			return
		
		for y in range(area.position.y, area.end.y + 1):
			for x in range(area.position.x, area.end.x + 1):
				tiles.append(Vector2i(x, y))
	elif paint_action == PaintAction.LINE and paint_mode != PaintMode.NO_PAINT:
		var cells := _get_tileset_line(initial_click, current_position, tileset)
		var shape = BetterTerrain.data.cell_polygon(tileset)
		for c in cells:
			var tile_transform := Transform2D(0.0, tilemap.tile_set.tile_size, 0.0, tilemap.map_to_local(c))
			overlay.draw_colored_polygon(transform * tile_transform * shape, Color(terrain.color, 0.5))
	elif fill_button.button_pressed:
		tiles = _get_fill_cells(current_position)
		if tiles.size() > MAX_CANVAS_RENDER_TILES:
			tiles.resize(MAX_CANVAS_RENDER_TILES)
	else:
		tiles.append(current_position)
	
	var shape = BetterTerrain.data.cell_polygon(tileset)
	for t in tiles:
		var tile_transform := Transform2D(0.0, tilemap.tile_set.tile_size, 0.0, tilemap.map_to_local(t))
		overlay.draw_colored_polygon(transform * tile_transform * shape, Color(terrain.color, 0.5))


func canvas_input(event: InputEvent) -> bool:
	if selected_entry < 0:
		return false
	
	draw_overlay = true
	if event is InputEventMouseMotion:
		var tr := canvas_tilemap_transform()
		var pos := tr.affine_inverse() * Vector2(event.position)
		var event_position := tilemap.local_to_map(pos)
		prev_position = current_position
		if event_position == current_position:
			return false
		current_position = event_position
		update_overlay.emit()
	
	var replace_mode = replace_button.button_pressed
	
	var released : bool = event is InputEventMouseButton and !event.pressed
	if released:
		terrain_undo.finish_action()
		var type = selected_entry
		if paint_action == PaintAction.RECT and paint_mode != PaintMode.NO_PAINT:
			var area := Rect2i(initial_click, current_position - initial_click).abs()
			# Fill from initial_target to target
			undo_manager.create_action(tr("Draw terrain rectangle"), UndoRedo.MERGE_DISABLE, tilemap)
			for y in range(area.position.y, area.end.y + 1):
				for x in range(area.position.x, area.end.x + 1):
					var coord := Vector2i(x, y)
					if paint_mode == PaintMode.PAINT:
						if replace_mode:
							undo_manager.add_do_method(BetterTerrain, &"replace_cell", tilemap, coord, type)
						else:
							undo_manager.add_do_method(BetterTerrain, &"set_cell", tilemap, coord, type)
					else:
						undo_manager.add_do_method(tilemap, &"erase_cell", coord)
			
			undo_manager.add_do_method(BetterTerrain, &"update_terrain_area", tilemap, area)
			terrain_undo.create_tile_restore_point_area(undo_manager, tilemap, area)
			undo_manager.commit_action()
			update_overlay.emit()
		elif paint_action == PaintAction.LINE and paint_mode != PaintMode.NO_PAINT:
			undo_manager.create_action(tr("Draw terrain line"), UndoRedo.MERGE_DISABLE, tilemap)
			var cells := _get_tileset_line(initial_click, current_position, tileset)
			if paint_mode == PaintMode.PAINT:
				if replace_mode:
					undo_manager.add_do_method(BetterTerrain, &"replace_cells", tilemap, cells, type)
				else:
					undo_manager.add_do_method(BetterTerrain, &"set_cells", tilemap, cells, type)
			elif paint_mode == PaintMode.ERASE:
				for c in cells:
					undo_manager.add_do_method(tilemap, &"erase_cell", c)
			undo_manager.add_do_method(BetterTerrain, &"update_terrain_cells", tilemap, cells)
			terrain_undo.create_tile_restore_point(undo_manager, tilemap, cells)
			undo_manager.commit_action()
			update_overlay.emit()
		
		paint_mode = PaintMode.NO_PAINT
		return true
	
	var clicked : bool = event is InputEventMouseButton and event.pressed
	if clicked:
		paint_mode = PaintMode.NO_PAINT
		
		if (event.is_command_or_control_pressed() and !event.shift_pressed):
			var pick = BetterTerrain.get_cell(tilemap, current_position)
			if pick >= 0:
				terrain_list.get_children()[pick]._on_focus_entered()
				#_on_entry_select(pick)
			return true
		
		paint_action = PaintAction.NO_ACTION
		if rectangle_button.button_pressed:
			paint_action = PaintAction.RECT
		elif line_button.button_pressed:
			paint_action = PaintAction.LINE
		elif draw_button.button_pressed:
			if event.shift_pressed:
				paint_action = PaintAction.LINE
				if event.is_command_or_control_pressed():
					paint_action = PaintAction.RECT
		
		if event.button_index == MOUSE_BUTTON_LEFT:
			paint_mode = PaintMode.PAINT
		elif event.button_index == MOUSE_BUTTON_RIGHT:
			paint_mode = PaintMode.ERASE
		else:
			return false
	
	if (clicked or event is InputEventMouseMotion) and paint_mode != PaintMode.NO_PAINT:
		if clicked:
			initial_click = current_position
			terrain_undo.action_index += 1
			terrain_undo.action_count = 0
		var type = selected_entry
		
		if paint_action == PaintAction.LINE or paint_action == PaintAction.RECT:
			# if painting as line, execution happens on release. 
			# prevent other painting actions from running.
			pass
		elif draw_button.button_pressed:
			undo_manager.create_action(tr("Draw terrain") + str(terrain_undo.action_index), UndoRedo.MERGE_ALL, tilemap, true)
			var cells := _get_tileset_line(prev_position, current_position, tileset)
			if paint_mode == PaintMode.PAINT:
				if replace_mode:
					terrain_undo.add_do_method(undo_manager, BetterTerrain, &"replace_cells", [tilemap, cells, type])
				else:
					terrain_undo.add_do_method(undo_manager, BetterTerrain, &"set_cells", [tilemap, cells, type])
			elif paint_mode == PaintMode.ERASE:
				for c in cells:
					terrain_undo.add_do_method(undo_manager, tilemap, &"erase_cell", [c])
			terrain_undo.add_do_method(undo_manager, BetterTerrain, &"update_terrain_cells", [tilemap, cells])
			terrain_undo.create_tile_restore_point(undo_manager, tilemap, cells)
			undo_manager.commit_action()
			terrain_undo.action_count += 1
		elif fill_button.button_pressed:
			var cells := _get_fill_cells(current_position)
			undo_manager.create_action(tr("Fill terrain"), UndoRedo.MERGE_DISABLE, tilemap)
			if paint_mode == PaintMode.PAINT:
				if replace_mode:
					undo_manager.add_do_method(BetterTerrain, &"replace_cells", tilemap, cells, type)
				else:
					undo_manager.add_do_method(BetterTerrain, &"set_cells", tilemap, cells, type)
			elif paint_mode == PaintMode.ERASE:
				for c in cells:
					undo_manager.add_do_method(tilemap, &"erase_cell", c)
			undo_manager.add_do_method(BetterTerrain, &"update_terrain_cells", tilemap, cells)
			terrain_undo.create_tile_restore_point(undo_manager, tilemap, cells)
			undo_manager.commit_action()
		
		update_overlay.emit()
		return true
	
	return false


func canvas_mouse_exit() -> void:
	draw_overlay = false
	update_overlay.emit()


func _shortcut_input(event) -> void:
	if event is InputEventKey:
		if event.keycode == KEY_C and (event.is_command_or_control_pressed() and not event.echo):
			get_viewport().set_input_as_handled()
			tile_view.copy_selection()
		if event.keycode == KEY_V and (event.is_command_or_control_pressed() and not event.echo):
			get_viewport().set_input_as_handled()
			tile_view.paste_selection()


## bresenham alg ported from Geometry2D::bresenham_line()
func _get_line(from:Vector2i, to:Vector2i) -> Array[Vector2i]:
	if from == to:
		return [to]
	
	var points:Array[Vector2i] = []
	var delta := (to - from).abs() * 2
	var step := (to - from).sign()
	var current := from
	
	if delta.x > delta.y:
		var err:int = delta.x / 2
		while current.x != to.x:
			points.push_back(current);
			err -= delta.y
			if err < 0:
				current.y += step.y
				err += delta.x
			current.x += step.x
	else:
		var err:int = delta.y / 2
		while current.y != to.y:
			points.push_back(current)
			err -= delta.x
			if err < 0:
				current.x += step.x
				err += delta.y
			current.y += step.y
	
	points.push_back(current);
	return points;


## half-offset bresenham alg ported from TileMapEditor::get_line
func _get_tileset_line(from:Vector2i, to:Vector2i, tileset:TileSet) -> Array[Vector2i]:
	if tileset.tile_shape == TileSet.TILE_SHAPE_SQUARE:
		return _get_line(from, to)
	
	var points:Array[Vector2i] = []
	
	var transposed := tileset.get_tile_offset_axis() == TileSet.TILE_OFFSET_AXIS_VERTICAL
	if transposed:
		from = Vector2i(from.y, from.x)
		to = Vector2i(to.y, to.x)

	var delta:Vector2i = to - from
	delta = Vector2i(2 * delta.x + abs(posmod(to.y, 2)) - abs(posmod(from.y, 2)), delta.y)
	var sign:Vector2i = delta.sign()

	var current := from;
	points.push_back(Vector2i(current.y, current.x) if transposed else current)

	var err := 0
	if abs(delta.y) < abs(delta.x):
		var err_step:Vector2i = 3 * delta.abs()
		while current != to:
			err += err_step.y
			if err > abs(delta.x):
				if sign.x == 0:
					current += Vector2i(sign.y, 0)
				else:
					current += Vector2i(sign.x if bool(current.y % 2) != (sign.x < 0) else 0, sign.y)
				err -= err_step.x
			else:
				current += Vector2i(sign.x, 0)
				err += err_step.y
			points.push_back(Vector2i(current.y, current.x) if transposed else current)
	else:
		var err_step:Vector2i = delta.abs()
		while current != to:
			err += err_step.x
			if err > 0:
				if sign.x == 0:
					current += Vector2i(0, sign.y)
				else:
					current += Vector2i(sign.x if bool(current.y % 2) != (sign.x < 0) else 0, sign.y)
				err -= err_step.y;
			else:
				if sign.x == 0:
					current += Vector2i(0, sign.y)
				else:
					current += Vector2i(-sign.x if bool(current.y % 2) != (sign.x > 0) else 0, sign.y)
				err += err_step.y
			points.push_back(Vector2i(current.y, current.x) if transposed else current)
	
	return points


func _on_terrain_enable_id_pressed(id):
	if id in [SourceSelectors.ALL, SourceSelectors.NONE]:
		for i in source_selector_popup.item_count:
			if source_selector_popup.is_item_checkable(i):
				source_selector_popup.set_item_checked(i, id == SourceSelectors.ALL)
	else:
		var index = source_selector_popup.get_item_index(id)
		var checked = source_selector_popup.is_item_checked(index)
		source_selector_popup.set_item_checked(index, !checked)
	
	var disabled_sources : Array[int]
	for i in source_selector_popup.item_count:
		if source_selector_popup.is_item_checkable(i) and !source_selector_popup.is_item_checked(i):
			disabled_sources.append(source_selector_popup.get_item_id(i))
	tile_view.disabled_sources = disabled_sources


func corresponding_tilemap_editor_button(similar: Button) -> Button:
	var editors = EditorInterface.get_base_control().find_children("*", "TileMapLayerEditor", true, false)
	var tile_map_layer_editor = editors[0]
	var buttons = tile_map_layer_editor.find_children("*", "Button", true, false)
	for button: Button in buttons:
		if button.icon == similar.icon:
			return button
	return null


func _on_layer_up_or_down_pressed(button: Button) -> void:
	var matching_button = corresponding_tilemap_editor_button(button)
	if !matching_button:
		return
	
	# Major hack, to reduce flicker hide the tileset editor briefly
	var editors = EditorInterface.get_base_control().find_children("*", "TileSetEditor", true, false)
	var tile_set_editor = editors[0]
	
	matching_button.pressed.emit()
	tile_set_editor.modulate = Color.TRANSPARENT
	await get_tree().process_frame
	await get_tree().process_frame
	force_show_terrains.emit()
	tile_set_editor.modulate = Color.WHITE



func _on_layer_up_pressed() -> void:
	_on_layer_up_or_down_pressed(layer_up)


func _on_layer_down_pressed() -> void:
	_on_layer_up_or_down_pressed(layer_down)


func _on_layer_highlight_toggled(toggled: bool) -> void:
	var settings = EditorInterface.get_editor_settings()
	settings.set_setting("editors/tiles_editor/highlight_selected_layer", toggled)
	
	var highlight = corresponding_tilemap_editor_button(layer_highlight)
	if highlight:
		highlight.toggled.emit(toggled)


func _on_layer_grid_toggled(toggled: bool) -> void:
	var settings = EditorInterface.get_editor_settings()
	settings.set_setting("editors/tiles_editor/display_grid", toggled)
	
	var grid = corresponding_tilemap_editor_button(layer_grid)
	if grid:
		grid.toggled.emit(toggled)
</file>

<file path="addons/better-terrain/editor/Dock.gd.uid">
uid://camybj2f0l5l8
</file>

<file path="addons/better-terrain/editor/Dock.tscn">
[gd_scene load_steps=33 format=3 uid="uid://de8b6h6ieal7r"]

[ext_resource type="Script" path="res://addons/better-terrain/editor/Dock.gd" id="1_raoha"]
[ext_resource type="Texture2D" uid="uid://c6lxq2y7mpb18" path="res://addons/better-terrain/icons/EditType.svg" id="2_cpm2t"]
[ext_resource type="Texture2D" uid="uid://y3xy6qdckht6" path="res://addons/better-terrain/icons/Replace.svg" id="2_fvmt6"]
[ext_resource type="Texture2D" uid="uid://bo2cjv08jkvf8" path="res://addons/better-terrain/icons/EditTerrain.svg" id="3_pqb1p"]
[ext_resource type="Texture2D" uid="uid://b0es228gfcykd" path="res://addons/better-terrain/icons/Warning.svg" id="4_6ahwe"]
[ext_resource type="Script" path="res://addons/better-terrain/editor/TileView.gd" id="4_nqppq"]
[ext_resource type="Texture2D" uid="uid://co6gwwmog0pjy" path="res://addons/better-terrain/icons/EditSymmetry.svg" id="5_kfjwu"]
[ext_resource type="Texture2D" uid="uid://cs4mdmluiydj6" path="res://addons/better-terrain/icons/ShuffleRandom.svg" id="5_n3owo"]
[ext_resource type="Texture2D" uid="uid://5hm3bfj3dvej" path="res://addons/better-terrain/icons/SymmetryMirror.svg" id="6_mofuh"]
[ext_resource type="Texture2D" uid="uid://dqmc1jp56or8m" path="res://addons/better-terrain/icons/SymmetryFlip.svg" id="7_ojxs0"]
[ext_resource type="Texture2D" uid="uid://cxoewno1cefua" path="res://addons/better-terrain/icons/SymmetryReflect.svg" id="8_8dhyg"]
[ext_resource type="Texture2D" uid="uid://baxhjy28r1iqj" path="res://addons/better-terrain/icons/SymmetryRotateClockwise.svg" id="9_tq76a"]
[ext_resource type="Texture2D" uid="uid://csbwdkr6bc2db" path="res://addons/better-terrain/icons/SymmetryRotateCounterClockwise.svg" id="10_o5h1f"]
[ext_resource type="Texture2D" uid="uid://8mcycyl3e66r" path="res://addons/better-terrain/icons/SymmetryRotate180.svg" id="11_m6syp"]
[ext_resource type="Texture2D" uid="uid://b7fx4mk18lmls" path="res://addons/better-terrain/icons/SymmetryRotateAll.svg" id="12_11vru"]
[ext_resource type="Texture2D" uid="uid://cyjra4g05dwh" path="res://addons/better-terrain/icons/SymmetryAll.svg" id="13_lp5m2"]

[sub_resource type="ButtonGroup" id="ButtonGroup_aon7c"]

[sub_resource type="InputEventKey" id="InputEventKey_saph6"]
device = -1
keycode = 68
unicode = 100

[sub_resource type="Shortcut" id="Shortcut_3k2al"]
events = [SubResource("InputEventKey_saph6")]

[sub_resource type="Image" id="Image_3r1gs"]
data = {
"data": PackedByteArray(255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 255, 255, 0, 255, 94, 94, 127, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 255, 255, 0, 255, 93, 93, 255, 255, 94, 94, 127, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 255, 255, 0, 255, 93, 93, 255, 255, 93, 93, 255, 255, 94, 94, 127, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 255, 255, 0, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 94, 94, 127, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 93, 93, 231, 255, 94, 94, 54, 255, 94, 94, 57, 255, 93, 93, 233, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 231, 255, 94, 94, 54, 255, 94, 94, 57, 255, 93, 93, 233, 255, 93, 93, 255, 255, 93, 93, 255, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 97, 97, 42, 255, 255, 255, 0, 255, 255, 255, 0, 255, 97, 97, 42, 255, 93, 93, 233, 255, 93, 93, 232, 255, 93, 93, 41, 255, 255, 255, 0, 255, 255, 255, 0, 255, 97, 97, 42, 255, 93, 93, 233, 255, 93, 93, 232, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 96, 96, 45, 255, 93, 93, 44, 255, 255, 255, 0, 255, 97, 97, 42, 255, 97, 97, 42, 255, 255, 255, 0, 255, 96, 96, 45, 255, 93, 93, 44, 255, 255, 255, 0, 255, 97, 97, 42, 255, 97, 97, 42, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 96, 96, 45, 255, 93, 93, 235, 255, 94, 94, 234, 255, 95, 95, 43, 255, 255, 255, 0, 255, 255, 255, 0, 255, 96, 96, 45, 255, 93, 93, 235, 255, 94, 94, 234, 255, 95, 95, 43, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 93, 93, 235, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 233, 255, 95, 95, 59, 255, 96, 96, 61, 255, 93, 93, 235, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 233, 255, 95, 95, 59, 255, 96, 96, 61, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0),
"format": "RGBA8",
"height": 16,
"mipmaps": false,
"width": 16
}

[sub_resource type="ImageTexture" id="ImageTexture_v6msm"]
image = SubResource("Image_3r1gs")

[sub_resource type="InputEventKey" id="InputEventKey_q1v0d"]
device = -1
keycode = 76
unicode = 108

[sub_resource type="Shortcut" id="Shortcut_wc6bu"]
events = [SubResource("InputEventKey_q1v0d")]

[sub_resource type="InputEventKey" id="InputEventKey_68n3h"]
device = -1
keycode = 82
unicode = 114

[sub_resource type="InputEventKey" id="InputEventKey_qcu1e"]
device = -1
keycode = 67
unicode = 99

[sub_resource type="Shortcut" id="Shortcut_tcjet"]
events = [SubResource("InputEventKey_68n3h"), SubResource("InputEventKey_qcu1e")]

[sub_resource type="InputEventKey" id="InputEventKey_grxy4"]
device = -1
keycode = 66
unicode = 98

[sub_resource type="Shortcut" id="Shortcut_46fac"]
events = [SubResource("InputEventKey_grxy4")]

[sub_resource type="InputEventKey" id="InputEventKey_xd61m"]
device = -1
keycode = 80
unicode = 112

[sub_resource type="Shortcut" id="Shortcut_uwwa1"]
events = [SubResource("InputEventKey_xd61m")]

[sub_resource type="ButtonGroup" id="ButtonGroup_3wrxn"]
allow_unpress = true

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_mpeb7"]
bg_color = Color(0, 0, 0, 0.4)

[node name="Dock" type="Control" node_paths=PackedStringArray("shortcut_context")]
custom_minimum_size = Vector2(0, 100)
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
focus_mode = 2
shortcut_context = NodePath(".")
script = ExtResource("1_raoha")

[node name="VBox" type="VBoxContainer" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="Toolbar" type="HBoxContainer" parent="VBox"]
layout_mode = 2

[node name="Draw" type="Button" parent="VBox/Toolbar"]
layout_mode = 2
tooltip_text = "Draw terrain
Shift: Draw line.
Ctrl/Cmd+Shift: Draw rectangle."
toggle_mode = true
button_pressed = true
button_group = SubResource("ButtonGroup_aon7c")
shortcut = SubResource("Shortcut_3k2al")
icon = SubResource("ImageTexture_v6msm")
flat = true

[node name="Line" type="Button" parent="VBox/Toolbar"]
layout_mode = 2
tooltip_text = "Draw line"
toggle_mode = true
button_group = SubResource("ButtonGroup_aon7c")
shortcut = SubResource("Shortcut_wc6bu")
icon = SubResource("ImageTexture_v6msm")
flat = true

[node name="Rectangle" type="Button" parent="VBox/Toolbar"]
layout_mode = 2
tooltip_text = "Fill a rectangle of terrain"
toggle_mode = true
button_group = SubResource("ButtonGroup_aon7c")
shortcut = SubResource("Shortcut_tcjet")
icon = SubResource("ImageTexture_v6msm")
flat = true

[node name="Fill" type="Button" parent="VBox/Toolbar"]
layout_mode = 2
tooltip_text = "Bucket fill terrain"
toggle_mode = true
button_group = SubResource("ButtonGroup_aon7c")
shortcut = SubResource("Shortcut_46fac")
icon = SubResource("ImageTexture_v6msm")
flat = true

[node name="Replace" type="Button" parent="VBox/Toolbar"]
layout_mode = 2
tooltip_text = "Toggle replace mode"
toggle_mode = true
shortcut = SubResource("Shortcut_uwwa1")
icon = ExtResource("2_fvmt6")

[node name="VSeparator" type="VSeparator" parent="VBox/Toolbar"]
layout_mode = 2

[node name="SelectTiles" type="Button" parent="VBox/Toolbar"]
layout_mode = 2
tooltip_text = "Select"
toggle_mode = true
button_group = SubResource("ButtonGroup_3wrxn")
icon = SubResource("ImageTexture_v6msm")
flat = true

[node name="PaintType" type="Button" parent="VBox/Toolbar"]
layout_mode = 2
tooltip_text = "Paint terrain types"
toggle_mode = true
button_group = SubResource("ButtonGroup_3wrxn")
icon = ExtResource("2_cpm2t")
flat = true

[node name="PaintTerrain" type="Button" parent="VBox/Toolbar"]
layout_mode = 2
tooltip_text = "Paint terrain connecting types"
toggle_mode = true
button_group = SubResource("ButtonGroup_3wrxn")
icon = ExtResource("3_pqb1p")
flat = true

[node name="PaintSymmetry" type="Button" parent="VBox/Toolbar"]
layout_mode = 2
tooltip_text = "Paint tile symmetry"
toggle_mode = true
button_group = SubResource("ButtonGroup_3wrxn")
icon = ExtResource("5_kfjwu")
flat = true

[node name="SymmetryOptions" type="OptionButton" parent="VBox/Toolbar"]
visible = false
custom_minimum_size = Vector2(100, 0)
layout_mode = 2
selected = 0
item_count = 9
popup/item_0/text = "No symmetry"
popup/item_0/id = 8
popup/item_1/text = "Mirror"
popup/item_1/icon = ExtResource("6_mofuh")
popup/item_1/id = 1
popup/item_2/text = "Flip"
popup/item_2/icon = ExtResource("7_ojxs0")
popup/item_2/id = 1
popup/item_3/text = "Reflect"
popup/item_3/icon = ExtResource("8_8dhyg")
popup/item_3/id = 2
popup/item_4/text = "Rotate clockwise"
popup/item_4/icon = ExtResource("9_tq76a")
popup/item_4/id = 3
popup/item_5/text = "Rotate counter-clockwise"
popup/item_5/icon = ExtResource("10_o5h1f")
popup/item_5/id = 4
popup/item_6/text = "Rotate 180"
popup/item_6/icon = ExtResource("11_m6syp")
popup/item_6/id = 5
popup/item_7/text = "All rotations"
popup/item_7/icon = ExtResource("12_11vru")
popup/item_7/id = 6
popup/item_8/text = "All reflections & rotations"
popup/item_8/icon = ExtResource("13_lp5m2")
popup/item_8/id = 7

[node name="VSeparator3" type="VSeparator" parent="VBox/Toolbar"]
layout_mode = 2

[node name="ZoomContainer" type="VBoxContainer" parent="VBox/Toolbar"]
layout_mode = 2
alignment = 1

[node name="Sources" type="MenuBar" parent="VBox/Toolbar"]
layout_mode = 2

[node name="Sources" type="PopupMenu" parent="VBox/Toolbar/Sources"]
hide_on_item_selection = false
hide_on_checkable_item_selection = false

[node name="Spacer" type="Control" parent="VBox/Toolbar"]
layout_mode = 2
size_flags_horizontal = 3

[node name="ShuffleRandom" type="Button" parent="VBox/Toolbar"]
layout_mode = 2
tooltip_text = "Shuffle random tiles each update"
toggle_mode = true
icon = ExtResource("5_n3owo")
flat = true

[node name="Clean" type="Button" parent="VBox/Toolbar"]
layout_mode = 2
text = "Clean tile data"
icon = ExtResource("4_6ahwe")

[node name="VSeparator2" type="VSeparator" parent="VBox/Toolbar"]
layout_mode = 2

[node name="LayerUp" type="Button" parent="VBox/Toolbar"]
layout_mode = 2
tooltip_text = "Select previous layer"
icon = SubResource("ImageTexture_v6msm")
flat = true

[node name="LayerDown" type="Button" parent="VBox/Toolbar"]
layout_mode = 2
tooltip_text = "Select next layer"
icon = SubResource("ImageTexture_v6msm")
flat = true

[node name="LayerHighlight" type="Button" parent="VBox/Toolbar"]
layout_mode = 2
tooltip_text = "Highlight selected layer"
toggle_mode = true
icon = SubResource("ImageTexture_v6msm")
flat = true

[node name="LayerGrid" type="Button" parent="VBox/Toolbar"]
layout_mode = 2
tooltip_text = "Toggle grid visibility"
toggle_mode = true
icon = SubResource("ImageTexture_v6msm")
flat = true

[node name="HSplit" type="HSplitContainer" parent="VBox"]
layout_mode = 2
size_flags_vertical = 3
split_offset = 325

[node name="Terrains" type="VBoxContainer" parent="VBox/HSplit"]
layout_mode = 2

[node name="Panel" type="PanelContainer" parent="VBox/HSplit/Terrains"]
layout_mode = 2
size_flags_vertical = 3
theme_override_styles/panel = SubResource("StyleBoxFlat_mpeb7")

[node name="ScrollContainer" type="ScrollContainer" parent="VBox/HSplit/Terrains/Panel"]
layout_mode = 2
horizontal_scroll_mode = 3

[node name="TerrainList" type="HFlowContainer" parent="VBox/HSplit/Terrains/Panel/ScrollContainer"]
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3

[node name="LowerToolbar" type="HBoxContainer" parent="VBox/HSplit/Terrains"]
layout_mode = 2

[node name="GridMode" type="Button" parent="VBox/HSplit/Terrains/LowerToolbar"]
layout_mode = 2
tooltip_text = "Toggle grid view"
toggle_mode = true
icon = SubResource("ImageTexture_v6msm")
flat = true

[node name="QuickMode" type="Button" parent="VBox/HSplit/Terrains/LowerToolbar"]
auto_translate_mode = 1
layout_mode = 2
tooltip_text = "Toggle quick mode. Only shows paintable terrain types."
toggle_mode = true
icon = SubResource("ImageTexture_v6msm")
flat = true

[node name="VSeparator" type="VSeparator" parent="VBox/HSplit/Terrains/LowerToolbar"]
layout_mode = 2

[node name="EditTools" type="HBoxContainer" parent="VBox/HSplit/Terrains/LowerToolbar"]
layout_mode = 2
size_flags_horizontal = 3
alignment = 2

[node name="AddTerrain" type="Button" parent="VBox/HSplit/Terrains/LowerToolbar/EditTools"]
layout_mode = 2
tooltip_text = "Add terrain type"
icon = SubResource("ImageTexture_v6msm")
flat = true

[node name="EditTerrain" type="Button" parent="VBox/HSplit/Terrains/LowerToolbar/EditTools"]
layout_mode = 2
tooltip_text = "Edit terrain type"
icon = SubResource("ImageTexture_v6msm")
flat = true

[node name="PickIcon" type="Button" parent="VBox/HSplit/Terrains/LowerToolbar/EditTools"]
layout_mode = 2
tooltip_text = "Pick terrain icon from tileset"
toggle_mode = true
icon = SubResource("ImageTexture_v6msm")
flat = true

[node name="MoveUp" type="Button" parent="VBox/HSplit/Terrains/LowerToolbar/EditTools"]
layout_mode = 2
tooltip_text = "Move selected terrain up"
icon = SubResource("ImageTexture_v6msm")
flat = true

[node name="MoveDown" type="Button" parent="VBox/HSplit/Terrains/LowerToolbar/EditTools"]
layout_mode = 2
tooltip_text = "Move selected terrain down"
icon = SubResource("ImageTexture_v6msm")
flat = true

[node name="RemoveTerrain" type="Button" parent="VBox/HSplit/Terrains/LowerToolbar/EditTools"]
layout_mode = 2
tooltip_text = "Remove selected terrain type(s)"
icon = SubResource("ImageTexture_v6msm")
flat = true

[node name="Panel" type="Panel" parent="VBox/HSplit"]
custom_minimum_size = Vector2(0, 80)
layout_mode = 2

[node name="ScrollArea" type="ScrollContainer" parent="VBox/HSplit/Panel"]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
size_flags_horizontal = 3

[node name="TileView" type="Control" parent="VBox/HSplit/Panel/ScrollArea"]
texture_filter = 1
texture_repeat = 1
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
focus_mode = 2
script = ExtResource("4_nqppq")

[connection signal="item_selected" from="VBox/Toolbar/SymmetryOptions" to="." method="_on_symmetry_selected"]
[connection signal="id_pressed" from="VBox/Toolbar/Sources/Sources" to="." method="_on_terrain_enable_id_pressed"]
[connection signal="pressed" from="VBox/Toolbar/ShuffleRandom" to="." method="_on_shuffle_random_pressed"]
[connection signal="pressed" from="VBox/Toolbar/Clean" to="." method="_on_clean_pressed"]
[connection signal="pressed" from="VBox/Toolbar/LayerUp" to="." method="_on_layer_up_pressed"]
[connection signal="pressed" from="VBox/Toolbar/LayerDown" to="." method="_on_layer_down_pressed"]
[connection signal="toggled" from="VBox/Toolbar/LayerHighlight" to="." method="_on_layer_highlight_toggled"]
[connection signal="toggled" from="VBox/Toolbar/LayerGrid" to="." method="_on_layer_grid_toggled"]
[connection signal="pressed" from="VBox/HSplit/Terrains/LowerToolbar/GridMode" to="." method="_on_grid_mode_pressed"]
[connection signal="pressed" from="VBox/HSplit/Terrains/LowerToolbar/QuickMode" to="." method="_on_quick_mode_pressed"]
[connection signal="pressed" from="VBox/HSplit/Terrains/LowerToolbar/EditTools/AddTerrain" to="." method="_on_add_terrain_pressed"]
[connection signal="pressed" from="VBox/HSplit/Terrains/LowerToolbar/EditTools/EditTerrain" to="." method="_on_edit_terrain_pressed"]
[connection signal="focus_exited" from="VBox/HSplit/Terrains/LowerToolbar/EditTools/PickIcon" to="." method="_on_pick_icon_focus_exited"]
[connection signal="pressed" from="VBox/HSplit/Terrains/LowerToolbar/EditTools/PickIcon" to="." method="_on_pick_icon_pressed"]
[connection signal="pressed" from="VBox/HSplit/Terrains/LowerToolbar/EditTools/MoveUp" to="." method="_on_move_pressed" binds= [false]]
[connection signal="pressed" from="VBox/HSplit/Terrains/LowerToolbar/EditTools/MoveDown" to="." method="_on_move_pressed" binds= [true]]
[connection signal="pressed" from="VBox/HSplit/Terrains/LowerToolbar/EditTools/RemoveTerrain" to="." method="_on_remove_terrain_pressed"]
[connection signal="mouse_exited" from="VBox/HSplit/Panel/ScrollArea/TileView" to="VBox/HSplit/Panel/ScrollArea/TileView" method="clear_highlighted_tile"]
</file>

<file path="addons/better-terrain/editor/TerrainEntry.gd">
@tool
extends PanelContainer

signal select(index)

@onready var color_panel := %Color
@onready var terrain_icon_slot := %TerrainIcon
@onready var type_icon_slot := %TypeIcon
@onready var type_icon_panel := %TerrainIconPanel
@onready var name_label := %Name
@onready var layout_container := %Layout
@onready var icon_layout_container := %IconLayout

var selected := false

var tileset:TileSet
var terrain:Dictionary

var grid_mode := false
var color_style_list:StyleBoxFlat
var color_style_grid:StyleBoxFlat
var color_style_decoration:StyleBoxFlat

var _terrain_texture:Texture2D
var _terrain_texture_rect:Rect2i
var _icon_draw_connected := false


func _ready():
	update()

func update():
	if !terrain or !terrain.valid:
		return
	if !tileset:
		return
	
	name_label.text = terrain.name
	tooltip_text = "%s (%d)" % [terrain.name, terrain.id]
	
	color_style_list = color_panel.get_theme_stylebox("panel").duplicate()
	color_style_grid = color_panel.get_theme_stylebox("panel").duplicate()
	color_style_decoration = color_panel.get_theme_stylebox("panel").duplicate()
	
	color_style_list.bg_color = terrain.color
	color_style_list.corner_radius_top_left = 8
	color_style_list.corner_radius_bottom_left = 8
	color_style_list.corner_radius_top_right = 0
	color_style_list.corner_radius_bottom_right = 0
	color_style_list.content_margin_left = -1
	color_style_list.content_margin_right = -1
	color_style_list.border_width_left = 0
	color_style_list.border_width_right = 0
	color_style_list.border_width_top = 0
	color_style_list.border_width_bottom = 0
	
	color_style_grid.bg_color = terrain.color
	color_style_grid.corner_radius_top_left = 6
	color_style_grid.corner_radius_bottom_left = 6
	color_style_grid.corner_radius_top_right = 6
	color_style_grid.corner_radius_bottom_right = 6
	color_style_grid.content_margin_left = -1
	color_style_grid.content_margin_right = -1
	color_style_grid.border_width_left = 0
	color_style_grid.border_width_right = 0
	color_style_grid.border_width_top = 0
	color_style_grid.border_width_bottom = 0
	
	color_style_decoration.bg_color = terrain.color
	color_style_decoration.corner_radius_top_left = 8
	color_style_decoration.corner_radius_bottom_left = 8
	color_style_decoration.corner_radius_top_right = 8
	color_style_decoration.corner_radius_bottom_right = 8
	color_style_decoration.content_margin_left = -1
	color_style_decoration.content_margin_right = -1
	color_style_decoration.border_width_left = 4
	color_style_decoration.border_width_right = 4
	color_style_decoration.border_width_top = 4
	color_style_decoration.border_width_bottom = 4
	
	match terrain.type:
		BetterTerrain.TerrainType.MATCH_TILES:
			type_icon_slot.texture = load("res://addons/better-terrain/icons/MatchTiles.svg")
		BetterTerrain.TerrainType.MATCH_VERTICES:
			type_icon_slot.texture = load("res://addons/better-terrain/icons/MatchVertices.svg")
		BetterTerrain.TerrainType.CATEGORY:
			type_icon_slot.texture = load("res://addons/better-terrain/icons/NonModifying.svg")
		BetterTerrain.TerrainType.DECORATION:
			type_icon_slot.texture = load("res://addons/better-terrain/icons/Decoration.svg")
	
	var has_icon = false
	if terrain.has("icon"):
		if terrain.icon.has("path") and not terrain.icon.path.is_empty():
			terrain_icon_slot.texture = load(terrain.icon.path)
			_terrain_texture = null
			terrain_icon_slot.queue_redraw()
			has_icon = true
		elif terrain.icon.has("source_id") and tileset.has_source(terrain.icon.source_id):
			var source := tileset.get_source(terrain.icon.source_id) as TileSetAtlasSource
			var coord := terrain.icon.coord as Vector2i
			var rect := source.get_tile_texture_region(coord, 0)
			_terrain_texture = source.texture
			_terrain_texture_rect = rect
			terrain_icon_slot.queue_redraw()
			has_icon = true
	
	if not has_icon:
		var tiles = BetterTerrain.get_tile_sources_in_terrain(tileset, get_index())
		if tiles.size() > 0:
			var source := tiles[0].source as TileSetAtlasSource
			var coord := tiles[0].coord as Vector2i
			var rect := source.get_tile_texture_region(coord, 0)
			_terrain_texture = source.texture
			_terrain_texture_rect = rect
			terrain_icon_slot.queue_redraw()
	
	if _terrain_texture:
		terrain_icon_slot.texture = null
	
	if not _icon_draw_connected:
		terrain_icon_slot.connect("draw", func():
			if _terrain_texture:
				terrain_icon_slot.draw_texture_rect_region(_terrain_texture, Rect2i(0,0, 44, 44), _terrain_texture_rect)
		)
		_icon_draw_connected = true
	
	update_style()


func update_style():
	if terrain.type == BetterTerrain.TerrainType.DECORATION:
		type_icon_panel.visible = false
		color_panel.custom_minimum_size = Vector2i(52,52)
	else:
		type_icon_panel.visible = true
		color_panel.custom_minimum_size = Vector2i(24,24)
			
	if grid_mode:
		if terrain.type == BetterTerrain.TerrainType.DECORATION:
			color_panel.add_theme_stylebox_override("panel", color_style_decoration)
			color_panel.size_flags_vertical = Control.SIZE_FILL
			icon_layout_container.size_flags_vertical = Control.SIZE_EXPAND_FILL
		else:
			color_panel.add_theme_stylebox_override("panel", color_style_grid)
			color_panel.size_flags_vertical = Control.SIZE_SHRINK_BEGIN
			icon_layout_container.size_flags_vertical = Control.SIZE_FILL
		custom_minimum_size = Vector2(0, 60)
		size_flags_horizontal = Control.SIZE_FILL
		layout_container.vertical = true
		name_label.visible = false
		icon_layout_container.add_theme_constant_override("separation", -24)
	else:
		if terrain.type == BetterTerrain.TerrainType.DECORATION:
			color_panel.add_theme_stylebox_override("panel", color_style_decoration)
		else:
			color_panel.add_theme_stylebox_override("panel", color_style_list)
		icon_layout_container.size_flags_vertical = Control.SIZE_FILL
		custom_minimum_size = Vector2(2000, 60)
		size_flags_horizontal = Control.SIZE_EXPAND_FILL
		layout_container.vertical = false
		name_label.visible = true
		color_panel.size_flags_vertical = Control.SIZE_FILL
		icon_layout_container.add_theme_constant_override("separation", 4)


func set_selected(value:bool = true):
	selected = value
	if value:
		select.emit(get_index())
	queue_redraw()


func _draw():
	if selected:
		draw_rect(Rect2(Vector2.ZERO, get_rect().size), Color(0.15, 0.70, 1, 0.3))


func _on_focus_entered():
	queue_redraw()
	selected = true
	select.emit(get_index())


func _on_focus_exited():
	queue_redraw()
</file>

<file path="addons/better-terrain/editor/TerrainEntry.gd.uid">
uid://b6hoqvl1761e8
</file>

<file path="addons/better-terrain/editor/TerrainEntry.tscn">
[gd_scene load_steps=8 format=3 uid="uid://u2y444hj182c"]

[ext_resource type="Script" path="res://addons/better-terrain/editor/TerrainEntry.gd" id="1_o2na3"]
[ext_resource type="Texture2D" uid="uid://kmypxsqhynyv" path="res://addons/better-terrain/icons/Decoration.svg" id="2_ossyj"]

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_3pdcc"]
content_margin_left = 4.0
content_margin_top = 4.0
content_margin_right = 4.0
content_margin_bottom = 4.0
draw_center = false

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_dqhir"]
bg_color = Color(0.243, 0.816, 0.518, 1)
border_color = Color(0, 0, 0, 0.439216)
corner_radius_top_left = 8
corner_radius_bottom_left = 8

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_rohyw"]
content_margin_left = 2.0
content_margin_top = 2.0
content_margin_right = 2.0
content_margin_bottom = 2.0
bg_color = Color(0, 0, 0, 0.439216)
corner_radius_top_left = 4
corner_radius_top_right = 4
corner_radius_bottom_right = 4
corner_radius_bottom_left = 4

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_xa0fl"]
content_margin_left = 4.0
content_margin_top = 4.0
content_margin_right = 4.0
content_margin_bottom = 4.0
bg_color = Color(0, 0, 0, 0.439216)

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_b4rkm"]
content_margin_left = 3.0
bg_color = Color(0, 0, 0, 0.439216)
draw_center = false

[node name="TerrainEntry" type="PanelContainer"]
custom_minimum_size = Vector2(60, 60)
offset_right = 200.0
offset_bottom = 60.0
size_flags_vertical = 3
focus_mode = 2
theme_override_styles/panel = SubResource("StyleBoxFlat_3pdcc")
script = ExtResource("1_o2na3")

[node name="Layout" type="BoxContainer" parent="."]
unique_name_in_owner = true
layout_mode = 2
theme_override_constants/separation = 4

[node name="IconLayout" type="HBoxContainer" parent="Layout"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 4

[node name="Color" type="PanelContainer" parent="Layout/IconLayout"]
unique_name_in_owner = true
z_index = 1
custom_minimum_size = Vector2(24, 24)
layout_mode = 2
size_flags_horizontal = 0
mouse_filter = 1
theme_override_styles/panel = SubResource("StyleBoxFlat_dqhir")

[node name="PanelContainer" type="PanelContainer" parent="Layout/IconLayout/Color"]
layout_mode = 2
size_flags_horizontal = 4
size_flags_vertical = 4
mouse_filter = 1
theme_override_styles/panel = SubResource("StyleBoxFlat_rohyw")

[node name="TypeIcon" type="TextureRect" parent="Layout/IconLayout/Color/PanelContainer"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 4
size_flags_vertical = 4
texture = ExtResource("2_ossyj")

[node name="TerrainIconPanel" type="PanelContainer" parent="Layout/IconLayout"]
unique_name_in_owner = true
custom_minimum_size = Vector2(52, 52)
layout_mode = 2
size_flags_horizontal = 4
size_flags_vertical = 4
mouse_filter = 1
theme_override_styles/panel = SubResource("StyleBoxFlat_xa0fl")

[node name="TerrainIcon" type="TextureRect" parent="Layout/IconLayout/TerrainIconPanel"]
unique_name_in_owner = true
texture_filter = 1
custom_minimum_size = Vector2(40, 40)
layout_mode = 2
expand_mode = 4
stretch_mode = 5

[node name="Name" type="Label" parent="Layout"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 1
theme_override_colors/font_outline_color = Color(0, 0, 0, 1)
theme_override_constants/outline_size = 0
theme_override_styles/normal = SubResource("StyleBoxFlat_b4rkm")
text = "New Terrain"
vertical_alignment = 1
text_overrun_behavior = 3

[connection signal="focus_entered" from="." to="." method="_on_focus_entered"]
[connection signal="focus_exited" from="." to="." method="_on_focus_exited"]
</file>

<file path="addons/better-terrain/editor/TerrainProperties.gd">
@tool
extends ConfirmationDialog

var category_icon := load("res://addons/better-terrain/icons/NonModifying.svg")

const CATEGORY_CHECK_ID = &"category_check_id"

var accepted := false

var terrain_name : String:
	set(value): %NameEdit.text = value
	get: return %NameEdit.text

var terrain_color : Color:
	set(value): %ColorPicker.color = value
	get: return %ColorPicker.color

var terrain_icon : String:
	set(value): %IconEdit.text = value
	get: return %IconEdit.text

var terrain_type : int:
	set(value):
		%TypeOption.selected = value
		_on_type_option_item_selected(value)
	get: return %TypeOption.selected

var terrain_categories : Array: set = set_categories, get = get_categories


# category is name, color, id
func set_category_data(options: Array) -> void:
	if !options.is_empty():
		%CategoryLabel.show()
		%CategoryContainer.show()
	
	for o in options:
		var c = CheckBox.new()
		c.text = o.name
		c.icon = category_icon
		c.add_theme_color_override(&"icon_normal_color", o.color)
		c.add_theme_color_override(&"icon_disabled_color", Color(o.color, 0.4))
		c.add_theme_color_override(&"icon_focus_color", o.color)
		c.add_theme_color_override(&"icon_hover_color", o.color)
		c.add_theme_color_override(&"icon_hover_pressed_color", o.color)
		c.add_theme_color_override(&"icon_normal_color", o.color)
		c.add_theme_color_override(&"icon_pressed_color", o.color)
		
		c.set_meta(CATEGORY_CHECK_ID, o.id)
		%CategoryLayout.add_child(c)


func set_categories(ids : Array):
	for c in %CategoryLayout.get_children():
		c.button_pressed = c.get_meta(CATEGORY_CHECK_ID) in ids


func get_categories() -> Array:
	var result := []
	if terrain_type == BetterTerrain.TerrainType.CATEGORY:
		return result
	for c in %CategoryLayout.get_children():
		if c.button_pressed:
			result.push_back(c.get_meta(CATEGORY_CHECK_ID))
	return result


func _on_confirmed() -> void:
	# confirm valid name
	if terrain_name.is_empty():
		var dialog := AcceptDialog.new()
		dialog.dialog_text = "Name cannot be empty"
		EditorInterface.popup_dialog_centered(dialog)
		await dialog.visibility_changed
		dialog.queue_free()
		return
	
	accepted = true
	hide()


func _on_type_option_item_selected(index: int) -> void:
	var categories_available = (index != BetterTerrain.TerrainType.CATEGORY)
	for c in %CategoryLayout.get_children():
		c.disabled = !categories_available
</file>

<file path="addons/better-terrain/editor/TerrainProperties.gd.uid">
uid://njk88x45ijmn
</file>

<file path="addons/better-terrain/editor/TerrainProperties.tscn">
[gd_scene load_steps=5 format=3 uid="uid://fdjybw6e7whr"]

[ext_resource type="Script" path="res://addons/better-terrain/editor/TerrainProperties.gd" id="1_52nx8"]
[ext_resource type="Texture2D" uid="uid://d1h1p7pcwdnjk" path="res://addons/better-terrain/icons/MatchTiles.svg" id="2_ncc5p"]
[ext_resource type="Texture2D" uid="uid://dfemy1g6okwlv" path="res://addons/better-terrain/icons/MatchVertices.svg" id="3_0nvmi"]
[ext_resource type="Texture2D" uid="uid://1yr6yruwl63u" path="res://addons/better-terrain/icons/NonModifying.svg" id="5_awp83"]

[node name="TerrainProperties" type="ConfirmationDialog"]
title = "Edit terrain properties"
initial_position = 2
size = Vector2i(317, 257)
visible = true
dialog_hide_on_ok = false
script = ExtResource("1_52nx8")

[node name="GridContainer" type="GridContainer" parent="."]
offset_left = 8.0
offset_top = 8.0
offset_right = 309.0
offset_bottom = 208.0
columns = 2

[node name="NameLabel" type="Label" parent="GridContainer"]
layout_mode = 2
text = "Name"

[node name="NameEdit" type="LineEdit" parent="GridContainer"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 3
placeholder_text = "Terrain name"

[node name="ColorLabel" type="Label" parent="GridContainer"]
layout_mode = 2
text = "Color"

[node name="ColorPicker" type="ColorPickerButton" parent="GridContainer"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 3
color = Color(1, 0.262745, 0.498039, 1)
edit_alpha = false

[node name="IconLabel" type="Label" parent="GridContainer"]
layout_mode = 2
text = "Icon"

[node name="IconEdit" type="LineEdit" parent="GridContainer"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 3
placeholder_text = "Icon path (optional)"

[node name="TypeLabel" type="Label" parent="GridContainer"]
layout_mode = 2
text = "Mode"

[node name="TypeOption" type="OptionButton" parent="GridContainer"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 3
item_count = 3
popup/item_0/text = "Match tiles"
popup/item_0/icon = ExtResource("2_ncc5p")
popup/item_1/text = "Match vertices"
popup/item_1/icon = ExtResource("3_0nvmi")
popup/item_1/id = 1
popup/item_2/text = "Category"
popup/item_2/icon = ExtResource("5_awp83")
popup/item_2/id = 2

[node name="CategoryLabel" type="Label" parent="GridContainer"]
unique_name_in_owner = true
visible = false
layout_mode = 2
size_flags_vertical = 1
text = "Categories"

[node name="CategoryContainer" type="ScrollContainer" parent="GridContainer"]
unique_name_in_owner = true
visible = false
custom_minimum_size = Vector2(0, 100)
layout_mode = 2
size_flags_vertical = 3

[node name="CategoryLayout" type="VBoxContainer" parent="GridContainer/CategoryContainer"]
unique_name_in_owner = true
custom_minimum_size = Vector2(0, 100)
layout_mode = 2
size_flags_vertical = 3

[connection signal="confirmed" from="." to="." method="_on_confirmed"]
[connection signal="item_selected" from="GridContainer/TypeOption" to="." method="_on_type_option_item_selected"]
</file>

<file path="addons/better-terrain/editor/TerrainUndo.gd">
@tool
extends Node

var action_index := 0
var action_count := 0
var _current_action_index := 0
var _current_action_count := 0

func create_tile_restore_point(undo_manager: EditorUndoRedoManager, tm: TileMapLayer, cells: Array, and_surrounding_cells: bool = true) -> void:
	if and_surrounding_cells:
		cells = BetterTerrain._widen(tm, cells)
	
	var restore := []
	for c in cells:
		restore.append([
			c,
			tm.get_cell_source_id(c),
			tm.get_cell_atlas_coords(c),
			tm.get_cell_alternative_tile(c)
		])
	
	undo_manager.add_undo_method(self, &"restore_tiles", tm, restore)


func create_tile_restore_point_area(undo_manager: EditorUndoRedoManager, tm: TileMapLayer, area: Rect2i, and_surrounding_cells: bool = true) -> void:
	area.end += Vector2i.ONE
	
	var restore := []
	for y in range(area.position.y, area.end.y):
		for x in range(area.position.x, area.end.x):
			var c := Vector2i(x, y)
			restore.append([
				c,
				tm.get_cell_source_id(c),
				tm.get_cell_atlas_coords(c),
				tm.get_cell_alternative_tile(c)
			])
	
	undo_manager.add_undo_method(self, &"restore_tiles", tm, restore)
	
	if !and_surrounding_cells:
		return
	
	var edges := []
	for x in range(area.position.x, area.end.x):
		edges.append(Vector2i(x, area.position.y))
		edges.append(Vector2i(x, area.end.y))
	for y in range(area.position.y + 1, area.end.y - 1):
		edges.append(Vector2i(area.position.x, y))
		edges.append(Vector2i(area.end.x, y))
	
	edges = BetterTerrain._widen_with_exclusion(tm, edges, area)
	create_tile_restore_point(undo_manager, tm, edges, false)


func restore_tiles(tm: TileMapLayer, restore: Array) -> void:
	for r in restore:
		tm.set_cell(r[0], r[1], r[2], r[3])


func create_peering_restore_point(undo_manager: EditorUndoRedoManager, ts: TileSet) -> void:
	var restore := []
	
	for s in ts.get_source_count():
		var source_id := ts.get_source_id(s)
		var source := ts.get_source(source_id) as TileSetAtlasSource
		if !source:
			continue
		
		for t in source.get_tiles_count():
			var coord := source.get_tile_id(t)
			for a in source.get_alternative_tiles_count(coord):
				var alternate := source.get_alternative_tile_id(coord, a)
				
				var td := source.get_tile_data(coord, alternate)
				var tile_type := BetterTerrain.get_tile_terrain_type(td)
				if tile_type == BetterTerrain.TileCategory.NON_TERRAIN:
					continue
				
				var peering_dict := {}
				for c in BetterTerrain.tile_peering_keys(td):
					peering_dict[c] = BetterTerrain.tile_peering_types(td, c)
				var symmetry = BetterTerrain.get_tile_symmetry_type(td)
				restore.append([source_id, coord, alternate, tile_type, peering_dict, symmetry])
	
	undo_manager.add_undo_method(self, &"restore_peering", ts, restore)


func create_peering_restore_point_specific(undo_manager: EditorUndoRedoManager, ts: TileSet, protect: int) -> void:
	var restore := []
	
	for s in ts.get_source_count():
		var source_id := ts.get_source_id(s)
		var source := ts.get_source(source_id) as TileSetAtlasSource
		if !source:
			continue
		
		for t in source.get_tiles_count():
			var coord := source.get_tile_id(t)
			for a in source.get_alternative_tiles_count(coord):
				var alternate := source.get_alternative_tile_id(coord, a)
				
				var td := source.get_tile_data(coord, alternate)
				var tile_type := BetterTerrain.get_tile_terrain_type(td)
				if tile_type == BetterTerrain.TileCategory.NON_TERRAIN:
					continue
				
				var to_restore : bool = tile_type == protect
				
				var terrain := BetterTerrain.get_terrain(ts, tile_type)
				var cells = BetterTerrain.data.get_terrain_peering_cells(ts, terrain.type)
				for c in cells:
					if protect in BetterTerrain.tile_peering_types(td, c):
						to_restore = true
						break
				
				if !to_restore:
					continue
				
				var peering_dict := {}
				for c in cells:
					peering_dict[c] = BetterTerrain.tile_peering_types(td, c)
				var symmetry = BetterTerrain.get_tile_symmetry_type(td)
				restore.append([source_id, coord, alternate, tile_type, peering_dict, symmetry])
	
	undo_manager.add_undo_method(self, &"restore_peering", ts, restore)


func create_peering_restore_point_tile(undo_manager: EditorUndoRedoManager, ts: TileSet, source_id: int, coord: Vector2i, alternate: int) -> void:
	var source := ts.get_source(source_id) as TileSetAtlasSource
	var td := source.get_tile_data(coord, alternate)
	var tile_type := BetterTerrain.get_tile_terrain_type(td)
	
	var restore := []
	var peering_dict := {}
	for c in BetterTerrain.tile_peering_keys(td):
		peering_dict[c] = BetterTerrain.tile_peering_types(td, c)
	var symmetry = BetterTerrain.get_tile_symmetry_type(td)
	restore.append([source_id, coord, alternate, tile_type, peering_dict, symmetry])
	
	undo_manager.add_undo_method(self, &"restore_peering", ts, restore)


func restore_peering(ts: TileSet, restore: Array) -> void:
	for r in restore:
		var source := ts.get_source(r[0]) as TileSetAtlasSource
		var td := source.get_tile_data(r[1], r[2])
		BetterTerrain.set_tile_terrain_type(ts, td, r[3])
		var peering_types = r[4]
		for peering in peering_types:
			var types := BetterTerrain.tile_peering_types(td, peering)
			for t in types:
				BetterTerrain.remove_tile_peering_type(ts, td, peering, t)
			for t in peering_types[peering]:
				BetterTerrain.add_tile_peering_type(ts, td, peering, t)
		var symmetry = r[5]
		BetterTerrain.set_tile_symmetry_type(ts, td, symmetry)


func create_terrain_type_restore_point(undo_manager: EditorUndoRedoManager, ts: TileSet) -> void:
	var count = BetterTerrain.terrain_count(ts)
	var restore = []
	for i in count:
		restore.push_back(BetterTerrain.get_terrain(ts, i))
	
	undo_manager.add_undo_method(self, &"restore_terrain", ts, restore)


func restore_terrain(ts: TileSet, restore: Array) -> void:
	for i in restore.size():
		var r = restore[i]
		BetterTerrain.set_terrain(ts, i, r.name, r.color, r.type, r.categories, r.icon)


func add_do_method(undo_manager: EditorUndoRedoManager, object:Object, method:StringName, args:Array):
	if action_index > _current_action_index:
		_current_action_index = action_index
		_current_action_count = action_count
	if action_count > _current_action_count:
		_current_action_count = action_count
	undo_manager.add_do_method(self, "_do_method", object, method, args, action_count)


func _do_method(object:Object, method:StringName, args:Array, this_action_count:int):
	if this_action_count >= _current_action_count:
		object.callv(method, args)


func finish_action():
	_current_action_count = 0
</file>

<file path="addons/better-terrain/editor/TerrainUndo.gd.uid">
uid://c4til6tumisvn
</file>

<file path="addons/better-terrain/editor/TileView.gd">
@tool
extends Control

signal paste_occurred
signal change_zoom_level(value)
signal terrain_updated(index)

@onready var checkerboard := get_theme_icon("Checkerboard", "EditorIcons")

@onready var paint_symmetry_icons := [
	null,
	preload("res://addons/better-terrain/icons/paint-symmetry/SymmetryMirror.svg"),
	preload("res://addons/better-terrain/icons/paint-symmetry/SymmetryFlip.svg"),
	preload("res://addons/better-terrain/icons/paint-symmetry/SymmetryReflect.svg"),
	preload("res://addons/better-terrain/icons/paint-symmetry/SymmetryRotateClockwise.svg"),
	preload("res://addons/better-terrain/icons/paint-symmetry/SymmetryRotateCounterClockwise.svg"),
	preload("res://addons/better-terrain/icons/paint-symmetry/SymmetryRotate180.svg"),
	preload("res://addons/better-terrain/icons/paint-symmetry/SymmetryRotateAll.svg"),
	preload("res://addons/better-terrain/icons/paint-symmetry/SymmetryAll.svg"),
]

# Draw checkerboard and tiles with specific  materials in
# individual canvas items via rendering server
var _canvas_item_map = {}
var _canvas_item_background : RID

var tileset: TileSet
var disabled_sources: Array[int] = []: set = set_disabled_sources

var paint := BetterTerrain.TileCategory.NON_TERRAIN
var paint_symmetry := BetterTerrain.SymmetryType.NONE
var highlighted_tile_part := { valid = false }
var zoom_level := 1.0

var tiles_size : Vector2
var tile_size : Vector2i
var tile_part_size : Vector2
var alternate_size : Vector2
var alternate_lookup := []
var initial_click : Vector2i
var prev_position : Vector2i
var current_position : Vector2i

var selection_start : Vector2i
var selection_end : Vector2i
var selection_rect : Rect2i
var selected_tile_states : Array[Dictionary] = []
var copied_tile_states : Array[Dictionary] = []
var staged_paste_tile_states : Array[Dictionary] = []

var pick_icon_terrain : int = -1
var pick_icon_terrain_cancel := false

var undo_manager : EditorUndoRedoManager
var terrain_undo

# Modes for painting
enum PaintMode {
	NO_PAINT,
	PAINT_TYPE,
	PAINT_PEERING,
	PAINT_SYMMETRY,
	SELECT,
	PASTE
}

var paint_mode := PaintMode.NO_PAINT

# Actual interactions for painting
enum PaintAction {
	NO_ACTION,
	DRAW_TYPE,
	ERASE_TYPE,
	DRAW_PEERING,
	ERASE_PEERING,
	DRAW_SYMMETRY,
	ERASE_SYMMETRY,
	SELECT,
	PASTE
}

var paint_action := PaintAction.NO_ACTION

const ALTERNATE_TILE_MARGIN := 18

func _enter_tree() -> void:
	_canvas_item_background = RenderingServer.canvas_item_create()
	RenderingServer.canvas_item_set_parent(_canvas_item_background, get_canvas_item())
	RenderingServer.canvas_item_set_draw_behind_parent(_canvas_item_background, true)


func _exit_tree() -> void:
	RenderingServer.free_rid(_canvas_item_background)
	for p in _canvas_item_map:
		RenderingServer.free_rid(_canvas_item_map[p])
	_canvas_item_map.clear()


func refresh_tileset(ts: TileSet) -> void:
	tileset = ts
	
	tiles_size = Vector2.ZERO
	alternate_size = Vector2.ZERO
	alternate_lookup = []
	disabled_sources = []
	
	if !tileset:
		return
	
	for s in tileset.get_source_count():
		var source_id := tileset.get_source_id(s)
		var source := tileset.get_source(source_id) as TileSetAtlasSource
		if !source or !source.texture:
			continue
		
		tiles_size.x = max(tiles_size.x, source.texture.get_width())
		tiles_size.y += source.texture.get_height()
		
		tile_size = source.texture_region_size
		tile_part_size = Vector2(tile_size) / 3.0
		
		for t in source.get_tiles_count():
			var coord := source.get_tile_id(t)
			var alt_count := source.get_alternative_tiles_count(coord)
			if alt_count <= 1:
				continue
			
			var rect := source.get_tile_texture_region(coord, 0)
			alternate_lookup.append([rect.size, source_id, coord])
			alternate_size.x = max(alternate_size.x, rect.size.x * (alt_count - 1))
			alternate_size.y += rect.size.y
	
	_on_zoom_value_changed(zoom_level)


func is_tile_in_source(source: TileSetAtlasSource, coord: Vector2i) -> bool:
	var origin := source.get_tile_at_coords(coord)
	if origin == Vector2i(-1, -1):
		return false
	
	# Animation frames are not needed
	var size := source.get_tile_size_in_atlas(origin)
	return coord.x < origin.x + size.x and coord.y < origin.y + size.y


func _build_tile_part_from_position(result: Dictionary, position: Vector2i, rect: Rect2) -> void:
	result.rect = rect
	var type := BetterTerrain.get_tile_terrain_type(result.data)
	if type == BetterTerrain.TileCategory.NON_TERRAIN:
		return
	result.terrain_type = type
	
	var normalize_position := (Vector2(position) - rect.position) / rect.size
	
	var terrain := BetterTerrain.get_terrain(tileset, type)
	if !terrain.valid:
		return
	for p in BetterTerrain.data.get_terrain_peering_cells(tileset, terrain.type):
		var side_polygon = BetterTerrain.data.peering_polygon(tileset, terrain.type, p)
		if Geometry2D.is_point_in_polygon(normalize_position, side_polygon):
			result.peering = p
			result.polygon = side_polygon
			break


func tile_part_from_position(position: Vector2i) -> Dictionary:
	if !tileset:
		return { valid = false }
	
	var offset := Vector2.ZERO
	var alt_offset := Vector2.RIGHT * (zoom_level * tiles_size.x + ALTERNATE_TILE_MARGIN)
	if Rect2(alt_offset, zoom_level * alternate_size).has_point(position):
		for a in alternate_lookup:
			if a[1] in disabled_sources:
				continue
			var next_offset_y = alt_offset.y + zoom_level * a[0].y
			if position.y > next_offset_y:
				alt_offset.y = next_offset_y
				continue
			
			var source := tileset.get_source(a[1]) as TileSetAtlasSource
			if !source:
				break
			
			var count := source.get_alternative_tiles_count(a[2])
			var index := int((position.x - alt_offset.x) / (zoom_level * a[0].x)) + 1
			
			if index < count:
				var alt_id := source.get_alternative_tile_id(a[2], index)
				var target_rect := Rect2(
					alt_offset + Vector2.RIGHT * (index - 1) * zoom_level * a[0].x,
					zoom_level * a[0]
				)
				
				var result := {
					valid = true,
					source_id = a[1],
					coord = a[2],
					alternate = alt_id,
					data = source.get_tile_data(a[2], alt_id)
				}
				_build_tile_part_from_position(result, position, target_rect)
				return result
	
	else:
		for s in tileset.get_source_count():
			var source_id := tileset.get_source_id(s)
			if source_id in disabled_sources:
				continue
			var source := tileset.get_source(source_id) as TileSetAtlasSource
			if !source || !source.texture:
				continue
			for t in source.get_tiles_count():
				var coord := source.get_tile_id(t)
				var rect := source.get_tile_texture_region(coord, 0)
				var target_rect := Rect2(offset + zoom_level * rect.position, zoom_level * rect.size)
				if !target_rect.has_point(position):
					continue
				
				var result := {
					valid = true,
					source_id = source_id,
					coord = coord,
					alternate = 0,
					data = source.get_tile_data(coord, 0)
				}
				_build_tile_part_from_position(result, position, target_rect)
				return result
			
			offset.y += zoom_level * source.texture.get_height()
	
	return { valid = false }


func tile_rect_from_position(position: Vector2i) -> Rect2:
	if !tileset:
		return Rect2(-1,-1,0,0)
	
	var offset := Vector2.ZERO
	var alt_offset := Vector2.RIGHT * (zoom_level * tiles_size.x + ALTERNATE_TILE_MARGIN)
	if Rect2(alt_offset, zoom_level * alternate_size).has_point(position):
		for a in alternate_lookup:
			if a[1] in disabled_sources:
				continue
			var next_offset_y = alt_offset.y + zoom_level * a[0].y
			if position.y > next_offset_y:
				alt_offset.y = next_offset_y
				continue
			
			var source := tileset.get_source(a[1]) as TileSetAtlasSource
			if !source:
				break
			
			var count := source.get_alternative_tiles_count(a[2])
			var index := int((position.x - alt_offset.x) / (zoom_level * a[0].x)) + 1
			
			if index < count:
				var target_rect := Rect2(
					alt_offset + Vector2.RIGHT * (index - 1) * zoom_level * a[0].x,
					zoom_level * a[0]
				)
				return target_rect
	
	else:
		for s in tileset.get_source_count():
			var source_id := tileset.get_source_id(s)
			if source_id in disabled_sources:
				continue
			var source := tileset.get_source(source_id) as TileSetAtlasSource
			if !source:
				continue
			for t in source.get_tiles_count():
				var coord := source.get_tile_id(t)
				var rect := source.get_tile_texture_region(coord, 0)
				var target_rect := Rect2(offset + zoom_level * rect.position, zoom_level * rect.size)
				if target_rect.has_point(position):
					return target_rect
			
			offset.y += zoom_level * source.texture.get_height()
	
	return Rect2(-1,-1,0,0)


func tile_parts_from_rect(rect:Rect2) -> Array[Dictionary]:
	if !tileset:
		return []
	
	var tiles:Array[Dictionary] = []
	
	var offset := Vector2.ZERO
	var alt_offset := Vector2.RIGHT * (zoom_level * tiles_size.x + ALTERNATE_TILE_MARGIN)
	for s in tileset.get_source_count():
		var source_id := tileset.get_source_id(s)
		if source_id in disabled_sources:
			continue
		var source := tileset.get_source(source_id) as TileSetAtlasSource
		if !source:
			continue
		for t in source.get_tiles_count():
			var coord := source.get_tile_id(t)
			var tile_rect := source.get_tile_texture_region(coord, 0)
			var target_rect := Rect2(offset + zoom_level * tile_rect.position, zoom_level * tile_rect.size)
			if target_rect.intersects(rect):
				var result := {
					valid = true,
					source_id = source_id,
					coord = coord,
					alternate = 0,
					data = source.get_tile_data(coord, 0)
				}
				var pos = target_rect.position + target_rect.size/2
				_build_tile_part_from_position(result, pos, target_rect)
				tiles.push_back(result)
			var alt_count := source.get_alternative_tiles_count(coord)
			for a in alt_count:
				var alt_id := 0
				if a == 0:
					continue
				
				target_rect = Rect2(alt_offset + zoom_level * (a - 1) * tile_rect.size.x * Vector2.RIGHT, zoom_level * tile_rect.size)
				alt_id = source.get_alternative_tile_id(coord, a)
				if target_rect.intersects(rect):
					var td := source.get_tile_data(coord, alt_id)
					var result := {
						valid = true,
						source_id = source_id,
						coord = coord,
						alternate = alt_id,
						data = td
					}
					var pos = target_rect.position + target_rect.size/2
					_build_tile_part_from_position(result, pos, target_rect)
					tiles.push_back(result)
			if alt_count > 1:
				alt_offset.y += zoom_level * tile_rect.size.y
		
		offset.y += zoom_level * source.texture.get_height()
	
	return tiles


func _get_canvas_item(td: TileData) -> RID:
	if !td.material:
		return self.get_canvas_item()
	if _canvas_item_map.has(td.material):
		return _canvas_item_map[td.material]
	
	var rid = RenderingServer.canvas_item_create()
	RenderingServer.canvas_item_set_material(rid, td.material.get_rid())
	RenderingServer.canvas_item_set_parent(rid, get_canvas_item())
	RenderingServer.canvas_item_set_draw_behind_parent(rid, true)
	RenderingServer.canvas_item_set_default_texture_filter(rid, RenderingServer.CANVAS_ITEM_TEXTURE_FILTER_NEAREST)
	_canvas_item_map[td.material] = rid
	return rid


func _draw_tile_data(texture: Texture2D, rect: Rect2, src_rect: Rect2, td: TileData, draw_sides: bool = true) -> void:
	var flipped_rect := rect
	if td.flip_h:
		flipped_rect.size.x = -rect.size.x
	if td.flip_v:
		flipped_rect.size.y = -rect.size.y
	
	RenderingServer.canvas_item_add_texture_rect_region(
		_get_canvas_item(td),
		flipped_rect,
		texture.get_rid(),
		src_rect,
		td.modulate,
		td.transpose
	)
	
	var type := BetterTerrain.get_tile_terrain_type(td)
	if type == BetterTerrain.TileCategory.NON_TERRAIN:
		draw_rect(rect, Color(0.1, 0.1, 0.1, 0.5), true)
		return
	
	var terrain := BetterTerrain.get_terrain(tileset, type)
	if !terrain.valid:
		return
	
	var transform := Transform2D(0.0, rect.size, 0.0, rect.position)
	var center_polygon = transform * BetterTerrain.data.peering_polygon(tileset, terrain.type, -1)
	draw_colored_polygon(center_polygon, Color(terrain.color, 0.6))
	if terrain.type == BetterTerrain.TerrainType.DECORATION:
		center_polygon.append(center_polygon[0])
		draw_polyline(center_polygon, Color.BLACK)
	
	if paint < BetterTerrain.TileCategory.EMPTY or paint >= BetterTerrain.terrain_count(tileset):
		return
	
	if not draw_sides:
		return
	
	var paint_terrain := BetterTerrain.get_terrain(tileset, paint)
	for p in BetterTerrain.data.get_terrain_peering_cells(tileset, terrain.type):
		if paint in BetterTerrain.tile_peering_types(td, p):
			var side_polygon = transform * BetterTerrain.data.peering_polygon(tileset, terrain.type, p)
			draw_colored_polygon(side_polygon, Color(paint_terrain.color, 0.6))
			if paint_terrain.type == BetterTerrain.TerrainType.DECORATION:
				side_polygon.append(side_polygon[0])
				draw_polyline(side_polygon, Color.BLACK)


func _draw_tile_symmetry(texture: Texture2D, rect: Rect2, src_rect: Rect2, td: TileData, draw_icon: bool = true) -> void:
	var flipped_rect := rect
	if td.flip_h:
		flipped_rect.size.x = -rect.size.x
	if td.flip_v:
		flipped_rect.size.y = -rect.size.y
	
	RenderingServer.canvas_item_add_texture_rect_region(
		_get_canvas_item(td),
		flipped_rect,
		texture.get_rid(),
		src_rect,
		td.modulate,
		td.transpose
	)
	
	if not draw_icon:
		return
	
	var symmetry_type = BetterTerrain.get_tile_symmetry_type(td)
	if symmetry_type == 0:
		return
	var symmetry_icon = paint_symmetry_icons[symmetry_type]
	
	RenderingServer.canvas_item_add_texture_rect_region(
		_get_canvas_item(td),
		rect,
		symmetry_icon.get_rid(),
		Rect2(Vector2.ZERO, symmetry_icon.get_size()),
		Color(1,1,1,0.5)
	)


func _draw() -> void:
	if !tileset:
		return
	
	# Clear material-based render targets
	RenderingServer.canvas_item_clear(_canvas_item_background)
	for p in _canvas_item_map:
		RenderingServer.canvas_item_clear(_canvas_item_map[p])
	
	var offset := Vector2.ZERO
	var alt_offset := Vector2.RIGHT * (zoom_level * tiles_size.x + ALTERNATE_TILE_MARGIN)
	
	RenderingServer.canvas_item_add_texture_rect(
		_canvas_item_background,
		Rect2(alt_offset, zoom_level * alternate_size),
		checkerboard.get_rid(),
		true
	)
	
	for s in tileset.get_source_count():
		var source_id := tileset.get_source_id(s)
		if source_id in disabled_sources:
			continue
		var source := tileset.get_source(source_id) as TileSetAtlasSource
		if !source or !source.texture:
			continue
		
		RenderingServer.canvas_item_add_texture_rect(
			_canvas_item_background,
			Rect2(offset, zoom_level * source.texture.get_size()),
			checkerboard.get_rid(),
			true
		)
		for t in source.get_tiles_count():
			var coord := source.get_tile_id(t)
			var rect := source.get_tile_texture_region(coord, 0)
			var alt_count := source.get_alternative_tiles_count(coord)
			var target_rect : Rect2
			for a in alt_count:
				var alt_id := 0
				if a == 0:
					target_rect = Rect2(offset + zoom_level * rect.position, zoom_level * rect.size)
				else:
					target_rect = Rect2(alt_offset + zoom_level * (a - 1) * rect.size.x * Vector2.RIGHT, zoom_level * rect.size)
					alt_id = source.get_alternative_tile_id(coord, a)
				
				var td := source.get_tile_data(coord, alt_id)
				var drawing_current = BetterTerrain.get_tile_terrain_type(td) == paint
				if paint_mode == PaintMode.PAINT_SYMMETRY:
					_draw_tile_symmetry(source.texture, target_rect, rect, td, drawing_current)
				else:
					_draw_tile_data(source.texture, target_rect, rect, td)
				
				if drawing_current:
					draw_rect(target_rect.grow(-1), Color(0,0,0, 0.75), false, 1)
					draw_rect(target_rect, Color(1,1,1, 0.75), false, 1)
				
				if paint_mode == PaintMode.SELECT:
					if selected_tile_states.any(func(v):
						return v.part.data == td
						):
						draw_rect(target_rect.grow(-1), Color.DEEP_SKY_BLUE, false, 2)
			
			if alt_count > 1:
				alt_offset.y += zoom_level * rect.size.y
		
		# Blank out unused or uninteresting tiles
		var size := source.get_atlas_grid_size()
		for y in size.y:
			for x in size.x:
				var pos := Vector2i(x, y)
				if !is_tile_in_source(source, pos):
					var atlas_pos := source.margins + pos * (source.separation + source.texture_region_size)
					draw_rect(Rect2(offset + zoom_level * atlas_pos, zoom_level * source.texture_region_size), Color(0.0, 0.0, 0.0, 0.8), true)
		
		offset.y += zoom_level * source.texture.get_height()
	
	# Blank out unused alternate tile sections
	alt_offset = Vector2.RIGHT * (zoom_level * tiles_size.x + ALTERNATE_TILE_MARGIN)
	for a in alternate_lookup:
		if a[1] in disabled_sources:
			continue
		var source := tileset.get_source(a[1]) as TileSetAtlasSource
		if source:
			var count := source.get_alternative_tiles_count(a[2]) - 1
			var occupied_width = count * zoom_level * a[0].x
			var area := Rect2(
				alt_offset.x + occupied_width,
				alt_offset.y,
				zoom_level * alternate_size.x - occupied_width,
				zoom_level * a[0].y
			)
			draw_rect(area, Color(0.0, 0.0, 0.0, 0.8), true)
		alt_offset.y += zoom_level * a[0].y
	
	if highlighted_tile_part.valid:
		if paint_mode == PaintMode.PAINT_PEERING and highlighted_tile_part.has("polygon"):
			var transform := Transform2D(0.0, highlighted_tile_part.rect.size - 2 * Vector2.ONE, 0.0, highlighted_tile_part.rect.position + Vector2.ONE)
			draw_colored_polygon(transform * highlighted_tile_part.polygon, Color(Color.WHITE, 0.2))
		if paint_mode != PaintMode.NO_PAINT:
			var inner_rect := Rect2(highlighted_tile_part.rect.position + Vector2.ONE, highlighted_tile_part.rect.size - 2 * Vector2.ONE) 
			draw_rect(inner_rect, Color.WHITE, false)
		if paint_mode == PaintMode.PAINT_SYMMETRY:
			if paint_symmetry > 0:
				var symmetry_icon = paint_symmetry_icons[paint_symmetry]
				draw_texture_rect(symmetry_icon, highlighted_tile_part.rect, false, Color(0.5,0.75,1,0.5))
	
	if paint_mode == PaintMode.SELECT:
		draw_rect(selection_rect, Color.WHITE, false)
	
	if paint_mode == PaintMode.PASTE:
		if staged_paste_tile_states.size() > 0:
			var base_rect = staged_paste_tile_states[0].base_rect
			var paint_terrain := BetterTerrain.get_terrain(tileset, paint)
			var paint_terrain_type = paint_terrain.type
			if paint_terrain_type == BetterTerrain.TerrainType.CATEGORY:
				paint_terrain_type = 0
			for state in staged_paste_tile_states:
				var staged_rect:Rect2 = state.base_rect
				staged_rect.position -= base_rect.position + base_rect.size / 2
				
				staged_rect.position *= zoom_level
				staged_rect.size *= zoom_level
				
				staged_rect.position += Vector2(current_position)
				
				var real_rect = tile_rect_from_position(staged_rect.get_center())
				if real_rect.position.x >= 0:
					draw_rect(real_rect, Color(0,0,0, 0.3), true)
					var transform := Transform2D(0.0, real_rect.size, 0.0, real_rect.position)
					var tile_sides = BetterTerrain.data.get_terrain_peering_cells(tileset, paint_terrain_type)
					for p in tile_sides:
						if state.paint in BetterTerrain.tile_peering_types(state.part.data, p):
							var side_polygon = BetterTerrain.data.peering_polygon(tileset, paint_terrain_type, p)
							var color = Color(paint_terrain.color, 0.6)
							draw_colored_polygon(transform * side_polygon, color)
				
				draw_rect(staged_rect, Color.DEEP_PINK, false)
	


func delete_selection():
	undo_manager.create_action("Delete tile terrain peering types", UndoRedo.MERGE_DISABLE, tileset)
	for t in selected_tile_states:
		for side in range(16):
			var old_peering = BetterTerrain.tile_peering_types(t.part.data, side)
			if old_peering.has(paint):
				undo_manager.add_do_method(BetterTerrain, &"remove_tile_peering_type", tileset, t.part.data, side, paint)
				undo_manager.add_undo_method(BetterTerrain, &"add_tile_peering_type", tileset, t.part.data, side, paint)
	
	undo_manager.add_do_method(self, &"queue_redraw")
	undo_manager.add_undo_method(self, &"queue_redraw")
	undo_manager.commit_action()


func toggle_selection():
	undo_manager.create_action("Toggle tile terrain", UndoRedo.MERGE_DISABLE, tileset, true)
	for t in selected_tile_states:
		var type := BetterTerrain.get_tile_terrain_type(t.part.data)
		var goal := paint if paint != type else BetterTerrain.TileCategory.NON_TERRAIN
		
		terrain_undo.add_do_method(undo_manager, BetterTerrain, &"set_tile_terrain_type", [tileset, t.part.data, goal])
		if goal == BetterTerrain.TileCategory.NON_TERRAIN:
			terrain_undo.create_peering_restore_point_tile(
				undo_manager,
				tileset,
				t.part.source_id,
				t.part.coord,
				t.part.alternate
			)
		else:
			undo_manager.add_undo_method(BetterTerrain, &"set_tile_terrain_type", tileset, t.part.data, type)
	
	terrain_undo.add_do_method(undo_manager, self, &"queue_redraw", [])
	undo_manager.add_undo_method(self, &"queue_redraw")
	undo_manager.commit_action()
	terrain_undo.action_count += 1


func copy_selection():
	copied_tile_states = selected_tile_states


func paste_selection():
	staged_paste_tile_states = copied_tile_states
	selected_tile_states = []
	paint_mode = PaintMode.PASTE
	paint_action = PaintAction.PASTE
	paste_occurred.emit()
	queue_redraw()


func set_disabled_sources(list):
	disabled_sources = list
	queue_redraw()


func emit_terrain_updated(index):
	terrain_updated.emit(index)


func _gui_input(event) -> void:
	if event is InputEventKey and event.is_pressed():
		if event.keycode == KEY_DELETE and not event.echo:
			accept_event()
			delete_selection()
		if event.keycode == KEY_ENTER and not event.echo:
			accept_event()
			toggle_selection()
		if event.keycode == KEY_ESCAPE and not event.echo:
			accept_event()
			if paint_action == PaintAction.PASTE:
				staged_paste_tile_states = []
				paint_mode = PaintMode.SELECT
				paint_action = PaintAction.NO_ACTION
				selection_start = Vector2i(-1,-1)
		if event.keycode == KEY_C and (event.ctrl_pressed or event.meta_pressed) and not event.echo:
			accept_event()
			copy_selection()
		if event.keycode == KEY_X and (event.ctrl_pressed or event.meta_pressed) and not event.echo:
			accept_event()
			copy_selection()
			delete_selection()
		if event.keycode == KEY_V and (event.ctrl_pressed or event.meta_pressed) and not event.echo:
			accept_event()
			paste_selection()
	if event is InputEventMouseButton:
		if event.button_index == MOUSE_BUTTON_WHEEL_UP and (event.ctrl_pressed or event.meta_pressed):
			accept_event()
			change_zoom_level.emit(zoom_level * 1.1)
		if event.button_index == MOUSE_BUTTON_WHEEL_DOWN and (event.ctrl_pressed or event.meta_pressed):
			accept_event()
			change_zoom_level.emit(zoom_level / 1.1)
	
	var released : bool = event is InputEventMouseButton and (not event.pressed and (event.button_index == MOUSE_BUTTON_LEFT or event.button_index == MOUSE_BUTTON_RIGHT))
	if released:
		paint_action = PaintAction.NO_ACTION
	
	if event is InputEventMouseMotion:
		prev_position = current_position
		current_position = event.position
		var tile := tile_part_from_position(event.position)
		if tile.valid != highlighted_tile_part.valid or\
			(tile.valid and tile.data != highlighted_tile_part.data) or\
			(tile.valid and tile.get("peering") != highlighted_tile_part.get("peering")) or\
			event.button_mask & MOUSE_BUTTON_LEFT and paint_action == PaintAction.SELECT:
			queue_redraw()
		highlighted_tile_part = tile
	
	var clicked : bool = event is InputEventMouseButton and (event.pressed and (event.button_index == MOUSE_BUTTON_LEFT or event.button_index == MOUSE_BUTTON_RIGHT))
	if clicked:
		initial_click = current_position
		selection_start = Vector2i(-1,-1)
		terrain_undo.action_index += 1
		terrain_undo.action_count = 0
	if released:
		terrain_undo.finish_action()
		selection_rect = Rect2i(0,0,0,0)
		queue_redraw()
	
	if paint_action == PaintAction.PASTE:
		if event is InputEventMouseMotion:
			queue_redraw()
		
		if clicked:
			if event.button_index == MOUSE_BUTTON_LEFT and staged_paste_tile_states.size() > 0:
				undo_manager.create_action("Paste tile terrain peering types", UndoRedo.MERGE_DISABLE, tileset)
				var base_rect = staged_paste_tile_states[0].base_rect
				for p in staged_paste_tile_states:
					var staged_rect:Rect2 = p.base_rect
					staged_rect.position -= base_rect.position + base_rect.size / 2
					
					staged_rect.position *= zoom_level
					staged_rect.size *= zoom_level
					
					staged_rect.position += Vector2(current_position)
					
					var old_tile_part = tile_part_from_position(staged_rect.get_center())
					var new_tile_state = p
					if (not old_tile_part.valid) or (not new_tile_state.part.valid):
						continue
					
					for side in range(16):
						var old_peering = BetterTerrain.tile_peering_types(old_tile_part.data, side)
						var new_sides = new_tile_state.sides
						if new_sides.has(side) and not old_peering.has(paint):
							undo_manager.add_do_method(BetterTerrain, &"add_tile_peering_type", tileset, old_tile_part.data, side, paint)
							undo_manager.add_undo_method(BetterTerrain, &"remove_tile_peering_type", tileset, old_tile_part.data, side, paint)
						elif old_peering.has(paint) and not new_sides.has(side):
							undo_manager.add_do_method(BetterTerrain, &"remove_tile_peering_type", tileset, old_tile_part.data, side, paint)
							undo_manager.add_undo_method(BetterTerrain, &"add_tile_peering_type", tileset, old_tile_part.data, side, paint)
					
					var old_symmetry = BetterTerrain.get_tile_symmetry_type(old_tile_part.data)
					var new_symmetry = new_tile_state.symmetry
					if new_symmetry != old_symmetry:
						undo_manager.add_do_method(BetterTerrain, &"set_tile_symmetry_type", tileset, old_tile_part.data, new_symmetry)
						undo_manager.add_undo_method(BetterTerrain, &"set_tile_symmetry_type", tileset, old_tile_part.data, old_symmetry)
					
				undo_manager.add_do_method(self, &"queue_redraw")
				undo_manager.add_undo_method(self, &"queue_redraw")
				undo_manager.commit_action()
			
			staged_paste_tile_states = []
			paint_mode = PaintMode.SELECT
			paint_action = PaintAction.SELECT
		return
	
	if clicked and pick_icon_terrain >= 0:
		highlighted_tile_part = tile_part_from_position(current_position)
		if !highlighted_tile_part.valid:
			return
		
		var t = BetterTerrain.get_terrain(tileset, paint)
		var prev_icon = t.icon.duplicate()
		var icon = {
			source_id = highlighted_tile_part.source_id,
			coord = highlighted_tile_part.coord
		}
		undo_manager.create_action("Edit terrain details", UndoRedo.MERGE_DISABLE, tileset)
		undo_manager.add_do_method(BetterTerrain, &"set_terrain", tileset, paint, t.name, t.color, t.type, t.categories, icon)
		undo_manager.add_do_method(self, &"emit_terrain_updated", paint)
		undo_manager.add_undo_method(BetterTerrain, &"set_terrain", tileset, paint, t.name, t.color, t.type, t.categories, prev_icon)
		undo_manager.add_undo_method(self, &"emit_terrain_updated", paint)
		undo_manager.commit_action()
		pick_icon_terrain = -1
		return
	
	if pick_icon_terrain_cancel:
		pick_icon_terrain = -1
		pick_icon_terrain_cancel = false
	
	if paint != BetterTerrain.TileCategory.NON_TERRAIN and clicked:
		paint_action = PaintAction.NO_ACTION
		if highlighted_tile_part.valid:
			match [paint_mode, event.button_index]:
				[PaintMode.PAINT_TYPE, MOUSE_BUTTON_LEFT]: paint_action = PaintAction.DRAW_TYPE
				[PaintMode.PAINT_TYPE, MOUSE_BUTTON_RIGHT]: paint_action = PaintAction.ERASE_TYPE
				[PaintMode.PAINT_PEERING, MOUSE_BUTTON_LEFT]: paint_action = PaintAction.DRAW_PEERING
				[PaintMode.PAINT_PEERING, MOUSE_BUTTON_RIGHT]: paint_action = PaintAction.ERASE_PEERING
				[PaintMode.PAINT_SYMMETRY, MOUSE_BUTTON_LEFT]: paint_action = PaintAction.DRAW_SYMMETRY
				[PaintMode.PAINT_SYMMETRY, MOUSE_BUTTON_RIGHT]: paint_action = PaintAction.ERASE_SYMMETRY
				[PaintMode.SELECT, MOUSE_BUTTON_LEFT]: paint_action = PaintAction.SELECT
		else:
			match [paint_mode, event.button_index]:
				[PaintMode.SELECT, MOUSE_BUTTON_LEFT]: paint_action = PaintAction.SELECT
	
	if (clicked or event is InputEventMouseMotion) and paint_action != PaintAction.NO_ACTION:
		
		if paint_action == PaintAction.SELECT:
			if clicked:
				selection_start = Vector2i(-1,-1)
				queue_redraw()
			if selection_start.x < 0:
				selection_start = current_position
			selection_end = current_position
			
			selection_rect = Rect2i(selection_start, selection_end - selection_start).abs()
			var selected_tile_parts = tile_parts_from_rect(selection_rect)
			selected_tile_states = []
			for t in selected_tile_parts:
				var state := {
					part = t,
					base_rect = Rect2(t.rect.position / zoom_level, t.rect.size / zoom_level),
					paint = paint,
					sides = BetterTerrain.tile_peering_for_type(t.data, paint),
					symmetry = BetterTerrain.get_tile_symmetry_type(t.data)
				}
				selected_tile_states.push_back(state)
		else:
			if !highlighted_tile_part.valid:
				return
			#slightly crude and non-optimal but way simpler than the "correct" solution
			var current_position_vec2 = Vector2(current_position)
			var prev_position_vec2 = Vector2(prev_position)
			var mouse_dist = current_position_vec2.distance_to(prev_position_vec2)
			var step_size = (tile_part_size.x * zoom_level)
			var steps = ceil(mouse_dist / step_size) + 1
			for i in range(steps):
				var t = float(i) / steps 
				var check_position = prev_position_vec2.lerp(current_position_vec2, t)
				highlighted_tile_part = tile_part_from_position(check_position)
			
				if !highlighted_tile_part.valid:
					continue
				
				if paint_action == PaintAction.DRAW_TYPE or paint_action == PaintAction.ERASE_TYPE:
					var type := BetterTerrain.get_tile_terrain_type(highlighted_tile_part.data)
					var goal := paint if paint_action == PaintAction.DRAW_TYPE else BetterTerrain.TileCategory.NON_TERRAIN
					if type != goal:
						undo_manager.create_action("Set tile terrain type " + str(terrain_undo.action_index), UndoRedo.MERGE_ALL, tileset, true)
						terrain_undo.add_do_method(undo_manager, BetterTerrain, &"set_tile_terrain_type", [tileset, highlighted_tile_part.data, goal])
						terrain_undo.add_do_method(undo_manager, self, &"queue_redraw", [])
						if goal == BetterTerrain.TileCategory.NON_TERRAIN:
							terrain_undo.create_peering_restore_point_tile(
								undo_manager,
								tileset,
								highlighted_tile_part.source_id,
								highlighted_tile_part.coord,
								highlighted_tile_part.alternate
							)
						else:
							undo_manager.add_undo_method(BetterTerrain, &"set_tile_terrain_type", tileset, highlighted_tile_part.data, type)
						undo_manager.add_undo_method(self, &"queue_redraw")
						undo_manager.commit_action()
						terrain_undo.action_count += 1
				elif paint_action == PaintAction.DRAW_PEERING:
					if highlighted_tile_part.has("peering"):
						if !(paint in BetterTerrain.tile_peering_types(highlighted_tile_part.data, highlighted_tile_part.peering)):
							undo_manager.create_action("Set tile terrain peering type " + str(terrain_undo.action_index), UndoRedo.MERGE_ALL, tileset, true)
							terrain_undo.add_do_method(undo_manager, BetterTerrain, &"add_tile_peering_type", [tileset, highlighted_tile_part.data, highlighted_tile_part.peering, paint])
							terrain_undo.add_do_method(undo_manager, self, &"queue_redraw", [])
							undo_manager.add_undo_method(BetterTerrain, &"remove_tile_peering_type", tileset, highlighted_tile_part.data, highlighted_tile_part.peering, paint)
							undo_manager.add_undo_method(self, &"queue_redraw")
							undo_manager.commit_action()
							terrain_undo.action_count += 1
				elif paint_action == PaintAction.ERASE_PEERING:
					if highlighted_tile_part.has("peering"):
						if paint in BetterTerrain.tile_peering_types(highlighted_tile_part.data, highlighted_tile_part.peering):
							undo_manager.create_action("Remove tile terrain peering type " + str(terrain_undo.action_index), UndoRedo.MERGE_ALL, tileset, true)
							terrain_undo.add_do_method(undo_manager, BetterTerrain, &"remove_tile_peering_type", [tileset, highlighted_tile_part.data, highlighted_tile_part.peering, paint])
							terrain_undo.add_do_method(undo_manager, self, &"queue_redraw", [])
							undo_manager.add_undo_method(BetterTerrain, &"add_tile_peering_type", tileset, highlighted_tile_part.data, highlighted_tile_part.peering, paint)
							undo_manager.add_undo_method(self, &"queue_redraw")
							undo_manager.commit_action()
							terrain_undo.action_count += 1
				elif paint_action == PaintAction.DRAW_SYMMETRY:
					if paint == BetterTerrain.get_tile_terrain_type(highlighted_tile_part.data):
						undo_manager.create_action("Set tile symmetry type " + str(terrain_undo.action_index), UndoRedo.MERGE_ALL, tileset, true)
						var old_symmetry = BetterTerrain.get_tile_symmetry_type(highlighted_tile_part.data)
						terrain_undo.add_do_method(undo_manager, BetterTerrain, &"set_tile_symmetry_type", [tileset, highlighted_tile_part.data, paint_symmetry])
						terrain_undo.add_do_method(undo_manager, self, &"queue_redraw", [])
						undo_manager.add_undo_method(BetterTerrain, &"set_tile_symmetry_type", tileset, highlighted_tile_part.data, old_symmetry)
						undo_manager.add_undo_method(self, &"queue_redraw")
						undo_manager.commit_action()
						terrain_undo.action_count += 1
				elif paint_action == PaintAction.ERASE_SYMMETRY:
					if paint == BetterTerrain.get_tile_terrain_type(highlighted_tile_part.data):
						undo_manager.create_action("Remove tile symmetry type " + str(terrain_undo.action_index), UndoRedo.MERGE_ALL, tileset, true)
						var old_symmetry = BetterTerrain.get_tile_symmetry_type(highlighted_tile_part.data)
						terrain_undo.add_do_method(undo_manager, BetterTerrain, &"set_tile_symmetry_type", [tileset, highlighted_tile_part.data, BetterTerrain.SymmetryType.NONE])
						terrain_undo.add_do_method(undo_manager, self, &"queue_redraw", [])
						undo_manager.add_undo_method(BetterTerrain, &"set_tile_symmetry_type", tileset, highlighted_tile_part.data, old_symmetry)
						undo_manager.add_undo_method(self, &"queue_redraw")
						undo_manager.commit_action()
						terrain_undo.action_count += 1


func _on_zoom_value_changed(value) -> void:
	zoom_level = value
	custom_minimum_size.x = zoom_level * tiles_size.x
	if alternate_size.x > 0:
		custom_minimum_size.x += ALTERNATE_TILE_MARGIN + zoom_level * alternate_size.x
	custom_minimum_size.y = zoom_level * max(tiles_size.y, alternate_size.y)
	queue_redraw()


func clear_highlighted_tile() -> void:
	highlighted_tile_part = { valid = false }
	queue_redraw()
</file>

<file path="addons/better-terrain/editor/TileView.gd.uid">
uid://bnpxxnrfdoqg2
</file>

<file path="addons/better-terrain/icon.svg">
<svg height="128" width="128" xmlns="http://www.w3.org/2000/svg"><path d="m83.636719 67.794922a20 20 0 0 1 -15.636719 15.800781v44.404297h40c11.08 0 20-8.92 20-20v-40.205078z" fill="#169318"/><path d="m0 67.794922v40.205078c0 11.08 8.92 20 20 20h40v-44.404297a20 20 0 0 1 -15.636719-15.800781z" fill="#993d16"/><path d="m68 0v44.404297a20 20 0 0 1 15.552734 15.390625h44.447266v-39.794922c0-11.08-8.92-20-20-20z" fill="#993d16"/><path d="m20 0c-11.08 0-20 8.92-20 20v39.794922h44.447266a20 20 0 0 1 15.552734-15.390625v-44.404297z" fill="#169318"/></svg>
</file>

<file path="addons/better-terrain/icon.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://c66nal373iwgd"
path="res://.godot/imported/icon.svg-7d4870855c0daec5051feb4adbea0091.ctex"
metadata={
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icon.svg"
dest_files=["res://.godot/imported/icon.svg-7d4870855c0daec5051feb4adbea0091.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=1.0
editor/scale_with_editor_scale=false
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/Decoration.svg">
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect x="6" y="6" width="4" height="4" fill="white"/>
<path d="M4.5 6.5L1.5 9.5M1.5 6.5L4.5 9.5" stroke="white" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M14.5 6.5L11.5 9.5M11.5 6.5L14.5 9.5" stroke="white" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M9.5 1.5L6.5 4.5M6.5 1.5L9.5 4.5" stroke="white" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M9.5 11.5L6.5 14.5M6.5 11.5L9.5 14.5" stroke="white" stroke-linecap="round" stroke-linejoin="round"/>
</svg>
</file>

<file path="addons/better-terrain/icons/Decoration.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://kmypxsqhynyv"
path="res://.godot/imported/Decoration.svg-03773e83cc849c7744ecf3d36eee0072.ctex"
metadata={
"has_editor_variant": true,
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/Decoration.svg"
dest_files=["res://.godot/imported/Decoration.svg-03773e83cc849c7744ecf3d36eee0072.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=1.0
editor/scale_with_editor_scale=true
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/EditSymmetry.svg">
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_952_3274)">
<path d="M8.68988 11.1648L12.7626 15.2375C13.446 15.9209 14.554 15.9209 15.2374 15.2375C15.9208 14.5541 15.9208 13.446 15.2374 12.7626L11.1648 8.68994C10.5815 9.72354 9.72348 10.5815 8.68988 11.1648Z" fill="#E0E0E0"/>
<path d="M11 1C11 0.447715 10.5523 0 10 0H7C6.44772 0 6 0.447715 6 1V4C6 4.55228 6.44772 5 7 5C7.55228 5 8 4.55228 8 4V3.05033C8.61889 3.68203 9 4.54703 9 5.50004C9 7.26328 7.69615 8.72198 6 8.96459V10.9776C8.80325 10.725 11 8.36906 11 5.50004C11 4.16979 10.5279 2.95059 9.74266 2H10C10.5523 2 11 1.55228 11 1Z" fill="#E0E0E0"/>
<path d="M0 10C0 10.5523 0.447715 11 1 11H4C4.55228 11 5 10.5523 5 10V7C5 6.44772 4.55228 6 4 6C3.44772 6 3 6.44772 3 7V7.94975C2.38111 7.31805 2 6.45305 2 5.50004C2 3.7368 3.30385 2.2781 5 2.03548V0.0224609C2.19675 0.275075 0 2.63102 0 5.50004C0 6.83026 0.472062 8.04943 1.25727 9H1C0.447715 9 0 9.44771 0 10Z" fill="#E0E0E0"/>
</g>
<defs>
<clipPath id="clip0_952_3274">
<rect width="16" height="16" fill="white"/>
</clipPath>
</defs>
</svg>
</file>

<file path="addons/better-terrain/icons/EditSymmetry.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://co6gwwmog0pjy"
path="res://.godot/imported/EditSymmetry.svg-794172208a8d86bb609531b82199f095.ctex"
metadata={
"has_editor_variant": true,
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/EditSymmetry.svg"
dest_files=["res://.godot/imported/EditSymmetry.svg-794172208a8d86bb609531b82199f095.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=1.0
editor/scale_with_editor_scale=true
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/EditTerrain.svg">
<svg height="16" viewBox="0 0 16 16" width="16" xmlns="http://www.w3.org/2000/svg"><path d="m1 1v14h14v-14zm1 1h12v12h-12zm1 1v2.6660156h2.6660156v-2.6660156zm3.6679688 0v2.6660156h2.6640624v-2.6660156zm3.6660152 0v2.6660156h2.666016v-2.6660156zm-7.333984 3.6660156v2.6660156h2.6660156v-2.6660156zm7.333984 0v2.6660156h2.666016v-2.6660156zm-7.333984 3.6679684v2.666016h2.6660156v-2.666016zm3.6679688 0v2.666016h2.6640624v-2.666016zm3.6660152 0v2.666016h2.666016v-2.666016z" fill="#e0e0e0"/></svg>
</file>

<file path="addons/better-terrain/icons/EditTerrain.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://bo2cjv08jkvf8"
path="res://.godot/imported/EditTerrain.svg-f7ee950d68a391de33e4e8ddd76bf2ac.ctex"
metadata={
"has_editor_variant": true,
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/EditTerrain.svg"
dest_files=["res://.godot/imported/EditTerrain.svg-f7ee950d68a391de33e4e8ddd76bf2ac.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=1.0
editor/scale_with_editor_scale=true
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/EditType.svg">
<svg height="16" viewBox="0 0 16 16" width="16" xmlns="http://www.w3.org/2000/svg"><path d="m1 1v14h14v-14zm1 1h12v12h-12zm4.6679688 4.6660156v2.6660156h2.6640624v-2.6660156z" fill="#e0e0e0"/></svg>
</file>

<file path="addons/better-terrain/icons/EditType.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://c6lxq2y7mpb18"
path="res://.godot/imported/EditType.svg-e7b3005c6a8f21d5102295c55b564ad1.ctex"
metadata={
"has_editor_variant": true,
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/EditType.svg"
dest_files=["res://.godot/imported/EditType.svg-e7b3005c6a8f21d5102295c55b564ad1.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=1.0
editor/scale_with_editor_scale=true
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/MatchTiles.svg">
<svg height="16" viewBox="0 0 16 16" width="16" xmlns="http://www.w3.org/2000/svg"><path d="m1 1v4h4v-4zm5 0v4h4v-4zm5 0v4h4v-4zm-10 5v4h4v-4zm5 0v4h4v-4zm5 0v4h4v-4zm-10 5v4h4v-4zm5 0v4h4v-4zm5 0v4h4v-4z" fill="#fff" stroke-linecap="round" stroke-linejoin="round" stroke-width="7.55906"/></svg>
</file>

<file path="addons/better-terrain/icons/MatchTiles.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://d1h1p7pcwdnjk"
path="res://.godot/imported/MatchTiles.svg-38111e21a893bd8f161311f0d1968a40.ctex"
metadata={
"has_editor_variant": true,
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/MatchTiles.svg"
dest_files=["res://.godot/imported/MatchTiles.svg-38111e21a893bd8f161311f0d1968a40.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=1.0
editor/scale_with_editor_scale=true
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/MatchVertices.svg">
<svg height="16" viewBox="0 0 16 16" width="16" xmlns="http://www.w3.org/2000/svg"><path d="m1 1v6l6-6zm8 0 6 6v-6zm-1 1-6 6 6 6 6-6zm-7 7v6h6zm14 0-6 6h6z" fill="#fff" stroke-width="3.77952"/></svg>
</file>

<file path="addons/better-terrain/icons/MatchVertices.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://dfemy1g6okwlv"
path="res://.godot/imported/MatchVertices.svg-288fe47ee1089920379407d6abf1a06c.ctex"
metadata={
"has_editor_variant": true,
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/MatchVertices.svg"
dest_files=["res://.godot/imported/MatchVertices.svg-288fe47ee1089920379407d6abf1a06c.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=1.0
editor/scale_with_editor_scale=true
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/NonModifying.svg">
<svg height="16" viewBox="0 0 16 16" width="16" xmlns="http://www.w3.org/2000/svg"><path d="m3 1-2 2v10l2 2h10l2-2v-10l-2-2zm2.1992188 3.171875a1 1 0 0 1 .6796874.2929688l2.1210938 2.1210937 2.121094-2.1210937a1 1 0 0 1 1.414062 0 1 1 0 0 1 0 1.4140624l-2.1210935 2.1210938 2.1210935 2.121094a1 1 0 0 1 0 1.414062 1 1 0 0 1 -1.414062 0l-2.121094-2.1210935-2.1210938 2.1210935a1 1 0 0 1 -1.4140624 0 1 1 0 0 1 0-1.414062l2.1210937-2.121094-2.1210937-2.1210938a1 1 0 0 1 0-1.4140624 1 1 0 0 1 .734375-.2929688z" fill="#fffaff"/></svg>
</file>

<file path="addons/better-terrain/icons/NonModifying.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://1yr6yruwl63u"
path="res://.godot/imported/NonModifying.svg-4d16d471be4a8f1d3ba0c013ff629ee1.ctex"
metadata={
"has_editor_variant": true,
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/NonModifying.svg"
dest_files=["res://.godot/imported/NonModifying.svg-4d16d471be4a8f1d3ba0c013ff629ee1.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=1.0
editor/scale_with_editor_scale=true
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/paint-symmetry/SymmetryAll.svg">
<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M4.5 9C4.5 6.51472 6.51472 4.5 9 4.5C11.4853 4.5 13.5 6.51472 13.5 9C13.5 11.4853 11.4853 13.5 9 13.5C6.51472 13.5 4.5 11.4853 4.5 9ZM9 1.5C4.85786 1.5 1.5 4.85786 1.5 9C1.5 13.1421 4.85786 16.5 9 16.5C13.1421 16.5 16.5 13.1421 16.5 9C16.5 4.85786 13.1421 1.5 9 1.5ZM9 11.5C10.3807 11.5 11.5 10.3807 11.5 9C11.5 7.61929 10.3807 6.5 9 6.5C7.61929 6.5 6.5 7.61929 6.5 9C6.5 10.3807 7.61929 11.5 9 11.5Z" fill="white" stroke="black"/>
</svg>
</file>

<file path="addons/better-terrain/icons/paint-symmetry/SymmetryAll.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://iid5buh1t5j5"
path="res://.godot/imported/SymmetryAll.svg-c2902d14b54ee9a54b7986a2ea5e47a7.ctex"
metadata={
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/paint-symmetry/SymmetryAll.svg"
dest_files=["res://.godot/imported/SymmetryAll.svg-c2902d14b54ee9a54b7986a2ea5e47a7.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=4.0
editor/scale_with_editor_scale=false
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/paint-symmetry/SymmetryFlip.svg">
<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M10.5 11.5854L10.5 6.41458C11.0277 6.60067 11.6386 6.4827 12.0607 6.06066C12.6464 5.47487 12.6464 4.52513 12.0607 3.93934L10.0607 1.93934C9.47487 1.35355 8.52513 1.35355 7.93934 1.93934L5.93934 3.93934C5.35355 4.52513 5.35355 5.47487 5.93934 6.06066C6.36138 6.4827 6.97234 6.60067 7.5 6.41458L7.5 11.5854C6.97234 11.3993 6.36138 11.5173 5.93934 11.9393C5.35355 12.5251 5.35355 13.4749 5.93934 14.0607L7.93934 16.0607C8.52513 16.6464 9.47487 16.6464 10.0607 16.0607L12.0607 14.0607C12.6464 13.4749 12.6464 12.5251 12.0607 11.9393C11.6386 11.5173 11.0277 11.3993 10.5 11.5854Z" fill="white" stroke="black" stroke-linecap="round" stroke-linejoin="round"/>
</svg>
</file>

<file path="addons/better-terrain/icons/paint-symmetry/SymmetryFlip.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://brro1lqnf3r5y"
path="res://.godot/imported/SymmetryFlip.svg-0de1b384a4706cad746bcf7b3b7f0c2d.ctex"
metadata={
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/paint-symmetry/SymmetryFlip.svg"
dest_files=["res://.godot/imported/SymmetryFlip.svg-0de1b384a4706cad746bcf7b3b7f0c2d.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=4.0
editor/scale_with_editor_scale=false
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/paint-symmetry/SymmetryMirror.svg">
<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M6.41458 10.5H11.5854C11.3993 11.0277 11.5173 11.6386 11.9393 12.0607C12.5251 12.6464 13.4749 12.6464 14.0607 12.0607L16.0607 10.0607C16.6464 9.47487 16.6464 8.52513 16.0607 7.93934L14.0607 5.93934C13.4749 5.35355 12.5251 5.35355 11.9393 5.93934C11.5173 6.36138 11.3993 6.97234 11.5854 7.5H6.41458C6.60067 6.97234 6.4827 6.36138 6.06066 5.93934C5.47487 5.35355 4.52513 5.35355 3.93934 5.93934L1.93934 7.93934C1.35355 8.52513 1.35355 9.47487 1.93934 10.0607L3.93934 12.0607C4.52513 12.6464 5.47487 12.6464 6.06066 12.0607C6.4827 11.6386 6.60067 11.0277 6.41458 10.5Z" fill="white" stroke="black" stroke-linecap="round" stroke-linejoin="round"/>
</svg>
</file>

<file path="addons/better-terrain/icons/paint-symmetry/SymmetryMirror.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://dpf5p8xxn52cb"
path="res://.godot/imported/SymmetryMirror.svg-2ba85612b4c15f1a7eab344dc47f9a9a.ctex"
metadata={
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/paint-symmetry/SymmetryMirror.svg"
dest_files=["res://.godot/imported/SymmetryMirror.svg-2ba85612b4c15f1a7eab344dc47f9a9a.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=4.0
editor/scale_with_editor_scale=false
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/paint-symmetry/SymmetryReflect.svg">
<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M6.35441 11.6456C6.52581 11.286 6.54587 10.8723 6.41458 10.5H7.5V11.5854C7.12774 11.4541 6.71401 11.4742 6.35441 11.6456ZM11.6456 11.6456C11.286 11.4742 10.8723 11.4541 10.5 11.5854V10.5H11.5854C11.4541 10.8723 11.4742 11.286 11.6456 11.6456ZM11.6456 6.35441C11.4742 6.71401 11.4541 7.12774 11.5854 7.5H10.5V6.41458C10.8723 6.54587 11.286 6.52581 11.6456 6.35441ZM6.35442 6.35442C6.71401 6.52582 7.12774 6.54587 7.5 6.41458V7.5H6.41458C6.54587 7.12774 6.52581 6.71401 6.35442 6.35442ZM5.64558 5.64558C5.08822 5.37993 4.40083 5.47785 3.93934 5.93934L1.93934 7.93934C1.35355 8.52513 1.35355 9.47487 1.93934 10.0607L3.93934 12.0607C4.40084 12.5222 5.08823 12.6201 5.64558 12.3544C5.37992 12.9118 5.47784 13.5992 5.93934 14.0607L7.93934 16.0607C8.52513 16.6464 9.47487 16.6464 10.0607 16.0607L12.0607 14.0607C12.5222 13.5992 12.6201 12.9118 12.3544 12.3544C12.9118 12.6201 13.5992 12.5222 14.0607 12.0607L16.0607 10.0607C16.6464 9.47487 16.6464 8.52513 16.0607 7.93934L14.0607 5.93934C13.5992 5.47784 12.9118 5.37992 12.3544 5.64559C12.6201 5.08823 12.5222 4.40084 12.0607 3.93934L10.0607 1.93934C9.77935 1.65804 9.39782 1.5 9 1.5C8.60217 1.5 8.22064 1.65804 7.93934 1.93934L5.93934 3.93934C5.47784 4.40083 5.37993 5.08823 5.64558 5.64558Z" fill="white" stroke="black" stroke-linecap="round" stroke-linejoin="round"/>
</svg>
</file>

<file path="addons/better-terrain/icons/paint-symmetry/SymmetryReflect.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://d251v4pxpwsre"
path="res://.godot/imported/SymmetryReflect.svg-de65ca99c884ea9239bb60e11b7c0ca4.ctex"
metadata={
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/paint-symmetry/SymmetryReflect.svg"
dest_files=["res://.godot/imported/SymmetryReflect.svg-de65ca99c884ea9239bb60e11b7c0ca4.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=4.0
editor/scale_with_editor_scale=false
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/paint-symmetry/SymmetryRotate180.svg">
<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M7.81404 5.70606C9.04953 5.26223 10.4851 5.53533 11.4749 6.52513C11.8288 6.87906 12.0891 7.28666 12.259 7.72015C12.5612 8.49147 13.4315 8.87172 14.2028 8.56946C14.9742 8.26721 15.3544 7.39691 15.0522 6.62559C14.7343 5.81449 14.2479 5.05553 13.5962 4.40381C11.3866 2.19423 7.98242 1.90803 5.46303 3.54507C5.25562 2.96524 4.70139 2.55036 4.05026 2.55036C3.22184 2.55036 2.55026 3.22194 2.55026 4.05036V6.87879C2.55026 7.70722 3.22184 8.37879 4.05026 8.37879H6.87869C7.70712 8.37879 8.37869 7.70722 8.37869 6.87879C8.37869 6.4041 8.1582 5.98092 7.81404 5.70606ZM10.186 12.2944C8.95048 12.7382 7.51492 12.4651 6.52513 11.4753C6.17119 11.1214 5.91091 10.7138 5.74104 10.2803C5.43878 9.50898 4.56848 9.12872 3.79716 9.43098C3.02584 9.73323 2.64559 10.6035 2.94784 11.3749C3.26569 12.186 3.75209 12.9449 4.40381 13.5966C6.61338 15.8062 10.0176 16.0924 12.537 14.4554C12.7444 15.0352 13.2986 15.4501 13.9497 15.4501C14.7782 15.4501 15.4497 14.7785 15.4497 13.9501V11.1217C15.4497 10.2932 14.7782 9.62165 13.9497 9.62165H11.1213C10.2929 9.62165 9.62131 10.2932 9.62131 11.1217C9.62131 11.5963 9.84181 12.0195 10.186 12.2944Z" fill="white" stroke="black" stroke-linecap="round"/>
</svg>
</file>

<file path="addons/better-terrain/icons/paint-symmetry/SymmetryRotate180.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://c1bmbyb3ig0mx"
path="res://.godot/imported/SymmetryRotate180.svg-ff244f85658bd621d56af3cf4f7c7ebe.ctex"
metadata={
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/paint-symmetry/SymmetryRotate180.svg"
dest_files=["res://.godot/imported/SymmetryRotate180.svg-ff244f85658bd621d56af3cf4f7c7ebe.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=4.0
editor/scale_with_editor_scale=false
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/paint-symmetry/SymmetryRotateAll.svg">
<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M14.8216 4.27106C15.2019 3.99897 15.4497 3.55358 15.4497 3.05029C15.4497 2.22187 14.7782 1.55029 13.9497 1.55029H11.1213C10.2929 1.55029 9.62131 2.22187 9.62131 3.05029V5.87872C9.62131 6.70715 10.2929 7.37872 11.1213 7.37872C11.8172 7.37872 12.4024 6.90487 12.5718 6.26224C13.0101 6.83299 13.314 7.51086 13.4377 8.24808C13.5748 9.06509 14.3482 9.61629 15.1652 9.47922C15.9822 9.34216 16.5334 8.56872 16.3964 7.75172C16.1771 6.44496 15.6211 5.25423 14.8216 4.27106ZM6.26246 5.42796C6.83316 4.98981 7.51098 4.68586 8.24817 4.56218C9.06518 4.42511 9.61638 3.65168 9.47932 2.83467C9.34225 2.01766 8.56882 1.46646 7.75181 1.60353C6.44508 1.82276 5.2543 2.37868 4.27106 3.17821C3.99897 2.79787 3.55356 2.54999 3.05026 2.54999C2.22184 2.54999 1.55026 3.22156 1.55026 4.04999V6.87842C1.55026 7.70684 2.22184 8.37842 3.05026 8.37842H5.87869C6.70712 8.37842 7.37869 7.70685 7.37869 6.87842C7.37869 6.18264 6.90496 5.59751 6.26246 5.42796ZM6.87869 10.621C6.18279 10.621 5.59757 11.0949 5.42814 11.7376C4.98992 11.1668 4.68596 10.4889 4.56227 9.75172C4.42521 8.93471 3.65177 8.3835 2.83476 8.52057C2.01776 8.65764 1.46655 9.43107 1.60362 10.2481C1.82285 11.5548 2.37891 12.7455 3.17838 13.7287C2.7981 14.0008 2.55027 14.4461 2.55027 14.9494C2.55027 15.7778 3.22184 16.4494 4.05027 16.4494H6.87869C7.70712 16.4494 8.37869 15.7778 8.37869 14.9494L8.37869 12.121C8.37869 11.2926 7.70712 10.621 6.87869 10.621ZM11.7376 12.5718C11.1669 13.01 10.489 13.3139 9.75181 13.4376C8.9348 13.5747 8.3836 14.3481 8.52066 15.1651C8.65773 15.9821 9.43117 16.5333 10.2482 16.3963C11.555 16.177 12.7457 15.621 13.7289 14.8215C14.001 15.2018 14.4464 15.4497 14.9497 15.4497C15.7782 15.4497 16.4497 14.7781 16.4497 13.9497V11.1213C16.4497 10.2929 15.7782 9.62128 14.9497 9.62128H12.1213C11.2929 9.62128 10.6213 10.2929 10.6213 11.1213C10.6213 11.8171 11.0951 12.4022 11.7376 12.5718Z" fill="white" stroke="black" stroke-linecap="round" stroke-linejoin="round"/>
</svg>
</file>

<file path="addons/better-terrain/icons/paint-symmetry/SymmetryRotateAll.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://bcky1dfn4umac"
path="res://.godot/imported/SymmetryRotateAll.svg-795a9b37a8f5df7e7376c9f762121b21.ctex"
metadata={
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/paint-symmetry/SymmetryRotateAll.svg"
dest_files=["res://.godot/imported/SymmetryRotateAll.svg-795a9b37a8f5df7e7376c9f762121b21.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=4.0
editor/scale_with_editor_scale=false
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/paint-symmetry/SymmetryRotateClockwise.svg">
<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8 5.5C9.78974 5.5 11.2657 6.84334 11.4747 8.57674C10.9529 8.40317 10.3546 8.52404 9.93934 8.93934C9.35355 9.52513 9.35355 10.4749 9.93934 11.0607L11.9393 13.0607C12.5251 13.6464 13.4749 13.6464 14.0607 13.0607L16.0607 11.0607C16.6464 10.4749 16.6464 9.52513 16.0607 8.93934C15.6352 8.5139 15.0178 8.39745 14.4873 8.58997C14.2757 5.19115 11.4521 2.5 8 2.5C4.41015 2.5 1.5 5.41015 1.5 9C1.5 12.5899 4.41015 15.5 8 15.5C8.82843 15.5 9.5 14.8284 9.5 14C9.5 13.1716 8.82843 12.5 8 12.5C6.067 12.5 4.5 10.933 4.5 9C4.5 7.067 6.067 5.5 8 5.5Z" fill="white" stroke="black" stroke-linecap="round"/>
</svg>
</file>

<file path="addons/better-terrain/icons/paint-symmetry/SymmetryRotateClockwise.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://def0fcqsn6s6x"
path="res://.godot/imported/SymmetryRotateClockwise.svg-e133d151dd3970411596d18bb133aece.ctex"
metadata={
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/paint-symmetry/SymmetryRotateClockwise.svg"
dest_files=["res://.godot/imported/SymmetryRotateClockwise.svg-e133d151dd3970411596d18bb133aece.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=4.0
editor/scale_with_editor_scale=false
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/paint-symmetry/SymmetryRotateCounterClockwise.svg">
<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M3.51272 8.58997C2.98219 8.39745 2.36478 8.5139 1.93934 8.93934C1.35355 9.52513 1.35355 10.4749 1.93934 11.0607L3.93934 13.0607C4.52513 13.6464 5.47487 13.6464 6.06066 13.0607L8.06066 11.0607C8.64645 10.4749 8.64645 9.52513 8.06066 8.93934C7.64536 8.52404 7.04712 8.40317 6.52533 8.57674C6.73428 6.84334 8.21026 5.5 10 5.5C11.933 5.5 13.5 7.067 13.5 9C13.5 10.933 11.933 12.5 10 12.5C9.17157 12.5 8.5 13.1716 8.5 14C8.5 14.8284 9.17157 15.5 10 15.5C13.5899 15.5 16.5 12.5899 16.5 9C16.5 5.41015 13.5899 2.5 10 2.5C6.54787 2.5 3.72429 5.19115 3.51272 8.58997Z" fill="white" stroke="black" stroke-linecap="round"/>
</svg>
</file>

<file path="addons/better-terrain/icons/paint-symmetry/SymmetryRotateCounterClockwise.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://ngej4qhkypb2"
path="res://.godot/imported/SymmetryRotateCounterClockwise.svg-b603f534dc5383de58f7e26cdf86fe8b.ctex"
metadata={
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/paint-symmetry/SymmetryRotateCounterClockwise.svg"
dest_files=["res://.godot/imported/SymmetryRotateCounterClockwise.svg-b603f534dc5383de58f7e26cdf86fe8b.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=4.0
editor/scale_with_editor_scale=false
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/Replace.svg">
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect x="10.5" y="1.5" width="4" height="4" stroke="#D9D9D9"/>
<rect x="1" y="10" width="5" height="5" fill="#D9D9D9"/>
<path d="M7.5 3.5H5.5C4.39543 3.5 3.5 4.39543 3.5 5.5V6.5" stroke="#E0E0E0" stroke-linecap="square"/>
<path d="M8.5 12.5H10.5C11.6046 12.5 12.5 11.6046 12.5 10.5V9.5" stroke="#E0E0E0" stroke-linecap="square"/>
<path d="M10 10L12.5 7.5L15 10H10Z" fill="#E0E0E0"/>
<path d="M6 6L3.5 8.5L1 6H6Z" fill="#E0E0E0"/>
</svg>
</file>

<file path="addons/better-terrain/icons/Replace.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://y3xy6qdckht6"
path="res://.godot/imported/Replace.svg-7654df79fd42fc27133e4d3f81a4d56b.ctex"
metadata={
"has_editor_variant": true,
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/Replace.svg"
dest_files=["res://.godot/imported/Replace.svg-7654df79fd42fc27133e4d3f81a4d56b.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=1.0
editor/scale_with_editor_scale=true
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/ShuffleRandom.svg">
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_513_3269)">
<path fill-rule="evenodd" clip-rule="evenodd" d="M6.58578 3.4144C7.24015 2.76003 8.23514 2.6539 9 3.09599V4C9 4.80892 9.48728 5.5382 10.2346 5.84776C10.7544 6.06305 11.3288 6.04585 11.8228 5.82299L12.5858 6.58597C13.3668 7.36701 13.3668 8.63334 12.5858 9.41439L9.41421 12.586C8.75985 13.2403 7.76486 13.3465 7 12.9044V12C7 11.1911 6.51272 10.4618 5.76537 10.1522C5.24551 9.93691 4.67104 9.95416 4.17695 10.1771L3.41422 9.41439C2.63317 8.63334 2.63317 7.36701 3.41422 6.58597L6.58578 3.4144ZM8 9.00018C8.55229 9.00018 9 8.55246 9 8.00018C9 7.44789 8.55229 7.00018 8 7.00018C7.44772 7.00018 7 7.44789 7 8.00018C7 8.55246 7.44772 9.00018 8 9.00018ZM6 8.00018C6 8.55246 5.55229 9.00018 5 9.00018C4.44772 9.00018 4 8.55246 4 8.00018C4 7.44789 4.44772 7.00018 5 7.00018C5.55229 7.00018 6 7.44789 6 8.00018ZM11 9.00018C11.5523 9.00018 12 8.55246 12 8.00018C12 7.44789 11.5523 7.00018 11 7.00018C10.4477 7.00018 10 7.44789 10 8.00018C10 8.55246 10.4477 9.00018 11 9.00018Z" fill="white"/>
<path d="M5.42909 2.57732C5.92795 2.34034 6.14024 1.74383 5.90326 1.24497C5.66628 0.746113 5.06976 0.53382 4.57091 0.770801C1.87043 2.05366 0 4.80762 0 8.00043C0 10.1046 0.812938 12.0189 2.13978 13.4462L1.29289 14.2931C1.0069 14.5791 0.92134 15.0092 1.07612 15.3829C1.2309 15.7566 1.59554 16.0002 2 16.0002H5C5.55228 16.0002 6 15.5525 6 15.0002V12.0002C6 11.5958 5.75636 11.2311 5.38268 11.0764C5.00901 10.9216 4.57889 11.0071 4.29289 11.2931L3.55511 12.0309C2.58795 10.9651 2 9.5514 2 8.00043C2 5.60845 3.39967 3.5414 5.42909 2.57732Z" fill="white"/>
<path d="M11 0C10.4477 0 9.99999 0.447715 9.99999 1V4C9.99999 4.40446 10.2436 4.7691 10.6173 4.92388C10.991 5.07866 11.4211 4.9931 11.7071 4.70711L12.4448 3.96939C13.4119 5.03511 14 6.44912 14 8C14 10.392 12.6003 12.459 10.5709 13.4231C10.072 13.6601 9.85975 14.2566 10.0967 14.7555C10.3337 15.2543 10.9302 15.4666 11.4291 15.2296C14.1296 13.9468 16 11.1928 16 8C16 5.8956 15.1871 3.98156 13.8601 2.55412L14.7071 1.70711C14.9931 1.42111 15.0787 0.990991 14.9239 0.617317C14.7691 0.243642 14.4045 0 14 0H11Z" fill="white"/>
</g>
<defs>
<clipPath id="clip0_513_3269">
<rect width="16" height="16" fill="white"/>
</clipPath>
</defs>
</svg>
</file>

<file path="addons/better-terrain/icons/ShuffleRandom.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://cs4mdmluiydj6"
path="res://.godot/imported/ShuffleRandom.svg-15ee49f7a06c55a1e95e1ed056732dc5.ctex"
metadata={
"has_editor_variant": true,
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/ShuffleRandom.svg"
dest_files=["res://.godot/imported/ShuffleRandom.svg-15ee49f7a06c55a1e95e1ed056732dc5.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=1.0
editor/scale_with_editor_scale=true
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/SymmetryAll.svg">
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="8" cy="8" r="6" stroke="#E0E0E0" stroke-width="2"/>
<circle cx="8" cy="8" r="3" fill="#E0E0E0"/>
</svg>
</file>

<file path="addons/better-terrain/icons/SymmetryAll.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://cyjra4g05dwh"
path="res://.godot/imported/SymmetryAll.svg-cd6a02766f60c09344aa97e0325457c1.ctex"
metadata={
"has_editor_variant": true,
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/SymmetryAll.svg"
dest_files=["res://.godot/imported/SymmetryAll.svg-cd6a02766f60c09344aa97e0325457c1.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=1.0
editor/scale_with_editor_scale=true
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/SymmetryFlip.svg">
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8 14L10 12M8 14L8 2M8 14L6 12M8 2L10 4M8 2L6 4" stroke="#E0E0E0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>
</file>

<file path="addons/better-terrain/icons/SymmetryFlip.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://dqmc1jp56or8m"
path="res://.godot/imported/SymmetryFlip.svg-ea11c1010d0643843f115093c045dc42.ctex"
metadata={
"has_editor_variant": true,
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/SymmetryFlip.svg"
dest_files=["res://.godot/imported/SymmetryFlip.svg-ea11c1010d0643843f115093c045dc42.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=1.0
editor/scale_with_editor_scale=true
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/SymmetryMirror.svg">
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M2 8L4 10M2 8H14M2 8L4 6M14 8L12 10M14 8L12 6" stroke="#E0E0E0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>
</file>

<file path="addons/better-terrain/icons/SymmetryMirror.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://5hm3bfj3dvej"
path="res://.godot/imported/SymmetryMirror.svg-0bf9d259572cc33d41c783e35586310a.ctex"
metadata={
"has_editor_variant": true,
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/SymmetryMirror.svg"
dest_files=["res://.godot/imported/SymmetryMirror.svg-0bf9d259572cc33d41c783e35586310a.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=1.0
editor/scale_with_editor_scale=true
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/SymmetryReflect.svg">
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_953_3297)">
<path d="M8 15L10 13M8 15L8 1M8 15L6 13M8 1L10 3M8 1L6 3" stroke="#E0E0E0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M1 8L3 10M1 8H15M1 8L3 6M15 8L13 10M15 8L13 6" stroke="#E0E0E0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</g>
<defs>
<clipPath id="clip0_953_3297">
<rect width="16" height="16" fill="white"/>
</clipPath>
</defs>
</svg>
</file>

<file path="addons/better-terrain/icons/SymmetryReflect.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://cxoewno1cefua"
path="res://.godot/imported/SymmetryReflect.svg-39f88a51808c88d6cb37005ed1ddd254.ctex"
metadata={
"has_editor_variant": true,
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/SymmetryReflect.svg"
dest_files=["res://.godot/imported/SymmetryReflect.svg-39f88a51808c88d6cb37005ed1ddd254.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=1.0
editor/scale_with_editor_scale=true
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/SymmetryRotate180.svg">
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M5.87869 5.87857H3.05026V3.05014" stroke="#E0E0E0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M4.46447 4.46424C6.41709 2.51162 9.58291 2.51162 11.5355 4.46424C12.0384 4.96707 12.4117 5.55035 12.6556 6.17265" stroke="#E0E0E0" stroke-width="2" stroke-linecap="round"/>
<path d="M10.1213 10.1214H12.9497V12.9499" stroke="#E0E0E0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M11.5355 11.5358C9.58291 13.4884 6.41709 13.4884 4.46447 11.5358C3.96164 11.0329 3.5883 10.4496 3.34444 9.82735" stroke="#E0E0E0" stroke-width="2" stroke-linecap="round"/>
</svg>
</file>

<file path="addons/better-terrain/icons/SymmetryRotate180.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://8mcycyl3e66r"
path="res://.godot/imported/SymmetryRotate180.svg-805113e1c31c7195ed5fec5febf455b9.ctex"
metadata={
"has_editor_variant": true,
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/SymmetryRotate180.svg"
dest_files=["res://.godot/imported/SymmetryRotate180.svg-805113e1c31c7195ed5fec5febf455b9.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=1.0
editor/scale_with_editor_scale=true
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/SymmetryRotateAll.svg">
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M4.87869 5.87857H2.05026V3.05014" stroke="#E0E0E0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M5.87869 11.1211L5.87869 13.9496L3.05026 13.9496" stroke="#E0E0E0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M10.1213 4.87887L10.1213 2.05044L12.9497 2.05044" stroke="#E0E0E0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M11.1213 10.1214H13.9497V12.9499" stroke="#E0E0E0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M14 8C14 5.57851 12.5655 3.49205 10.5 2.54404M8 14C10.4215 14 12.508 12.5655 13.456 10.5M2 8C2 10.4215 3.43447 12.508 5.5 13.456M8 2C5.54028 2 3.42626 3.48012 2.5 5.59829" stroke="#E0E0E0" stroke-width="2"/>
</svg>
</file>

<file path="addons/better-terrain/icons/SymmetryRotateAll.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://b7fx4mk18lmls"
path="res://.godot/imported/SymmetryRotateAll.svg-959ef9f7a9c5b12d37b3a1c9ddcf2432.ctex"
metadata={
"has_editor_variant": true,
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/SymmetryRotateAll.svg"
dest_files=["res://.godot/imported/SymmetryRotateAll.svg-959ef9f7a9c5b12d37b3a1c9ddcf2432.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=1.0
editor/scale_with_editor_scale=true
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/SymmetryRotateClockwise.svg">
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M10 9L12 11L14 9" stroke="#E0E0E0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M7 13C4.23858 13 2 10.7614 2 8C2 5.23858 4.23858 3 7 3C9.76142 3 12 5.23858 12 8V10" stroke="#E0E0E0" stroke-width="2" stroke-linecap="round"/>
</svg>
</file>

<file path="addons/better-terrain/icons/SymmetryRotateClockwise.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://baxhjy28r1iqj"
path="res://.godot/imported/SymmetryRotateClockwise.svg-9d1254877c31fcd2b5fd3dd58555e624.ctex"
metadata={
"has_editor_variant": true,
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/SymmetryRotateClockwise.svg"
dest_files=["res://.godot/imported/SymmetryRotateClockwise.svg-9d1254877c31fcd2b5fd3dd58555e624.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=1.0
editor/scale_with_editor_scale=true
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/SymmetryRotateCounterClockwise.svg">
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M6 9L4 11L2 9" stroke="#E0E0E0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M9 13C11.7614 13 14 10.7614 14 8C14 5.23858 11.7614 3 9 3C6.23858 3 4 5.23858 4 8V10" stroke="#E0E0E0" stroke-width="2" stroke-linecap="round"/>
</svg>
</file>

<file path="addons/better-terrain/icons/SymmetryRotateCounterClockwise.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://csbwdkr6bc2db"
path="res://.godot/imported/SymmetryRotateCounterClockwise.svg-ba4f86a741d97c0ebfc0ae19d3460f6f.ctex"
metadata={
"has_editor_variant": true,
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/SymmetryRotateCounterClockwise.svg"
dest_files=["res://.godot/imported/SymmetryRotateCounterClockwise.svg-ba4f86a741d97c0ebfc0ae19d3460f6f.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=1.0
editor/scale_with_editor_scale=true
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/Warning.svg">
<svg height="16" viewBox="0 0 16 16" width="16" xmlns="http://www.w3.org/2000/svg"><path d="m3 1c-1.1046 0-2 .89543-2 2v10c0 1.1046.89543 2 2 2h10c1.1046 0 2-.89543 2-2v-10c0-1.1046-.89543-2-2-2zm4 2h2v6h-2zm0 8h2v2h-2z" fill="#ffdd65"/></svg>
</file>

<file path="addons/better-terrain/icons/Warning.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://b0es228gfcykd"
path="res://.godot/imported/Warning.svg-7bb0ec60ff2da2c7ebdba79b0dcdd006.ctex"
metadata={
"has_editor_variant": true,
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/Warning.svg"
dest_files=["res://.godot/imported/Warning.svg-7bb0ec60ff2da2c7ebdba79b0dcdd006.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=1.0
editor/scale_with_editor_scale=true
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/plugin.cfg">
[plugin]

name="BetterTerrain"
description="This is a drop-in replacement for Godot 4's tilemap terrain system, offering more versatile and straightforward autotiling. It can be used with any existing TileMap or TileSet, either through the editor plugin, or directly via code."
author="Portponky"
version=""
script="TerrainPlugin.gd"
</file>

<file path="addons/better-terrain/TerrainPlugin.gd">
@tool
extends EditorPlugin

const AUTOLOAD_NAME = "BetterTerrain"
var dock : Control
var button : Button

func _enter_tree() -> void:
	# Wait for autoloads to register
	await get_tree().process_frame
	
	if !get_tree().root.get_node_or_null(^"BetterTerrain"):
		# Autoload wasn't present on plugin init, which means plugin won't have loaded correctly
		add_autoload_singleton(AUTOLOAD_NAME, "res://addons/better-terrain/BetterTerrain.gd")
		ProjectSettings.save()
		
		var confirm = ConfirmationDialog.new()
		confirm.dialog_text = "The editor needs to be restarted for Better Terrain to load correctly. Restart now? Note: Unsaved changes will be lost."
		confirm.confirmed.connect(func():
			OS.set_restart_on_exit(true, ["-e"])
			get_tree().quit()
		)
		get_editor_interface().popup_dialog_centered(confirm)
	
	dock = load("res://addons/better-terrain/editor/Dock.tscn").instantiate()
	dock.update_overlay.connect(self.update_overlays)
	get_editor_interface().get_editor_main_screen().mouse_exited.connect(dock.canvas_mouse_exit)
	dock.undo_manager = get_undo_redo()
	button = add_control_to_bottom_panel(dock, "Terrain")
	button.toggled.connect(dock.about_to_be_visible)
	dock.force_show_terrains.connect(button.toggled.emit.bind(true))
	button.visible = false


func _exit_tree() -> void:
	remove_control_from_bottom_panel(dock)
	dock.queue_free()


func _handles(object) -> bool:
	return object is TileMapLayer or object is TileSet


func _make_visible(visible) -> void:
	button.visible = visible


func _edit(object) -> void:
	var new_tileset : TileSet = null
	
	if object is TileMapLayer:
		dock.tilemap = object
		new_tileset = object.tile_set
	if object is TileSet:
		new_tileset = object
	
	if dock.tileset != new_tileset:
		dock.tiles_about_to_change()
		dock.tileset = new_tileset
		dock.tiles_changed()


func _forward_canvas_draw_over_viewport(overlay: Control) -> void:
	if dock.visible:
		dock.canvas_draw(overlay)


func _forward_canvas_gui_input(event: InputEvent) -> bool:
	if !dock.visible:
		return false
	
	return dock.canvas_input(event)
</file>

<file path="addons/better-terrain/TerrainPlugin.gd.uid">
uid://b07dm7iyg6wmr
</file>

<file path="addons/better-terrain/Watcher.gd">
@tool
extends Node

signal trigger
var complete := false
var tileset : TileSet

func tidy() -> bool:
	if complete:
		return false
	
	complete = true
	queue_free()
	return true


func activate():
	if tidy():
		trigger.emit()
</file>

<file path="addons/better-terrain/Watcher.gd.uid">
uid://t54amk1ou5t7
</file>

<file path="addons/Inventory/Inventory.gd.uid">
uid://drdwdl32kthr4
</file>

<file path="addons/Inventory/InventoryItem.gd">
class_name InventoryItem extends Resource

@export var item_type: InventoryItemType
@export var custom_name:String

var name:String:
	get:
		if custom_name:
			return custom_name
		return item_type.name
</file>

<file path="addons/Inventory/InventoryItem.gd.uid">
uid://c31st5sfn50qu
</file>

<file path="addons/Inventory/InventoryItemType.gd">
class_name InventoryItemType extends Resource

@export var name: String = "Unknown Item" : set = _set_name
@export var description: String : set = _set_description
@export var texture: Texture : set = _set_texture
@export var weight: int = 1 : set = _set_weight  # Weight of a single item
@export var stackable: bool = true : set = _set_stackable  # Whether this item can be stacked
@export var max_stack_size: int = 99 : set = _set_max_stack_size  # Maximum stack size, if stackable

# Setter for 'name'
func _set_name(n: String):
	if name != n:
		name = n
		emit_changed()

# Setter for 'description'
func _set_description(d: String):
	if description != d:
		description = d
		emit_changed()

# Setter for 'texture'
func _set_texture(t: Texture):
	if texture != t:
		texture = t
		emit_changed()

# Setter for 'weight'
func _set_weight(w: int):
	if weight != w:
		weight = w
		emit_changed()

# Setter for 'stackable'
func _set_stackable(s: bool):
	if stackable != s:
		stackable = s
		emit_changed()

# Setter for 'max_stack_size'
func _set_max_stack_size(s: int):
	if max_stack_size != s:
		max_stack_size = s
		emit_changed()
</file>

<file path="addons/Inventory/InventoryItemType.gd.uid">
uid://c2kq0x5odumur
</file>

<file path="addons/Inventory/InventorySlot.gd">
class_name InventorySlot extends RefCounted

var items:Array[InventoryItem] = []
# Zwraca pierwszy item w slocie (lub null, jeśli pusty)
var item: InventoryItem:
	get:
		if items.size() > 0:
			return items[0]
		return null

var type:InventoryItemType:
	get:
		if items.size() > 0:
			return items[0].item_type
		return null

var count:int:
	get:
		return items.size()


var weight:float:
	get:
		var weight = 0.0
		for item in items:
			weight += item.item_type.weight
		
		return weight

signal item_added(item:InventoryItem)
signal item_removed(item:InventoryItem)

func is_empty() -> bool:
	return count == 0


func available_stacks() -> int:
	if type == null:
		return INF
	
	return type.max_stack_size - count


func take(item:InventoryItem):
	if item in items:
		items.erase(item)


func take_one() -> InventoryItem:
	var item = items.pop_back()
	item_removed.emit(item)
	return item


func take_many(count:int = 1) -> Array[InventoryItem]:
	var to_take:Array[InventoryItem] = []
	
	for i in count:
		var item = items.pop_back()
		to_take.append(item)
		item_removed.emit(item)
	
	return to_take


func take_all() -> Array[InventoryItem]:
	return take_many(items.size())
	

func put(item:InventoryItem) -> bool:
	if type == null:
		items.append(item)
		item_added.emit(item)
		return true
	elif type == item.item_type and type.stackable and count < type.max_stack_size:
		items.append(item)
		item_added.emit(item)
		return true
	
	return false


func put_all(items:Array[InventoryItem]) -> bool:
	if items.size() == 1:
		return put(items[0])
	
	# incompatible type?
	if type != items[0].item_type:
		return false
	
	# verify all items are same type
	if not Inventory.is_items_of_same_type(items):
		return false
	
	# no items in this slot?
	if type == null:
		# stackable?
		if not items[0].item_type.stackable:
			return false
		
		# too many?
		if items.size() > items[0].item_type.max_stack_size:
			return false
		
		# add them
		for item in items:
			put(item)
		
		return true
	
	return false
</file>

<file path="addons/Inventory/InventorySlot.gd.uid">
uid://bhgbwuu5y8d0o
</file>

<file path="addons/Inventory/UI/InventoryGridUI/inventory.tres">
[gd_resource type="Resource" script_class="InventoryItemType" load_steps=2 format=3 uid="uid://bn0p7ekufxw31"]

[ext_resource type="Script" uid="uid://c2kq0x5odumur" path="res://addons/Inventory/InventoryItemType.gd" id="1_pa1l7"]

[resource]
script = ExtResource("1_pa1l7")
name = "Unknown Item"
description = ""
weight = 1
stackable = true
max_stack_size = 99
metadata/_custom_type_script = "uid://c2kq0x5odumur"
</file>

<file path="addons/Inventory/UI/InventoryGridUI/InventoryGridItemUI.gd">
class_name InventoryGridItemUI extends Control

var item:InventoryItem:
	set = set_item

var count:int = 1:
	set = set_count

@onready var icon: TextureRect = $Icon
@onready var countLabel: Label = $Icon/Count
@onready var tooltip: CanvasLayer = $Tooltip
@onready var tooltipTitle: Label = $Tooltip/Container/VBoxContainer/Title
@onready var tooltipText: RichTextLabel = $Tooltip/Container/VBoxContainer/Text

signal request_select(item)


func set_item(i:InventoryItem):
	item = i
	if is_inside_tree():
		_update_item()

func set_count(c:int):
	count = c
	if is_inside_tree():
		countLabel.text = str(count)
		if count == 0:
			countLabel.hide()
		else:
			countLabel.show()

func _update_item():
	if not item:
		return
	
	icon.texture = item.item_type.texture
	tooltipTitle.text = item.name
	tooltipText.text = item.item_type.description
	countLabel.text = str(count)
	countLabel.visible = count > 0

func _ready():
	mouse_entered.connect(_on_mouse_entered)
	mouse_exited.connect(_on_mouse_exited)
	_update_item()


func _on_mouse_entered():
	tooltip.show()


func _on_mouse_exited():
	tooltip.hide()
</file>

<file path="addons/Inventory/UI/InventoryGridUI/InventoryGridItemUI.gd.uid">
uid://caosp0lfxj55a
</file>

<file path="addons/Inventory/UI/InventoryGridUI/InventoryGridUI.tscn">
[gd_scene load_steps=10 format=3 uid="uid://dp2tfsw1nyc3v"]

[ext_resource type="Script" uid="uid://b5hdti82wmmgi" path="res://addons/Inventory/UI/SimpleInventoryItemUI.gd" id="1_d6dd7"]
[ext_resource type="PackedScene" uid="uid://bt4wvwr8oqckg" path="res://addons/Inventory/UI/InventoryGridUI/InventoryGridItemUI.tscn" id="2_rtvfl"]
[ext_resource type="Script" uid="uid://c31st5sfn50qu" path="res://addons/Inventory/InventoryItem.gd" id="3_ke814"]
[ext_resource type="Script" uid="uid://c2kq0x5odumur" path="res://addons/Inventory/InventoryItemType.gd" id="4_8ibyw"]
[ext_resource type="Texture2D" uid="uid://bw7rqy1rxpkyt" path="res://icon.svg" id="5_cj85u"]
[ext_resource type="Script" uid="uid://drdwdl32kthr4" path="res://addons/Inventory/Inventory.gd" id="6_2wr6k"]

[sub_resource type="Resource" id="Resource_dvw7d"]
script = ExtResource("4_8ibyw")
name = "Godot Item :)"
description = ""
texture = ExtResource("5_cj85u")
weight = 1
stackable = true
max_stack_size = 99
size = Vector2i(1, 1)

[sub_resource type="Resource" id="Resource_h5e7a"]
script = ExtResource("3_ke814")
item_type = SubResource("Resource_dvw7d")
custom_name = ""

[sub_resource type="Resource" id="Resource_52ydk"]
script = ExtResource("6_2wr6k")
capacity = 5

[node name="InventoryGridUI" type="BoxContainer"]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
vertical = true
script = ExtResource("1_d6dd7")
ItemScene = ExtResource("2_rtvfl")
initial_items = Array[ExtResource("3_ke814")]([SubResource("Resource_h5e7a")])
inventory = SubResource("Resource_52ydk")
container_target_node = NodePath("GridContainer")

[node name="GridContainer" type="GridContainer" parent="."]
layout_mode = 2
columns = 2
</file>

<file path="addons/Inventory/UI/InventoryGridUI/InventoryPopupTooltip.gd">
class_name InventoryPopupTooltip extends PanelContainer

@export var offset := Vector2(8, 8)

func _process(delta):
	var vp_size := get_viewport_rect().size
	var mouse := get_global_mouse_position()
	
	var pos = mouse
	
	# horizontally
	if mouse.x <= vp_size.x / 2:
		pos.x = mouse.x + offset.x
	else:
		pos.x = mouse.x - size.x - offset.x
	
	# vertically
	if mouse.y > vp_size.y / 2:
		pos.y = mouse.y - size.y - offset.y
	else:
		pos.y = mouse.y + offset.y
	
	global_position = pos
</file>

<file path="addons/Inventory/UI/InventoryGridUI/InventoryPopupTooltip.gd.uid">
uid://cg0mxyfmmwwak
</file>

<file path="addons/Inventory/UI/List/InventoryListItemUI.gd">
@tool
class_name InventoryListItemUI extends PanelContainer

@export var item:InventoryItem:
	set = set_item

@onready var nameLabel:PingPongScroller = $BoxContainer/Name
@onready var stackLabel:Label = $BoxContainer/Stack

@export var stack_count:int = 1:
	set = set_stack_count

func _ready():
	_update_ui()

func set_item(_item:InventoryItem):
	item = _item
	if is_inside_tree():
		_update_ui()

func set_stack_count(count:int):
	if stack_count != count:
		stack_count = count
		stackLabel.text = str(stack_count)
		stackLabel.visible = stack_count > 1

func _gui_input(event: InputEvent) -> void:
	pass

func _update_ui():
	nameLabel.text = item.name
</file>

<file path="addons/Inventory/UI/List/InventoryListItemUI.gd.uid">
uid://crbxmja2hsbda
</file>

<file path="addons/Inventory/UI/List/InventoryListUI.gd">
class_name InventoryListUI extends ScrollContainer

@export var InventoryListItemUI: PackedScene
@export var initial_items: Array[InventoryItem]
@export var inventory: Inventory : set = set_inventory

@onready var vbox: VBoxContainer = $VBoxContainer


# Set the inventory and initialize UI
func set_inventory(it: Inventory):
	if inventory == it:
		return
	
	inventory = it
	
	if is_inside_tree():
		_clear_ui()
		_create_ui()
		if initial_items:
			inventory.put_many(initial_items)

# Clear all the UI elements
func _clear_ui():
	for itemUI in vbox.get_children():
		itemUI.queue_free()

# Create the initial UI for the inventory
func _create_ui():
	for item in inventory.get_all_items():
		_create_inventory_list_item_ui(item)
	
	inventory.item_added.connect(_on_inventory_item_added)
	inventory.item_removed.connect(_on_inventory_item_removed)

# Handle when an item is added to the inventory
func _on_inventory_item_added(item: InventoryItem, slot: int):
	# Check if the item is stackable
	if item.item_type.stackable:
		# Find if the UI already exists for this item
		var itemUI = get_item_ui(item)
		if itemUI != null:
			# Update the stack count of the existing UI
			itemUI.stack_count = inventory.get_amount_of_item_type(item.item_type)
		else:
			# If no UI exists, create a new one
			_create_inventory_list_item_ui(item)
	else:
		# If the item is not stackable, create a new UI
		_create_inventory_list_item_ui(item)

# Handle when an item is removed from the inventory
func _on_inventory_item_removed(item: InventoryItem, slot: int):
	var itemUI = get_item_ui(item)
	if itemUI != null:
		vbox.remove_child(itemUI)
		itemUI.queue_free()

# Create a new UI element for an item
func _create_inventory_list_item_ui(item: InventoryItem):
	var itemUI: InventoryListItemUI = InventoryListItemUI.instantiate()
	itemUI.item = item
	itemUI.stack_count = inventory.get_amount_of_item_type(item.item_type) if item.item_type.stackable else 1
	vbox.add_child(itemUI)

# Retrieve the UI element associated with a specific item
func get_item_ui(item: InventoryItem) -> InventoryListItemUI:
	for child in vbox.get_children():
		if child is InventoryListItemUI and child.item == item:
			return child
	return null

# Ready function to initialize UI
func _ready():
	_clear_ui()
	_create_ui()
	if initial_items:
		inventory.put_many(initial_items)
</file>

<file path="addons/Inventory/UI/List/InventoryListUI.gd.uid">
uid://b40dmy1axmbj1
</file>

<file path="addons/Inventory/UI/PingPongScroller.gd">
class_name PingPongScroller
extends Container

enum MODE {
	ALWAYS,
	ON_HOVER
}

@export var speed: float = 32.0
@export var mode:MODE = MODE.ON_HOVER
@export var scroll_margin:int = 16
@export var text: String = "Some very long text here":
	set = set_text

@onready var label: Label = $Label

var is_scrolling := true
var direction := 1  # 1 for right, -1 for left

func set_text(t: String):
	text = t
	_update()

func _update():
	label.text = text
	is_scrolling = mode == MODE.ALWAYS
	direction = 1  # Reset to initial scrolling direction

func _ready():
	mouse_entered.connect(_on_mouse_entered)
	mouse_exited.connect(_on_mouse_exited)

func _on_mouse_entered():
	if mode == MODE.ON_HOVER:
		is_scrolling = true

func _on_mouse_exited():
	if mode == MODE.ON_HOVER:
		is_scrolling = false


func _process(delta: float) -> void:
	var child: Control = get_child(0)
	if child == null or child is Control == false:
		return
	
	if is_scrolling:
		var velocity = direction * speed * delta
		var text_size = child.get_combined_minimum_size()  # Get the full text size
		
		# If the text fits inside the container, no scrolling is needed
		if text_size.x <= size.x:
			is_scrolling = false
			child.position.x = 0
			return
		
		# Calculate scrollable width
		var scroll_width = text_size.x - size.x

		# Update the position of the child based on the velocity
		child.position.x -= velocity
		
		# Handle direction change at the boundaries
		if child.position.x < -scroll_width:
			child.position.x = -scroll_width  # Snap to the right limit
			direction *= -1  # Reverse direction (scroll to the right)
		elif child.position.x > 0:
			child.position.x = 0  # Snap to the left limit
			direction *= -1  # Reverse direction (scroll to the left)
	else:
		if child.position.x != 0:
			child.position = child.position.move_toward(Vector2.ZERO, speed * 2 * delta)
</file>

<file path="addons/Inventory/UI/PingPongScroller.gd.uid">
uid://bvegqwtipxnbg
</file>

<file path="addons/Inventory/UI/SimpleInventoryItemUI.gd">
extends Control
</file>

<file path="addons/Inventory/UI/SimpleInventoryItemUI.gd.uid">
uid://b5hdti82wmmgi
</file>

<file path="addons/Inventory/UI/SimpleInventoryUI.gd.uid">
uid://dwyndp832h061
</file>

<file path="assets/inventory/ammolite.tres">
[gd_resource type="Resource" script_class="InventoryItemType" load_steps=4 format=3 uid="uid://cyu80pqqds688"]

[ext_resource type="Script" uid="uid://c2kq0x5odumur" path="res://addons/Inventory/InventoryItemType.gd" id="1_13b4e"]
[ext_resource type="Texture2D" uid="uid://ccy1yfxd6dm23" path="res://assets/sprites/Miner16Bit_AllFiles_v1/Miner16Bit_WorldTiles_01.png" id="2_ybrhv"]

[sub_resource type="AtlasTexture" id="AtlasTexture_e8185"]
atlas = ExtResource("2_ybrhv")
region = Rect2(48, 0, 16, 16)

[resource]
script = ExtResource("1_13b4e")
name = "Ammolite"
description = "A precious stone with a relatively low price. In the shop you can sell it for 1 coin"
texture = SubResource("AtlasTexture_e8185")
weight = 1
stackable = true
max_stack_size = 99
metadata/_custom_type_script = "uid://c2kq0x5odumur"
</file>

<file path="assets/inventory/stone1.tres">
[gd_resource type="Resource" script_class="InventoryItemType" load_steps=2 format=3 uid="uid://c28cll6mdlnm0"]

[ext_resource type="Script" uid="uid://c2kq0x5odumur" path="res://addons/Inventory/InventoryItemType.gd" id="1_1x4at"]

[resource]
script = ExtResource("1_1x4at")
name = "Unknown Item"
description = ""
weight = 1
stackable = true
max_stack_size = 99
metadata/_custom_type_script = "uid://c2kq0x5odumur"
</file>

<file path="assets/inventory/stone2.tres">
[gd_resource type="Resource" script_class="InventoryItemType" load_steps=2 format=3 uid="uid://chkokn3xvq23v"]

[ext_resource type="Script" uid="uid://c2kq0x5odumur" path="res://addons/Inventory/InventoryItemType.gd" id="1_ob5fr"]

[resource]
script = ExtResource("1_ob5fr")
name = "Unknown Item"
description = ""
weight = 1
stackable = true
max_stack_size = 99
metadata/_custom_type_script = "uid://c2kq0x5odumur"
</file>

<file path="assets/music/steam_gardens_slowed.wav.import">
[remap]

importer="wav"
type="AudioStreamWAV"
uid="uid://bs1k4f7ulp015"
path="res://.godot/imported/steam_gardens_slowed.wav-a9221f4929c9982dca303dc8df22314e.sample"

[deps]

source_file="res://assets/music/steam_gardens_slowed.wav"
dest_files=["res://.godot/imported/steam_gardens_slowed.wav-a9221f4929c9982dca303dc8df22314e.sample"]

[params]

force/8_bit=false
force/mono=false
force/max_rate=false
force/max_rate_hz=44100
edit/trim=false
edit/normalize=false
edit/loop_mode=2
edit/loop_begin=0
edit/loop_end=-1
compress/mode=2
</file>

<file path="assets/music/time_for_adventure.mp3.import">
[remap]

importer="mp3"
type="AudioStreamMP3"
uid="uid://ieuo0k7xr2ci"
path="res://.godot/imported/time_for_adventure.mp3-b8a49ae1cfc83b211be9d82e6e985655.mp3str"

[deps]

source_file="res://assets/music/time_for_adventure.mp3"
dest_files=["res://.godot/imported/time_for_adventure.mp3-b8a49ae1cfc83b211be9d82e6e985655.mp3str"]

[params]

loop=false
loop_offset=0
bpm=0
beat_count=0
bar_beats=4
</file>

<file path="assets/scenes/crt_shader.tscn">
[gd_scene load_steps=3 format=3 uid="uid://cfjwdbp0vsk1a"]

[ext_resource type="Shader" uid="uid://dtcblh51mq0of" path="res://shaders/crt.gdshader" id="1_70rfk"]

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ne4ig"]
shader = ExtResource("1_70rfk")
shader_parameter/resolution = Vector2(640, 360)
shader_parameter/scan_line_amount = 1.0
shader_parameter/warp_amount = 0.1
shader_parameter/noise_amount = 0.03
shader_parameter/interference_amount = 0.2
shader_parameter/grille_amount = 0.1
shader_parameter/grille_size = 1.0
shader_parameter/vignette_amount = 0.6
shader_parameter/vignette_intensity = 0.4
shader_parameter/aberation_amount = 0.5
shader_parameter/roll_line_amount = 0.0
shader_parameter/roll_speed = 1.0
shader_parameter/scan_line_strength = -8.0
shader_parameter/pixel_strength = -2.0

[node name="CRT_Shader" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="ColorRect" type="ColorRect" parent="."]
material = SubResource("ShaderMaterial_ne4ig")
layout_mode = 0
offset_right = 1153.0
offset_bottom = 649.0
</file>

<file path="assets/scenes/InventoryGridItemUI.tscn">
[gd_scene load_steps=6 format=3 uid="uid://bt4wvwr8oqckg"]

[ext_resource type="Script" uid="uid://caosp0lfxj55a" path="res://addons/Inventory/UI/InventoryGridUI/InventoryGridItemUI.gd" id="1_ttkqk"]
[ext_resource type="Script" uid="uid://cg0mxyfmmwwak" path="res://addons/Inventory/UI/InventoryGridUI/InventoryPopupTooltip.gd" id="3_ntwrb"]

[sub_resource type="AtlasTexture" id="AtlasTexture_v0o4h"]
region = Rect2(0, 0, 8, 8)

[sub_resource type="LabelSettings" id="LabelSettings_q2gjs"]
font_size = 5

[sub_resource type="LabelSettings" id="LabelSettings_21oa0"]

[node name="InventoryGridItemUI" type="PanelContainer"]
custom_minimum_size = Vector2(32, 32)
offset_right = 12.0
offset_bottom = 12.0
script = ExtResource("1_ttkqk")

[node name="Icon" type="TextureRect" parent="."]
custom_minimum_size = Vector2(8, 0)
layout_mode = 2
texture = SubResource("AtlasTexture_v0o4h")
stretch_mode = 5

[node name="Count" type="Label" parent="Icon"]
layout_mode = 1
anchors_preset = 1
anchor_left = 1.0
anchor_right = 1.0
offset_left = -2.0
offset_top = -4.0
offset_right = 4.0
offset_bottom = 6.0
grow_horizontal = 0
size_flags_horizontal = 4
text = "1"
label_settings = SubResource("LabelSettings_q2gjs")
horizontal_alignment = 2
vertical_alignment = 1

[node name="Tooltip" type="CanvasLayer" parent="."]
layer = 20
visible = false

[node name="Container" type="PanelContainer" parent="Tooltip"]
offset_right = 112.0
offset_bottom = 68.0
mouse_filter = 2
script = ExtResource("3_ntwrb")

[node name="VBoxContainer" type="VBoxContainer" parent="Tooltip/Container"]
layout_mode = 2
mouse_filter = 2

[node name="Title" type="Label" parent="Tooltip/Container/VBoxContainer"]
layout_mode = 2
text = "Title"
label_settings = SubResource("LabelSettings_21oa0")
horizontal_alignment = 1

[node name="Text" type="RichTextLabel" parent="Tooltip/Container/VBoxContainer"]
custom_minimum_size = Vector2(100, 0)
layout_mode = 2
mouse_filter = 2
bbcode_enabled = true
text = "Tooltip description here..."
fit_content = true
scroll_active = false
shortcut_keys_enabled = false
</file>

<file path="assets/scenes/InventoryListItemUI.tscn">
[gd_scene load_steps=7 format=3 uid="uid://dx0nelbl5t6pt"]

[ext_resource type="Script" uid="uid://crbxmja2hsbda" path="res://addons/Inventory/UI/List/InventoryListItemUI.gd" id="1_p4nf2"]
[ext_resource type="Script" uid="uid://c2kq0x5odumur" path="res://addons/Inventory/InventoryItemType.gd" id="2_pj05p"]
[ext_resource type="Script" uid="uid://c31st5sfn50qu" path="res://addons/Inventory/InventoryItem.gd" id="3_ciutl"]
[ext_resource type="Script" uid="uid://bvegqwtipxnbg" path="res://addons/Inventory/UI/PingPongScroller.gd" id="4_g7qem"]

[sub_resource type="Resource" id="Resource_xf6fd"]
script = ExtResource("2_pj05p")
name = "Unknown Item with very long random ass text"
description = ""
weight = 1
stackable = true
max_stack_size = 99

[sub_resource type="Resource" id="Resource_73rdj"]
script = ExtResource("3_ciutl")
item_type = SubResource("Resource_xf6fd")
custom_name = ""

[node name="InventoryListItemUI" type="PanelContainer"]
offset_right = 160.0
offset_bottom = 25.0
script = ExtResource("1_p4nf2")
item = SubResource("Resource_73rdj")

[node name="BoxContainer" type="BoxContainer" parent="."]
layout_mode = 2
theme_override_constants/separation = 16

[node name="Name" type="Container" parent="BoxContainer"]
clip_contents = true
custom_minimum_size = Vector2(87.23, 0)
layout_mode = 2
script = ExtResource("4_g7qem")

[node name="Label" type="Label" parent="BoxContainer/Name"]
layout_mode = 2
text = "Steel Sword of Power"
vertical_alignment = 1

[node name="Stack" type="Label" parent="BoxContainer"]
layout_mode = 2
text = "(1)"

[node name="Weight" type="Label" parent="BoxContainer"]
layout_mode = 2
text = "1kg"
</file>

<file path="assets/scenes/player_inventory.tres">
[gd_resource type="Resource" script_class="Inventory" load_steps=2 format=3 uid="uid://tc2oqyms7jt2"]

[ext_resource type="Script" uid="uid://drdwdl32kthr4" path="res://addons/Inventory/Inventory.gd" id="1_lqn4d"]

[resource]
script = ExtResource("1_lqn4d")
capacity = 5
metadata/_custom_type_script = "uid://drdwdl32kthr4"
</file>

<file path="assets/scenes/player_inventory.tscn">
[gd_scene load_steps=5 format=3 uid="uid://bomywyw1q8djp"]

[ext_resource type="Script" uid="uid://xiu1moqcmuwf" path="res://scripts/ladder.gd" id="1_mhobc"]
[ext_resource type="Texture2D" uid="uid://bcm1qkp4dydjd" path="res://assets/sprites/Miner16Bit_AllFiles_v1/Miner16Bit_WorldTiles_02.png" id="2_eatdc"]

[sub_resource type="AtlasTexture" id="AtlasTexture_xxwne"]
atlas = ExtResource("2_eatdc")
region = Rect2(0, 0, 128, 128)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_xb1tl"]
size = Vector2(8, 16)

[node name="Ladder" type="Area2D" groups=["ladders"]]
script = ExtResource("1_mhobc")

[node name="Sprite2D" type="Sprite2D" parent="."]
texture = SubResource("AtlasTexture_xxwne")
region_enabled = true
region_rect = Rect2(112, 80, 16, 16)

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(-1, 0)
shape = SubResource("RectangleShape2D_xb1tl")

[connection signal="body_entered" from="." to="." method="_on_body_entered"]
[connection signal="body_exited" from="." to="." method="_on_body_exited"]
</file>

<file path="assets/scenes/title_screen.tscn">
[gd_scene load_steps=3 format=3 uid="uid://do4jih7oduo1b"]

[ext_resource type="Texture2D" uid="uid://dy5ixplrptlvo" path="res://img/background_image.png" id="1_j8fbj"]
[ext_resource type="Script" uid="uid://jpbvw88086wp" path="res://scripts/title_screen.gd" id="1_tlwn0"]

[node name="TitleScreen" type="Control"]
layout_mode = 3
anchors_preset = 0
offset_right = 40.0
offset_bottom = 40.0
script = ExtResource("1_tlwn0")

[node name="BackgroundImage" type="TextureRect" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = -204.0
offset_right = 1316.0
offset_bottom = 608.0
grow_horizontal = 2
grow_vertical = 2
texture = ExtResource("1_j8fbj")
expand_mode = 3
stretch_mode = 5

[node name="StartButton" type="Button" parent="."]
layout_mode = 0
offset_left = 720.0
offset_top = 260.0
offset_right = 948.0
offset_bottom = 325.0
theme_override_font_sizes/font_size = 40
text = "Start Game"

[node name="QuitButton" type="Button" parent="."]
layout_mode = 0
offset_left = 720.0
offset_top = 360.0
offset_right = 948.0
offset_bottom = 425.0
theme_override_font_sizes/font_size = 40
text = "Quit Game"

[connection signal="pressed" from="StartButton" to="." method="_on_start_button_pressed"]
[connection signal="pressed" from="QuitButton" to="." method="_on_quit_button_pressed"]
</file>

<file path="assets/sounds/coin.wav.import">
[remap]

importer="wav"
type="AudioStreamWAV"
uid="uid://cd1b2n4k0ooft"
path="res://.godot/imported/coin.wav-9081ee1c6d81d9c34d08bc916297b892.sample"

[deps]

source_file="res://assets/sounds/coin.wav"
dest_files=["res://.godot/imported/coin.wav-9081ee1c6d81d9c34d08bc916297b892.sample"]

[params]

force/8_bit=false
force/mono=false
force/max_rate=false
force/max_rate_hz=44100
edit/trim=false
edit/normalize=false
edit/loop_mode=0
edit/loop_begin=0
edit/loop_end=-1
compress/mode=2
</file>

<file path="assets/sounds/dig1.mp3.import">
[remap]

importer="mp3"
type="AudioStreamMP3"
uid="uid://b0grpfvqb5ua1"
path="res://.godot/imported/dig1.mp3-ba6a7be689a7a9136039e7260ab7b5a8.mp3str"

[deps]

source_file="res://assets/sounds/dig1.mp3"
dest_files=["res://.godot/imported/dig1.mp3-ba6a7be689a7a9136039e7260ab7b5a8.mp3str"]

[params]

loop=false
loop_offset=0
bpm=0
beat_count=0
bar_beats=4
</file>

<file path="assets/sounds/dig2.mp3.import">
[remap]

importer="mp3"
type="AudioStreamMP3"
uid="uid://dqu0216h86oxu"
path="res://.godot/imported/dig2.mp3-fa8a0b827bcbc532d287e5a9433305f6.mp3str"

[deps]

source_file="res://assets/sounds/dig2.mp3"
dest_files=["res://.godot/imported/dig2.mp3-fa8a0b827bcbc532d287e5a9433305f6.mp3str"]

[params]

loop=false
loop_offset=0
bpm=0
beat_count=0
bar_beats=4
</file>

<file path="assets/sounds/explosion.wav.import">
[remap]

importer="wav"
type="AudioStreamWAV"
uid="uid://dpbt6838n2tnc"
path="res://.godot/imported/explosion.wav-52e05e8d4b6600106c8dde082c90f915.sample"

[deps]

source_file="res://assets/sounds/explosion.wav"
dest_files=["res://.godot/imported/explosion.wav-52e05e8d4b6600106c8dde082c90f915.sample"]

[params]

force/8_bit=false
force/mono=false
force/max_rate=false
force/max_rate_hz=44100
edit/trim=false
edit/normalize=false
edit/loop_mode=0
edit/loop_begin=0
edit/loop_end=-1
compress/mode=2
</file>

<file path="assets/sounds/hurt.wav.import">
[remap]

importer="wav"
type="AudioStreamWAV"
uid="uid://dk0c7xq65nnct"
path="res://.godot/imported/hurt.wav-792baeb99505afd6a1496d4e4330b023.sample"

[deps]

source_file="res://assets/sounds/hurt.wav"
dest_files=["res://.godot/imported/hurt.wav-792baeb99505afd6a1496d4e4330b023.sample"]

[params]

force/8_bit=false
force/mono=false
force/max_rate=false
force/max_rate_hz=44100
edit/trim=false
edit/normalize=false
edit/loop_mode=0
edit/loop_begin=0
edit/loop_end=-1
compress/mode=2
</file>

<file path="assets/sounds/jump.wav.import">
[remap]

importer="wav"
type="AudioStreamWAV"
uid="uid://bawabjij02gso"
path="res://.godot/imported/jump.wav-395b727cde98999423d5c020c9c3492f.sample"

[deps]

source_file="res://assets/sounds/jump.wav"
dest_files=["res://.godot/imported/jump.wav-395b727cde98999423d5c020c9c3492f.sample"]

[params]

force/8_bit=false
force/mono=false
force/max_rate=false
force/max_rate_hz=44100
edit/trim=false
edit/normalize=false
edit/loop_mode=0
edit/loop_begin=0
edit/loop_end=-1
compress/mode=2
</file>

<file path="assets/sounds/ladder-climbing.mp3.import">
[remap]

importer="mp3"
type="AudioStreamMP3"
uid="uid://ympmury34vme"
path="res://.godot/imported/ladder-climbing.mp3-c30ec0aa46ea4af99e357fed242c51d7.mp3str"

[deps]

source_file="res://assets/sounds/ladder-climbing.mp3"
dest_files=["res://.godot/imported/ladder-climbing.mp3-c30ec0aa46ea4af99e357fed242c51d7.mp3str"]

[params]

loop=false
loop_offset=0
bpm=0
beat_count=0
bar_beats=4
</file>

<file path="assets/sounds/ladder-create.ogg.import">
[remap]

importer="oggvorbisstr"
type="AudioStreamOggVorbis"
uid="uid://bbhbi0jxvy13x"
path="res://.godot/imported/ladder-create.ogg-70bfb0fd74a87bbf33a3e7500e4a9278.oggvorbisstr"

[deps]

source_file="res://assets/sounds/ladder-create.ogg"
dest_files=["res://.godot/imported/ladder-create.ogg-70bfb0fd74a87bbf33a3e7500e4a9278.oggvorbisstr"]

[params]

loop=false
loop_offset=0
bpm=0
beat_count=0
bar_beats=4
</file>

<file path="assets/sounds/ladder-destroy.ogg.import">
[remap]

importer="oggvorbisstr"
type="AudioStreamOggVorbis"
uid="uid://y63k8i7xjsa6"
path="res://.godot/imported/ladder-destroy.ogg-4002f9f05f168b54370c3070e87cfab1.oggvorbisstr"

[deps]

source_file="res://assets/sounds/ladder-destroy.ogg"
dest_files=["res://.godot/imported/ladder-destroy.ogg-4002f9f05f168b54370c3070e87cfab1.oggvorbisstr"]

[params]

loop=false
loop_offset=0
bpm=0
beat_count=0
bar_beats=4
</file>

<file path="assets/sounds/power_up.wav.import">
[remap]

importer="wav"
type="AudioStreamWAV"
uid="uid://c2mmf08j734fm"
path="res://.godot/imported/power_up.wav-8349ffe570559470036ebff4b80f7fc0.sample"

[deps]

source_file="res://assets/sounds/power_up.wav"
dest_files=["res://.godot/imported/power_up.wav-8349ffe570559470036ebff4b80f7fc0.sample"]

[params]

force/8_bit=false
force/mono=false
force/max_rate=false
force/max_rate_hz=44100
edit/trim=false
edit/normalize=false
edit/loop_mode=0
edit/loop_begin=0
edit/loop_end=-1
compress/mode=2
</file>

<file path="assets/sounds/tap.wav.import">
[remap]

importer="wav"
type="AudioStreamWAV"
uid="uid://cgp77733x0sa7"
path="res://.godot/imported/tap.wav-78d4c5a48b21a853d89bec74f20510e7.sample"

[deps]

source_file="res://assets/sounds/tap.wav"
dest_files=["res://.godot/imported/tap.wav-78d4c5a48b21a853d89bec74f20510e7.sample"]

[params]

force/8_bit=false
force/mono=false
force/max_rate=false
force/max_rate_hz=44100
edit/trim=false
edit/normalize=false
edit/loop_mode=0
edit/loop_begin=0
edit/loop_end=-1
compress/mode=2
</file>

<file path="assets/sounds/walk1.wav.import">
[remap]

importer="wav"
type="AudioStreamWAV"
uid="uid://0elaoiukcq1r"
path="res://.godot/imported/walk1.wav-5746d954ba0d0d2b4cfce3f17c2debc4.sample"

[deps]

source_file="res://assets/sounds/walk1.wav"
dest_files=["res://.godot/imported/walk1.wav-5746d954ba0d0d2b4cfce3f17c2debc4.sample"]

[params]

force/8_bit=false
force/mono=false
force/max_rate=false
force/max_rate_hz=44100
edit/trim=false
edit/normalize=false
edit/loop_mode=0
edit/loop_begin=0
edit/loop_end=-1
compress/mode=2
</file>

<file path="assets/sounds/walk2.ogg.import">
[remap]

importer="oggvorbisstr"
type="AudioStreamOggVorbis"
uid="uid://o1eseoysmf2y"
path="res://.godot/imported/walk2.ogg-09f6b39044f88444c804b03531813d88.oggvorbisstr"

[deps]

source_file="res://assets/sounds/walk2.ogg"
dest_files=["res://.godot/imported/walk2.ogg-09f6b39044f88444c804b03531813d88.oggvorbisstr"]

[params]

loop=false
loop_offset=0
bpm=0
beat_count=0
bar_beats=4
</file>

<file path="assets/sounds/walk3.ogg.import">
[remap]

importer="oggvorbisstr"
type="AudioStreamOggVorbis"
uid="uid://b6hbsvqkflhua"
path="res://.godot/imported/walk3.ogg-c5bfdf3398e5520b7699a73f0ae1538e.oggvorbisstr"

[deps]

source_file="res://assets/sounds/walk3.ogg"
dest_files=["res://.godot/imported/walk3.ogg-c5bfdf3398e5520b7699a73f0ae1538e.oggvorbisstr"]

[params]

loop=false
loop_offset=0
bpm=0
beat_count=0
bar_beats=4
</file>

<file path="assets/sounds/walk4.ogg.import">
[remap]

importer="oggvorbisstr"
type="AudioStreamOggVorbis"
uid="uid://cst4way2ey61b"
path="res://.godot/imported/walk4.ogg-3d5162e4a896847cde6b3fc129710cb1.oggvorbisstr"

[deps]

source_file="res://assets/sounds/walk4.ogg"
dest_files=["res://.godot/imported/walk4.ogg-3d5162e4a896847cde6b3fc129710cb1.oggvorbisstr"]

[params]

loop=false
loop_offset=0
bpm=0
beat_count=0
bar_beats=4
</file>

<file path="assets/sprites/other/scenes/crt_shader.tscn">
[gd_scene load_steps=3 format=3 uid="uid://dubr81815qgi"]

[ext_resource type="Shader" uid="uid://dtcblh51mq0of" path="res://shaders/crt.gdshader" id="1_70rfk"]

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ne4ig"]
shader = ExtResource("1_70rfk")
shader_parameter/resolution = Vector2(640, 360)
shader_parameter/scan_line_amount = 1.0
shader_parameter/warp_amount = 0.1
shader_parameter/noise_amount = 0.03
shader_parameter/interference_amount = 0.2
shader_parameter/grille_amount = 0.1
shader_parameter/grille_size = 1.0
shader_parameter/vignette_amount = 0.6
shader_parameter/vignette_intensity = 0.4
shader_parameter/aberation_amount = 0.5
shader_parameter/roll_line_amount = 0.0
shader_parameter/roll_speed = 1.0
shader_parameter/scan_line_strength = -8.0
shader_parameter/pixel_strength = -2.0

[node name="CRT_Shader" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="ColorRect" type="ColorRect" parent="."]
material = SubResource("ShaderMaterial_ne4ig")
layout_mode = 0
offset_right = 1153.0
offset_bottom = 649.0
</file>

<file path="assets/sprites/other/scenes/game.tscn20151021202.tmp">
[gd_scene load_steps=21 format=4 uid="uid://b1kkjep7v1n52"]

[ext_resource type="PackedScene" uid="uid://4yp0qu72jr2b" path="res://scenes/player.tscn" id="1_uwrxv"]
[ext_resource type="Script" uid="uid://dm3iihye8a3wy" path="res://scripts/game.gd" id="1_vtaks"]
[ext_resource type="Texture2D" uid="uid://bcm1qkp4dydjd" path="res://assets/sprites/Miner16Bit_AllFiles_v1/Miner16Bit_WorldTiles_02.png" id="1_yqjtg"]
[ext_resource type="PackedScene" uid="uid://dubr81815qgi" path="res://scenes/crt_shader.tscn" id="2_gee14"]
[ext_resource type="Texture2D" uid="uid://c637msvthmlc2" path="res://assets/sprites/other/sheet.png" id="2_lnu2h"]
[ext_resource type="Texture2D" uid="uid://4upmho5qau0g" path="res://assets/sprites/other/Tileset_Cave.png" id="3_iywne"]
[ext_resource type="Texture2D" uid="uid://7a3no0tyqneu" path="res://assets/sprites/other/tilesetcave.png" id="4_p57ef"]
[ext_resource type="Script" uid="uid://cc8x1tg73jmw1" path="res://scripts/game_over_ui.gd" id="5_dinhu"]
[ext_resource type="Shader" uid="uid://clgqqxru7jg8" path="res://shaders/grayscale_shader.gdshader" id="5_kvpfn"]
[ext_resource type="AudioStream" uid="uid://bs1k4f7ulp015" path="res://assets/music/steam_gardens_slowed.wav" id="6_p57ef"]
[ext_resource type="PackedScene" uid="uid://dmf6diflfftrc" path="res://scenes/ladder.tscn" id="7_u5sy4"]
[ext_resource type="Script" uid="uid://cmf651j7qk52t" path="res://scripts/ui.gd" id="9_0tnpc"]

[sub_resource type="WorldBoundaryShape2D" id="WorldBoundaryShape2D_yqjtg"]
distance = -356.0

[sub_resource type="WorldBoundaryShape2D" id="WorldBoundaryShape2D_lnu2h"]
distance = -524.0

[sub_resource type="ShaderMaterial" id="ShaderMaterial_dinhu"]
shader = ExtResource("5_kvpfn")

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_lnu2h"]
texture = ExtResource("1_yqjtg")
0:0/0 = 0
0:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
0:0/0/custom_data_0 = true
0:0/0/custom_data_1 = 1.0
2:0/0 = 0
2:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
2:0/0/custom_data_0 = true
2:0/0/custom_data_1 = 1.0
3:0/0 = 0
3:0/0/custom_data_0 = true
3:0/0/custom_data_1 = 10.0
4:0/0 = 0
4:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
4:0/0/custom_data_0 = true
4:0/0/custom_data_1 = 1.0
5:0/0 = 0
5:0/0/custom_data_0 = true
5:0/0/custom_data_1 = 1.0
6:0/0 = 0
6:0/0/custom_data_0 = true
6:0/0/custom_data_1 = 1.0
7:0/0 = 0
0:1/0 = 0
0:1/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
0:1/0/custom_data_0 = true
0:1/0/custom_data_1 = 1.0
1:1/0 = 0
1:1/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
1:1/0/custom_data_0 = true
1:1/0/custom_data_1 = 1.0
2:1/0 = 0
2:1/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
2:1/0/custom_data_0 = true
2:1/0/custom_data_1 = 1.0
4:1/0 = 0
4:1/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
4:1/0/custom_data_0 = true
4:1/0/custom_data_1 = 1.0
5:1/0 = 0
5:1/0/custom_data_0 = true
5:1/0/custom_data_1 = 1.0
6:1/0 = 0
6:1/0/custom_data_0 = true
6:1/0/custom_data_1 = 1.0
7:1/0 = 0
0:2/0 = 0
0:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
0:2/0/custom_data_0 = true
0:2/0/custom_data_1 = 1.0
1:2/0 = 0
1:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
1:2/0/custom_data_0 = true
1:2/0/custom_data_1 = 1.0
2:2/0 = 0
2:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
2:2/0/custom_data_0 = true
2:2/0/custom_data_1 = 1.0
3:2/0 = 0
3:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
3:2/0/custom_data_0 = true
3:2/0/custom_data_1 = 1.0
4:2/0 = 0
4:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
4:2/0/custom_data_0 = true
4:2/0/custom_data_1 = 1.0
5:2/0 = 0
5:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
5:2/0/custom_data_0 = true
5:2/0/custom_data_1 = 1.0
6:2/0 = 0
6:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
6:2/0/custom_data_0 = true
6:2/0/custom_data_1 = 1.0
7:2/0 = 0
0:3/0 = 0
1:3/0 = 0
2:3/0 = 0
3:3/0 = 0
4:3/0 = 0
4:3/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
4:3/0/custom_data_0 = true
5:3/0 = 0
0:4/0 = 0
2:4/0 = 0
3:4/0 = 0
5:4/0 = 0
0:5/0 = 0
1:5/0 = 0
2:5/0 = 0
3:5/0 = 0
5:5/0 = 0
7:5/0 = 0
0:6/0 = 0
1:6/0 = 0
3:6/0 = 0
5:6/0 = 0
6:6/0 = 0
7:6/0 = 0
3:7/0 = 0
5:7/0 = 0
6:7/0 = 0
7:7/0 = 0
1:0/0 = 0
1:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
1:0/0/custom_data_0 = true
1:0/0/custom_data_1 = 1.0

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_lbhrr"]
texture = ExtResource("2_lnu2h")
0:0/0 = 0
1:0/0 = 0
2:0/0 = 0
3:0/0 = 0
4:0/0 = 0
5:0/0 = 0
6:0/0 = 0
7:0/0 = 0
8:0/0 = 0
9:0/0 = 0
10:0/0 = 0
11:0/0 = 0
12:0/0 = 0
13:0/0 = 0
14:0/0 = 0
15:0/0 = 0
16:0/0 = 0
0:1/0 = 0
1:1/0 = 0
2:1/0 = 0
3:1/0 = 0
4:1/0 = 0
5:1/0 = 0
7:1/0 = 0
8:1/0 = 0
9:1/0 = 0
10:1/0 = 0
11:1/0 = 0
12:1/0 = 0
13:1/0 = 0
14:1/0 = 0
15:1/0 = 0
16:1/0 = 0
2:2/0 = 0
3:2/0 = 0
4:2/0 = 0
7:2/0 = 0
8:2/0 = 0
9:2/0 = 0
10:2/0 = 0
11:2/0 = 0
12:2/0 = 0
13:2/0 = 0
14:2/0 = 0
15:2/0 = 0
16:2/0 = 0
3:3/0 = 0
4:3/0 = 0
5:3/0 = 0
7:3/0 = 0
8:3/0 = 0
9:3/0 = 0
10:3/0 = 0
11:3/0 = 0
12:3/0 = 0
13:3/0 = 0
14:3/0 = 0
15:3/0 = 0
16:3/0 = 0
3:4/0 = 0
4:4/0 = 0
5:4/0 = 0
7:4/0 = 0
8:4/0 = 0
9:4/0 = 0
10:4/0 = 0
11:4/0 = 0
12:4/0 = 0
13:4/0 = 0
14:4/0 = 0
15:4/0 = 0
16:4/0 = 0
3:5/0 = 0
4:5/0 = 0
7:5/0 = 0
8:5/0 = 0
9:5/0 = 0
10:5/0 = 0
11:5/0 = 0
12:5/0 = 0
13:5/0 = 0
14:5/0 = 0
15:5/0 = 0
16:5/0 = 0
3:6/0 = 0
4:6/0 = 0
7:6/0 = 0
8:6/0 = 0
9:6/0 = 0
10:6/0 = 0
11:6/0 = 0
12:6/0 = 0
13:6/0 = 0
14:6/0 = 0
15:6/0 = 0
16:6/0 = 0
2:7/0 = 0
3:7/0 = 0
4:7/0 = 0
5:7/0 = 0

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_u5sy4"]
texture = ExtResource("3_iywne")
0:0/0 = 0
1:0/0 = 0
2:0/0 = 0
3:0/0 = 0
4:0/0 = 0
5:0/0 = 0
6:0/0 = 0
7:0/0 = 0
8:0/0 = 0
0:1/0 = 0
1:1/0 = 0
2:1/0 = 0
3:1/0 = 0
4:1/0 = 0
5:1/0 = 0
6:1/0 = 0
7:1/0 = 0
8:1/0 = 0
0:2/0 = 0
1:2/0 = 0
2:2/0 = 0
3:2/0 = 0
4:2/0 = 0
5:2/0 = 0
0:3/0 = 0
1:3/0 = 0
2:3/0 = 0

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_gee14"]
texture = ExtResource("4_p57ef")
4:1/0 = 0
5:1/0 = 0
6:1/0 = 0
7:1/0 = 0
4:2/0 = 0
5:2/0 = 0
6:2/0 = 0
7:2/0 = 0
4:4/0 = 0
5:4/0 = 0
7:4/0 = 0
8:4/0 = 0
9:4/0 = 0
10:4/0 = 0
11:4/0 = 0
12:4/0 = 0
4:5/0 = 0
5:5/0 = 0
7:5/0 = 0
8:5/0 = 0
9:5/0 = 0
10:5/0 = 0
11:5/0 = 0
12:5/0 = 0
4:6/0 = 0
5:6/0 = 0
7:6/0 = 0
8:6/0 = 0
9:6/0 = 0
10:6/0 = 0
11:6/0 = 0
12:6/0 = 0
4:7/0 = 0
5:7/0 = 0
7:7/0 = 0
8:7/0 = 0
9:7/0 = 0
10:7/0 = 0
11:7/0 = 0
12:7/0 = 0
4:8/0 = 0
5:8/0 = 0
7:8/0 = 0
8:8/0 = 0
9:8/0 = 0
10:8/0 = 0
11:8/0 = 0
12:8/0 = 0
4:9/0 = 0
5:9/0 = 0
7:9/0 = 0
8:9/0 = 0
9:9/0 = 0
10:9/0 = 0
11:9/0 = 0
12:9/0 = 0
7:11/0 = 0
8:11/0 = 0
9:11/0 = 0
10:11/0 = 0
11:11/0 = 0
12:11/0 = 0
7:12/0 = 0
8:12/0 = 0
9:12/0 = 0
10:12/0 = 0
11:12/0 = 0
12:12/0 = 0

[sub_resource type="TileSet" id="TileSet_lbhrr"]
physics_layer_0/collision_layer = 1
custom_data_layer_0/name = "diggable"
custom_data_layer_0/type = 1
custom_data_layer_1/name = "dig_time"
custom_data_layer_1/type = 3
sources/3 = SubResource("TileSetAtlasSource_lnu2h")
sources/4 = SubResource("TileSetAtlasSource_lbhrr")
sources/5 = SubResource("TileSetAtlasSource_u5sy4")
sources/6 = SubResource("TileSetAtlasSource_gee14")

[node name="Game" type="Node2D"]
script = ExtResource("1_vtaks")

[node name="LeftBoundry" type="StaticBody2D" parent="."]
position = Vector2(0, -9)

[node name="CollisionShape2D" type="CollisionShape2D" parent="LeftBoundry"]
position = Vector2(-137, -5)
rotation = 1.5708
shape = SubResource("WorldBoundaryShape2D_yqjtg")

[node name="RightBoundry" type="StaticBody2D" parent="."]
position = Vector2(0, -9)

[node name="CollisionShape2D" type="CollisionShape2D" parent="RightBoundry"]
position = Vector2(0, -4)
rotation = -1.5708
shape = SubResource("WorldBoundaryShape2D_lnu2h")

[node name="Music" type="AudioStreamPlayer" parent="."]
stream = ExtResource("6_p57ef")
volume_db = -30.0
autoplay = true

[node name="CRT_Shader" parent="." instance=ExtResource("2_gee14")]
z_index = 4096
offset_left = -551.0
offset_top = -325.0
offset_right = 753.0
offset_bottom = 453.0

[node name="UI" type="CanvasLayer" parent="."]
script = ExtResource("9_0tnpc")

[node name="LadderCountLabel" type="Label" parent="UI"]
offset_left = 10.0
offset_top = 10.0
offset_right = 50.0
offset_bottom = 33.0
theme_override_font_sizes/font_size = 34
text = "Drabiny: 5"

[node name="HealthLabel" type="Label" parent="UI"]
offset_left = 10.0
offset_top = 60.0
offset_right = 281.0
offset_bottom = 107.0
theme_override_font_sizes/font_size = 34
text = "HP: 100/100"

[node name="GameOverLayer" type="CanvasLayer" parent="."]
process_mode = 3
layer = 10
script = ExtResource("5_dinhu")

[node name="GrayscaleEffectRect" type="ColorRect" parent="GameOverLayer"]
material = SubResource("ShaderMaterial_dinhu")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
color = Color(1, 1, 1, 0)

[node name="GameOverLabel" type="Label" parent="GameOverLayer"]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_font_sizes/font_size = 100
text = "GAME OVER"
horizontal_alignment = 1
vertical_alignment = 1

[node name="RestartButton" type="Button" parent="GameOverLayer"]
process_mode = 3
anchors_preset = 7
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
offset_left = -87.5
offset_top = -198.0
offset_right = 87.5
offset_bottom = -135.0
grow_horizontal = 2
grow_vertical = 0
theme_override_font_sizes/font_size = 40
text = "RESTART"

[node name="WorldContainer" type="Node2D" parent="."]

[node name="TileMap" type="Node2D" parent="WorldContainer"]

[node name="Background" type="TileMapLayer" parent="WorldContainer/TileMap"]
light_mask = 0
z_index = -1
use_parent_material = true
tile_map_data = PackedByteArray("")
tile_set = SubResource("TileSet_lbhrr")

[node name="Ground" type="TileMapLayer" parent="WorldContainer/TileMap"]
use_parent_material = true
tile_map_data = PackedByteArray("")
tile_set = SubResource("TileSet_lbhrr")

[node name="Player" parent="WorldContainer" node_paths=PackedStringArray("ground_tilemap") groups=["player", "players"] instance=ExtResource("1_uwrxv")]
position = Vector2(0, -19)
collision_layer = 1
ladder_scene = ExtResource("7_u5sy4")
ground_tilemap = NodePath("../TileMap/Ground")

[node name="Camera2D" type="Camera2D" parent="WorldContainer/Player"]
position = Vector2(0, -8)
zoom = Vector2(4, 4)
position_smoothing_enabled = true

[node name="Ladders" type="Node" parent="WorldContainer"]

[node name="Ladder" parent="WorldContainer/Ladders" instance=ExtResource("7_u5sy4")]
position = Vector2(57, 40)

[node name="Ladder2" parent="WorldContainer/Ladders" instance=ExtResource("7_u5sy4")]
position = Vector2(57, 24)

[node name="Ladder3" parent="WorldContainer/Ladders" instance=ExtResource("7_u5sy4")]
position = Vector2(57, 8)

[node name="Ladder4" parent="WorldContainer/Ladders" instance=ExtResource("7_u5sy4")]
position = Vector2(25, 72)

[node name="Ladder5" parent="WorldContainer/Ladders" instance=ExtResource("7_u5sy4")]
position = Vector2(25, 56)

[node name="Ladder6" parent="WorldContainer/Ladders" instance=ExtResource("7_u5sy4")]
position = Vector2(25, 40)

[connection signal="pressed" from="GameOverLayer/RestartButton" to="GameOverLayer" method="_on_restart_button_pressed"]
</file>

<file path="assets/sprites/other/scenes/ladder.tscn">
[gd_scene load_steps=5 format=3 uid="uid://dmf6diflfftrc"]

[ext_resource type="Script" uid="uid://xiu1moqcmuwf" path="res://scripts/ladder.gd" id="1_xb1tl"]
[ext_resource type="Texture2D" uid="uid://bcm1qkp4dydjd" path="res://assets/sprites/Miner16Bit_AllFiles_v1/Miner16Bit_WorldTiles_02.png" id="1_xxwne"]

[sub_resource type="AtlasTexture" id="AtlasTexture_xxwne"]
atlas = ExtResource("1_xxwne")

[sub_resource type="RectangleShape2D" id="RectangleShape2D_xb1tl"]
size = Vector2(8, 16)

[node name="Ladder" type="Area2D" groups=["ladders"]]
script = ExtResource("1_xb1tl")

[node name="Sprite2D" type="Sprite2D" parent="."]
texture = SubResource("AtlasTexture_xxwne")
region_enabled = true
region_rect = Rect2(112, 80, 16, 16)

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(-1, 0)
shape = SubResource("RectangleShape2D_xb1tl")

[connection signal="body_entered" from="." to="." method="_on_body_entered"]
[connection signal="body_exited" from="." to="." method="_on_body_exited"]
</file>

<file path="assets/sprites/other/scenes/player.tscn20153892974.tmp">
[gd_scene load_steps=37 format=3 uid="uid://4yp0qu72jr2b"]

[ext_resource type="Script" uid="uid://cq0ybetkfcej5" path="res://scripts/player.gd" id="1_g2els"]
[ext_resource type="Texture2D" uid="uid://owxmkmo3hff" path="res://assets/sprites/Miner16Bit_AllFiles_v1/Miner_AllAnimations_SpriteSheet.png" id="2_g2els"]
[ext_resource type="AudioStream" uid="uid://ympmury34vme" path="res://assets/sounds/ladder-climbing.mp3" id="3_qhqgy"]
[ext_resource type="AudioStream" uid="uid://bawabjij02gso" path="res://assets/sounds/jump.wav" id="4_qlg0r"]
[ext_resource type="AudioStream" uid="uid://o1eseoysmf2y" path="res://assets/sounds/walk2.ogg" id="5_qlg0r"]

[sub_resource type="AtlasTexture" id="AtlasTexture_y4r1p"]
atlas = ExtResource("2_g2els")
region = Rect2(0, 80, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_d2wvv"]
atlas = ExtResource("2_g2els")
region = Rect2(16, 80, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_3v2ag"]
atlas = ExtResource("2_g2els")
region = Rect2(32, 80, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_jej6c"]
atlas = ExtResource("2_g2els")
region = Rect2(48, 80, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_60mlk"]
atlas = ExtResource("2_g2els")
region = Rect2(0, 96, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_i4ail"]
atlas = ExtResource("2_g2els")
region = Rect2(16, 96, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_a38lo"]
atlas = ExtResource("2_g2els")
region = Rect2(32, 96, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_4ni07"]
atlas = ExtResource("2_g2els")
region = Rect2(48, 96, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_l71n6"]
atlas = ExtResource("2_g2els")
region = Rect2(64, 96, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_f1ej7"]
atlas = ExtResource("2_g2els")
region = Rect2(0, 32, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_oprun"]
atlas = ExtResource("2_g2els")
region = Rect2(16, 32, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_a8ls1"]
atlas = ExtResource("2_g2els")
region = Rect2(32, 32, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_qfm1y"]
atlas = ExtResource("2_g2els")
region = Rect2(48, 32, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_fulsm"]
atlas = ExtResource("2_g2els")
region = Rect2(64, 32, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_4r5pv"]
atlas = ExtResource("2_g2els")
region = Rect2(80, 32, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_ke2ow"]
atlas = ExtResource("2_g2els")
region = Rect2(0, 48, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_ujl30"]
atlas = ExtResource("2_g2els")
region = Rect2(16, 48, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_31cv2"]
atlas = ExtResource("2_g2els")
region = Rect2(32, 48, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_pf23h"]
atlas = ExtResource("2_g2els")
region = Rect2(48, 48, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_dt7fs"]
atlas = ExtResource("2_g2els")
region = Rect2(64, 48, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_wqfne"]
atlas = ExtResource("2_g2els")
region = Rect2(80, 48, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_qhqgy"]
atlas = ExtResource("2_g2els")
region = Rect2(0, 0, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_dqkch"]
atlas = ExtResource("2_g2els")
region = Rect2(176, 0, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_g2els"]
atlas = ExtResource("2_g2els")
region = Rect2(0, 0, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_qlg0r"]
atlas = ExtResource("2_g2els")
region = Rect2(16, 0, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_tuyoq"]
atlas = ExtResource("2_g2els")
region = Rect2(32, 0, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_fjrip"]
atlas = ExtResource("2_g2els")
region = Rect2(48, 0, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_smehm"]
atlas = ExtResource("2_g2els")
region = Rect2(64, 0, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_ur7pv"]
atlas = ExtResource("2_g2els")
region = Rect2(80, 0, 16, 16)

[sub_resource type="SpriteFrames" id="SpriteFrames_ur7pv"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_y4r1p")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_d2wvv")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_3v2ag")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_jej6c")
}],
"loop": true,
"name": &"climb",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_60mlk")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_i4ail")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_a38lo")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_4ni07")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_l71n6")
}],
"loop": true,
"name": &"death",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_f1ej7")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_oprun")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_a8ls1")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_qfm1y")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_fulsm")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_4r5pv")
}],
"loop": true,
"name": &"dig",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_ke2ow")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ujl30")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_31cv2")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_pf23h")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_dt7fs")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_wqfne")
}],
"loop": true,
"name": &"dig_under",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_qhqgy")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_dqkch")
}],
"loop": true,
"name": &"idle",
"speed": 0.7
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_g2els")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_qlg0r")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_tuyoq")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_fjrip")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_smehm")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ur7pv")
}],
"loop": true,
"name": &"walk",
"speed": 7.0
}]

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_g2els"]
radius = 3.0
height = 12.0

[node name="Player" type="CharacterBody2D"]
z_index = 1
collision_layer = 2
script = ExtResource("1_g2els")

[node name="AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
position = Vector2(0, -8)
sprite_frames = SubResource("SpriteFrames_ur7pv")
animation = &"death"
autoplay = "idle"

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(0, -6)
shape = SubResource("CapsuleShape2D_g2els")

[node name="LadderClimbSound" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource("3_qhqgy")

[node name="JumpSound" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource("4_qlg0r")
volume_db = -15.951

[node name="WalkSound" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource("5_qlg0r")
</file>

<file path="icon.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="128" height="128"><rect width="124" height="124" x="2" y="2" fill="#363d52" stroke="#212532" stroke-width="4" rx="14"/><g fill="#fff" transform="translate(12.322 12.322)scale(.101)"><path d="M105 673v33q407 354 814 0v-33z"/><path fill="#478cbf" d="m105 673 152 14q12 1 15 14l4 67 132 10 8-61q2-11 15-15h162q13 4 15 15l8 61 132-10 4-67q3-13 15-14l152-14V427q30-39 56-81-35-59-83-108-43 20-82 47-40-37-88-64 7-51 8-102-59-28-123-42-26 43-46 89-49-7-98 0-20-46-46-89-64 14-123 42 1 51 8 102-48 27-88 64-39-27-82-47-48 49-83 108 26 42 56 81zm0 33v39c0 276 813 276 814 0v-39l-134 12-5 69q-2 10-14 13l-162 11q-12 0-16-11l-10-65H446l-10 65q-4 11-16 11l-162-11q-12-3-14-13l-5-69z"/><path d="M483 600c0 34 58 34 58 0v-86c0-34-58-34-58 0z"/><circle cx="725" cy="526" r="90"/><circle cx="299" cy="526" r="90"/></g><g fill="#414042" transform="translate(12.322 12.322)scale(.101)"><circle cx="307" cy="532" r="60"/><circle cx="717" cy="532" r="60"/></g></svg>
</file>

<file path="icon.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://bw7rqy1rxpkyt"
path="res://.godot/imported/icon.svg-218a8f2b3041327d8a5756f3a245f83b.ctex"
metadata={
"vram_texture": false
}

[deps]

source_file="res://icon.svg"
dest_files=["res://.godot/imported/icon.svg-218a8f2b3041327d8a5756f3a245f83b.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=1.0
editor/scale_with_editor_scale=false
editor/convert_colors_with_editor_theme=false
</file>

<file path="scripts/game_over_ui.gd">
# game_over_ui.gd

extends CanvasLayer


# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta: float) -> void:
	pass


# Ta funkcja zostanie wywołana po kliknięciu przycisku "RESTART"
func _on_restart_button_pressed():
	print("Restart button pressed!")
	# WAŻNE: Najpierw od-pauzuj grę, inaczej przeładowana scena też będzie spauzowana!
	get_tree().paused = false
	# Przeładuj bieżącą scenę (czyli całą scenę 'game.tscn')
	var error = get_tree().reload_current_scene()
	if error != OK:
		printerr("Failed to reload scene! Error code: ", error)
</file>

<file path="scripts/game_over_ui.gd.uid">
uid://cc8x1tg73jmw1
</file>

<file path="scripts/game.gd.uid">
uid://dm3iihye8a3wy
</file>

<file path="scripts/ladder.gd.uid">
uid://xiu1moqcmuwf
</file>

<file path="scripts/pause_menu.gd">
# pause_menu.gd
extends Control

# Ścieżka do sceny menu głównego - upewnij się, że jest poprawna!
const TITLE_SCREEN_PATH = "res://assets/scenes/title_screen.tscn" # <-- Popraw, jeśli zapisałeś gdzie indziej!

# Funkcja do ukrywania menu i odpauzowywania gry
func resume_game():
	get_tree().paused = false
	hide() # Ukrywa węzeł PauseMenu (i jego dzieci)

# Funkcja do wyjścia do menu głównego
func quit_to_menu():
	# WAŻNE: Najpierw odpauzuj, zanim zmienisz scenę
	get_tree().paused = false
	var error = get_tree().change_scene_to_file(TITLE_SCREEN_PATH)
	if error != OK:
		printerr("Failed to change scene to title screen! Error code: ", error)

# Podłącz sygnały przycisków do tych funkcji w edytorze!
func _on_resume_button_pressed():
	print("Resume button pressed")
	resume_game()


func _on_quit_to_menu_button_pressed():
	print("Quit to Menu button pressed")
	quit_to_menu()

# Można też dodać obsługę ESC do zamknięcia menu pauzy
func _unhandled_input(event):
	if Input.is_action_just_pressed("ui_cancel") and get_tree().paused:
		resume_game()
		get_viewport().set_input_as_handled() # Zapobiega przetworzeniu tego samego inputu gdzie indziej
</file>

<file path="scripts/pause_menu.gd.uid">
uid://djiyhe0r48jcv
</file>

<file path="scripts/player.gd.uid">
uid://cq0ybetkfcej5
</file>

<file path="scripts/title_screen.gd.uid">
uid://jpbvw88086wp
</file>

<file path="scripts/ui.gd.uid">
uid://cmf651j7qk52t
</file>

<file path="shaders/crt.gdshader.uid">
uid://dtcblh51mq0of
</file>

<file path="shaders/grayscale_shader.gdshader">
shader_type canvas_item;

uniform sampler2D SCREEN_TEXTURE : hint_screen_texture, filter_linear_mipmap;
// render_mode unshaded; // Możesz zostawić lub usunąć

void fragment() {
    // Teraz odwołanie do SCREEN_TEXTURE w tej linii jest poprawne,
    // bo zadeklarowaliśmy uniform o tej nazwie powyżej.
    vec4 original_color = texture(SCREEN_TEXTURE, SCREEN_UV);

    // Oblicz wartość skali szarości (standardowa formuła luminancji)
    float grayscale = dot(original_color.rgb, vec3(0.299, 0.587, 0.114));
    // Ustaw kolor wyjściowy na odcień szarości, zachowując oryginalną alfę
    COLOR = vec4(vec3(grayscale), original_color.a);
}
</file>

<file path="shaders/grayscale_shader.gdshader.uid">
uid://clgqqxru7jg8
</file>

<file path=".gitignore">
# Godot 4+ specific ignores
.godot/
/android/

# Godot-specific ignores
.import/
export.cfg
export_presets.cfg

# Imported translations (automatically generated from CSV files)
*.translation

# Mono-specific ignores
.mono/
data_*/
mono_crash.*.json
</file>

<file path="assets/inventory/ladder.tres">
[gd_resource type="Resource" script_class="InventoryItemType" load_steps=4 format=3 uid="uid://pmkg1u7amds4"]

[ext_resource type="Script" uid="uid://c2kq0x5odumur" path="res://addons/Inventory/InventoryItemType.gd" id="1_bqfb1"]
[ext_resource type="Texture2D" uid="uid://bcm1qkp4dydjd" path="res://assets/sprites/Miner16Bit_AllFiles_v1/Miner16Bit_WorldTiles_02.png" id="2_ubyk3"]

[sub_resource type="AtlasTexture" id="AtlasTexture_x35jx"]
atlas = ExtResource("2_ubyk3")
region = Rect2(112, 80, 16, 16)

[resource]
script = ExtResource("1_bqfb1")
name = "Ladder"
description = "Wooden ladder used for climbing"
texture = SubResource("AtlasTexture_x35jx")
weight = 1
stackable = true
max_stack_size = 99
metadata/_custom_type_script = "uid://c2kq0x5odumur"
</file>

<file path="assets/scenes/InventoryGridUI.tscn">
[gd_scene load_steps=3 format=3 uid="uid://dp2tfsw1nyc3v"]

[ext_resource type="Script" uid="uid://dwyndp832h061" path="res://addons/Inventory/UI/SimpleInventoryUI.gd" id="1_d6dd7"]
[ext_resource type="PackedScene" uid="uid://bt4wvwr8oqckg" path="res://assets/scenes/InventoryGridItemUI.tscn" id="2_rtvfl"]

[node name="InventoryGridUI" type="BoxContainer"]
top_level = true
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
vertical = true
script = ExtResource("1_d6dd7")
ItemScene = ExtResource("2_rtvfl")
container_target_node = NodePath("GridContainer")

[node name="GridContainer" type="GridContainer" parent="."]
layout_mode = 2
columns = 2
</file>

<file path="assets/scenes/InventoryListUI.tscn">
[gd_scene load_steps=11 format=3 uid="uid://bd4oyxo6udxfd"]

[ext_resource type="Script" uid="uid://b40dmy1axmbj1" path="res://addons/Inventory/UI/List/InventoryListUI.gd" id="1_j88ox"]
[ext_resource type="PackedScene" uid="uid://dx0nelbl5t6pt" path="res://assets/scenes/InventoryListItemUI.tscn" id="2_cj375"]
[ext_resource type="Script" uid="uid://drdwdl32kthr4" path="res://addons/Inventory/Inventory.gd" id="3_b7gc8"]
[ext_resource type="Script" uid="uid://c31st5sfn50qu" path="res://addons/Inventory/InventoryItem.gd" id="3_ivh56"]
[ext_resource type="Script" uid="uid://c2kq0x5odumur" path="res://addons/Inventory/InventoryItemType.gd" id="4_t8n1e"]

[sub_resource type="Resource" id="Resource_hfwgv"]
script = ExtResource("4_t8n1e")
name = "Unknown Item with very long text"
description = ""
weight = 1
stackable = true
max_stack_size = 99

[sub_resource type="Resource" id="Resource_ib6o5"]
script = ExtResource("3_ivh56")
item_type = SubResource("Resource_hfwgv")
custom_name = ""

[sub_resource type="Resource" id="Resource_0lq4p"]
script = ExtResource("4_t8n1e")
name = "Iron Sword"
description = ""
weight = 1
stackable = true
max_stack_size = 99

[sub_resource type="Resource" id="Resource_33y3e"]
script = ExtResource("3_ivh56")
item_type = SubResource("Resource_0lq4p")
custom_name = ""

[sub_resource type="Resource" id="Resource_fp4j3"]
script = ExtResource("3_b7gc8")
capacity = 5

[node name="InventoryListUI" type="ScrollContainer"]
custom_minimum_size = Vector2(50, 50)
size_flags_horizontal = 3
size_flags_vertical = 3
horizontal_scroll_mode = 0
script = ExtResource("1_j88ox")
InventoryListItemUI = ExtResource("2_cj375")
initial_items = Array[ExtResource("3_ivh56")]([SubResource("Resource_ib6o5"), SubResource("Resource_33y3e"), SubResource("Resource_33y3e")])
inventory = SubResource("Resource_fp4j3")

[node name="VBoxContainer" type="VBoxContainer" parent="."]
layout_mode = 2
</file>

<file path="assets/scenes/player.tscn">
[gd_scene load_steps=44 format=3 uid="uid://d00swspj35t6w"]

[ext_resource type="Script" uid="uid://cq0ybetkfcej5" path="res://scripts/player.gd" id="1_g2els"]
[ext_resource type="Resource" uid="uid://pmkg1u7amds4" path="res://assets/inventory/ladder.tres" id="2_60g6h"]
[ext_resource type="Texture2D" uid="uid://owxmkmo3hff" path="res://assets/sprites/Miner16Bit_AllFiles_v1/Miner_AllAnimations_SpriteSheet.png" id="2_g2els"]
[ext_resource type="PackedScene" uid="uid://c5jhyxyopykhd" path="res://assets/scenes/ladder.tscn" id="3_hrrj1"]
[ext_resource type="AudioStream" uid="uid://ympmury34vme" path="res://assets/sounds/ladder-climbing.mp3" id="3_qhqgy"]
[ext_resource type="Script" uid="uid://drdwdl32kthr4" path="res://addons/Inventory/Inventory.gd" id="4_hrrj1"]
[ext_resource type="AudioStream" uid="uid://bawabjij02gso" path="res://assets/sounds/jump.wav" id="4_qlg0r"]
[ext_resource type="AudioStream" uid="uid://b6hbsvqkflhua" path="res://assets/sounds/walk3.ogg" id="5_qlg0r"]
[ext_resource type="AudioStream" uid="uid://bbhbi0jxvy13x" path="res://assets/sounds/ladder-create.ogg" id="6_fjrip"]
[ext_resource type="AudioStream" uid="uid://y63k8i7xjsa6" path="res://assets/sounds/ladder-destroy.ogg" id="7_smehm"]
[ext_resource type="AudioStream" uid="uid://b0grpfvqb5ua1" path="res://assets/sounds/dig1.mp3" id="8_16a80"]

[sub_resource type="Resource" id="Resource_hrrj1"]
script = ExtResource("4_hrrj1")
capacity = 5
metadata/_custom_type_script = "uid://drdwdl32kthr4"

[sub_resource type="AtlasTexture" id="AtlasTexture_y4r1p"]
atlas = ExtResource("2_g2els")
region = Rect2(0, 80, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_d2wvv"]
atlas = ExtResource("2_g2els")
region = Rect2(16, 80, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_3v2ag"]
atlas = ExtResource("2_g2els")
region = Rect2(32, 80, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_jej6c"]
atlas = ExtResource("2_g2els")
region = Rect2(48, 80, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_60mlk"]
atlas = ExtResource("2_g2els")
region = Rect2(0, 96, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_i4ail"]
atlas = ExtResource("2_g2els")
region = Rect2(16, 96, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_a38lo"]
atlas = ExtResource("2_g2els")
region = Rect2(32, 96, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_4ni07"]
atlas = ExtResource("2_g2els")
region = Rect2(48, 96, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_l71n6"]
atlas = ExtResource("2_g2els")
region = Rect2(64, 96, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_f1ej7"]
atlas = ExtResource("2_g2els")
region = Rect2(0, 32, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_oprun"]
atlas = ExtResource("2_g2els")
region = Rect2(16, 32, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_a8ls1"]
atlas = ExtResource("2_g2els")
region = Rect2(32, 32, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_qfm1y"]
atlas = ExtResource("2_g2els")
region = Rect2(48, 32, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_fulsm"]
atlas = ExtResource("2_g2els")
region = Rect2(64, 32, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_4r5pv"]
atlas = ExtResource("2_g2els")
region = Rect2(80, 32, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_ke2ow"]
atlas = ExtResource("2_g2els")
region = Rect2(0, 48, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_ujl30"]
atlas = ExtResource("2_g2els")
region = Rect2(16, 48, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_31cv2"]
atlas = ExtResource("2_g2els")
region = Rect2(32, 48, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_pf23h"]
atlas = ExtResource("2_g2els")
region = Rect2(48, 48, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_dt7fs"]
atlas = ExtResource("2_g2els")
region = Rect2(64, 48, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_wqfne"]
atlas = ExtResource("2_g2els")
region = Rect2(80, 48, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_qhqgy"]
atlas = ExtResource("2_g2els")
region = Rect2(0, 0, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_dqkch"]
atlas = ExtResource("2_g2els")
region = Rect2(176, 0, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_g2els"]
atlas = ExtResource("2_g2els")
region = Rect2(0, 0, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_qlg0r"]
atlas = ExtResource("2_g2els")
region = Rect2(16, 0, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_tuyoq"]
atlas = ExtResource("2_g2els")
region = Rect2(32, 0, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_fjrip"]
atlas = ExtResource("2_g2els")
region = Rect2(48, 0, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_smehm"]
atlas = ExtResource("2_g2els")
region = Rect2(64, 0, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_ur7pv"]
atlas = ExtResource("2_g2els")
region = Rect2(80, 0, 16, 16)

[sub_resource type="SpriteFrames" id="SpriteFrames_ur7pv"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_y4r1p")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_d2wvv")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_3v2ag")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_jej6c")
}],
"loop": false,
"name": &"climb",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_60mlk")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_i4ail")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_a38lo")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_4ni07")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_l71n6")
}],
"loop": true,
"name": &"death",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_f1ej7")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_oprun")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_a8ls1")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_qfm1y")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_fulsm")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_4r5pv")
}],
"loop": true,
"name": &"dig",
"speed": 10.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_ke2ow")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ujl30")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_31cv2")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_pf23h")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_dt7fs")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_wqfne")
}],
"loop": true,
"name": &"dig_under",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_qhqgy")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_dqkch")
}],
"loop": true,
"name": &"idle",
"speed": 0.7
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_g2els")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_qlg0r")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_tuyoq")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_fjrip")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_smehm")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ur7pv")
}],
"loop": true,
"name": &"walk",
"speed": 7.0
}]

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_g2els"]
radius = 3.0
height = 12.0

[node name="Player" type="CharacterBody2D"]
z_index = 1
collision_layer = 2
script = ExtResource("1_g2els")
inventory = SubResource("Resource_hrrj1")
ladder_scene = ExtResource("3_hrrj1")
ladder_item_type = ExtResource("2_60g6h")

[node name="AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
position = Vector2(0, -8)
sprite_frames = SubResource("SpriteFrames_ur7pv")
animation = &"dig"
autoplay = "idle"

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(0, -6)
shape = SubResource("CapsuleShape2D_g2els")

[node name="LadderClimbSound" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource("3_qhqgy")

[node name="JumpSound" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource("4_qlg0r")
volume_db = -15.951

[node name="WalkSound" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource("5_qlg0r")
volume_db = 5.019

[node name="LadderPlaceSound" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource("6_fjrip")

[node name="LadderRemoveSound" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource("7_smehm")

[node name="DigSound" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource("8_16a80")
volume_db = -8.19
</file>

<file path="LICENSE">
MIT License

Copyright (c) 2025 Jonasz Lazar, Konrad Skowron and Mateusz Staszków

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
</file>

<file path="scripts/title_screen.gd">
# title_screen.gd
extends Control

# Ścieżka do głównej sceny gry - upewnij się, że jest poprawna!
const GAME_SCENE_PATH = "res://assets/scenes/game.tscn"

# Nie potrzebujemy _ready ani _process w tym prostym menu

func _on_start_button_pressed():
    print("Start button pressed! Loading game scene...")
    # Zmień scenę na główną scenę gry
    var error = get_tree().change_scene_to_file(GAME_SCENE_PATH)
    if error != OK:
        printerr("Failed to change scene to game! Error code: ", error)


func _on_quit_button_pressed():
    print("Quit button pressed! Exiting application...")
    # Zamknij grę
    get_tree().quit()
</file>

<file path="addons/Inventory/Inventory.gd">
class_name Inventory extends Resource

var slots: Array[InventorySlot] = []
@export var capacity: int = 5  # Maximum weight capacity of the inventory

signal item_added(item:InventoryItem, slot_idx:int)
signal item_removed(item:InventoryItem, slot_idx:int)
signal capacity_changed(from:int, to:int)

# Returns true if all items in the array are of the same InventoryItemType
static func is_items_of_same_type(items: Array[InventoryItem]) -> bool:
	# If the array is empty, return true (no conflicting types)
	if items.size() == 0:
		return true
	
	# Store the type of the first item
	var item_type = items[0].item_type
	# Loop through the rest of the items and check their type
	for i in range(1, items.size()):
		if items[i].item_type != item_type:
			return false
	
	return true

# Initialize the slots with empty InventorySlots
func _init():
	for i in range(capacity):
		var slot = InventorySlot.new()
		slots.append(slot)
		slot.item_added.connect(_on_slot_item_added.bind(i))
		slot.item_removed.connect(_on_slot_item_removed.bind(i))
	emit_changed()  # Emit change when initializing the inventory

# Signal handler for when an item is added to a slot
func _on_slot_item_added(item:InventoryItem, slot_idx:int):
	item_added.emit(item, slot_idx)
	emit_changed()

# Signal handler for when an item is removed from a slot
func _on_slot_item_removed(item:InventoryItem, slot_idx:int):
	item_removed.emit(item, slot_idx)
	emit_changed()

# Sorts all items by type in ascending order.
# Items are temporarily removed from their slots and reinserted after sorting.
func sort():
	var items = take_all_items()
	items.sort_custom(_custom_sort_item_type)
	
	for item in items:
		put(item)
	emit_changed()

# Custom sorting method to compare item types by name
func _custom_sort_item_type(a:InventoryItem, b:InventoryItem) -> bool:
	var names = [a.item_type.name, b.item_type.name]
	names.sort()
	return names[0] == a.name

# Get all items from all slots in the inventory
func get_all_items() -> Array[InventoryItem]:
	var items : Array[InventoryItem] = []
	
	for slot in slots:
		items.append_array(slot.items)
	
	return items

# Take all items from the inventory and empty all slots
func take_all_items() -> Array[InventoryItem]:
	var items :Array[InventoryItem] = []
	
	for slot in slots:
		items.append_array(slot.take_all())
	
	emit_changed()
	return items

# Get the total count of items in the inventory
func get_count() -> int:
	var count = 0
	for slot in slots:
		count += slot.count
	
	return count

# Check if the inventory is empty
func is_empty() -> bool:
	return get_count() == 0

# Change the capacity of the inventory and resize the slots array
func resize(new_capacity: int):
	if new_capacity == capacity:
		return
	
	var old_capacity = capacity
	
	if new_capacity < capacity:
		slots.resize(new_capacity)  # Remove excess slots
	else:
		for i in range(capacity, new_capacity):
			slots.append(InventorySlot.new())  # Add new empty slots
	capacity = new_capacity

	capacity_changed.emit(old_capacity, new_capacity)
	emit_changed()

# Check if the inventory has space for a given item
func has_space_for_item(item: InventoryItem) -> bool:
	for slot in slots:
		if slot.type == null or (slot.type == item and slot.type.stackable and slot.available_stacks() > 0):
			return true
	return false

# Put an item into the inventory
func put(item: InventoryItem) -> bool:
	if item.item_type == null:
		printerr("Inventory.put(): otrzymałem InventoryItem bez ustawionego item_type!")
		return false

	
	# Try to stack the item in an existing slot
	for slot in slots:
		if slot.type == item.item_type and item.item_type.stackable:
			if slot.available_stacks() > 0:
				slot.put(item)
				emit_changed()
				return true
	
	# If stacking isn't possible, find an empty slot
	for slot in slots:
		if slot.type == null:
			slot.put(item)
			emit_changed()
			return true
	
	return false

# Check if there is space for multiple items in the inventory
func has_space_for_items(items: Array[InventoryItem]) -> bool:
	for item in items:
		if not has_space_for_item(item):
			return false
	return true

# Put multiple items into the inventory at once
func put_many(items: Array[InventoryItem]) -> bool:
	if not has_space_for_items(items):
		return false
	
	for item in items:
		if not put(item):
			return false
	emit_changed()
	return true

# Remove a specific item from the inventory
func take(item: InventoryItem):
	if item == null: # Dobre sprawdzenie
		printerr("Inventory.take(): Attempted to take a null item!")
		return

	# Zmieniamy pętlę, żeby mieć indeks 'i'
	for i in range(slots.size()): 
		var slot = slots[i] # Pobieramy slot używając indeksu
		
		if item in slot.items: # Sprawdzamy czy ten konkretny item jest w tym slocie
			slot.take(item) # Usuwamy item z listy wewnętrznej slotu

			item_removed.emit(item, i) # Emitujemy sygnał dla UI, podając item i INDEKS slotu 'i'
			
			emit_changed() # Sygnał dla edytora Godot
			return # Znaleziono i usunięto, wychodzimy

# Take all items from a specific slot
func take_all_from_slot(slot_idx: int) -> Array[InventoryItem]:
	var slot = slots[slot_idx]
	var items: Array[InventoryItem] = []
	if slot.item != null:
		items.append(slot.item)
		slot.clear()
	emit_changed()
	return items

# Get all items of a specific type from the inventory
func get_of_type(type: InventoryItemType) -> Array[InventoryItem]:
	var items: Array[InventoryItem] = []
	for slot in slots:
		if slot.item != null and slot.item.item_type == type:
			items.append(slot.item)
	return items

# Check if a specific item exists in the inventory
func has_item(item: InventoryItem) -> bool:
	for slot in slots:
		if slot.item == item:
			return true
	return false

# Check if an item Qof a specific type exists in the inventory
func has_item_of_type(type: InventoryItemType) -> bool:
	for slot in slots:
		if not slot.is_empty() and slot.type == type:
			return true
	return false

# Get the total amount of a specific item type in the inventory
func get_amount_of_item_type(type: InventoryItemType) -> int:
	var amount = 0
	for slot in slots:
		if not slot.is_empty():
			if slot.type == type:
				amount += slot.count
	return amount

# Move an item from one slot to another
func move(item: InventoryItem, new_slot_idx: int):
	for i in range(slots.size()):
		if slots[i].items.has(item):  # Check if the current slot contains the item
			var current_slot = slots[i]
			var new_slot = slots[new_slot_idx]
			
			# If the new slot contains the same item type and the item is stackable, try to stack
			if new_slot.type == item.item_type and item.item_type.stackable:
				# Transfer as many items as possible
				var remaining_items = current_slot.take_many(new_slot.available_stacks())
				new_slot.put_all(remaining_items)
				
				# Clear current slot if empty
				if current_slot.is_empty():
					current_slot.clear()
			else:
				# Swap the items if they cannot be stacked
				var temp_items = new_slot.take_all()  # Take all items from the new slot
				new_slot.put_all(current_slot.take_all())  # Move all items from the current slot to the new slot
				current_slot.put_all(temp_items)  # Put the previously taken items into the original slot
			
			emit_changed()
			return

# Get the total weight of all items in the inventory
func get_total_weight() -> int:
	var total_weight: int = 0
	for slot in slots:
		total_weight += slot.weight
	return total_weight
</file>

<file path="addons/Inventory/UI/SimpleInventoryUI.gd">
class_name SimpleInventoryUI extends BoxContainer

@export var ItemScene:PackedScene

@export var initial_items:Array[InventoryItem]

@export var inventory:Inventory:set = set_inventory
@export var container_target_node:NodePath
var container_target:Node

func set_inventory(it:Inventory):
	if inventory == it:
		return
	
	inventory = it
	
	if is_inside_tree():
		_clear_ui()
		_create_ui()
		if initial_items:
			inventory.put_many(initial_items)


func _clear_ui():
	for itemUI in container_target.get_children():
		itemUI.queue_free()


func _create_ui():
	if inventory:
		for slot_id in range(inventory.slots.size()):
			for item in inventory.slots[slot_id].items:
				_create_inventory_list_item_ui(item, slot_id)
		
		inventory.item_added.connect(_on_inventory_item_added)
		inventory.item_removed.connect(_on_inventory_item_removed)


func _on_inventory_item_added(item:InventoryItem, slot:int):
	if item.item_type.stackable:
		# can we stack?
		var current_item_ui = get_first_item_ui_by_type(item.item_type)
		if current_item_ui and slot == current_item_ui.get_meta("inventory_slot"):
			current_item_ui.count += 1
			return
	
	_create_inventory_list_item_ui(item, slot)


func _on_inventory_item_removed(item: InventoryItem, slot: int):
	# Dodajmy sprawdzenie null dla bezpieczeństwa
	if item == null or item.item_type == null:
		printerr("SimpleInventoryUI: Received null item or item without type in _on_inventory_item_removed.")
		return

	if item.item_type.stackable:
		# Przedmiot jest stackowalny: Znajdź UI dla tego typu
		var stack_ui = get_first_item_ui_by_type(item.item_type)
		if stack_ui:
			# Zmniejsz licznik na znalezionym UI
			stack_ui.count -= 1
			print("SimpleInventoryUI: Decremented count for ", item.item_type.name, " UI. New count: ", stack_ui.count)

			# Jeśli licznik spadł do zera, usuń całe UI dla tego stosu
			if stack_ui.count <= 0:
				print("SimpleInventoryUI: Stack count is 0, removing UI element for ", item.item_type.name)
				# Bezpieczne usunięcie z kontenera przed queue_free
				if is_instance_valid(container_target):
					container_target.remove_child(stack_ui)
				stack_ui.queue_free()
		else:
			# To nie powinno się zdarzyć, jeśli dodawanie działa poprawnie
			printerr("SimpleInventoryUI: Could not find stack UI to decrement count for stackable item: ", item.item_type.name)
	else:
		# Przedmiot nie jest stackowalny: Znajdź konkretne UI dla tego obiektu
		var itemUI = get_item_ui(item)
		if itemUI:
			print("SimpleInventoryUI: Removing UI element for non-stackable item: ", item.name)
			# Bezpieczne usunięcie z kontenera przed queue_free
			if is_instance_valid(container_target):
				container_target.remove_child(itemUI)
			itemUI.queue_free()
		else:
			# To też nie powinno się zdarzyć dla non-stackable
			printerr("SimpleInventoryUI: Could not find specific UI element for non-stackable item: ", item.name)


func _create_inventory_list_item_ui(item:InventoryItem, slot:int):
	if not ItemScene:
		printerr("SimpleInventoryUI: ItemScene is not assigned!")
		return
	if not is_instance_valid(container_target):
		printerr("SimpleInventoryUI: Cannot add item UI, container_target is invalid!")
		return

	print("SimpleInventoryUI: Creating UI for item: ", item.name if item else "NULL ITEM", " in slot: ", slot) # Dodaj sprawdzenie `if item`
	var itemUI:Control = ItemScene.instantiate()
	itemUI.set_meta("inventory_slot", slot)
	itemUI.item = item
	container_target.add_child(itemUI)
	print("SimpleInventoryUI: Item UI added as child.")


func get_item_ui(item:InventoryItem) -> Control:
	for child in container_target.get_children():
		if child.item == item:
			return child
	return null


func get_first_item_ui_by_type(type:InventoryItemType) -> InventoryGridItemUI:
	for child in container_target.get_children():
		if child.item.item_type == type:
			return child
	
	return null


func _ready():
	print("SimpleInventoryUI: _ready start")
	if container_target_node:
		container_target = get_node(container_target_node)
		print("SimpleInventoryUI: Container target node found: ", container_target)
	else:
		printerr("SimpleInventoryUI: container_target_node not set!")
		return # Ważne, żeby nie kontynuować bez celu

	if container_target:
		_clear_ui()
		_create_ui()
		if initial_items:
			if inventory: # Dodaj sprawdzenie, czy inventory istnieje
				inventory.put_many(initial_items)
			else:
				printerr("SimpleInventoryUI: Cannot put initial_items, inventory is null!")
	else:
		printerr("SimpleInventoryUI: container_target is null!")
	print("SimpleInventoryUI: _ready end")
</file>

<file path="assets/scenes/ladder.tscn">
[gd_scene load_steps=5 format=3 uid="uid://c5jhyxyopykhd"]

[ext_resource type="Script" uid="uid://xiu1moqcmuwf" path="res://scripts/ladder.gd" id="1_xb1tl"]
[ext_resource type="Texture2D" uid="uid://bcm1qkp4dydjd" path="res://assets/sprites/Miner16Bit_AllFiles_v1/Miner16Bit_WorldTiles_02.png" id="1_xxwne"]

[sub_resource type="AtlasTexture" id="AtlasTexture_xxwne"]
atlas = ExtResource("1_xxwne")

[sub_resource type="RectangleShape2D" id="RectangleShape2D_xb1tl"]
size = Vector2(9.4, 8.6)

[node name="Ladder" type="Area2D" groups=["ladders"]]
script = ExtResource("1_xb1tl")

[node name="Sprite2D" type="Sprite2D" parent="."]
texture = SubResource("AtlasTexture_xxwne")
region_enabled = true
region_rect = Rect2(112, 80, 16, 16)

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_xb1tl")

[connection signal="body_entered" from="." to="." method="_on_body_entered"]
[connection signal="body_exited" from="." to="." method="_on_body_exited"]
</file>

<file path="assets/sprites/other/scenes/game.tscn">
[gd_scene load_steps=23 format=4 uid="uid://cc0knlk71rl7n"]

[ext_resource type="PackedScene" uid="uid://4yp0qu72jr2b" path="res://assets/sprites/other/scenes/player.tscn" id="1_uwrxv"]
[ext_resource type="Script" uid="uid://dm3iihye8a3wy" path="res://scripts/game.gd" id="1_vtaks"]
[ext_resource type="Texture2D" uid="uid://bcm1qkp4dydjd" path="res://assets/sprites/Miner16Bit_AllFiles_v1/Miner16Bit_WorldTiles_02.png" id="1_yqjtg"]
[ext_resource type="PackedScene" uid="uid://dubr81815qgi" path="res://assets/sprites/other/scenes/crt_shader.tscn" id="2_gee14"]
[ext_resource type="Texture2D" uid="uid://c637msvthmlc2" path="res://assets/sprites/other/sheet.png" id="2_lnu2h"]
[ext_resource type="Texture2D" uid="uid://4upmho5qau0g" path="res://assets/sprites/other/Tileset_Cave.png" id="3_iywne"]
[ext_resource type="Texture2D" uid="uid://7a3no0tyqneu" path="res://assets/sprites/other/tilesetcave.png" id="4_p57ef"]
[ext_resource type="Script" uid="uid://cc8x1tg73jmw1" path="res://scripts/game_over_ui.gd" id="5_dinhu"]
[ext_resource type="Shader" uid="uid://clgqqxru7jg8" path="res://shaders/grayscale_shader.gdshader" id="5_kvpfn"]
[ext_resource type="AudioStream" uid="uid://bs1k4f7ulp015" path="res://assets/music/steam_gardens_slowed.wav" id="6_p57ef"]
[ext_resource type="PackedScene" uid="uid://dmf6diflfftrc" path="res://assets/sprites/other/scenes/ladder.tscn" id="7_u5sy4"]
[ext_resource type="Script" uid="uid://cmf651j7qk52t" path="res://scripts/ui.gd" id="9_0tnpc"]
[ext_resource type="Script" uid="uid://drdwdl32kthr4" path="res://addons/Inventory/Inventory.gd" id="12_bbsot"]

[sub_resource type="WorldBoundaryShape2D" id="WorldBoundaryShape2D_yqjtg"]
distance = -356.0

[sub_resource type="WorldBoundaryShape2D" id="WorldBoundaryShape2D_lnu2h"]
distance = -524.0

[sub_resource type="ShaderMaterial" id="ShaderMaterial_dinhu"]
shader = ExtResource("5_kvpfn")

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_lnu2h"]
texture = ExtResource("1_yqjtg")
0:0/0 = 0
0:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
0:0/0/custom_data_0 = true
0:0/0/custom_data_1 = 1.0
2:0/0 = 0
2:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
2:0/0/custom_data_0 = true
2:0/0/custom_data_1 = 1.0
3:0/0 = 0
3:0/0/custom_data_0 = true
3:0/0/custom_data_1 = 10.0
4:0/0 = 0
4:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
4:0/0/custom_data_0 = true
4:0/0/custom_data_1 = 1.0
5:0/0 = 0
5:0/0/custom_data_0 = true
5:0/0/custom_data_1 = 1.0
6:0/0 = 0
6:0/0/custom_data_0 = true
6:0/0/custom_data_1 = 1.0
7:0/0 = 0
0:1/0 = 0
0:1/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
0:1/0/custom_data_0 = true
0:1/0/custom_data_1 = 1.0
1:1/0 = 0
1:1/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
1:1/0/custom_data_0 = true
1:1/0/custom_data_1 = 1.0
2:1/0 = 0
2:1/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
2:1/0/custom_data_0 = true
2:1/0/custom_data_1 = 1.0
4:1/0 = 0
4:1/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
4:1/0/custom_data_0 = true
4:1/0/custom_data_1 = 1.0
5:1/0 = 0
5:1/0/custom_data_0 = true
5:1/0/custom_data_1 = 1.0
6:1/0 = 0
6:1/0/custom_data_0 = true
6:1/0/custom_data_1 = 1.0
7:1/0 = 0
0:2/0 = 0
0:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
0:2/0/custom_data_0 = true
0:2/0/custom_data_1 = 1.0
1:2/0 = 0
1:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
1:2/0/custom_data_0 = true
1:2/0/custom_data_1 = 1.0
2:2/0 = 0
2:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
2:2/0/custom_data_0 = true
2:2/0/custom_data_1 = 1.0
3:2/0 = 0
3:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
3:2/0/custom_data_0 = true
3:2/0/custom_data_1 = 1.0
4:2/0 = 0
4:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
4:2/0/custom_data_0 = true
4:2/0/custom_data_1 = 1.0
5:2/0 = 0
5:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
5:2/0/custom_data_0 = true
5:2/0/custom_data_1 = 1.0
6:2/0 = 0
6:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
6:2/0/custom_data_0 = true
6:2/0/custom_data_1 = 1.0
7:2/0 = 0
0:3/0 = 0
1:3/0 = 0
2:3/0 = 0
3:3/0 = 0
4:3/0 = 0
4:3/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
4:3/0/custom_data_0 = true
5:3/0 = 0
0:4/0 = 0
2:4/0 = 0
3:4/0 = 0
5:4/0 = 0
0:5/0 = 0
1:5/0 = 0
2:5/0 = 0
3:5/0 = 0
5:5/0 = 0
7:5/0 = 0
0:6/0 = 0
1:6/0 = 0
3:6/0 = 0
5:6/0 = 0
6:6/0 = 0
7:6/0 = 0
3:7/0 = 0
5:7/0 = 0
6:7/0 = 0
7:7/0 = 0
1:0/0 = 0
1:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
1:0/0/custom_data_0 = true
1:0/0/custom_data_1 = 1.0

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_lbhrr"]
texture = ExtResource("2_lnu2h")
0:0/0 = 0
1:0/0 = 0
2:0/0 = 0
3:0/0 = 0
4:0/0 = 0
5:0/0 = 0
6:0/0 = 0
7:0/0 = 0
8:0/0 = 0
9:0/0 = 0
10:0/0 = 0
11:0/0 = 0
12:0/0 = 0
13:0/0 = 0
14:0/0 = 0
15:0/0 = 0
16:0/0 = 0
0:1/0 = 0
1:1/0 = 0
2:1/0 = 0
3:1/0 = 0
4:1/0 = 0
5:1/0 = 0
7:1/0 = 0
8:1/0 = 0
9:1/0 = 0
10:1/0 = 0
11:1/0 = 0
12:1/0 = 0
13:1/0 = 0
14:1/0 = 0
15:1/0 = 0
16:1/0 = 0
2:2/0 = 0
3:2/0 = 0
4:2/0 = 0
7:2/0 = 0
8:2/0 = 0
9:2/0 = 0
10:2/0 = 0
11:2/0 = 0
12:2/0 = 0
13:2/0 = 0
14:2/0 = 0
15:2/0 = 0
16:2/0 = 0
3:3/0 = 0
4:3/0 = 0
5:3/0 = 0
7:3/0 = 0
8:3/0 = 0
9:3/0 = 0
10:3/0 = 0
11:3/0 = 0
12:3/0 = 0
13:3/0 = 0
14:3/0 = 0
15:3/0 = 0
16:3/0 = 0
3:4/0 = 0
4:4/0 = 0
5:4/0 = 0
7:4/0 = 0
8:4/0 = 0
9:4/0 = 0
10:4/0 = 0
11:4/0 = 0
12:4/0 = 0
13:4/0 = 0
14:4/0 = 0
15:4/0 = 0
16:4/0 = 0
3:5/0 = 0
4:5/0 = 0
7:5/0 = 0
8:5/0 = 0
9:5/0 = 0
10:5/0 = 0
11:5/0 = 0
12:5/0 = 0
13:5/0 = 0
14:5/0 = 0
15:5/0 = 0
16:5/0 = 0
3:6/0 = 0
4:6/0 = 0
7:6/0 = 0
8:6/0 = 0
9:6/0 = 0
10:6/0 = 0
11:6/0 = 0
12:6/0 = 0
13:6/0 = 0
14:6/0 = 0
15:6/0 = 0
16:6/0 = 0
2:7/0 = 0
3:7/0 = 0
4:7/0 = 0
5:7/0 = 0

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_u5sy4"]
texture = ExtResource("3_iywne")
0:0/0 = 0
1:0/0 = 0
2:0/0 = 0
3:0/0 = 0
4:0/0 = 0
5:0/0 = 0
6:0/0 = 0
7:0/0 = 0
8:0/0 = 0
0:1/0 = 0
1:1/0 = 0
2:1/0 = 0
3:1/0 = 0
4:1/0 = 0
5:1/0 = 0
6:1/0 = 0
7:1/0 = 0
8:1/0 = 0
0:2/0 = 0
1:2/0 = 0
2:2/0 = 0
3:2/0 = 0
4:2/0 = 0
5:2/0 = 0
0:3/0 = 0
1:3/0 = 0
2:3/0 = 0

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_gee14"]
texture = ExtResource("4_p57ef")
4:1/0 = 0
5:1/0 = 0
6:1/0 = 0
7:1/0 = 0
4:2/0 = 0
5:2/0 = 0
6:2/0 = 0
7:2/0 = 0
4:4/0 = 0
5:4/0 = 0
7:4/0 = 0
8:4/0 = 0
9:4/0 = 0
10:4/0 = 0
11:4/0 = 0
12:4/0 = 0
4:5/0 = 0
5:5/0 = 0
7:5/0 = 0
8:5/0 = 0
9:5/0 = 0
10:5/0 = 0
11:5/0 = 0
12:5/0 = 0
4:6/0 = 0
5:6/0 = 0
7:6/0 = 0
8:6/0 = 0
9:6/0 = 0
10:6/0 = 0
11:6/0 = 0
12:6/0 = 0
4:7/0 = 0
5:7/0 = 0
7:7/0 = 0
8:7/0 = 0
9:7/0 = 0
10:7/0 = 0
11:7/0 = 0
12:7/0 = 0
4:8/0 = 0
5:8/0 = 0
7:8/0 = 0
8:8/0 = 0
9:8/0 = 0
10:8/0 = 0
11:8/0 = 0
12:8/0 = 0
4:9/0 = 0
5:9/0 = 0
7:9/0 = 0
8:9/0 = 0
9:9/0 = 0
10:9/0 = 0
11:9/0 = 0
12:9/0 = 0
7:11/0 = 0
8:11/0 = 0
9:11/0 = 0
10:11/0 = 0
11:11/0 = 0
12:11/0 = 0
7:12/0 = 0
8:12/0 = 0
9:12/0 = 0
10:12/0 = 0
11:12/0 = 0
12:12/0 = 0

[sub_resource type="TileSet" id="TileSet_lbhrr"]
physics_layer_0/collision_layer = 1
custom_data_layer_0/name = "diggable"
custom_data_layer_0/type = 1
custom_data_layer_1/name = "dig_time"
custom_data_layer_1/type = 3
sources/3 = SubResource("TileSetAtlasSource_lnu2h")
sources/4 = SubResource("TileSetAtlasSource_lbhrr")
sources/5 = SubResource("TileSetAtlasSource_u5sy4")
sources/6 = SubResource("TileSetAtlasSource_gee14")

[sub_resource type="Resource" id="Resource_nq78w"]
script = ExtResource("12_bbsot")
capacity = 15
metadata/_custom_type_script = "uid://drdwdl32kthr4"

[node name="Game" type="Node2D"]
script = ExtResource("1_vtaks")

[node name="LeftBoundry" type="StaticBody2D" parent="."]
position = Vector2(0, -9)

[node name="CollisionShape2D" type="CollisionShape2D" parent="LeftBoundry"]
position = Vector2(-137, -5)
rotation = 1.5708
shape = SubResource("WorldBoundaryShape2D_yqjtg")

[node name="RightBoundry" type="StaticBody2D" parent="."]
position = Vector2(0, -9)

[node name="CollisionShape2D" type="CollisionShape2D" parent="RightBoundry"]
position = Vector2(0, -4)
rotation = -1.5708
shape = SubResource("WorldBoundaryShape2D_lnu2h")

[node name="Music" type="AudioStreamPlayer" parent="."]
stream = ExtResource("6_p57ef")
volume_db = -30.0
autoplay = true

[node name="CRT_Shader" parent="." instance=ExtResource("2_gee14")]
z_index = 4096
offset_left = -551.0
offset_top = -325.0
offset_right = 753.0
offset_bottom = 453.0

[node name="UI" type="CanvasLayer" parent="."]
script = ExtResource("9_0tnpc")

[node name="LadderCountLabel" type="Label" parent="UI"]
offset_left = 10.0
offset_top = 10.0
offset_right = 50.0
offset_bottom = 33.0
theme_override_font_sizes/font_size = 34
text = "Drabiny: 5"

[node name="HealthLabel" type="Label" parent="UI"]
offset_left = 10.0
offset_top = 60.0
offset_right = 281.0
offset_bottom = 107.0
theme_override_font_sizes/font_size = 34
text = "HP: 100/100"

[node name="GameOverLayer" type="CanvasLayer" parent="."]
process_mode = 3
layer = 10
script = ExtResource("5_dinhu")

[node name="GrayscaleEffectRect" type="ColorRect" parent="GameOverLayer"]
material = SubResource("ShaderMaterial_dinhu")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
color = Color(1, 1, 1, 0)

[node name="GameOverLabel" type="Label" parent="GameOverLayer"]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_font_sizes/font_size = 100
text = "GAME OVER"
horizontal_alignment = 1
vertical_alignment = 1

[node name="RestartButton" type="Button" parent="GameOverLayer"]
process_mode = 3
anchors_preset = 7
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
offset_left = -87.5
offset_top = -198.0
offset_right = 87.5
offset_bottom = -135.0
grow_horizontal = 2
grow_vertical = 0
theme_override_font_sizes/font_size = 40
text = "RESTART"

[node name="WorldContainer" type="Node2D" parent="."]

[node name="TileMap" type="Node2D" parent="WorldContainer"]

[node name="Background" type="TileMapLayer" parent="WorldContainer/TileMap"]
light_mask = 0
z_index = -1
use_parent_material = true
tile_map_data = PackedByteArray("")
tile_set = SubResource("TileSet_lbhrr")

[node name="Ground" type="TileMapLayer" parent="WorldContainer/TileMap"]
use_parent_material = true
tile_map_data = PackedByteArray("AAAAAAAAAwAFAAIAAAABAAAAAwAGAAIAAAAFAAAAAwAFAAIAAAAGAAAAAwAFAAIAAAAHAAAAAwABAAAAAAAIAAAAAwABAAAAAAAJAAAAAwABAAAAAAAKAAAAAwABAAAAAAALAAAAAwABAAAAAAAMAAAAAwABAAAAAAANAAAAAwABAAAAAAAOAAAAAwABAAAAAAAPAAAAAwABAAAAAAAQAAAAAwABAAAAAAARAAAAAwABAAAAAAASAAAAAwABAAAAAAATAAAAAwABAAAAAAAUAAAAAwABAAAAAAAVAAAAAwABAAAAAAAWAAAAAwABAAAAAAAXAAAAAwABAAAAAAAYAAAAAwABAAAAAAAZAAAAAwABAAAAAAAaAAAAAwABAAAAAAAbAAAAAwABAAAAAAAcAAAAAwABAAAAAAAdAAAAAwABAAAAAAAeAAAAAwABAAAAAAAfAAAAAwABAAAAAAAgAAAAAwABAAAAAAD//wEAAwACAAEAAAAAAAIAAwACAAAAAAAAAAMAAwACAAEAAAAAAAQAAwACAAEAAAABAAUAAwABAAAAAAACAAQAAwAAAAEAAAACAAMAAwAAAAEAAAACAAIAAwAEAAAAAAADAAMAAwABAAAAAAAEAAIAAwAAAAAAAAAFAAIAAwACAAAAAAAEAAAAAwADAAIAAAAGAAMAAwACAAAAAAAHAAQAAwABAAAAAAAIAAIAAwAAAAEAAAAIAAMAAwAAAAEAAAAHAAEAAwAAAAIAAADh/wAAAwABAAAAAADi/wAAAwABAAAAAADj/wAAAwABAAAAAADk/wAAAwABAAAAAADl/wAAAwABAAAAAADm/wAAAwABAAAAAADn/wAAAwABAAAAAADo/wAAAwABAAAAAADp/wAAAwABAAAAAADq/wAAAwABAAAAAADr/wAAAwABAAAAAADs/wAAAwABAAAAAADt/wAAAwABAAAAAADu/wAAAwABAAAAAADv/wAAAwABAAAAAADw/wAAAwABAAAAAADx/wAAAwABAAAAAADy/wAAAwABAAAAAADz/wAAAwABAAAAAAD0/wAAAwABAAAAAAD1/wAAAwABAAAAAAD2/wAAAwABAAAAAAD3/wAAAwABAAAAAAD4/wAAAwABAAAAAAD5/wAAAwABAAAAAAD6/wAAAwABAAAAAAD7/wAAAwABAAAAAAD8/wAAAwABAAAAAAD9/wAAAwABAAAAAAD+/wAAAwABAAAAAAD//wAAAwABAAAAAADh/wYAAwABAAEAAADh/wcAAwABAAEAAADh/wgAAwABAAEAAADh/wkAAwABAAEAAADh/woAAwABAAEAAADh/wsAAwABAAEAAADh/wwAAwABAAEAAADi/wYAAwABAAEAAADi/wcAAwABAAEAAADi/wgAAwABAAEAAADi/wkAAwABAAEAAADi/woAAwABAAEAAADi/wsAAwABAAEAAADi/wwAAwABAAEAAADj/wYAAwABAAEAAADj/wcAAwABAAEAAADj/wgAAwABAAEAAADj/wkAAwABAAEAAADj/woAAwABAAEAAADj/wsAAwABAAEAAADj/wwAAwABAAEAAADk/wYAAwABAAEAAADk/wcAAwABAAEAAADk/wgAAwABAAEAAADk/wkAAwABAAEAAADk/woAAwABAAEAAADk/wsAAwABAAEAAADk/wwAAwABAAEAAADl/wYAAwABAAEAAADl/wcAAwABAAEAAADl/wgAAwABAAEAAADl/wkAAwABAAEAAADl/woAAwABAAEAAADl/wsAAwABAAEAAADl/wwAAwABAAEAAADm/wYAAwABAAEAAADm/wcAAwABAAEAAADm/wgAAwABAAEAAADm/wkAAwABAAEAAADm/woAAwABAAEAAADm/wsAAwABAAEAAADm/wwAAwABAAEAAADn/wYAAwABAAEAAADn/wcAAwABAAEAAADn/wgAAwABAAEAAADn/wkAAwABAAEAAADn/woAAwABAAEAAADn/wsAAwABAAEAAADn/wwAAwABAAEAAADo/wYAAwABAAEAAADo/wcAAwABAAEAAADo/wgAAwABAAEAAADo/wkAAwABAAEAAADo/woAAwABAAEAAADo/wsAAwABAAEAAADo/wwAAwABAAEAAADp/wYAAwABAAEAAADp/wcAAwABAAEAAADp/wgAAwABAAEAAADp/wkAAwABAAEAAADp/woAAwABAAEAAADp/wsAAwABAAEAAADp/wwAAwABAAEAAADq/wYAAwABAAEAAADq/wcAAwABAAEAAADq/wgAAwABAAEAAADq/wkAAwABAAEAAADq/woAAwABAAEAAADq/wsAAwABAAEAAADq/wwAAwABAAEAAADr/wYAAwABAAEAAADr/wcAAwABAAEAAADr/wgAAwABAAEAAADr/wkAAwABAAEAAADr/woAAwABAAEAAADr/wsAAwABAAEAAADr/wwAAwABAAEAAADs/wYAAwABAAEAAADs/wcAAwABAAEAAADs/wgAAwABAAEAAADs/wkAAwABAAEAAADs/woAAwABAAEAAADs/wsAAwABAAEAAADs/wwAAwABAAEAAADt/wYAAwABAAEAAADt/wcAAwABAAEAAADt/wgAAwABAAEAAADt/wkAAwABAAEAAADt/woAAwABAAEAAADt/wsAAwABAAEAAADt/wwAAwABAAEAAADu/wYAAwABAAEAAADu/wcAAwABAAEAAADu/wgAAwABAAEAAADu/wkAAwABAAEAAADu/woAAwABAAEAAADu/wsAAwABAAEAAADu/wwAAwABAAEAAADv/wYAAwABAAEAAADv/wcAAwABAAEAAADv/wgAAwABAAEAAADv/wkAAwABAAEAAADv/woAAwABAAEAAADv/wsAAwABAAEAAADv/wwAAwABAAEAAADw/wYAAwABAAEAAADw/wcAAwABAAEAAADw/wgAAwABAAEAAADw/wkAAwABAAEAAADw/woAAwABAAEAAADw/wsAAwABAAEAAADw/wwAAwABAAEAAADx/wYAAwABAAEAAADx/wcAAwABAAEAAADx/wgAAwABAAEAAADx/wkAAwABAAEAAADx/woAAwABAAEAAADx/wsAAwABAAEAAADx/wwAAwABAAEAAADy/wYAAwABAAEAAADy/wcAAwABAAEAAADy/wgAAwABAAEAAADy/wkAAwABAAEAAADy/woAAwABAAEAAADy/wsAAwABAAEAAADy/wwAAwABAAEAAADz/wYAAwABAAEAAADz/wcAAwABAAEAAADz/wgAAwADAAAAAADz/wkAAwABAAEAAADz/woAAwABAAEAAADz/wsAAwABAAEAAADz/wwAAwABAAEAAAD0/wYAAwABAAEAAAD0/wcAAwABAAEAAAD0/wgAAwABAAEAAAD0/wkAAwABAAEAAAD0/woAAwABAAEAAAD0/wsAAwABAAEAAAD0/wwAAwABAAEAAAD1/wYAAwABAAEAAAD1/wcAAwABAAEAAAD1/wgAAwABAAEAAAD1/wkAAwABAAEAAAD1/woAAwABAAEAAAD1/wsAAwABAAEAAAD1/wwAAwABAAEAAAD2/wYAAwABAAEAAAD2/wcAAwABAAEAAAD2/wgAAwABAAEAAAD2/wkAAwABAAEAAAD2/woAAwABAAEAAAD2/wsAAwABAAEAAAD2/wwAAwABAAEAAAD3/wYAAwABAAEAAAD3/wcAAwABAAEAAAD3/wgAAwABAAEAAAD3/wkAAwABAAEAAAD3/woAAwABAAEAAAD3/wsAAwABAAEAAAD3/wwAAwABAAEAAAD4/wYAAwABAAEAAAD4/wcAAwABAAEAAAD4/wgAAwABAAEAAAD4/wkAAwABAAEAAAD4/woAAwABAAEAAAD4/wsAAwABAAEAAAD4/wwAAwABAAEAAAD5/wYAAwABAAEAAAD5/wcAAwABAAEAAAD5/wgAAwABAAEAAAD5/wkAAwABAAEAAAD5/woAAwABAAEAAAD5/wsAAwADAAAAAAD5/wwAAwABAAEAAAD6/wYAAwABAAEAAAD6/wcAAwABAAEAAAD6/wgAAwABAAEAAAD6/wkAAwABAAEAAAD6/woAAwABAAEAAAD6/wsAAwABAAEAAAD6/wwAAwABAAEAAAD7/wYAAwABAAEAAAD7/wcAAwABAAEAAAD7/wgAAwABAAEAAAD7/wkAAwABAAEAAAD7/woAAwABAAEAAAD7/wsAAwABAAEAAAD7/wwAAwABAAEAAAD8/wYAAwABAAEAAAD8/wcAAwABAAEAAAD8/wgAAwADAAAAAAD8/wkAAwABAAEAAAD8/woAAwABAAEAAAD8/wsAAwABAAEAAAD8/wwAAwABAAEAAAD9/wYAAwABAAEAAAD9/wcAAwABAAEAAAD9/wgAAwABAAEAAAD9/wkAAwABAAEAAAD9/woAAwABAAEAAAD9/wsAAwABAAEAAAD9/wwAAwABAAEAAAD+/wYAAwABAAEAAAD+/wcAAwABAAEAAAD+/wgAAwABAAEAAAD+/wkAAwABAAEAAAD+/woAAwABAAEAAAD+/wsAAwABAAEAAAD+/wwAAwABAAEAAAD//wYAAwABAAEAAAD//wcAAwABAAEAAAD//wgAAwABAAEAAAD//wkAAwABAAEAAAD//woAAwABAAEAAAD//wsAAwABAAEAAAD//wwAAwABAAEAAAAAAAYAAwABAAEAAAAAAAcAAwABAAEAAAAAAAgAAwABAAEAAAAAAAkAAwABAAEAAAAAAAoAAwABAAEAAAAAAAsAAwABAAEAAAAAAAwAAwABAAEAAAABAAYAAwABAAEAAAABAAcAAwABAAEAAAABAAgAAwABAAEAAAABAAkAAwABAAEAAAABAAoAAwABAAEAAAABAAsAAwABAAEAAAABAAwAAwABAAEAAAACAAYAAwABAAEAAAACAAcAAwABAAEAAAACAAgAAwABAAEAAAACAAkAAwABAAEAAAACAAoAAwABAAEAAAACAAsAAwABAAEAAAACAAwAAwABAAEAAAADAAYAAwABAAEAAAADAAcAAwABAAEAAAADAAgAAwABAAEAAAADAAkAAwABAAEAAAADAAoAAwABAAEAAAADAAsAAwABAAEAAAADAAwAAwABAAEAAAAEAAYAAwABAAEAAAAEAAcAAwABAAEAAAAEAAgAAwABAAEAAAAEAAkAAwABAAEAAAAEAAoAAwABAAEAAAAEAAsAAwABAAEAAAAEAAwAAwADAAAAAAAFAAYAAwABAAEAAAAFAAcAAwABAAEAAAAFAAgAAwADAAAAAAAFAAkAAwABAAEAAAAFAAoAAwABAAEAAAAFAAsAAwABAAEAAAAFAAwAAwABAAEAAAAGAAYAAwABAAEAAAAGAAcAAwABAAEAAAAGAAgAAwABAAEAAAAGAAkAAwABAAEAAAAGAAoAAwABAAEAAAAGAAsAAwABAAEAAAAGAAwAAwABAAEAAAAHAAYAAwABAAEAAAAHAAcAAwABAAEAAAAHAAgAAwABAAEAAAAHAAkAAwABAAEAAAAHAAoAAwABAAEAAAAHAAsAAwABAAEAAAAHAAwAAwABAAEAAAAIAAYAAwABAAEAAAAIAAcAAwABAAEAAAAIAAgAAwABAAEAAAAIAAkAAwABAAEAAAAIAAoAAwABAAEAAAAIAAsAAwABAAEAAAAIAAwAAwABAAEAAAAJAAYAAwABAAEAAAAJAAcAAwABAAEAAAAJAAgAAwABAAEAAAAJAAkAAwABAAEAAAAJAAoAAwABAAEAAAAJAAsAAwABAAEAAAAJAAwAAwABAAEAAAAKAAYAAwABAAEAAAAKAAcAAwABAAEAAAAKAAgAAwABAAEAAAAKAAkAAwABAAEAAAAKAAoAAwABAAEAAAAKAAsAAwABAAEAAAAKAAwAAwABAAEAAAALAAYAAwABAAEAAAALAAcAAwABAAEAAAALAAgAAwABAAEAAAALAAkAAwABAAEAAAALAAoAAwABAAEAAAALAAsAAwABAAEAAAALAAwAAwABAAEAAAAMAAYAAwABAAEAAAAMAAcAAwABAAEAAAAMAAgAAwABAAEAAAAMAAkAAwABAAEAAAAMAAoAAwABAAEAAAAMAAsAAwABAAEAAAAMAAwAAwABAAEAAAANAAYAAwABAAEAAAANAAcAAwABAAEAAAANAAgAAwABAAEAAAANAAkAAwABAAEAAAANAAoAAwABAAEAAAANAAsAAwABAAEAAAANAAwAAwABAAEAAAAOAAYAAwABAAEAAAAOAAcAAwABAAEAAAAOAAgAAwABAAEAAAAOAAkAAwADAAAAAAAOAAoAAwABAAEAAAAOAAsAAwABAAEAAAAOAAwAAwABAAEAAAAPAAYAAwABAAEAAAAPAAcAAwABAAEAAAAPAAgAAwABAAEAAAAPAAkAAwABAAEAAAAPAAoAAwABAAEAAAAPAAsAAwABAAEAAAAPAAwAAwABAAEAAAAQAAYAAwABAAEAAAAQAAcAAwABAAEAAAAQAAgAAwABAAEAAAAQAAkAAwABAAEAAAAQAAoAAwABAAEAAAAQAAsAAwABAAEAAAAQAAwAAwABAAEAAAARAAYAAwABAAEAAAARAAcAAwABAAEAAAARAAgAAwABAAEAAAARAAkAAwABAAEAAAARAAoAAwABAAEAAAARAAsAAwABAAEAAAARAAwAAwABAAEAAAASAAYAAwABAAEAAAASAAcAAwABAAEAAAASAAgAAwABAAEAAAASAAkAAwABAAEAAAASAAoAAwABAAEAAAASAAsAAwABAAEAAAASAAwAAwABAAEAAAATAAYAAwABAAEAAAATAAcAAwABAAEAAAATAAgAAwABAAEAAAATAAkAAwABAAEAAAATAAoAAwABAAEAAAATAAsAAwABAAEAAAATAAwAAwABAAEAAAAUAAYAAwABAAEAAAAUAAcAAwABAAEAAAAUAAgAAwABAAEAAAAUAAkAAwABAAEAAAAUAAoAAwABAAEAAAAUAAsAAwABAAEAAAAUAAwAAwABAAEAAAAVAAYAAwABAAEAAAAVAAcAAwABAAEAAAAVAAgAAwABAAEAAAAVAAkAAwABAAEAAAAVAAoAAwABAAEAAAAVAAsAAwABAAEAAAAVAAwAAwABAAEAAAAWAAYAAwABAAEAAAAWAAcAAwABAAEAAAAWAAgAAwABAAEAAAAWAAkAAwABAAEAAAAWAAoAAwABAAEAAAAWAAsAAwABAAEAAAAWAAwAAwABAAEAAAAXAAYAAwABAAEAAAAXAAcAAwABAAEAAAAXAAgAAwABAAEAAAAXAAkAAwABAAEAAAAXAAoAAwABAAEAAAAXAAsAAwABAAEAAAAXAAwAAwABAAEAAAAYAAYAAwABAAEAAAAYAAcAAwABAAEAAAAYAAgAAwABAAEAAAAYAAkAAwABAAEAAAAYAAoAAwABAAEAAAAYAAsAAwABAAEAAAAYAAwAAwABAAEAAAAZAAYAAwABAAEAAAAZAAcAAwABAAEAAAAZAAgAAwABAAEAAAAZAAkAAwABAAEAAAAZAAoAAwABAAEAAAAZAAsAAwABAAEAAAAZAAwAAwABAAEAAAAaAAYAAwABAAEAAAAaAAcAAwABAAEAAAAaAAgAAwABAAEAAAAaAAkAAwABAAEAAAAaAAoAAwABAAEAAAAaAAsAAwABAAEAAAAaAAwAAwABAAEAAAAbAAYAAwABAAEAAAAbAAcAAwABAAEAAAAbAAgAAwABAAEAAAAbAAkAAwABAAEAAAAbAAoAAwABAAEAAAAbAAsAAwABAAEAAAAbAAwAAwABAAEAAAAcAAYAAwABAAEAAAAcAAcAAwABAAEAAAAcAAgAAwABAAEAAAAcAAkAAwABAAEAAAAcAAoAAwABAAEAAAAcAAsAAwABAAEAAAAcAAwAAwABAAEAAAAdAAYAAwABAAEAAAAdAAcAAwABAAEAAAAdAAgAAwABAAEAAAAdAAkAAwABAAEAAAAdAAoAAwABAAEAAAAdAAsAAwABAAEAAAAdAAwAAwABAAEAAAAeAAYAAwABAAEAAAAeAAcAAwABAAEAAAAeAAgAAwABAAEAAAAeAAkAAwABAAEAAAAeAAoAAwABAAEAAAAeAAsAAwABAAEAAAAeAAwAAwABAAEAAAAfAAYAAwABAAEAAAAfAAcAAwABAAEAAAAfAAgAAwABAAEAAAAfAAkAAwABAAEAAAAfAAoAAwABAAEAAAAfAAsAAwABAAEAAAAfAAwAAwABAAEAAAAgAAYAAwABAAEAAAAgAAcAAwABAAEAAAAgAAgAAwABAAEAAAAgAAkAAwABAAEAAAAgAAoAAwABAAEAAAAgAAsAAwABAAEAAAAgAAwAAwABAAEAAADh/wEAAwABAAEAAADh/wIAAwABAAEAAADh/wMAAwABAAEAAADh/wQAAwABAAEAAADh/wUAAwABAAEAAADi/wEAAwABAAEAAADi/wIAAwABAAEAAADi/wMAAwABAAEAAADi/wQAAwABAAEAAADi/wUAAwABAAEAAADj/wEAAwABAAEAAADj/wIAAwABAAEAAADj/wMAAwABAAEAAADj/wQAAwABAAEAAADj/wUAAwABAAEAAADk/wEAAwABAAEAAADk/wIAAwABAAEAAADk/wMAAwABAAEAAADk/wQAAwABAAEAAADk/wUAAwABAAEAAADl/wEAAwABAAEAAADl/wIAAwABAAEAAADl/wMAAwABAAEAAADl/wQAAwABAAEAAADl/wUAAwABAAEAAADm/wEAAwABAAEAAADm/wIAAwABAAEAAADm/wMAAwABAAEAAADm/wQAAwABAAEAAADm/wUAAwABAAEAAADn/wEAAwABAAEAAADn/wIAAwABAAEAAADn/wMAAwABAAEAAADn/wQAAwABAAEAAADn/wUAAwABAAEAAADo/wEAAwABAAEAAADo/wIAAwABAAEAAADo/wMAAwABAAEAAADo/wQAAwABAAEAAADo/wUAAwABAAEAAADp/wEAAwABAAEAAADp/wIAAwABAAEAAADp/wMAAwABAAEAAADp/wQAAwABAAEAAADp/wUAAwABAAEAAADq/wEAAwABAAEAAADq/wIAAwABAAEAAADq/wMAAwABAAEAAADq/wQAAwABAAEAAADq/wUAAwABAAEAAADr/wEAAwABAAEAAADr/wIAAwABAAEAAADr/wMAAwABAAEAAADr/wQAAwABAAEAAADr/wUAAwABAAEAAADs/wEAAwABAAEAAADs/wIAAwABAAEAAADs/wMAAwABAAEAAADs/wQAAwABAAEAAADs/wUAAwABAAEAAADt/wEAAwABAAEAAADt/wIAAwABAAEAAADt/wMAAwABAAEAAADt/wQAAwABAAEAAADt/wUAAwABAAEAAADu/wEAAwABAAEAAADu/wIAAwABAAEAAADu/wMAAwABAAEAAADu/wQAAwABAAEAAADu/wUAAwABAAEAAADv/wEAAwABAAEAAADv/wIAAwABAAEAAADv/wMAAwABAAEAAADv/wQAAwABAAEAAADv/wUAAwABAAEAAADw/wEAAwABAAEAAADw/wIAAwABAAEAAADw/wMAAwABAAEAAADw/wQAAwABAAEAAADw/wUAAwABAAEAAADx/wEAAwABAAEAAADx/wIAAwADAAAAAADx/wMAAwABAAEAAADx/wQAAwABAAEAAADx/wUAAwABAAEAAADy/wEAAwABAAEAAADy/wIAAwABAAEAAADy/wMAAwABAAEAAADy/wQAAwABAAEAAADy/wUAAwABAAEAAADz/wEAAwABAAEAAADz/wIAAwABAAEAAADz/wMAAwABAAEAAADz/wQAAwABAAEAAADz/wUAAwABAAEAAAD0/wEAAwABAAEAAAD0/wIAAwABAAEAAAD0/wMAAwABAAEAAAD0/wQAAwABAAEAAAD0/wUAAwABAAEAAAD1/wEAAwABAAEAAAD1/wIAAwABAAEAAAD1/wMAAwABAAEAAAD1/wQAAwABAAEAAAD1/wUAAwABAAEAAAD2/wEAAwABAAEAAAD2/wIAAwABAAEAAAD2/wMAAwABAAEAAAD2/wQAAwABAAEAAAD2/wUAAwABAAEAAAD3/wEAAwABAAEAAAD3/wIAAwABAAEAAAD3/wMAAwABAAEAAAD3/wQAAwABAAEAAAD3/wUAAwABAAEAAAD4/wEAAwABAAEAAAD4/wIAAwABAAEAAAD4/wMAAwABAAEAAAD4/wQAAwABAAEAAAD4/wUAAwABAAEAAAD5/wEAAwABAAEAAAD5/wIAAwADAAAAAAD5/wMAAwABAAEAAAD5/wQAAwABAAEAAAD5/wUAAwABAAEAAAD6/wEAAwABAAEAAAD6/wIAAwABAAEAAAD6/wMAAwABAAEAAAD6/wQAAwABAAEAAAD6/wUAAwABAAEAAAD7/wEAAwABAAEAAAD7/wIAAwABAAEAAAD7/wMAAwABAAEAAAD7/wQAAwABAAEAAAD7/wUAAwABAAEAAAD8/wEAAwABAAEAAAD8/wIAAwABAAEAAAD8/wMAAwABAAEAAAD8/wQAAwABAAEAAAD8/wUAAwABAAEAAAD9/wEAAwABAAEAAAD9/wIAAwABAAEAAAD9/wMAAwABAAEAAAD9/wQAAwABAAEAAAD9/wUAAwABAAEAAAD+/wEAAwABAAEAAAD+/wIAAwABAAEAAAD+/wMAAwABAAEAAAD+/wQAAwABAAEAAAD+/wUAAwABAAEAAAAJAAEAAwABAAEAAAAJAAIAAwABAAEAAAAJAAMAAwABAAEAAAAJAAQAAwABAAEAAAAJAAUAAwABAAEAAAAKAAEAAwABAAEAAAAKAAIAAwABAAEAAAAKAAMAAwABAAEAAAAKAAQAAwABAAEAAAAKAAUAAwABAAEAAAALAAEAAwABAAEAAAALAAIAAwABAAEAAAALAAMAAwABAAEAAAALAAQAAwABAAEAAAALAAUAAwABAAEAAAAMAAEAAwABAAEAAAAMAAIAAwABAAEAAAAMAAMAAwADAAAAAAAMAAQAAwABAAEAAAAMAAUAAwABAAEAAAANAAEAAwABAAEAAAANAAIAAwABAAEAAAANAAMAAwABAAEAAAANAAQAAwABAAEAAAANAAUAAwABAAEAAAAOAAEAAwABAAEAAAAOAAIAAwABAAEAAAAOAAMAAwABAAEAAAAOAAQAAwABAAEAAAAOAAUAAwABAAEAAAAPAAEAAwABAAEAAAAPAAIAAwABAAEAAAAPAAMAAwABAAEAAAAPAAQAAwABAAEAAAAPAAUAAwABAAEAAAAQAAEAAwABAAEAAAAQAAIAAwABAAEAAAAQAAMAAwABAAEAAAAQAAQAAwABAAEAAAAQAAUAAwABAAEAAAARAAEAAwABAAEAAAARAAIAAwABAAEAAAARAAMAAwABAAEAAAARAAQAAwABAAEAAAARAAUAAwABAAEAAAASAAEAAwABAAEAAAASAAIAAwABAAEAAAASAAMAAwABAAEAAAASAAQAAwABAAEAAAASAAUAAwADAAAAAAATAAEAAwABAAEAAAATAAIAAwABAAEAAAATAAMAAwABAAEAAAATAAQAAwABAAEAAAATAAUAAwABAAEAAAAUAAEAAwABAAEAAAAUAAIAAwABAAEAAAAUAAMAAwABAAEAAAAUAAQAAwABAAEAAAAUAAUAAwABAAEAAAAVAAEAAwABAAEAAAAVAAIAAwABAAEAAAAVAAMAAwABAAEAAAAVAAQAAwABAAEAAAAVAAUAAwABAAEAAAAWAAEAAwABAAEAAAAWAAIAAwABAAEAAAAWAAMAAwABAAEAAAAWAAQAAwABAAEAAAAWAAUAAwABAAEAAAAXAAEAAwABAAEAAAAXAAIAAwABAAEAAAAXAAMAAwABAAEAAAAXAAQAAwABAAEAAAAXAAUAAwABAAEAAAAYAAEAAwABAAEAAAAYAAIAAwABAAEAAAAYAAMAAwABAAEAAAAYAAQAAwABAAEAAAAYAAUAAwABAAEAAAAZAAEAAwABAAEAAAAZAAIAAwABAAEAAAAZAAMAAwABAAEAAAAZAAQAAwABAAEAAAAZAAUAAwABAAEAAAAaAAEAAwABAAEAAAAaAAIAAwABAAEAAAAaAAMAAwABAAEAAAAaAAQAAwABAAEAAAAaAAUAAwABAAEAAAAbAAEAAwABAAEAAAAbAAIAAwABAAEAAAAbAAMAAwABAAEAAAAbAAQAAwABAAEAAAAbAAUAAwABAAEAAAAcAAEAAwABAAEAAAAcAAIAAwABAAEAAAAcAAMAAwABAAEAAAAcAAQAAwABAAEAAAAcAAUAAwABAAEAAAAdAAEAAwABAAEAAAAdAAIAAwABAAEAAAAdAAMAAwABAAEAAAAdAAQAAwABAAEAAAAdAAUAAwABAAEAAAAeAAEAAwABAAEAAAAeAAIAAwABAAEAAAAeAAMAAwABAAEAAAAeAAQAAwABAAEAAAAeAAUAAwABAAEAAAAfAAEAAwABAAEAAAAfAAIAAwABAAEAAAAfAAMAAwABAAEAAAAfAAQAAwABAAEAAAAfAAUAAwABAAEAAAAgAAEAAwABAAEAAAAgAAIAAwABAAEAAAAgAAMAAwABAAEAAAAgAAQAAwABAAEAAAAgAAUAAwABAAEAAAD//wIAAwABAAEAAAD//wMAAwABAAEAAAD//wQAAwABAAEAAAD//wUAAwABAAEAAAAAAAUAAwABAAEAAAACAAUAAwABAAEAAAADAAUAAwABAAEAAAAEAAUAAwABAAEAAAAFAAUAAwABAAEAAAAGAAUAAwABAAEAAAAHAAUAAwABAAEAAAAIAAUAAwABAAEAAAAIAAQAAwABAAEAAAADAAQAAwABAAEAAAAEAAQAAwABAAEAAAAFAAQAAwABAAEAAAAGAAQAAwABAAEAAAAEAAMAAwABAAEAAAAFAAMAAwABAAEAAAAIAAEAAwABAAEAAAAEAP7/AwAGAAYAAAAEAP//AwAGAAcAAAAFAP7/AwAHAAYAAAAFAP//AwAHAAcAAAAHAAMABQABAAMAAAA=")
tile_set = SubResource("TileSet_lbhrr")

[node name="Player" parent="WorldContainer" groups=["player", "players"] instance=ExtResource("1_uwrxv")]
position = Vector2(0, -19)
collision_layer = 1
inventory = SubResource("Resource_nq78w")

[node name="Camera2D" type="Camera2D" parent="WorldContainer/Player"]
position = Vector2(0, -8)
zoom = Vector2(4, 4)
position_smoothing_enabled = true

[node name="Ladders" type="Node" parent="WorldContainer"]

[node name="Ladder" parent="WorldContainer/Ladders" instance=ExtResource("7_u5sy4")]
position = Vector2(57, 40)

[node name="Ladder2" parent="WorldContainer/Ladders" instance=ExtResource("7_u5sy4")]
position = Vector2(57, 24)

[node name="Ladder3" parent="WorldContainer/Ladders" instance=ExtResource("7_u5sy4")]
position = Vector2(57, 8)

[node name="Ladder4" parent="WorldContainer/Ladders" instance=ExtResource("7_u5sy4")]
position = Vector2(25, 72)

[node name="Ladder5" parent="WorldContainer/Ladders" instance=ExtResource("7_u5sy4")]
position = Vector2(25, 56)

[node name="Ladder6" parent="WorldContainer/Ladders" instance=ExtResource("7_u5sy4")]
position = Vector2(25, 40)

[connection signal="pressed" from="GameOverLayer/RestartButton" to="GameOverLayer" method="_on_restart_button_pressed"]
</file>

<file path="shaders/crt.gdshader">
/*
Shader from Godot Shaders - the free shader library.

This shader is under CC0 license. Feel free to use, improve and
change this shader according to your needs and consider sharing
the modified result to godotshaders.com.

Optimised and packed by @c64cosmin
If you do use this please share it with me
Would love to see what you're making with it <3

It's a combination of these two shaders
~godotshaders.com/shader/VHS-and-CRT-monitor-effect
godotshaders.com/shader/crt-shader-with-realistic-blurring/

CRT grille and rolling lines made by @c64cosmin
Vignette and warping effect was made by pend00
Scanlines are from "TimothyLottes" FROM SHADERTOY
Then ported by AHOPNESS (@ahopness)
https://www.shadertoy.com/view/MsjXzh
*/

shader_type canvas_item;

uniform sampler2D SCREEN_TEXTURE: hint_screen_texture;

uniform vec2 resolution = vec2(320.0, 180.0);

uniform float scan_line_amount :hint_range(0.0, 1.0) = 1.0;
uniform float warp_amount :hint_range(0.0, 5.0) = 0.1;
uniform float noise_amount :hint_range(0.0, 0.3) = 0.03;
uniform float interference_amount :hint_range(0.0, 1.0) = 0.2;
uniform float grille_amount :hint_range(0.0, 1.0) = 0.1;
uniform float grille_size :hint_range(1.0, 5.0) = 1.0;
uniform float vignette_amount :hint_range(0.0, 2.0) = 0.6;
uniform float vignette_intensity : hint_range(0.0, 1.0) = 0.4;
uniform float aberation_amount :hint_range(0.0, 1.0) = 0.5;
uniform float roll_line_amount :hint_range(0.0, 1.0) = 0.3;
uniform float roll_speed :hint_range(-8.0, 8.0) = 1.0;
uniform float scan_line_strength :hint_range(-12.0, -1.0) = -8.0;
uniform float pixel_strength :hint_range(-4.0, 0.0) = -2.0;

float random(vec2 uv){
    return fract(cos(uv.x * 83.4827 + uv.y * 92.2842) * 43758.5453123);
}

vec3 fetch_pixel(vec2 uv, vec2 off){
	vec2 pos = floor(uv * resolution + off) / resolution + vec2(0.5) / resolution;

	float noise = 0.0;
	if(noise_amount > 0.0){
		noise = random(pos + fract(TIME)) * noise_amount;
	}

	if(max(abs(pos.x - 0.5), abs(pos.y - 0.5)) > 0.5){
		return vec3(0.0, 0.0, 0.0);
	}

	vec3 clr = texture(SCREEN_TEXTURE , pos, -16.0).rgb + noise;
	return clr;
}

// Distance in emulated pixels to nearest texel.
vec2 Dist(vec2 pos){
	pos = pos * resolution;
	return - ((pos - floor(pos)) - vec2(0.5));
}

// 1D Gaussian.
float Gaus(float pos, float scale){ return exp2(scale * pos * pos); }

// 3-tap Gaussian filter along horz line.
vec3 Horz3(vec2 pos, float off){
	vec3 b = fetch_pixel(pos, vec2(-1.0, off));
	vec3 c = fetch_pixel(pos, vec2( 0.0, off));
	vec3 d = fetch_pixel(pos, vec2( 1.0, off));
	float dst = Dist(pos).x;

	// Convert distance to weight.
	float scale = pixel_strength;
	float wb = Gaus(dst - 1.0, scale);
	float wc = Gaus(dst + 0.0, scale);
	float wd = Gaus(dst + 1.0, scale);

	// Return filtered sample.
	return (b * wb + c * wc + d * wd) / (wb + wc + wd);
}

// Return scanline weight.
float Scan(vec2 pos, float off){
	float dst = Dist(pos).y;

	return Gaus(dst + off, scan_line_strength);
}

// Allow nearest three lines to effect pixel.
vec3 Tri(vec2 pos){
	vec3 clr = fetch_pixel(pos, vec2(0.0));
	if(scan_line_amount > 0.0){
		vec3 a = Horz3(pos,-1.0);
		vec3 b = Horz3(pos, 0.0);
		vec3 c = Horz3(pos, 1.0);

		float wa = Scan(pos,-1.0);
		float wb = Scan(pos, 0.0);
		float wc = Scan(pos, 1.0);

		vec3 scanlines = a * wa + b * wb + c * wc;
		clr = mix(clr, scanlines, scan_line_amount);
	}
	return clr;
}

// Takes in the UV and warps the edges, creating the spherized effect
vec2 warp(vec2 uv){
	vec2 delta = uv - 0.5;
	float delta2 = dot(delta.xy, delta.xy);
	float delta4 = delta2 * delta2;
	float delta_offset = delta4 * warp_amount;

	vec2 warped = uv + delta * delta_offset;
	return (warped - 0.5) / mix(1.0,1.2,warp_amount/5.0) + 0.5;
}

float vignette(vec2 uv){
	uv *= 1.0 - uv.xy;
	float vignette = uv.x * uv.y * 15.0;
	return pow(vignette, vignette_intensity * vignette_amount);
}

float floating_mod(float a, float b){
	return a - b * floor(a/b);
}

vec3 grille(vec2 uv){
	float unit = PI / 3.0;
	float scale = 2.0*unit/grille_size;
	float r = smoothstep(0.5, 0.8, cos(uv.x*scale - unit));
	float g = smoothstep(0.5, 0.8, cos(uv.x*scale + unit));
	float b = smoothstep(0.5, 0.8, cos(uv.x*scale + 3.0*unit));
	return mix(vec3(1.0), vec3(r,g,b), grille_amount);
}

float roll_line(vec2 uv){
	float x = uv.y * 3.0 - TIME * roll_speed;
	float f = cos(x) * cos(x * 2.35 + 1.1) * cos(x * 4.45 + 2.3);
	float roll_line = smoothstep(0.5, 0.9, f);
	return roll_line * roll_line_amount;
}

void fragment(){
	vec2 pix = FRAGCOORD.xy;
	vec2 pos = warp(SCREEN_UV);

	float line = 0.0;
	if(roll_line_amount > 0.0){
		line = roll_line(pos);
	}

	vec2 sq_pix = floor(pos * resolution) / resolution + vec2(0.5) / resolution;
	if(interference_amount + roll_line_amount > 0.0){
		float interference = random(sq_pix.yy + fract(TIME));
		pos.x += (interference * (interference_amount + line * 6.0)) / resolution.x;
	}

	vec3 clr = Tri(pos);
	if(aberation_amount > 0.0){
		float chromatic = aberation_amount + line * 2.0;
		vec2 chromatic_x = vec2(chromatic,0.0) / resolution.x;
		vec2 chromatic_y = vec2(0.0, chromatic/2.0) / resolution.y;
		float r = Tri(pos - chromatic_x).r;
		float g = Tri(pos + chromatic_y).g;
		float b = Tri(pos + chromatic_x).b;
		clr = vec3(r,g,b);
	}

	if(grille_amount > 0.0)clr *= grille(pix);
	clr *= 1.0 + scan_line_amount * 0.6 + line * 3.0 + grille_amount * 2.0;
	if(vignette_amount > 0.0)clr *= vignette(pos);

	COLOR.rgb = clr;
	COLOR.a = 1.0;
}
</file>

<file path="assets/sprites/other/scenes/player.tscn">
[gd_scene load_steps=45 format=3 uid="uid://4yp0qu72jr2b"]

[ext_resource type="Script" uid="uid://cq0ybetkfcej5" path="res://scripts/player.gd" id="1_g2els"]
[ext_resource type="Texture2D" uid="uid://owxmkmo3hff" path="res://assets/sprites/Miner16Bit_AllFiles_v1/Miner_AllAnimations_SpriteSheet.png" id="2_g2els"]
[ext_resource type="PackedScene" uid="uid://dmf6diflfftrc" path="res://assets/sprites/other/scenes/ladder.tscn" id="2_mpqlg"]
[ext_resource type="Resource" uid="uid://pmkg1u7amds4" path="res://assets/inventory/ladder.tres" id="3_l2ycw"]
[ext_resource type="AudioStream" uid="uid://ympmury34vme" path="res://assets/sounds/ladder-climbing.mp3" id="3_qhqgy"]
[ext_resource type="AudioStream" uid="uid://bawabjij02gso" path="res://assets/sounds/jump.wav" id="4_qlg0r"]
[ext_resource type="AudioStream" uid="uid://b6hbsvqkflhua" path="res://assets/sounds/walk3.ogg" id="5_qlg0r"]
[ext_resource type="AudioStream" uid="uid://bbhbi0jxvy13x" path="res://assets/sounds/ladder-create.ogg" id="6_fjrip"]
[ext_resource type="AudioStream" uid="uid://y63k8i7xjsa6" path="res://assets/sounds/ladder-destroy.ogg" id="7_smehm"]
[ext_resource type="AudioStream" uid="uid://dqu0216h86oxu" path="res://assets/sounds/dig2.mp3" id="8_16a80"]

[sub_resource type="AtlasTexture" id="AtlasTexture_y4r1p"]
atlas = ExtResource("2_g2els")
region = Rect2(0, 80, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_d2wvv"]
atlas = ExtResource("2_g2els")
region = Rect2(16, 80, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_3v2ag"]
atlas = ExtResource("2_g2els")
region = Rect2(32, 80, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_jej6c"]
atlas = ExtResource("2_g2els")
region = Rect2(48, 80, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_60mlk"]
atlas = ExtResource("2_g2els")
region = Rect2(0, 96, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_i4ail"]
atlas = ExtResource("2_g2els")
region = Rect2(16, 96, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_a38lo"]
atlas = ExtResource("2_g2els")
region = Rect2(32, 96, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_4ni07"]
atlas = ExtResource("2_g2els")
region = Rect2(48, 96, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_l71n6"]
atlas = ExtResource("2_g2els")
region = Rect2(64, 96, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_f1ej7"]
atlas = ExtResource("2_g2els")
region = Rect2(0, 32, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_oprun"]
atlas = ExtResource("2_g2els")
region = Rect2(16, 32, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_a8ls1"]
atlas = ExtResource("2_g2els")
region = Rect2(32, 32, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_qfm1y"]
atlas = ExtResource("2_g2els")
region = Rect2(48, 32, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_fulsm"]
atlas = ExtResource("2_g2els")
region = Rect2(64, 32, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_4r5pv"]
atlas = ExtResource("2_g2els")
region = Rect2(80, 32, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_ke2ow"]
atlas = ExtResource("2_g2els")
region = Rect2(0, 48, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_ujl30"]
atlas = ExtResource("2_g2els")
region = Rect2(16, 48, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_31cv2"]
atlas = ExtResource("2_g2els")
region = Rect2(32, 48, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_pf23h"]
atlas = ExtResource("2_g2els")
region = Rect2(48, 48, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_dt7fs"]
atlas = ExtResource("2_g2els")
region = Rect2(64, 48, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_wqfne"]
atlas = ExtResource("2_g2els")
region = Rect2(80, 48, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_qhqgy"]
atlas = ExtResource("2_g2els")
region = Rect2(0, 0, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_dqkch"]
atlas = ExtResource("2_g2els")
region = Rect2(176, 0, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_g2els"]
atlas = ExtResource("2_g2els")
region = Rect2(0, 0, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_qlg0r"]
atlas = ExtResource("2_g2els")
region = Rect2(16, 0, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_tuyoq"]
atlas = ExtResource("2_g2els")
region = Rect2(32, 0, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_fjrip"]
atlas = ExtResource("2_g2els")
region = Rect2(48, 0, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_smehm"]
atlas = ExtResource("2_g2els")
region = Rect2(64, 0, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_ur7pv"]
atlas = ExtResource("2_g2els")
region = Rect2(80, 0, 16, 16)

[sub_resource type="SpriteFrames" id="SpriteFrames_ur7pv"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_y4r1p")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_d2wvv")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_3v2ag")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_jej6c")
}],
"loop": false,
"name": &"climb",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_60mlk")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_i4ail")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_a38lo")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_4ni07")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_l71n6")
}],
"loop": true,
"name": &"death",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_f1ej7")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_oprun")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_a8ls1")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_qfm1y")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_fulsm")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_4r5pv")
}],
"loop": true,
"name": &"dig",
"speed": 10.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_ke2ow")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ujl30")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_31cv2")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_pf23h")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_dt7fs")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_wqfne")
}],
"loop": true,
"name": &"dig_under",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_qhqgy")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_dqkch")
}],
"loop": true,
"name": &"idle",
"speed": 0.7
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_g2els")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_qlg0r")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_tuyoq")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_fjrip")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_smehm")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ur7pv")
}],
"loop": true,
"name": &"walk",
"speed": 7.0
}]

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_g2els"]
radius = 3.0
height = 12.0

[sub_resource type="Shader" id="Shader_hs3jg"]
code = "shader_type canvas_item;

render_mode blend_mix, unshaded;

uniform float progress: hint_range(0,1) = 0.0;
uniform float speed: hint_range(0,10) = 2.0;
uniform vec4 main_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform sampler2D noise_tex;

void fragment() {
	vec2 uv = UV;
	float noise_val = texture(noise_tex, uv).r;
    // Używamy smoothstep z marginesem, aby uzyskać płynne przejście.
    float dissolve_factor = smoothstep(progress - 0.1, progress + 0.1, noise_val);
    // Interpolujemy między pełnym kolorem a przezroczystością:
	COLOR = mix(main_color, vec4(0.0), dissolve_factor);
}

"

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_psqw3"]

[sub_resource type="ShaderMaterial" id="ShaderMaterial_a0lea"]
shader = SubResource("Shader_hs3jg")
shader_parameter/progress = 0.0
shader_parameter/speed = 2.0
shader_parameter/main_color = Vector4(1, 1, 1, 1)
shader_parameter/noise_tex = SubResource("CompressedTexture2D_psqw3")

[node name="Player" type="CharacterBody2D"]
z_index = 1
collision_layer = 2
script = ExtResource("1_g2els")
ladder_scene = ExtResource("2_mpqlg")
ladder_item_type = ExtResource("3_l2ycw")

[node name="AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
position = Vector2(0, -8)
sprite_frames = SubResource("SpriteFrames_ur7pv")
animation = &"dig"
autoplay = "idle"

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(0, -6)
shape = SubResource("CapsuleShape2D_g2els")

[node name="LadderClimbSound" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource("3_qhqgy")

[node name="JumpSound" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource("4_qlg0r")
volume_db = -15.951

[node name="WalkSound" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource("5_qlg0r")
volume_db = 5.019

[node name="LadderPlaceSound" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource("6_fjrip")

[node name="LadderRemoveSound" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource("7_smehm")

[node name="DigProgressSprite" type="Sprite2D" parent="."]
material = SubResource("ShaderMaterial_a0lea")

[node name="DigSound" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource("8_16a80")
volume_db = 0.599
</file>

<file path="scripts/ladder.gd">
extends Area2D

signal entered_ladder
signal exited_ladder

func _ready() -> void:
	add_to_group("ladders")

func _on_body_entered(body: Node) -> void:
	if body.is_in_group("player"):
		entered_ladder.emit(body)

func _on_body_exited(body: Node) -> void:
	if body.is_in_group("player"):
		exited_ladder.emit(body)
</file>

<file path="scripts/ui.gd">
# ui.gd
extends CanvasLayer

@onready var ladder_label: Label = $LadderCountLabel
@onready var health_label: Label = $HealthLabel
@onready var player := get_tree().get_first_node_in_group("player") as Node2D

func _ready():
	if not player:
		printerr("UI: nie znaleziono Playera w grupie 'player'!")
		return

	var inv := player.inventory as Inventory
	if inv:
		inv.item_added.connect(_on_inventory_changed)
		inv.item_removed.connect(_on_inventory_changed)
		# od razu pierwsze odświeżenie:
		_on_inventory_changed(null, 0)

func _on_inventory_changed(item: InventoryItem, slot_idx: int) -> void:
	var inv := player.inventory as Inventory
	if not inv:
		return
	var count := inv.get_amount_of_item_type(player.ladder_item_type)
	ladder_label.text = "Drabiny: %d" % count


func _on_player_health_updated(new_hp: float, max_hp_value: float):
	if not is_instance_valid(health_label):
		printerr("UI: HealthLabel nie jest ważny")
		return
	health_label.text = "HP: %d/%d" % [int(new_hp), int(max_hp_value)]
</file>

<file path="scripts/game.gd">
# game.gd

extends Node2D

@onready var player = $WorldContainer/Player # Ścieżka do gracza
@onready var game_over_layer = $GameOverLayer
@onready var pause_menu = $PauseMenuLayer/PauseMenu # Upewnij się, że ścieżka jest poprawna!
# lub: @onready var pause_menu_layer = $PauseMenuLayer
#@onready var world_container = $WorldContainer


# Called when the node enters the scene tree for the first time.
func _ready():
    if player:
        if player.has_signal("player_died"):
            player.player_died.connect(_on_player_died)
        else:
            printerr("Player node does not have 'player_died' signal!")
    else:
        printerr("Game script cannot find Player node at path $WorldContainer/Player!")

    if is_instance_valid(game_over_layer):
        game_over_layer.visible = false # Ukryj na starcie
    
    if pause_menu:
        pause_menu.hide()
    else:
        printerr("Game script cannot find PauseMenu node!")


func _on_player_died():
    print("Game Over sequence started.")

    # 1. Zatrzymaj główną logikę gry
    get_tree().paused = true

    # 2. Pokaż warstwę Game Over (która teraz zawiera efekt grayscale i napis)
    if is_instance_valid(game_over_layer):
        game_over_layer.visible = true
        print("GameOverLayer visibility set to true.") # Dodaj log dla pewności
    else:
        printerr("game_over_layer is not valid, cannot show Game Over screen!")

    # 3. TODO: Odtwórz dźwięk "Game Over"
    # 4. TODO: Przyciski Restart/Quit

# Ta funkcja przechwytuje input, który nie został obsłużony gdzie indziej
func _unhandled_input(event):
    # pauza / ESC
    if Input.is_action_just_pressed("ui_cancel"):
        if get_tree().paused:
            if pause_menu and pause_menu.visible:
                pause_menu.resume_game()
        else:
            get_tree().paused = true
            if pause_menu:
                pause_menu.show()
        get_viewport().set_input_as_handled()

    # przełącz ekwipunek klawiszem I
    if Input.is_action_just_pressed("ui_inventory"):
        print("DEBUG: wykryto I!")  # zobaczymy w konsoli
        var inv_ui = $UI/InventoryGridUI  
        inv_ui.visible = not inv_ui.visible
        get_viewport().set_input_as_handled()


#
#func _on_player_died():
    #print("Game Over sequence started.")
    ## Upewnij się, że menu pauzy jest ukryte, gdy pojawi się Game Over
    #if pause_menu and pause_menu.visible:
        #pause_menu.hide()
    ## ... (reszta logiki game over) ...
    #get_tree().paused = true
    ## ... (reszta logiki game over) ...


func _on_InventoryButton_pressed():
 # Znajdź node z UI ekwipunku:
    var inv_ui = $UI/InventoryGridUI
    print("Znaleziono Inventory UI node: ", inv_ui) # Sprawdź, czy nie jest null
    if inv_ui:
        inv_ui.visible = not inv_ui.visible
        print("Ustawiono visible na: ", inv_ui.visible)
    else:
        printerr("Nie znaleziono node'a InventoryGridUI pod ścieżką $UI/InventoryGridUI!")
</file>

<file path="README.md">
# Hollow Depths
![Engine: Godot](https://img.shields.io/badge/engine-godot4-blue?logo=godot-engine)
![License: MIT](https://img.shields.io/badge/license-MIT-green)
![Status: First Playable](https://img.shields.io/badge/status-first--playable-orange)
![Platform: PC](https://img.shields.io/badge/platform-PC-lightgrey)
![Style: Pixel Art](https://img.shields.io/badge/style-pixel--art-critical)
![Genre: Platformer](https://img.shields.io/badge/genre-platformer-ff69b4)

## 🎮 About the Game  
*Hollow Depths* is a 2D pixel-art platformer with roguelike and exploration elements. You play as a miner digging deep underground in search of precious materials, planning your return to the surface using limited resources like ladders and ropes. The game combines arcade movement with resource management, focusing on satisfying core mechanics of digging, building, exploring, and upgrading.

## 🎬 Gameplay Trailer
[![Watch the trailer](https://img.youtube.com/vi/cLYYEjjUvxs/maxresdefault.jpg)](https://youtu.be/cLYYEjjUvxs)

## 🧱 Key Features
- Procedural underground level with diverse biomes.
- Mining system: dig through soil, stone, and uncover hidden caves.
- Inventory and resource management: trade materials for tools and upgrades.
- Building mechanics: place and retrieve ladders to traverse vertical shafts.
- Strategic planning: limited resources force careful exploration.
- Retro-style pixel graphics (16x16) and ambient lo-fi soundtrack.
- Fully playable and tested single-player experience.

## 💻 Built With
- **Engine**: [Godot 4](https://godotengine.org/)  
- **Language**: GDScript  
- **Graphics**: Pixel-art assets by [DK Productions](https://dkproductions.itch.io/16bit-miner-animated-character)  
- **Audio**: Lo-fi ambient soundtrack (royalty-free)

## 👥 Team

| Name             | Role                                                        |
|------------------|-------------------------------------------------------------|
| **Konrad Skowron**   | Core gameplay mechanics, digging system, inventory management |
| **Jonasz Lazar**     | Level logic, ladder & climbing system, gameplay loop integration |
| **Mateusz Staszków** | Art, animation, UI, NPC/shop system implementation           |

## 🚀 Getting Started

To run the project locally:

1. Download and install [Godot 4.x](https://godotengine.org/download).
2. Clone this repository:
   ```bash
   git clone https://github.com/jonasz-lazar-pwr/hollow-depths-game.git
   ```

## 📝 License

This project is licensed under the terms of the **MIT License**. See the [LICENSE](LICENSE) file for details.
</file>

<file path="assets/scenes/game.tscn">
[gd_scene load_steps=24 format=4 uid="uid://bjs34cbfgjo1f"]

[ext_resource type="PackedScene" uid="uid://d00swspj35t6w" path="res://assets/scenes/player.tscn" id="1_uwrxv"]
[ext_resource type="Script" uid="uid://dm3iihye8a3wy" path="res://scripts/game.gd" id="1_vtaks"]
[ext_resource type="Texture2D" uid="uid://bcm1qkp4dydjd" path="res://assets/sprites/Miner16Bit_AllFiles_v1/Miner16Bit_WorldTiles_02.png" id="1_yqjtg"]
[ext_resource type="PackedScene" uid="uid://cfjwdbp0vsk1a" path="res://assets/scenes/crt_shader.tscn" id="2_gee14"]
[ext_resource type="Texture2D" uid="uid://c637msvthmlc2" path="res://assets/sprites/other/sheet.png" id="2_lnu2h"]
[ext_resource type="Texture2D" uid="uid://4upmho5qau0g" path="res://assets/sprites/other/Tileset_Cave.png" id="3_iywne"]
[ext_resource type="Texture2D" uid="uid://7a3no0tyqneu" path="res://assets/sprites/other/tilesetcave.png" id="4_p57ef"]
[ext_resource type="Script" uid="uid://cc8x1tg73jmw1" path="res://scripts/game_over_ui.gd" id="5_dinhu"]
[ext_resource type="Shader" uid="uid://clgqqxru7jg8" path="res://shaders/grayscale_shader.gdshader" id="5_kvpfn"]
[ext_resource type="PackedScene" uid="uid://dp2tfsw1nyc3v" path="res://assets/scenes/InventoryGridUI.tscn" id="5_s2rys"]
[ext_resource type="Resource" uid="uid://tc2oqyms7jt2" path="res://assets/scenes/player_inventory.tres" id="6_fc420"]
[ext_resource type="AudioStream" uid="uid://bs1k4f7ulp015" path="res://assets/music/steam_gardens_slowed.wav" id="6_p57ef"]
[ext_resource type="PackedScene" uid="uid://c5jhyxyopykhd" path="res://assets/scenes/ladder.tscn" id="7_u5sy4"]
[ext_resource type="Script" uid="uid://cmf651j7qk52t" path="res://scripts/ui.gd" id="9_0tnpc"]
[ext_resource type="Script" uid="uid://djiyhe0r48jcv" path="res://scripts/pause_menu.gd" id="13_i358u"]

[sub_resource type="WorldBoundaryShape2D" id="WorldBoundaryShape2D_yqjtg"]
distance = -356.0

[sub_resource type="WorldBoundaryShape2D" id="WorldBoundaryShape2D_lnu2h"]
distance = -524.0

[sub_resource type="ShaderMaterial" id="ShaderMaterial_dinhu"]
shader = ExtResource("5_kvpfn")

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_lnu2h"]
texture = ExtResource("1_yqjtg")
0:0/0 = 0
0:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
0:0/0/custom_data_0 = true
0:0/0/custom_data_1 = 100
0:0/0/metadata/_better_terrain = {
0: [0],
4: [0],
&"type": 1
}
2:0/0 = 0
2:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
2:0/0/custom_data_0 = true
2:0/0/custom_data_1 = 100
2:0/0/metadata/_better_terrain = {
4: [0],
8: [0],
&"type": 1
}
3:0/0 = 0
3:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
3:0/0/custom_data_0 = true
3:0/0/custom_data_1 = 500
3:0/0/custom_data_2 = "res://assets/inventory/ammolite.tres"
3:0/0/metadata/_better_terrain = {
0: [0],
4: [0],
8: [0],
12: [0],
&"type": 2
}
4:0/0 = 0
4:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
4:0/0/custom_data_0 = true
4:0/0/custom_data_1 = 100
4:0/0/metadata/_better_terrain = {
4: [0],
&"type": 1
}
5:0/0 = 0
6:0/0 = 0
7:0/0 = 0
0:1/0 = 0
0:1/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
0:1/0/custom_data_0 = true
0:1/0/custom_data_1 = 100
0:1/0/metadata/_better_terrain = {
0: [0],
4: [0],
12: [0],
&"type": 1
}
1:1/0 = 0
1:1/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
1:1/0/custom_data_0 = true
1:1/0/custom_data_1 = 100
1:1/0/metadata/_better_terrain = {
0: [0],
4: [0],
8: [0],
12: [0],
&"type": 1
}
2:1/0 = 0
2:1/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
2:1/0/custom_data_0 = true
2:1/0/custom_data_1 = 100
2:1/0/metadata/_better_terrain = {
4: [0],
8: [0],
12: [0],
&"type": 1
}
4:1/0 = 0
4:1/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
4:1/0/custom_data_0 = true
4:1/0/custom_data_1 = 100
4:1/0/metadata/_better_terrain = {
4: [0],
12: [0],
&"type": 1
}
5:1/0 = 0
6:1/0 = 0
7:1/0 = 0
0:2/0 = 0
0:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
0:2/0/custom_data_0 = true
0:2/0/custom_data_1 = 100
0:2/0/metadata/_better_terrain = {
0: [0],
12: [0],
&"type": 1
}
1:2/0 = 0
1:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
1:2/0/custom_data_0 = true
1:2/0/custom_data_1 = 100
1:2/0/metadata/_better_terrain = {
0: [0],
8: [0],
12: [0],
&"type": 1
}
2:2/0 = 0
2:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
2:2/0/custom_data_0 = true
2:2/0/custom_data_1 = 100
2:2/0/metadata/_better_terrain = {
8: [0],
12: [0],
&"type": 1
}
3:2/0 = 0
3:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
3:2/0/custom_data_0 = true
3:2/0/custom_data_1 = 100
3:2/0/metadata/_better_terrain = {
0: [0],
&"type": 1
}
4:2/0 = 0
4:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
4:2/0/custom_data_0 = true
4:2/0/custom_data_1 = 100
4:2/0/metadata/_better_terrain = {
&"type": 1
}
5:2/0 = 0
5:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
5:2/0/custom_data_0 = true
5:2/0/custom_data_1 = 100
5:2/0/metadata/_better_terrain = {
0: [0],
8: [0],
&"type": 1
}
6:2/0 = 0
6:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
6:2/0/custom_data_0 = true
6:2/0/custom_data_1 = 100
6:2/0/metadata/_better_terrain = {
8: [0],
&"type": 1
}
7:2/0 = 0
0:3/0 = 0
1:3/0 = 0
2:3/0 = 0
3:3/0 = 0
4:3/0 = 0
4:3/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
4:3/0/custom_data_0 = true
4:3/0/custom_data_1 = 100
4:3/0/metadata/_better_terrain = {
12: [0],
&"type": 1
}
5:3/0 = 0
0:4/0 = 0
2:4/0 = 0
3:4/0 = 0
5:4/0 = 0
0:5/0 = 0
1:5/0 = 0
2:5/0 = 0
3:5/0 = 0
5:5/0 = 0
7:5/0 = 0
0:6/0 = 0
1:6/0 = 0
3:6/0 = 0
5:6/0 = 0
6:6/0 = 0
7:6/0 = 0
3:7/0 = 0
5:7/0 = 0
6:7/0 = 0
7:7/0 = 0
1:0/0 = 0
1:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
1:0/0/custom_data_0 = true
1:0/0/custom_data_1 = 100
1:0/0/metadata/_better_terrain = {
0: [0],
4: [0],
8: [0],
&"type": 1
}

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_lbhrr"]
texture = ExtResource("2_lnu2h")
0:0/0 = 0
1:0/0 = 0
2:0/0 = 0
3:0/0 = 0
4:0/0 = 0
5:0/0 = 0
6:0/0 = 0
7:0/0 = 0
8:0/0 = 0
9:0/0 = 0
10:0/0 = 0
11:0/0 = 0
12:0/0 = 0
13:0/0 = 0
14:0/0 = 0
15:0/0 = 0
16:0/0 = 0
0:1/0 = 0
1:1/0 = 0
2:1/0 = 0
3:1/0 = 0
4:1/0 = 0
5:1/0 = 0
7:1/0 = 0
8:1/0 = 0
9:1/0 = 0
10:1/0 = 0
11:1/0 = 0
12:1/0 = 0
13:1/0 = 0
14:1/0 = 0
15:1/0 = 0
16:1/0 = 0
2:2/0 = 0
3:2/0 = 0
4:2/0 = 0
7:2/0 = 0
8:2/0 = 0
9:2/0 = 0
10:2/0 = 0
11:2/0 = 0
12:2/0 = 0
13:2/0 = 0
14:2/0 = 0
15:2/0 = 0
16:2/0 = 0
3:3/0 = 0
4:3/0 = 0
5:3/0 = 0
7:3/0 = 0
8:3/0 = 0
9:3/0 = 0
10:3/0 = 0
11:3/0 = 0
12:3/0 = 0
13:3/0 = 0
14:3/0 = 0
15:3/0 = 0
16:3/0 = 0
3:4/0 = 0
4:4/0 = 0
5:4/0 = 0
7:4/0 = 0
8:4/0 = 0
9:4/0 = 0
10:4/0 = 0
11:4/0 = 0
12:4/0 = 0
13:4/0 = 0
14:4/0 = 0
15:4/0 = 0
16:4/0 = 0
3:5/0 = 0
4:5/0 = 0
7:5/0 = 0
8:5/0 = 0
9:5/0 = 0
10:5/0 = 0
11:5/0 = 0
12:5/0 = 0
13:5/0 = 0
14:5/0 = 0
15:5/0 = 0
16:5/0 = 0
3:6/0 = 0
4:6/0 = 0
7:6/0 = 0
8:6/0 = 0
9:6/0 = 0
10:6/0 = 0
11:6/0 = 0
12:6/0 = 0
13:6/0 = 0
14:6/0 = 0
15:6/0 = 0
16:6/0 = 0
2:7/0 = 0
3:7/0 = 0
4:7/0 = 0
5:7/0 = 0

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_u5sy4"]
texture = ExtResource("3_iywne")
0:0/0 = 0
1:0/0 = 0
2:0/0 = 0
3:0/0 = 0
4:0/0 = 0
5:0/0 = 0
6:0/0 = 0
7:0/0 = 0
8:0/0 = 0
0:1/0 = 0
1:1/0 = 0
2:1/0 = 0
3:1/0 = 0
4:1/0 = 0
5:1/0 = 0
6:1/0 = 0
7:1/0 = 0
8:1/0 = 0
0:2/0 = 0
1:2/0 = 0
2:2/0 = 0
3:2/0 = 0
4:2/0 = 0
5:2/0 = 0
0:3/0 = 0
1:3/0 = 0
2:3/0 = 0

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_gee14"]
texture = ExtResource("4_p57ef")
4:1/0 = 0
5:1/0 = 0
6:1/0 = 0
7:1/0 = 0
4:2/0 = 0
5:2/0 = 0
6:2/0 = 0
7:2/0 = 0
4:4/0 = 0
5:4/0 = 0
7:4/0 = 0
8:4/0 = 0
9:4/0 = 0
10:4/0 = 0
11:4/0 = 0
12:4/0 = 0
4:5/0 = 0
5:5/0 = 0
7:5/0 = 0
8:5/0 = 0
9:5/0 = 0
10:5/0 = 0
11:5/0 = 0
12:5/0 = 0
4:6/0 = 0
5:6/0 = 0
7:6/0 = 0
8:6/0 = 0
9:6/0 = 0
10:6/0 = 0
11:6/0 = 0
12:6/0 = 0
4:7/0 = 0
5:7/0 = 0
7:7/0 = 0
8:7/0 = 0
9:7/0 = 0
10:7/0 = 0
11:7/0 = 0
12:7/0 = 0
4:8/0 = 0
5:8/0 = 0
7:8/0 = 0
8:8/0 = 0
9:8/0 = 0
10:8/0 = 0
11:8/0 = 0
12:8/0 = 0
4:9/0 = 0
5:9/0 = 0
7:9/0 = 0
8:9/0 = 0
9:9/0 = 0
10:9/0 = 0
11:9/0 = 0
12:9/0 = 0
7:11/0 = 0
8:11/0 = 0
9:11/0 = 0
10:11/0 = 0
11:11/0 = 0
12:11/0 = 0
7:12/0 = 0
8:12/0 = 0
9:12/0 = 0
10:12/0 = 0
11:12/0 = 0
12:12/0 = 0

[sub_resource type="TileSet" id="TileSet_lbhrr"]
physics_layer_0/collision_layer = 1
custom_data_layer_0/name = "diggable"
custom_data_layer_0/type = 1
custom_data_layer_1/name = "durability"
custom_data_layer_1/type = 2
custom_data_layer_2/name = "resource_item_path"
custom_data_layer_2/type = 4
sources/3 = SubResource("TileSetAtlasSource_lnu2h")
sources/4 = SubResource("TileSetAtlasSource_lbhrr")
sources/5 = SubResource("TileSetAtlasSource_u5sy4")
sources/6 = SubResource("TileSetAtlasSource_gee14")
metadata/_better_terrain = {
&"decoration": ["Decoration", Color(0.411765, 0.411765, 0.411765, 1), 3, [], {
&"path": "res://addons/better-terrain/icons/Decoration.svg"
}],
&"terrains": [["Ground", Color(0.0913593, 0.446622, 0.824805, 1), 2, [], {
&"path": ""
}], ["Dirt", Color(0.22927, 0.441406, 0.2276, 1), 0, [0], {
&"coord": Vector2i(1, 0),
&"source_id": 3
}], ["Treasure", Color(0.761109, 0.824219, 0.202835, 1), 0, [0], {
&"coord": Vector2i(3, 0),
&"source_id": 3
}]],
&"version": "0.2"
}

[node name="Game" type="Node2D"]
script = ExtResource("1_vtaks")

[node name="LeftBoundry" type="StaticBody2D" parent="."]
position = Vector2(0, -9)

[node name="CollisionShape2D" type="CollisionShape2D" parent="LeftBoundry"]
position = Vector2(-137, -5)
rotation = 1.5708
shape = SubResource("WorldBoundaryShape2D_yqjtg")

[node name="RightBoundry" type="StaticBody2D" parent="."]
position = Vector2(0, -9)

[node name="CollisionShape2D" type="CollisionShape2D" parent="RightBoundry"]
position = Vector2(0, -4)
rotation = -1.5708
shape = SubResource("WorldBoundaryShape2D_lnu2h")

[node name="Music" type="AudioStreamPlayer" parent="."]
stream = ExtResource("6_p57ef")
volume_db = -30.0
autoplay = true

[node name="CRT_Shader" parent="." instance=ExtResource("2_gee14")]
z_index = 4096
offset_left = -551.0
offset_top = -325.0
offset_right = 753.0
offset_bottom = 453.0

[node name="UI" type="CanvasLayer" parent="."]
script = ExtResource("9_0tnpc")

[node name="LadderCountLabel" type="Label" parent="UI"]
offset_left = 10.0
offset_top = 10.0
offset_right = 50.0
offset_bottom = 33.0
theme_override_font_sizes/font_size = 34
text = "Drabiny: 5"

[node name="HealthLabel" type="Label" parent="UI"]
offset_left = 10.0
offset_top = 60.0
offset_right = 281.0
offset_bottom = 107.0
theme_override_font_sizes/font_size = 34
text = "HP: 100/100"

[node name="InventoryButton" type="Button" parent="UI"]
offset_right = 8.0
offset_bottom = 8.0

[node name="InventoryGridUI" parent="UI" instance=ExtResource("5_s2rys")]
custom_minimum_size = Vector2(300, 0)
offset_left = 500.0
offset_top = 10.0
offset_right = 184.0
offset_bottom = -286.0
scale = Vector2(1.7, 1.7)
inventory = ExtResource("6_fc420")

[node name="GameOverLayer" type="CanvasLayer" parent="."]
process_mode = 3
layer = 10
script = ExtResource("5_dinhu")

[node name="GrayscaleEffectRect" type="ColorRect" parent="GameOverLayer"]
material = SubResource("ShaderMaterial_dinhu")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
color = Color(1, 1, 1, 0)

[node name="GameOverLabel" type="Label" parent="GameOverLayer"]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_font_sizes/font_size = 100
text = "GAME OVER"
horizontal_alignment = 1
vertical_alignment = 1

[node name="RestartButton" type="Button" parent="GameOverLayer"]
process_mode = 3
anchors_preset = 7
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
offset_left = -86.0
offset_top = -228.0
offset_right = 134.0
offset_bottom = -163.0
grow_horizontal = 2
grow_vertical = 0
theme_override_font_sizes/font_size = 40
text = "Restart"

[node name="QuitButton" type="Button" parent="GameOverLayer"]
anchors_preset = 7
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
offset_left = -86.0
offset_top = -148.0
offset_right = 134.0
offset_bottom = -83.0
grow_horizontal = 2
grow_vertical = 0
theme_override_font_sizes/font_size = 40
text = "Quit Game"

[node name="WorldContainer" type="Node2D" parent="."]

[node name="TileMap" type="Node2D" parent="WorldContainer"]

[node name="Background" type="TileMapLayer" parent="WorldContainer/TileMap"]
light_mask = 0
z_index = -1
use_parent_material = true
tile_map_data = PackedByteArray("")
tile_set = SubResource("TileSet_lbhrr")

[node name="Ground" type="TileMapLayer" parent="WorldContainer/TileMap"]
use_parent_material = true
tile_map_data = PackedByteArray("")
tile_set = SubResource("TileSet_lbhrr")

[node name="Player" parent="WorldContainer" groups=["player", "players"] instance=ExtResource("1_uwrxv")]
position = Vector2(0, -19)
collision_layer = 1
inventory = ExtResource("6_fc420")

[node name="Camera2D" type="Camera2D" parent="WorldContainer/Player"]
position = Vector2(0, -8)
zoom = Vector2(4, 4)
position_smoothing_enabled = true

[node name="Ladders" type="Node" parent="WorldContainer"]

[node name="Ladder" parent="WorldContainer/Ladders" instance=ExtResource("7_u5sy4")]
position = Vector2(57, 40)

[node name="Ladder2" parent="WorldContainer/Ladders" instance=ExtResource("7_u5sy4")]
position = Vector2(57, 24)

[node name="Ladder3" parent="WorldContainer/Ladders" instance=ExtResource("7_u5sy4")]
position = Vector2(57, 8)

[node name="Ladder4" parent="WorldContainer/Ladders" instance=ExtResource("7_u5sy4")]
position = Vector2(25, 72)

[node name="Ladder5" parent="WorldContainer/Ladders" instance=ExtResource("7_u5sy4")]
position = Vector2(25, 56)

[node name="Ladder6" parent="WorldContainer/Ladders" instance=ExtResource("7_u5sy4")]
position = Vector2(25, 40)

[node name="PauseMenuLayer" type="CanvasLayer" parent="."]
process_mode = 2

[node name="PauseMenu" type="Control" parent="PauseMenuLayer"]
visible = false
layout_mode = 3
anchors_preset = 0
offset_right = 40.0
offset_bottom = 40.0
script = ExtResource("13_i358u")

[node name="DimBackground" type="ColorRect" parent="PauseMenuLayer/PauseMenu"]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
offset_right = 1112.0
offset_bottom = 608.0
grow_horizontal = 2
grow_vertical = 2
color = Color(0, 0, 0, 0.588235)

[node name="ButtonContainer" type="VBoxContainer" parent="PauseMenuLayer/PauseMenu"]
layout_mode = 1
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = 412.5
offset_top = 236.0
offset_right = 699.5
offset_bottom = 372.0
grow_horizontal = 2
grow_vertical = 2
theme_override_constants/separation = 10
alignment = 1

[node name="ResumeButton" type="Button" parent="PauseMenuLayer/PauseMenu/ButtonContainer"]
layout_mode = 2
theme_override_font_sizes/font_size = 40
text = "Resume"

[node name="QuitToMenuButton" type="Button" parent="PauseMenuLayer/PauseMenu/ButtonContainer"]
layout_mode = 2
theme_override_font_sizes/font_size = 40
text = "Quit to Menu"

[connection signal="pressed" from="UI/InventoryButton" to="." method="_on_InventoryButton_pressed"]
[connection signal="pressed" from="GameOverLayer/RestartButton" to="GameOverLayer" method="_on_restart_button_pressed"]
[connection signal="pressed" from="GameOverLayer/QuitButton" to="GameOverLayer" method="_on_quit_button_pressed"]
[connection signal="pressed" from="PauseMenuLayer/PauseMenu/ButtonContainer/ResumeButton" to="PauseMenuLayer/PauseMenu" method="_on_resume_button_pressed"]
[connection signal="pressed" from="PauseMenuLayer/PauseMenu/ButtonContainer/QuitToMenuButton" to="PauseMenuLayer/PauseMenu" method="_on_quit_to_menu_button_pressed"]

[editable path="UI/InventoryGridUI"]
</file>

<file path="project.godot">
; Engine configuration file.
; It's best edited using the editor UI and not directly,
; since the parameters that go here are not all obvious.
;
; Format:
;   [section] ; section goes between []
;   param=value ; assign values to parameters

config_version=5

[application]

config/name="Hollow Depths"
run/main_scene="uid://do4jih7oduo1b"
config/features=PackedStringArray("4.4", "Forward Plus")
config/icon="res://icon.svg"

[autoload]

BetterTerrain="*res://addons/better-terrain/BetterTerrain.gd"

[display]

window/stretch/mode="canvas_items"

[editor_plugins]

enabled=PackedStringArray("res://addons/better-terrain/plugin.cfg")

[global_group]

ladders=""
player=""

[input]

left={
"deadzone": 0.2,
"events": [Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":0,"physical_keycode":65,"key_label":0,"unicode":97,"location":0,"echo":false,"script":null)
, Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":0,"physical_keycode":4194319,"key_label":0,"unicode":0,"location":0,"echo":false,"script":null)
, Object(InputEventJoypadButton,"resource_local_to_scene":false,"resource_name":"","device":-1,"button_index":13,"pressure":0.0,"pressed":true,"script":null)
, Object(InputEventJoypadMotion,"resource_local_to_scene":false,"resource_name":"","device":-1,"axis":0,"axis_value":-1.0,"script":null)
]
}
right={
"deadzone": 0.2,
"events": [Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":0,"physical_keycode":68,"key_label":0,"unicode":100,"location":0,"echo":false,"script":null)
, Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":0,"physical_keycode":4194321,"key_label":0,"unicode":0,"location":0,"echo":false,"script":null)
, Object(InputEventJoypadButton,"resource_local_to_scene":false,"resource_name":"","device":-1,"button_index":14,"pressure":0.0,"pressed":true,"script":null)
, Object(InputEventJoypadMotion,"resource_local_to_scene":false,"resource_name":"","device":-1,"axis":0,"axis_value":1.0,"script":null)
]
}
up={
"deadzone": 0.2,
"events": [Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":0,"physical_keycode":87,"key_label":0,"unicode":119,"location":0,"echo":false,"script":null)
, Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":0,"physical_keycode":4194320,"key_label":0,"unicode":0,"location":0,"echo":false,"script":null)
, Object(InputEventJoypadButton,"resource_local_to_scene":false,"resource_name":"","device":-1,"button_index":11,"pressure":0.0,"pressed":true,"script":null)
, Object(InputEventJoypadMotion,"resource_local_to_scene":false,"resource_name":"","device":-1,"axis":1,"axis_value":-1.0,"script":null)
]
}
down={
"deadzone": 0.2,
"events": [Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":0,"physical_keycode":83,"key_label":0,"unicode":115,"location":0,"echo":false,"script":null)
, Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":0,"physical_keycode":4194322,"key_label":0,"unicode":0,"location":0,"echo":false,"script":null)
, Object(InputEventJoypadButton,"resource_local_to_scene":false,"resource_name":"","device":-1,"button_index":12,"pressure":0.0,"pressed":true,"script":null)
, Object(InputEventJoypadMotion,"resource_local_to_scene":false,"resource_name":"","device":-1,"axis":1,"axis_value":1.0,"script":null)
]
}
jump={
"deadzone": 0.2,
"events": [Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":0,"physical_keycode":32,"key_label":0,"unicode":32,"location":0,"echo":false,"script":null)
, Object(InputEventJoypadButton,"resource_local_to_scene":false,"resource_name":"","device":-1,"button_index":0,"pressure":0.0,"pressed":true,"script":null)
]
}
dig={
"deadzone": 0.2,
"events": [Object(InputEventMouseButton,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"button_mask":0,"position":Vector2(0, 0),"global_position":Vector2(0, 0),"factor":1.0,"button_index":1,"canceled":false,"pressed":false,"double_click":false,"script":null)
]
}
ui_inventory={
"deadzone": 0.2,
"events": [Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":0,"physical_keycode":73,"key_label":0,"unicode":105,"location":0,"echo":false,"script":null)
]
}

[rendering]

textures/canvas_textures/default_texture_filter=0
</file>

<file path="scripts/player.gd">
extends CharacterBody2D

const SPEED = 50.0
const JUMP_VELOCITY = -75.0
const CLIMB_SPEED = 30.0

const TILE_HEIGHT: float = 16.0 # Wysokość jednego kafelka w pikselach
const MIN_FALL_TILES_FOR_DAMAGE: int = 3 # Minimalna liczba kafelków spadku, aby otrzymać obrażenia
const DAMAGE_PER_EXTRA_TILE_PERCENT: float = 10.0 # Procent HP odejmowany za każdy dodatkowy kafelek ponad próg

var ladder_stack = 0
@export var inventory: Inventory


var max_hp: float = 100.0  # Maksymalne punkty życia
var current_hp: float = 100.0 # Aktualne punkty życia

var is_currently_falling: bool = false # Flaga śledząca stan spadania
var fall_start_position_y: float = 0.0 # Pozycja Y, z której rozpoczął się upadek

# Używamy systemu kopania z wersji kolegi
var digging_blocks = {} # Słownik śledzący stan kopanych bloków: {Vector2i(map_coords): current_durability}
var digging_timer = null # Timer do kontroli kopania
var digging_interval = 0.4 # Częstotliwość "uderzeń" (w sekundach)
var digging_target = null # Aktualne koordynaty kopiowanego bloku
var digging_damage = 25.0 # Ile "uderzenie" zmniejsza wytrzymałość
var digging_animation = "dig"

@export var ladder_scene: PackedScene
@onready var ground_tilemap: TileMapLayer = $"../TileMap/Ground"
@onready var collision_shape: CollisionShape2D = $CollisionShape2D
@export var ladder_item_type: InventoryItemType  # <<< to dodaj
@export var initial_ladders: int = 5

# Dźwięki – Twoje dodatki:
@onready var LadderClimbSound: AudioStreamPlayer2D = $LadderClimbSound
@onready var WalkSound: AudioStreamPlayer2D = $WalkSound
@onready var JumpSound: AudioStreamPlayer2D = $JumpSound
@onready var LadderPlaceSound: AudioStreamPlayer2D = $LadderPlaceSound
@onready var LadderRemoveSound: AudioStreamPlayer2D = $LadderRemoveSound
@onready var DigSound: AudioStreamPlayer2D = $DigSound

signal inventory_updated(current_inventory)  # Sygnał aktualizacji ekwipunku
signal health_updated(new_hp, max_hp_value)     # Sygnał aktualizacji HP
signal player_died                             # Sygnał śmierci gracza

func _ready() -> void:
    # 1) Jeżeli ktoś zapomniał podpiąć Inventory w Inspectorze,
    #    to utwórz je programowo:
    if inventory == null:
        inventory = Inventory.new()
    if ladder_scene == null:
        ladder_scene = preload("res://assets/scenes/ladder.tscn")
    if ladder_item_type == null:
        ladder_item_type = preload("res://assets/inventory/ladder.tres")
    # ground_tilemap – przykład z gotową ścieżką:
    if not is_instance_valid(ground_tilemap):
        ground_tilemap = get_parent().get_node("TileMap/Ground") as TileMapLayer
    # 2) Wypakuj drabinki do ekwipunku:
    if ladder_item_type:
        for i in range(initial_ladders):
            var it = InventoryItem.new()
            it.item_type = ladder_item_type
            inventory.put(it)
        # bezpośrednio po wsadzeniu początkowych drabinek:
        emit_signal("inventory_updated", inventory)

    
    # Podłączanie sygnałów drabin już istniejących na scenie
    for ladder in get_tree().get_nodes_in_group("ladders"):
        if not ladder.entered_ladder.is_connected(_on_ladder_entered):
            ladder.entered_ladder.connect(_on_ladder_entered)
        if not ladder.exited_ladder.is_connected(_on_ladder_exited):
            ladder.exited_ladder.connect(_on_ladder_exited)
    
    health_updated.emit(current_hp, max_hp)
    
    # Inicjalizacja timera kopania
    digging_timer = Timer.new()
    digging_timer.wait_time = digging_interval
    digging_timer.one_shot = false
    digging_timer.connect("timeout", Callable(self, "_on_digging_timer_timeout"))
    add_child(digging_timer)

func _input(event: InputEvent) -> void:
    if event.is_action_pressed("dig"):
        handle_digging()
    elif event.is_action_released("dig"):
        stop_digging()
    if event is InputEventMouseButton and event.button_index == MOUSE_BUTTON_RIGHT and event.pressed:
        handle_ladder_placement()

func _physics_process(delta: float) -> void:
    # --- Grawitacja i śledzenie spadania ---
    if not is_on_floor() and ladder_stack == 0:
        velocity += get_gravity() * delta / 6
        if not is_currently_falling:
            is_currently_falling = true
            fall_start_position_y = global_position.y
    elif is_on_floor() and is_currently_falling:
        is_currently_falling = false
        var fall_end_position_y = global_position.y
        var fall_distance_pixels = fall_end_position_y - fall_start_position_y
        if fall_distance_pixels > 0:
            var fall_distance_tiles = floor(fall_distance_pixels / TILE_HEIGHT)
            if fall_distance_tiles >= MIN_FALL_TILES_FOR_DAMAGE:
                var extra_tiles = fall_distance_tiles - (MIN_FALL_TILES_FOR_DAMAGE - 1)
                var damage_percent = extra_tiles * DAMAGE_PER_EXTRA_TILE_PERCENT
                print("Fall damage calculated: ", damage_percent, "% for falling ", fall_distance_tiles, " tiles.")
                apply_fall_damage(damage_percent)
    elif ladder_stack > 0:
        if is_currently_falling:
            is_currently_falling = false

    # --- Skok ---
    if Input.is_action_just_pressed("jump") and is_on_floor():
        velocity.y = JUMP_VELOCITY
        JumpSound.play()
        is_currently_falling = false

    # --- Ruch na drabinie ---
    if ladder_stack >= 1:
        set_collision_mask_value(1, false)
        velocity.y = 0
        
        var direction_y = Input.get_axis("up", "down")
        var direction_x = Input.get_axis("left", "right")
        
        # Dodajemy dźwięk wspinania się po drabinie:
        if abs(direction_y) > 0.1:
            if not LadderClimbSound.playing:
                LadderClimbSound.play()
        else:
            if LadderClimbSound.playing:
                LadderClimbSound.stop()
        
        var can_move_vertically = true
        var can_move_horizontally = true
        
        if direction_y != 0:
            var check_pos_world_v: Vector2
            var collider_center_y = collision_shape.global_position.y
            var half_collider_height = collision_shape.shape.height / 2
            var check_margin_v = 1.0
            if direction_y > 0:
                check_pos_world_v = Vector2(global_position.x, collider_center_y + half_collider_height + check_margin_v)
            else:
                check_pos_world_v = Vector2(global_position.x, collider_center_y - half_collider_height - check_margin_v)
            var target_map_coords_v = ground_tilemap.local_to_map(check_pos_world_v)
            if ground_tilemap.get_cell_source_id(target_map_coords_v) != -1:
                var tile_data_v = ground_tilemap.get_cell_tile_data(target_map_coords_v)
                if tile_data_v and tile_data_v.get_collision_polygons_count(0) > 0:
                    can_move_vertically = false
        if direction_x != 0:
            var collider_center_y = collision_shape.global_position.y
            var collider_center_x = collision_shape.global_position.x
            var collider_radius = collision_shape.shape.radius
            var check_margin_h = 1.0
            var check_offset_x = sign(direction_x) * (collider_radius + check_margin_h)
            var check_pos_world_h = Vector2(collider_center_x + check_offset_x, collider_center_y)
            var target_map_coords_h = ground_tilemap.local_to_map(check_pos_world_h)
            if ground_tilemap.get_cell_source_id(target_map_coords_h) != -1:
                var tile_data_h = ground_tilemap.get_cell_tile_data(target_map_coords_h)
                if tile_data_h and tile_data_h.get_collision_polygons_count(0) > 0:
                    can_move_horizontally = false
        
        if can_move_vertically and direction_y != 0:
            velocity.y = direction_y * CLIMB_SPEED
        if can_move_horizontally and direction_x != 0:
            velocity.x = direction_x * SPEED
        elif not can_move_horizontally:
            velocity.x = move_toward(velocity.x, 0, SPEED)
        else:
            velocity.x = move_toward(velocity.x, 0, SPEED)
        
        if direction_y != 0 or (can_move_horizontally and direction_x != 0):
            $AnimatedSprite2D.animation = "climb"
            if not $AnimatedSprite2D.is_playing():
                $AnimatedSprite2D.play()
            $AnimatedSprite2D.speed_scale = 1
        else:
            $AnimatedSprite2D.animation = "climb"
            if $AnimatedSprite2D.is_playing():
                $AnimatedSprite2D.stop()
            $AnimatedSprite2D.frame = 0
        if direction_x != 0:
            $AnimatedSprite2D.flip_h = direction_x < 0

    # --- Ruch na ziemi/w powietrzu (poza drabiną) ---
    else:
        set_collision_mask_value(1, true)
        
        var direction_x = Input.get_axis("left", "right")
        if direction_x:
            velocity.x = direction_x * SPEED
            if is_on_floor() and not WalkSound.playing:
                WalkSound.play()
        else:
            velocity.x = move_toward(velocity.x, 0, SPEED)
            if WalkSound.playing:
                WalkSound.stop()
        
        # Jeśli trwa kopanie, ustaw animację kopania i zakończ tutaj dalsze zmiany animacji
        if Input.is_action_pressed("dig") and digging_target != null:
            $AnimatedSprite2D.animation = digging_animation
            if not $AnimatedSprite2D.is_playing():
                $AnimatedSprite2D.play()
            move_and_slide()
            return

        if is_on_floor():
            if direction_x != 0:
                $AnimatedSprite2D.animation = "walk"
                $AnimatedSprite2D.flip_h = direction_x < 0
                if not $AnimatedSprite2D.is_playing() or $AnimatedSprite2D.animation != "walk":
                    $AnimatedSprite2D.play("walk")
            else:
                $AnimatedSprite2D.animation = "idle"
                if not $AnimatedSprite2D.is_playing() or $AnimatedSprite2D.animation != "idle":
                    $AnimatedSprite2D.play("idle")
        else:
            $AnimatedSprite2D.animation = "idle"
            if not $AnimatedSprite2D.is_playing() or $AnimatedSprite2D.animation != "idle":
                $AnimatedSprite2D.play("idle")
    
    move_and_slide()
    
    if not is_on_floor() and not is_currently_falling and ladder_stack == 0:
        is_currently_falling = true
        fall_start_position_y = global_position.y

func _on_digging_timer_timeout() -> void:
    if digging_target == null:
        digging_timer.stop()
        return
    dig_block_progress(digging_target)

func handle_digging() -> void:
    if ground_tilemap == null:
        return

    # 1) Mysz → lokal TileMap → komórka
    var mouse_local = ground_tilemap.to_local(get_global_mouse_position())
    var cell = ground_tilemap.local_to_map(mouse_local)

    # 2) Sprawdź odległość od gracza (1 kafelek max)
    var player_cell = ground_tilemap.local_to_map(ground_tilemap.to_local(global_position))
    if (abs(cell.x - player_cell.x) + abs(cell.y - player_cell.y)) > 1:
        stop_digging()
        return

    # 3) Zebranie drabiny (jeśli jest Area2D w grupie "ladders")
    for ladder in get_tree().get_nodes_in_group("ladders"):
        var ladder_cell = ground_tilemap.local_to_map(ground_tilemap.to_local(ladder.global_position))
        if ladder_cell == cell:
            # wrzuć do ekwipunku
            var itm = InventoryItem.new()
            itm.item_type = ladder_item_type
            inventory.put(itm)
            ladder.queue_free()
            LadderRemoveSound.play()
            emit_signal("inventory_updated", inventory)
            stop_digging()
            return

    # 4) Kopanie terenu
    var tile_id = ground_tilemap.get_cell_source_id(cell) # 'cell' zamiast 'target_map_coords' z twojego kodu
    if tile_id == -1:
        stop_digging()
        return

    var tile_data = ground_tilemap.get_cell_tile_data(cell)
    if tile_data and tile_data.get_custom_data("diggable"):
        # >>> DODAJ TE LINIE <<<
        var mouse_pos = get_global_mouse_position() # Potrzebujemy pozycji myszy
        $AnimatedSprite2D.flip_h = mouse_pos.x < global_position.x # Odwróć sprite jeśli trzeba
        if mouse_pos.y > global_position.y + 4: # Sprawdź czy mysz jest znacząco poniżej gracza (dodaj mały offset np. 4 piksele)
            digging_animation = "dig_under"
            print("Setting animation to dig_under") # Debug
        else:
            digging_animation = "dig"
            print("Setting animation to dig") # Debug


        # uruchom timer
        start_digging(cell) # 'cell' zamiast 'target_map_coords'
    else:
        stop_digging()



func start_digging(map_coords: Vector2i) -> void:
    if digging_target != null and digging_target != map_coords:
        stop_digging()
    
    digging_target = map_coords
    
    if not digging_blocks.has(map_coords):
        var tile_data = ground_tilemap.get_cell_tile_data(map_coords)
        var base_durability = 100.0
        if tile_data and tile_data.has_custom_data("durability"):
            base_durability = tile_data.get_custom_data("durability")
        digging_blocks[map_coords] = base_durability
    
    # Wykonaj pierwsze uderzenie natychmiast
    dig_block_progress(map_coords)
    digging_timer.start()

func stop_digging() -> void:
    digging_target = null
    digging_timer.stop()

func dig_block_progress(map_coords: Vector2i) -> void:
    # Sprawdź, czy nadal kopiemy ten blok
    if not digging_blocks.has(map_coords):
        stop_digging()
        return

    # Odtwórz dźwięk kopania, jeśli nie jest już odtwarzany
    if not DigSound.playing:
        DigSound.play()

    # Zmniejsz wytrzymałość bloku
    digging_blocks[map_coords] -= digging_damage
    print("Digging block at ", map_coords, " - Durability: ", digging_blocks[map_coords])

    # Sprawdź, czy wytrzymałość spadła do zera lub poniżej
    if digging_blocks[map_coords] <= 0:
        print("Block destroyed at", map_coords) # Debug

        # --- POCZĄTEK LOGIKI DODAWANIA PRZEDMIOTU ---
        # Pobierz dane zniszczonego kafelka
        var tile_data = ground_tilemap.get_cell_tile_data(map_coords)

        # Sprawdź, czy kafelek ma przypisaną ścieżkę do zasobu
        if tile_data and tile_data.has_custom_data("resource_item_path"):
            # Pobierz ścieżkę jako string
            var item_path = tile_data.get_custom_data("resource_item_path") as String

            # Sprawdź, czy ścieżka nie jest pusta
            if not item_path.is_empty():
                # Załaduj zasób InventoryItemType ze ścieżki
                var item_type = load(item_path) as InventoryItemType

                # Sprawdź, czy zasób został poprawnie załadowany
                if item_type:
                    print("Granting item based on tile data:", item_type.name) # Debug

                    # Stwórz nowy obiekt InventoryItem
                    var new_item = InventoryItem.new()
                    new_item.item_type = item_type # Przypisz załadowany typ

                    # Dodaj nowy przedmiot do ekwipunku gracza
                    if inventory.put(new_item):
                        print("Item successfully added to inventory:", item_type.name) # Debug
                         # Sygnał 'inventory_updated' jest wysyłany automatycznie przez inventory.put()
                         # Możesz tu dodać np. dźwięk podniesienia przedmiotu, jeśli chcesz
                         # pickup_sound.play()
                    else:
                         # Jeśli ekwipunek jest pełny, przedmiot nie zostanie dodany
                        printerr("Could not add item to inventory (maybe full?) for type:", item_type.name)
                         # Opcjonalnie: Można by tu zaimplementować upuszczenie przedmiotu na ziemię
                else:
                    # Błąd, jeśli nie udało się załadować zasobu ze ścieżki
                    printerr("Failed to load InventoryItemType from path specified in TileData:", item_path)
            # else: # Komentarz: nie ma potrzeby logować, jeśli kafelek po prostu nic nie daje
            #	print("Tile has empty resource_item_path.")
        # else: # Komentarz: nie ma potrzeby logować, jeśli kafelek nie ma tej warstwy
        #	print("Tile has no resource_item_path custom data.")

        # --- KONIEC LOGIKI DODAWANIA PRZEDMIOTU ---
        
        digging_blocks.erase(map_coords)
        ground_tilemap.erase_cell(map_coords)
        BetterTerrain.update_terrain_cell(ground_tilemap, map_coords, true)        
        stop_digging()

func handle_ladder_placement() -> void:
    if ground_tilemap == null or ladder_scene == null:
        return

    # 1) Ile drabinek w Inventory?
    var have = inventory.get_amount_of_item_type(ladder_item_type)
    if have <= 0:
        print("Nie masz drabinek")
        return

    # 2) Mysz → lokal → komórka
    var cell = ground_tilemap.local_to_map(ground_tilemap.to_local(get_global_mouse_position()))
    var player_cell = ground_tilemap.local_to_map(ground_tilemap.to_local(global_position))
    if (abs(cell.x - player_cell.x) + abs(cell.y - player_cell.y)) > 1:
        return  

    # 3) Czy już jest drabina?
    for ladder in get_tree().get_nodes_in_group("ladders"):
        var ladder_cell = ground_tilemap.local_to_map(ground_tilemap.to_local(ladder.global_position))
        if ladder_cell == cell:
            return

    # 4) Czy pod spodem jest ziemia?
    if ground_tilemap.get_cell_source_id(cell) != -1:
        return
    # 5a) Najpierw Instantiate
    var inst = ladder_scene.instantiate()
    if not inst: # Sprawdzenie czy instancja się udała
        printerr("Failed to instantiate ladder scene!")
        return
    # 5b) Oblicz pozycję bazową (lewy górny róg)
    var center_pos: Vector2 = ground_tilemap.map_to_local(cell)
    var cell_size_i: Vector2i = ground_tilemap.tile_set.tile_size
    var cell_size_f: Vector2 = Vector2(cell_size_i) 
    #var offset_to_top_left: Vector2 = cell_size_f / 2.0
    var base_position: Vector2 = center_pos

    # 5c) Ustaw ostateczną pozycję z przesunięciem
    inst.position = base_position + Vector2(1.1, 0.0) 
    
    # 5d) Dodaj do sceny i grupy, podłącz sygnały
    var parent_node = get_parent() # Bezpieczniej jest pobrać rodzica
    if is_instance_valid(parent_node):
        parent_node.add_child(inst)
        print("Added ladder instance:", inst.name, "at position:", inst.position, "to parent:", parent_node.name) # Debug
    else:
        printerr("Player has no valid parent to add ladder to!")
        inst.queue_free() # Zwolnij pamięć, jeśli nie można dodać
        return
    inst.add_to_group("ladders")
    if not inst.entered_ladder.is_connected(_on_ladder_entered):
        inst.entered_ladder.connect(_on_ladder_entered)
    if not inst.exited_ladder.is_connected(_on_ladder_exited):
        inst.exited_ladder.connect(_on_ladder_exited)
    # 6) Odejmij 1 drabinę z Inventory
    var list = inventory.get_of_type(ladder_item_type)
    if list.size() > 0:
        inventory.take(list[0])
        emit_signal("inventory_updated", inventory)
    LadderPlaceSound.play()





func apply_fall_damage(damage_percent: float) -> void:
    if current_hp <= 0:
        return
    var damage_amount = (damage_percent / 100.0) * max_hp
    current_hp -= damage_amount
    current_hp = max(current_hp, 0)
    print("Took ", damage_amount, " fall damage. HP left: ", current_hp)
    health_updated.emit(current_hp, max_hp)
    if current_hp <= 0:
        handle_death()

func handle_death() -> void:
    print("Player has died!")
    player_died.emit()
    $AnimatedSprite2D.play("death")
    set_physics_process(false)
    set_process_input(false)

func _on_ladder_entered(body):
    if body == self:
        ladder_stack += 1

func _on_ladder_exited(body):
    if body == self:
        ladder_stack -= 1
        if ladder_stack < 0:
            ladder_stack = 0
        set_collision_mask_value(1, true)
        if LadderClimbSound.playing:
            LadderClimbSound.stop()
</file>

</files>
