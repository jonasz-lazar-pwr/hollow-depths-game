This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.editorconfig
.gitattributes
.gitignore
addons/better-terrain/BetterTerrain.cs
addons/better-terrain/BetterTerrain.gd
addons/better-terrain/BetterTerrain.gd.uid
addons/better-terrain/BetterTerrainData.gd
addons/better-terrain/BetterTerrainData.gd.uid
addons/better-terrain/editor/Dock.gd
addons/better-terrain/editor/Dock.gd.uid
addons/better-terrain/editor/Dock.tscn
addons/better-terrain/editor/TerrainEntry.gd
addons/better-terrain/editor/TerrainEntry.gd.uid
addons/better-terrain/editor/TerrainEntry.tscn
addons/better-terrain/editor/TerrainProperties.gd
addons/better-terrain/editor/TerrainProperties.gd.uid
addons/better-terrain/editor/TerrainProperties.tscn
addons/better-terrain/editor/TerrainUndo.gd
addons/better-terrain/editor/TerrainUndo.gd.uid
addons/better-terrain/editor/TileView.gd
addons/better-terrain/editor/TileView.gd.uid
addons/better-terrain/icon.svg
addons/better-terrain/icon.svg.import
addons/better-terrain/icons/Decoration.svg
addons/better-terrain/icons/Decoration.svg.import
addons/better-terrain/icons/EditSymmetry.svg
addons/better-terrain/icons/EditSymmetry.svg.import
addons/better-terrain/icons/EditTerrain.svg
addons/better-terrain/icons/EditTerrain.svg.import
addons/better-terrain/icons/EditType.svg
addons/better-terrain/icons/EditType.svg.import
addons/better-terrain/icons/MatchTiles.svg
addons/better-terrain/icons/MatchTiles.svg.import
addons/better-terrain/icons/MatchVertices.svg
addons/better-terrain/icons/MatchVertices.svg.import
addons/better-terrain/icons/NonModifying.svg
addons/better-terrain/icons/NonModifying.svg.import
addons/better-terrain/icons/paint-symmetry/SymmetryAll.svg
addons/better-terrain/icons/paint-symmetry/SymmetryAll.svg.import
addons/better-terrain/icons/paint-symmetry/SymmetryFlip.svg
addons/better-terrain/icons/paint-symmetry/SymmetryFlip.svg.import
addons/better-terrain/icons/paint-symmetry/SymmetryMirror.svg
addons/better-terrain/icons/paint-symmetry/SymmetryMirror.svg.import
addons/better-terrain/icons/paint-symmetry/SymmetryReflect.svg
addons/better-terrain/icons/paint-symmetry/SymmetryReflect.svg.import
addons/better-terrain/icons/paint-symmetry/SymmetryRotate180.svg
addons/better-terrain/icons/paint-symmetry/SymmetryRotate180.svg.import
addons/better-terrain/icons/paint-symmetry/SymmetryRotateAll.svg
addons/better-terrain/icons/paint-symmetry/SymmetryRotateAll.svg.import
addons/better-terrain/icons/paint-symmetry/SymmetryRotateClockwise.svg
addons/better-terrain/icons/paint-symmetry/SymmetryRotateClockwise.svg.import
addons/better-terrain/icons/paint-symmetry/SymmetryRotateCounterClockwise.svg
addons/better-terrain/icons/paint-symmetry/SymmetryRotateCounterClockwise.svg.import
addons/better-terrain/icons/Replace.svg
addons/better-terrain/icons/Replace.svg.import
addons/better-terrain/icons/ShuffleRandom.svg
addons/better-terrain/icons/ShuffleRandom.svg.import
addons/better-terrain/icons/SymmetryAll.svg
addons/better-terrain/icons/SymmetryAll.svg.import
addons/better-terrain/icons/SymmetryFlip.svg
addons/better-terrain/icons/SymmetryFlip.svg.import
addons/better-terrain/icons/SymmetryMirror.svg
addons/better-terrain/icons/SymmetryMirror.svg.import
addons/better-terrain/icons/SymmetryReflect.svg
addons/better-terrain/icons/SymmetryReflect.svg.import
addons/better-terrain/icons/SymmetryRotate180.svg
addons/better-terrain/icons/SymmetryRotate180.svg.import
addons/better-terrain/icons/SymmetryRotateAll.svg
addons/better-terrain/icons/SymmetryRotateAll.svg.import
addons/better-terrain/icons/SymmetryRotateClockwise.svg
addons/better-terrain/icons/SymmetryRotateClockwise.svg.import
addons/better-terrain/icons/SymmetryRotateCounterClockwise.svg
addons/better-terrain/icons/SymmetryRotateCounterClockwise.svg.import
addons/better-terrain/icons/Warning.svg
addons/better-terrain/icons/Warning.svg.import
addons/better-terrain/plugin.cfg
addons/better-terrain/TerrainPlugin.gd
addons/better-terrain/TerrainPlugin.gd.uid
addons/better-terrain/Watcher.gd
addons/better-terrain/Watcher.gd.uid
addons/Inventory/Inventory.gd
addons/Inventory/Inventory.gd.uid
addons/Inventory/InventoryItem.gd
addons/Inventory/InventoryItem.gd.uid
addons/Inventory/InventoryItemType.gd
addons/Inventory/InventoryItemType.gd.uid
addons/Inventory/InventorySlot.gd
addons/Inventory/InventorySlot.gd.uid
addons/Inventory/UI/InventoryGridUI/inventory.tres
addons/Inventory/UI/InventoryGridUI/InventoryGridItemUI.gd
addons/Inventory/UI/InventoryGridUI/InventoryGridItemUI.gd.uid
addons/Inventory/UI/InventoryGridUI/InventoryGridUI.tscn
addons/Inventory/UI/InventoryGridUI/InventoryPopupTooltip.gd
addons/Inventory/UI/InventoryGridUI/InventoryPopupTooltip.gd.uid
addons/Inventory/UI/List/InventoryListItemUI.gd
addons/Inventory/UI/List/InventoryListItemUI.gd.uid
addons/Inventory/UI/List/InventoryListUI.gd
addons/Inventory/UI/List/InventoryListUI.gd.uid
addons/Inventory/UI/PingPongScroller.gd
addons/Inventory/UI/PingPongScroller.gd.uid
addons/Inventory/UI/SimpleInventoryItemUI.gd
addons/Inventory/UI/SimpleInventoryItemUI.gd.uid
addons/Inventory/UI/SimpleInventoryUI.gd
addons/Inventory/UI/SimpleInventoryUI.gd.uid
assets/cutscenes/Jun_09__2315_24s_202506092324_jw0ms.ogv.uid
assets/fonts/Noto_Color_Emoji/OFL.txt
assets/inventory/ammolite.tres
assets/inventory/crystal.tres
assets/inventory/jasper.tres
assets/inventory/ladder.tres
assets/inventory/malachite.tres
assets/inventory/stone1.tres
assets/inventory/stone2.tres
assets/music/steam_gardens_slowed.wav.import
assets/music/time_for_adventure.mp3.import
assets/scenes/BlockHealthBarUI.tscn
assets/scenes/crt_shader.tscn
assets/scenes/end_cutscene.gd
assets/scenes/end_cutscene.gd.uid
assets/scenes/end_cutscene.tscn
assets/scenes/game.tscn
assets/scenes/InventoryGridItemUI.tscn
assets/scenes/InventoryGridUI.tscn
assets/scenes/InventoryListItemUI.tscn
assets/scenes/InventoryListUI.tscn
assets/scenes/ladder.tscn
assets/scenes/player_inventory.tres
assets/scenes/player_inventory.tscn
assets/scenes/player.tscn
assets/scenes/ShopOfferItemUI.tscn
assets/scenes/ShopUI.tscn
assets/scenes/title_screen.tscn
assets/shop_offers/buy_health_potion.tres
assets/shop_offers/buy_ladder.tres
assets/shop_offers/upgrade_pickaxe_damage_1.tres
assets/shop_offers/upgrade_pickaxe_damage_2.tres
assets/shop_offers/upgrade_pickaxe_damage_3.tres
assets/sounds/coin.wav.import
assets/sounds/dig1.mp3.import
assets/sounds/dig2.mp3.import
assets/sounds/explosion.wav.import
assets/sounds/hurt.wav.import
assets/sounds/jump.wav.import
assets/sounds/ladder-climbing.mp3.import
assets/sounds/ladder-create.ogg.import
assets/sounds/ladder-destroy.ogg.import
assets/sounds/power_up.wav.import
assets/sounds/tap.wav.import
assets/sounds/walk1.wav.import
assets/sounds/walk2.ogg.import
assets/sounds/walk3.ogg.import
assets/sounds/walk4.ogg.import
assets/sprites/icons/pickaxe_icon.tres
assets/sprites/icons/pickaxe1.tres
assets/sprites/icons/pickaxe2.tres
assets/sprites/icons/pickaxe3.tres
assets/sprites/other/scenes/crt_shader.tscn
assets/sprites/other/scenes/game.tscn
assets/sprites/other/scenes/game.tscn20151021202.tmp
assets/sprites/other/scenes/ladder.tscn
assets/sprites/other/scenes/player.tscn
assets/sprites/other/scenes/player.tscn20153892974.tmp
export/index.audio.position.worklet.js
export/index.audio.worklet.js
export/index.html
export/index.js
icon.svg
icon.svg.import
LICENSE
project.godot
README.md
scripts/game_over_ui.gd
scripts/game_over_ui.gd.uid
scripts/game.gd
scripts/game.gd.uid
scripts/ladder.gd
scripts/ladder.gd.uid
scripts/pause_menu.gd
scripts/pause_menu.gd.uid
scripts/player.gd
scripts/player.gd.uid
scripts/save_game_data.gd
scripts/save_game_data.gd.uid
scripts/ShopOffer.gd
scripts/ShopOffer.gd.uid
scripts/ShopOfferItemUI.gd
scripts/ShopOfferItemUI.gd.uid
scripts/ShopUI.gd
scripts/ShopUI.gd.uid
scripts/title_screen.gd
scripts/title_screen.gd.uid
scripts/ui.gd
scripts/ui.gd.uid
shaders/crt.gdshader
shaders/crt.gdshader.uid
shaders/grayscale_shader.gdshader
shaders/grayscale_shader.gdshader.uid
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="assets/cutscenes/Jun_09__2315_24s_202506092324_jw0ms.ogv.uid">
uid://bd6vqd4gqanjv
</file>

<file path="assets/scenes/end_cutscene.gd">
extends VideoStreamPlayer

const NEXT_SCENE_PATH = "res://assets/scenes/end_cutscene.tscn"
const TITLE_SCREEN_PATH = "res://assets/scenes/title_screen.tscn"

# Called when the node enters the scene tree for the first time.
func _ready() -> void:
    finished.connect(_on_video_finished)


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta: float) -> void:
    pass
    
    
func _on_video_finished():
    # Gdy wideo się skończy, przechodzimy do następnej sceny.
    print("Final cutscene finished. Changing to title screen.")
    var error = get_tree().change_scene_to_file(TITLE_SCREEN_PATH)
    if error != OK:
        printerr("Failed to change scene to: ", TITLE_SCREEN_PATH)
</file>

<file path="assets/scenes/end_cutscene.gd.uid">
uid://lj0d4ms5me5m
</file>

<file path="assets/scenes/end_cutscene.tscn">
[gd_scene load_steps=3 format=3 uid="uid://ctoiv4a5675t2"]

[ext_resource type="VideoStream" uid="uid://bd6vqd4gqanjv" path="res://assets/cutscenes/Jun_09__2315_24s_202506092324_jw0ms.ogv" id="1_b4sdp"]
[ext_resource type="Script" uid="uid://lj0d4ms5me5m" path="res://assets/scenes/end_cutscene.gd" id="2_1gtqf"]

[node name="VideoStreamPlayer" type="VideoStreamPlayer"]
offset_left = -3.0
offset_top = -35.0
offset_right = 1277.0
offset_bottom = 685.0
stream = ExtResource("1_b4sdp")
autoplay = true
expand = true
script = ExtResource("2_1gtqf")
</file>

<file path=".editorconfig">
root = true

[*]
charset = utf-8
</file>

<file path=".gitattributes">
# Normalize EOL for all files that Git considers text files.
* text=auto eol=lf
</file>

<file path="addons/better-terrain/BetterTerrain.cs">
using Godot;
using Godot.Collections;

#nullable disable

/*

This is a lightweight wrapper for Better Terrain in C#.

It is not a C# implementation, it merely provides a type safe interface to access
the BetterTerrain autoload from C#. If you are not using Godot in C#, you can ignore
this file.

The interface is created for a specific tilemap node, which it uses to locate the
autoload, and to fill in as a parameter to simplify all the subsequent calls.
Very simple example:

```
    BetterTerrain betterTerrain;

    public override void _Ready()
    {
        TileMapLayer tileMapLayer = GetNode<TileMapLayer>("TileMapLayer");
        betterTerrain = new BetterTerrain(tm);

        var coordinates = new Vector2I(0, 0);
        betterTerrain.SetCell(coordinates, 1);
        betterTerrain.UpdateTerrainCell(coordinates);
    }
```

The functions available are the same as BetterTerrain's, though the TileMapLayer or
TileSet parameters are automatically filled in. The help is not duplicated here,
refer to the GDScript version for specifics.

*/

public class BetterTerrain
{
    public enum TerrainType
    {
        MatchTiles = 0,
        MatchVertices = 1,
        Category = 2,
        Decoration = 3
    }

    public enum SymmetryType
    {
        None = 0,
        Mirror = 1, // Horizontally mirror
        Flip = 2, // Vertically flip
        Reflect = 3, // All four reflections
        RotateClockwise = 4,
        RotateCounterClockwise = 5,
        Rotate180 = 6,
        RotateAll = 7, // All four rotated forms
        All = 8 // All rotated and reflected forms
    }

    private static readonly NodePath nodePath = new("/root/BetterTerrain");
    private readonly Node betterTerrain;
    private readonly TileMapLayer tileMapLayer;

    public BetterTerrain(TileMapLayer tileMapLayer)
    {
        this.tileMapLayer = tileMapLayer;
        betterTerrain = tileMapLayer.GetNode(nodePath);
    }

    public Array<Godot.Collections.Dictionary<string, Variant>> GetTerrainCategories()
    {
        return (Array<Godot.Collections.Dictionary<string, Variant>>)betterTerrain.Call(MethodName.GetTerrainCategories, tileMapLayer.TileSet);
    }

    public bool AddTerrain(string name, Color color, TerrainType type, Array<int> categories = null, Godot.Collections.Dictionary<Variant, Variant> icon = null)
    {
        categories ??= new Array<int>();
        icon ??= new Godot.Collections.Dictionary<Variant, Variant>();
        return (bool)betterTerrain.Call(MethodName.AddTerrain, tileMapLayer.TileSet, name, color, (int)type, categories, icon);
    }

    public bool RemoveTerrain(int index)
    {
        return (bool)betterTerrain.Call(MethodName.RemoveTerrain, tileMapLayer.TileSet, index);
    }

    public int TerrainCount()
    {
        return (int)betterTerrain.Call(MethodName.TerrainCount, tileMapLayer.TileSet);
    }

    public Godot.Collections.Dictionary<string, Variant> GetTerrain(int index)
    {
        return (Godot.Collections.Dictionary<string, Variant>)betterTerrain.Call(MethodName.GetTerrain, tileMapLayer.TileSet, index);
    }

    public bool SetTerrain(int index, string name, Color color, TerrainType type, Array<int> categories = null, Godot.Collections.Dictionary<Variant, Variant> icon = null)
    {
        categories ??= new Array<int>();
        icon ??= new Godot.Collections.Dictionary<Variant, Variant>();
        return (bool)betterTerrain.Call(MethodName.SetTerrain, tileMapLayer.TileSet, index, name, color, (int)type, categories, icon);
    }

    public bool SwapTerrains(int index1, int index2)
    {
        return (bool)betterTerrain.Call(MethodName.SwapTerrains, tileMapLayer.TileSet, index1, index2);
    }

    public bool SetTileTerrainType(TileData tileData, int type)
    {
        return (bool)betterTerrain.Call(MethodName.SetTileTerrainType, tileMapLayer.TileSet, tileData, type);
    }

    public int GetTileTerrainType(TileData tileData)
    {
        return (int)betterTerrain.Call(MethodName.GetTileTerrainType, tileData);
    }

    public bool SetTileSymmetryType(TileData tileData, SymmetryType type)
    {
        return (bool)betterTerrain.Call(MethodName.SetTileSymmetryType, tileMapLayer.TileSet, tileData, (int)type);
    }

    public SymmetryType GetTileSymmetryType(TileData tileData)
    {
        return (SymmetryType)(int)betterTerrain.Call(MethodName.GetTileSymmetryType, tileData);
    }

    public Array<TileData> GetTilesInTerrain(int type)
    {
        return (Array<TileData>)betterTerrain.Call(MethodName.GetTilesInTerrain, tileMapLayer.TileSet, type);
    }

    public Array<Godot.Collections.Dictionary<string, Variant>> GetTileSourcesInTerrain(int type)
    {
        return (Array<Godot.Collections.Dictionary<string, Variant>>)betterTerrain.Call(MethodName.GetTileSourcesInTerrain, tileMapLayer.TileSet, type);
    }

    public bool AddTilePeeringType(TileData tileData, TileSet.CellNeighbor peering, int type)
    {
        return (bool)betterTerrain.Call(MethodName.AddTilePeeringType, tileMapLayer.TileSet, tileData, (int)peering, type);
    }

    public bool RemoveTilePeeringType(TileData tileData, TileSet.CellNeighbor peering, int type)
    {
        return (bool)betterTerrain.Call(MethodName.RemoveTilePeeringType, tileMapLayer.TileSet, tileData, (int)peering, type);
    }

    public Array<TileSet.CellNeighbor> TilePeeringKeys(TileData tileData)
    {
        return (Array<TileSet.CellNeighbor>)betterTerrain.Call(MethodName.TilePeeringKeys, tileData);
    }

    public Array<int> TilePeeringTypes(TileData tileData, TileSet.CellNeighbor peering)
    {
        return (Array<int>)betterTerrain.Call(MethodName.TilePeeringTypes, tileData, (int)peering);
    }

    public Array<TileSet.CellNeighbor> TilePeeringForType(TileData tileData, int type)
    {
        return (Array<TileSet.CellNeighbor>)betterTerrain.Call(MethodName.TilePeeringForType, tileData, type);
    }

    public bool SetCell(Vector2I coordinate, int type)
    {
        return (bool)betterTerrain.Call(MethodName.SetCell, tileMapLayer, coordinate, type);
    }

    public bool SetCells(Array<Vector2I> coordinates, int type)
    {
        return (bool)betterTerrain.Call(MethodName.SetCells, tileMapLayer, coordinates, type);
    }

    public bool ReplaceCell(Vector2I coordinate, int type)
    {
        return (bool)betterTerrain.Call(MethodName.ReplaceCell, tileMapLayer, coordinate, type);
    }

    public bool ReplaceCells(Array<Vector2I> coordinates, int type)
    {
        return (bool)betterTerrain.Call(MethodName.ReplaceCells, tileMapLayer, coordinates, type);
    }

    public int GetCell(Vector2I coordinate)
    {
        return (int)betterTerrain.Call(MethodName.GetCell, tileMapLayer, coordinate);
    }

    public void UpdateTerrainCells(Array<Vector2I> cells, bool updateSurroundingCells = true)
    {
        betterTerrain.Call(MethodName.UpdateTerrainCells, tileMapLayer, cells, updateSurroundingCells);
    }

    public void UpdateTerrainCell(Vector2I cell, bool updateSurroundingCells = true)
    {
        betterTerrain.Call(MethodName.UpdateTerrainCell, tileMapLayer, cell, updateSurroundingCells);
    }

    public void UpdateTerrainArea(Rect2I area, bool updateSurroundingCells = true)
    {
        betterTerrain.Call(MethodName.UpdateTerrainArea, tileMapLayer, area, updateSurroundingCells);
    }

    public Godot.Collections.Dictionary<Variant, Variant> CreateTerrainChangeset(Godot.Collections.Dictionary<Vector2I, int> paint)
    {
        return (Godot.Collections.Dictionary<Variant, Variant>)betterTerrain.Call(MethodName.CreateTerrainChangeset, tileMapLayer, paint);
    }

    public bool IsTerrainChangesetReady(Godot.Collections.Dictionary<Variant, Variant> changeset)
    {
        return (bool)betterTerrain.Call(MethodName.IsTerrainChangesetReady, changeset);
    }

    public void WaitForTerrainChangeset(Godot.Collections.Dictionary<Variant, Variant> changeset)
    {
        betterTerrain.Call(MethodName.WaitForTerrainChangeset, changeset);
    }

    public void ApplyTerrainChangeset(Godot.Collections.Dictionary<Variant, Variant> changeset)
    {
        betterTerrain.Call(MethodName.ApplyTerrainChangeset, changeset);
    }

    private static class MethodName
    {
        public static readonly StringName GetTerrainCategories = "get_terrain_categories";
        public static readonly StringName AddTerrain = "add_terrain";
        public static readonly StringName RemoveTerrain = "remove_terrain";
        public static readonly StringName TerrainCount = "terrain_count";
        public static readonly StringName GetTerrain = "get_terrain";
        public static readonly StringName SetTerrain = "set_terrain";
        public static readonly StringName SwapTerrains = "swap_terrains";
        public static readonly StringName SetTileTerrainType = "set_tile_terrain_type";
        public static readonly StringName GetTileTerrainType = "get_tile_terrain_type";
        public static readonly StringName SetTileSymmetryType = "set_tile_symmetry_type";
        public static readonly StringName GetTileSymmetryType = "get_tile_symmetry_type";
        public static readonly StringName GetTilesInTerrain = "get_tiles_in_terrain";
        public static readonly StringName GetTileSourcesInTerrain = "get_tile_sources_in_terrain";
        public static readonly StringName AddTilePeeringType = "add_tile_peering_type";
        public static readonly StringName RemoveTilePeeringType = "remove_tile_peering_type";
        public static readonly StringName TilePeeringKeys = "tile_peering_keys";
        public static readonly StringName TilePeeringTypes = "tile_peering_types";
        public static readonly StringName TilePeeringForType = "tile_peering_for_type";
        public static readonly StringName SetCell = "set_cell";
        public static readonly StringName SetCells = "set_cells";
        public static readonly StringName ReplaceCell = "replace_cell";
        public static readonly StringName ReplaceCells = "replace_cells";
        public static readonly StringName GetCell = "get_cell";
        public static readonly StringName UpdateTerrainCells = "update_terrain_cells";
        public static readonly StringName UpdateTerrainCell = "update_terrain_cell";
        public static readonly StringName UpdateTerrainArea = "update_terrain_area";
        public static readonly StringName CreateTerrainChangeset = "create_terrain_changeset";
        public static readonly StringName IsTerrainChangesetReady = "is_terrain_changeset_ready";
        public static readonly StringName WaitForTerrainChangeset = "wait_for_terrain_changeset";
        public static readonly StringName ApplyTerrainChangeset = "apply_terrain_changeset";
    }
}
</file>

<file path="addons/better-terrain/BetterTerrain.gd">
@tool
extends Node

## A [TileMapLayer] terrain / auto-tiling system.
##
## This is a drop-in replacement for Godot 4's tilemap terrain system, offering
## more versatile and straightforward autotiling. It can be used with any
## existing [TileMapLayer] or [TileSet], either through the editor plugin, or
## directly via code.
## [br][br]
## The [b]BetterTerrain[/b] class contains only static functions, each of which
## either takes a [TileMapLayer], a [TileSet], and sometimes a [TileData].
## Meta-data is embedded inside the [TileSet] and the [TileData] types to store
## the terrain information. See [method Object.get_meta] for information.
## [br][br]
## Once terrain is set up, it can be written to the tilemap using [method set_cells].
## Similar to Godot 3.x, setting the cells does not run the terrain solver, so once
## the cells have been set, you need to call an update function such as [method update_terrain_cells].


## The meta-data key used to store terrain information.
const TERRAIN_META = &"_better_terrain"

## The current version. Used to handle future upgrades.
const TERRAIN_SYSTEM_VERSION = "0.2"

var _tile_cache = {}
var rng = RandomNumberGenerator.new()
var use_seed := true

## A helper class that provides functions detailing valid peering bits and
## polygons for different tile types.
var data := load("res://addons/better-terrain/BetterTerrainData.gd"):
    get:
        return data

enum TerrainType {
    MATCH_TILES, ## Selects tiles by matching against adjacent tiles.
    MATCH_VERTICES, ## Select tiles by analysing vertices, similar to wang-style tiles.
    CATEGORY, ## Declares a matching type for more sophisticated rules.
    DECORATION, ## Fills empty tiles by matching adjacent tiles
    MAX,
}

enum TileCategory {
    EMPTY = -1, ## An empty cell, or a tile marked as decoration
    NON_TERRAIN = -2, ## A non-empty cell that does not contain a terrain tile
    ERROR = -3
}

enum SymmetryType {
    NONE,
    MIRROR, ## Horizontally mirror
    FLIP, ## Vertically flip
    REFLECT, ## All four reflections
    ROTATE_CLOCKWISE,
    ROTATE_COUNTER_CLOCKWISE,
    ROTATE_180,
    ROTATE_ALL, ## All four rotated forms
    ALL ## All rotated and reflected forms
}


func _intersect(first: Array, second: Array) -> bool:
    if first.size() > second.size():
        return _intersect(second, first) # Array 'has' is fast compared to gdscript loop
    for f in first:
        if second.has(f):
            return true
    return false


# Meta-data functions

func _get_terrain_meta(ts: TileSet) -> Dictionary:
    return ts.get_meta(TERRAIN_META) if ts and ts.has_meta(TERRAIN_META) else {
        terrains = [],
        decoration = ["Decoration", Color.DIM_GRAY, TerrainType.DECORATION, [], {path = "res://addons/better-terrain/icons/Decoration.svg"}],
        version = TERRAIN_SYSTEM_VERSION
    }


func _set_terrain_meta(ts: TileSet, meta : Dictionary) -> void:
    ts.set_meta(TERRAIN_META, meta)
    ts.emit_changed()


func _get_tile_meta(td: TileData) -> Dictionary:
    return td.get_meta(TERRAIN_META) if td.has_meta(TERRAIN_META) else {
        type = TileCategory.NON_TERRAIN
    }


func _set_tile_meta(ts: TileSet, td: TileData, meta) -> void:
    td.set_meta(TERRAIN_META, meta)
    ts.emit_changed()


func _get_cache(ts: TileSet) -> Array:
    if _tile_cache.has(ts):
        return _tile_cache[ts]
    
    var cache := []
    if !ts:
        return cache
    _tile_cache[ts] = cache

    var watcher = Node.new()
    watcher.set_script(load("res://addons/better-terrain/Watcher.gd"))
    watcher.tileset = ts
    watcher.trigger.connect(_purge_cache.bind(ts))
    add_child(watcher)
    ts.changed.connect(watcher.activate)
    
    var types = {}
    
    var ts_meta := _get_terrain_meta(ts)
    for t in ts_meta.terrains.size():
        var terrain = ts_meta.terrains[t]
        var bits = terrain[3].duplicate()
        bits.push_back(t)
        types[t] = bits
        cache.push_back([])
    
    # Decoration
    types[-1] = [TileCategory.EMPTY]
    cache.push_back([[-1, Vector2.ZERO, -1, {}, 1.0]])
    
    for s in ts.get_source_count():
        var source_id := ts.get_source_id(s)
        var source := ts.get_source(source_id) as TileSetAtlasSource
        if !source:
            continue
        source.changed.connect(watcher.activate)
        for c in source.get_tiles_count():
            var coord := source.get_tile_id(c)
            for a in source.get_alternative_tiles_count(coord):
                var alternate := source.get_alternative_tile_id(coord, a)
                var td := source.get_tile_data(coord, alternate)
                var td_meta := _get_tile_meta(td)
                if td_meta.type < TileCategory.EMPTY or td_meta.type >= cache.size():
                    continue
                
                td.changed.connect(watcher.activate)
                var peering := {}
                for key in td_meta.keys():
                    if !(key is int):
                        continue
                    
                    var targets := []
                    for k in types:
                        if _intersect(types[k], td_meta[key]):
                            targets.push_back(k)
                    
                    peering[key] = targets
                
                # Decoration tiles without peering are skipped
                if td_meta.type == TileCategory.EMPTY and !peering:
                    continue
                
                var symmetry = td_meta.get("symmetry", SymmetryType.NONE)
                # Branch out no symmetry tiles early
                if symmetry == SymmetryType.NONE:
                    cache[td_meta.type].push_back([source_id, coord, alternate, peering, td.probability])
                    continue
                
                # calculate the symmetry order for this tile
                var symmetry_order := 0
                for flags in data.symmetry_mapping[symmetry]:
                    var symmetric_peering = data.peering_bits_after_symmetry(peering, flags)
                    if symmetric_peering == peering:
                        symmetry_order += 1
                
                var adjusted_probability = td.probability / symmetry_order
                for flags in data.symmetry_mapping[symmetry]:
                    var symmetric_peering = data.peering_bits_after_symmetry(peering, flags)
                    cache[td_meta.type].push_back([source_id, coord, alternate | flags, symmetric_peering, adjusted_probability])
    
    return cache


func _get_cache_terrain(ts_meta : Dictionary, index: int) -> Array:
    # the cache and the terrains in ts_meta don't line up because
    # decorations are cached too
    if index < 0 or index >= ts_meta.terrains.size():
        return ts_meta.decoration
    return ts_meta.terrains[index]


func _purge_cache(ts: TileSet) -> void:
    _tile_cache.erase(ts)
    for c in get_children():
        if c.tileset == ts:
            c.tidy()
            break


func _clear_invalid_peering_types(ts: TileSet) -> void:
    var ts_meta := _get_terrain_meta(ts)
    
    var cache := _get_cache(ts)
    for t in cache.size():
        var type = _get_cache_terrain(ts_meta, t)[2]
        var valid_peering_types = data.get_terrain_peering_cells(ts, type)
        
        for c in cache[t]:
            if c[0] < 0:
                continue
            var source := ts.get_source(c[0]) as TileSetAtlasSource
            if !source:
                continue
            var td := source.get_tile_data(c[1], c[2])
            var td_meta := _get_tile_meta(td)
            
            for peering in c[3].keys():
                if valid_peering_types.has(peering):
                    continue
                td_meta.erase(peering)
            
            _set_tile_meta(ts, td, td_meta)
    
    # Not strictly necessary
    _purge_cache(ts)


func _has_invalid_peering_types(ts: TileSet) -> bool:
    var ts_meta := _get_terrain_meta(ts)
    
    var cache := _get_cache(ts)
    for t in cache.size():
        var type = _get_cache_terrain(ts_meta, t)[2]
        var valid_peering_types = data.get_terrain_peering_cells(ts, type)
        
        for c in cache[t]:
            for peering in c[3].keys():
                if !valid_peering_types.has(peering):
                    return true
    
    return false


func _update_terrain_data(ts: TileSet) -> void:
    var ts_meta = _get_terrain_meta(ts)
    var previous_version = ts_meta.get("version")
    
    # First release: no version info
    if !ts_meta.has("version"):
        ts_meta["version"] = "0.0"
    
    # 0.0 -> 0.1: add categories
    if ts_meta.version == "0.0":
        for t in ts_meta.terrains:
            if t.size() == 3:
                t.push_back([])
        ts_meta.version = "0.1"
    
    # 0.1 -> 0.2: add decoration tiles and terrain icons
    if ts_meta.version == "0.1":
        # Add terrain icon containers
        for t in ts_meta.terrains:
            if t.size() == 4:
                t.push_back({})
        
        # Add default decoration data
        ts_meta["decoration"] = ["Decoration", Color.DIM_GRAY, TerrainType.DECORATION, [], {path = "res://addons/better-terrain/icons/Decoration.svg"}]
        ts_meta.version = "0.2"
    
    if previous_version != ts_meta.version:
        _set_terrain_meta(ts, ts_meta)


func _weighted_selection(choices: Array, apply_empty_probability: bool):
    if choices.is_empty():
        return null
    
    var weight = choices.reduce(func(a, c): return a + c[4], 0.0)
    
    if apply_empty_probability and weight < 1.0 and rng.randf() > weight:
        return [-1, Vector2.ZERO, -1, null, 1.0]
    
    if choices.size() == 1:
        return choices[0]
    
    if weight == 0.0:
        return choices[rng.randi() % choices.size()]
    
    var pick = rng.randf() * weight
    for c in choices:
        if pick < c[4]:
            return c
        pick -= c[4]
    return choices.back()


func _weighted_selection_seeded(choices: Array, coord: Vector2i, apply_empty_probability: bool):
    if use_seed:
        rng.seed = hash(coord)
    return _weighted_selection(choices, apply_empty_probability)


func _update_tile_tiles(tm: TileMapLayer, coord: Vector2i, types: Dictionary, cache: Array, apply_empty_probability: bool):
    var type = types[coord]
    
    const reward := 3
    var penalty := -2000 if apply_empty_probability else -10
    
    var best_score := -1000 # Impossibly bad score
    var best := []
    for t in cache[type]:
        var score := 0
        for peering in t[3]:
            score += reward if t[3][peering].has(types[tm.get_neighbor_cell(coord, peering)]) else penalty
        
        if score > best_score:
            best_score = score
            best = [t]
        elif score == best_score:
            best.append(t)
    
    return _weighted_selection_seeded(best, coord, apply_empty_probability)


func _probe(tm: TileMapLayer, coord: Vector2i, peering: int, type: int, types: Dictionary) -> int:
    var targets = data.associated_vertex_cells(tm, coord, peering)
    targets = targets.map(func(c): return types[c])
    
    var first = targets[0]
    if targets.all(func(t): return t == first):
        return first
    
    # if different, use the lowest  non-same
    targets = targets.filter(func(t): return t != type)
    return targets.reduce(func(a, t): return min(a, t))


func _update_tile_vertices(tm: TileMapLayer, coord: Vector2i, types: Dictionary, cache: Array):
    var type = types[coord]
    
    const reward := 3
    const penalty := -10
    
    var best_score := -1000 # Impossibly bad score
    var best := []
    for t in cache[type]:
        var score := 0
        for peering in t[3]:
            score += reward if _probe(tm, coord, peering, type, types) in t[3][peering] else penalty
        
        if score > best_score:
            best_score = score
            best = [t]
        elif score == best_score:
            best.append(t)
    
    return _weighted_selection_seeded(best, coord, false)


func _update_tile_immediate(tm: TileMapLayer, coord: Vector2i, ts_meta: Dictionary, types: Dictionary, cache: Array) -> void:
    var type = types[coord]
    if type < TileCategory.EMPTY or type >= ts_meta.terrains.size():
        return
    
    var placement
    var terrain = _get_cache_terrain(ts_meta, type)
    if terrain[2] in [TerrainType.MATCH_TILES, TerrainType.DECORATION]:
        placement = _update_tile_tiles(tm, coord, types, cache, terrain[2] == TerrainType.DECORATION)
    elif terrain[2] == TerrainType.MATCH_VERTICES:
        placement = _update_tile_vertices(tm, coord, types, cache)
    else:
        return
    
    if placement:
        tm.set_cell(coord, placement[0], placement[1], placement[2])


func _update_tile_deferred(tm: TileMapLayer, coord: Vector2i, ts_meta: Dictionary, types: Dictionary, cache: Array):
    var type = types[coord]
    if type >= TileCategory.EMPTY and type < ts_meta.terrains.size():
        var terrain = _get_cache_terrain(ts_meta, type)
        if terrain[2] in [TerrainType.MATCH_TILES, TerrainType.DECORATION]:
            return _update_tile_tiles(tm, coord, types, cache, terrain[2] == TerrainType.DECORATION)
        elif terrain[2] == TerrainType.MATCH_VERTICES:
            return _update_tile_vertices(tm, coord, types, cache)
    return null


func _widen(tm: TileMapLayer, coords: Array) -> Array:
    var result := {}
    var peering_neighbors = data.get_terrain_peering_cells(tm.tile_set, TerrainType.MATCH_TILES)
    for c in coords:
        result[c] = true
        var neighbors = data.neighboring_coords(tm, c, peering_neighbors)
        for t in neighbors:
            result[t] = true
    return result.keys()


func _widen_with_exclusion(tm: TileMapLayer, coords: Array, exclusion: Rect2i) -> Array:
    var result := {}
    var peering_neighbors = data.get_terrain_peering_cells(tm.tile_set, TerrainType.MATCH_TILES)
    for c in coords:
        if !exclusion.has_point(c):
            result[c] = true
        var neighbors = data.neighboring_coords(tm, c, peering_neighbors)
        for t in neighbors:
            if !exclusion.has_point(t):
                result[t] = true
    return result.keys()

# Terrains

## Returns an [Array] of categories. These are the terrains in the [TileSet] which
## are marked with [enum TerrainType] of [code]CATEGORY[/code]. Each entry in the
## array is a [Dictionary] with [code]name[/code], [code]color[/code], and [code]id[/code].
func get_terrain_categories(ts: TileSet) -> Array:
    var result := []
    if !ts:
        return result
    
    var ts_meta := _get_terrain_meta(ts)
    for id in ts_meta.terrains.size():
        var t = ts_meta.terrains[id]
        if t[2] == TerrainType.CATEGORY:
            result.push_back({name = t[0], color = t[1], id = id})
    
    return result


## Adds a new terrain to the [TileSet]. Returns [code]true[/code] if this is successful.
## [br][br]
## [code]type[/code] must be one of [enum TerrainType].[br]
## [code]categories[/code] is an indexed list of terrain categories that this terrain
## can match as. The indexes must be valid terrains of the CATEGORY type.
## [code]icon[/code] is a [Dictionary] with either a [code]path[/code] string pointing
## to a resource, or a [code]source_id[/code] [int] and a [code]coord[/code] [Vector2i].
## The former takes priority if both are present.
func add_terrain(ts: TileSet, name: String, color: Color, type: int, categories: Array = [], icon: Dictionary = {}) -> bool:
    if !ts or name.is_empty() or type < 0 or type == TerrainType.DECORATION or type >= TerrainType.MAX:
        return false
    
    var ts_meta := _get_terrain_meta(ts)
    
    # check categories
    if type == TerrainType.CATEGORY and !categories.is_empty():
        return false
    for c in categories:
        if c < 0 or c >= ts_meta.terrains.size() or ts_meta.terrains[c][2] != TerrainType.CATEGORY:
            return false
    
    if icon and not (icon.has("path") or (icon.has("source_id") and icon.has("coord"))):
        return false
    
    ts_meta.terrains.push_back([name, color, type, categories, icon])
    _set_terrain_meta(ts, ts_meta)
    _purge_cache(ts)
    return true


## Removes the terrain at [code]index[/code] from the [TileSet]. Returns [code]true[/code]
## if the deletion is successful.
func remove_terrain(ts: TileSet, index: int) -> bool:
    if !ts or index < 0:
        return false
    
    var ts_meta := _get_terrain_meta(ts)
    if index >= ts_meta.terrains.size():
        return false
    
    if ts_meta.terrains[index][2] == TerrainType.CATEGORY:
        for t in ts_meta.terrains:
            t[3].erase(index)
    
    for s in ts.get_source_count():
        var source := ts.get_source(ts.get_source_id(s)) as TileSetAtlasSource
        if !source:
            continue
        for t in source.get_tiles_count():
            var coord := source.get_tile_id(t)
            for a in source.get_alternative_tiles_count(coord):
                var alternate := source.get_alternative_tile_id(coord, a)
                var td := source.get_tile_data(coord, alternate)
                
                var td_meta := _get_tile_meta(td)
                if td_meta.type == TileCategory.NON_TERRAIN:
                    continue
                
                if td_meta.type == index:
                    _set_tile_meta(ts, td, null)
                    continue
                
                if td_meta.type > index:
                    td_meta.type -= 1
                
                for peering in td_meta.keys():
                    if !(peering is int):
                        continue
                    
                    var fixed_peering = []
                    for p in td_meta[peering]:
                        if p < index:
                            fixed_peering.append(p)
                        elif p > index:
                            fixed_peering.append(p - 1)
                    
                    if fixed_peering.is_empty():
                        td_meta.erase(peering)
                    else:
                        td_meta[peering] = fixed_peering
                
                _set_tile_meta(ts, td, td_meta)
    
    ts_meta.terrains.remove_at(index)
    _set_terrain_meta(ts, ts_meta)
    
    _purge_cache(ts)	
    return true


## Returns the number of terrains in the [TileSet].
func terrain_count(ts: TileSet) -> int:
    if !ts:
        return 0
    
    var ts_meta := _get_terrain_meta(ts)
    return ts_meta.terrains.size()


## Retrieves information about the terrain at [code]index[/code] in the [TileSet].
## [br][br]
## Returns a [Dictionary] describing the terrain. If it succeeds, the key [code]valid[/code]
## will be set to [code]true[/code]. Other keys are [code]name[/code], [code]color[/code],
## [code]type[/code] (a [enum TerrainType]), [code]categories[/code] which is
## an [Array] of category type terrains that this terrain matches as, and
## [code]icon[/code] which is a [Dictionary] with a [code]path[/code] [String] or
## a [code]source_id[/code] [int] and [code]coord[/code] [Vector2i]
func get_terrain(ts: TileSet, index: int) -> Dictionary:
    if !ts or index < TileCategory.EMPTY:
        return {valid = false}
    
    var ts_meta := _get_terrain_meta(ts)
    if index >= ts_meta.terrains.size():
        return {valid = false}
    
    var terrain := _get_cache_terrain(ts_meta, index)
    return {
        id = index,
        name = terrain[0],
        color = terrain[1],
        type = terrain[2],
        categories = terrain[3].duplicate(),
        icon = terrain[4].duplicate(),
        valid = true
    }


## Updates the details of the terrain at [code]index[/code] in [TileSet]. Returns
## [code]true[/code] if this succeeds.
## [br][br]
## If supplied, the [code]categories[/code] must be a list of indexes to other [code]CATEGORY[/code]
## type terrains.
## [code]icon[/code] is a [Dictionary] with either a [code]path[/code] string pointing
## to a resource, or a [code]source_id[/code] [int] and a [code]coord[/code] [Vector2i].
func set_terrain(ts: TileSet, index: int, name: String, color: Color, type: int, categories: Array = [], icon: Dictionary = {valid = false}) -> bool:
    if !ts or name.is_empty() or index < 0 or type < 0 or type == TerrainType.DECORATION or type >= TerrainType.MAX:
        return false
    
    var ts_meta := _get_terrain_meta(ts)
    if index >= ts_meta.terrains.size():
        return false
    
    if type == TerrainType.CATEGORY and !categories.is_empty():
        return false
    for c in categories:
        if c < 0 or c == index or c >= ts_meta.terrains.size() or ts_meta.terrains[c][2] != TerrainType.CATEGORY:
            return false
    
    var icon_valid = icon.get("valid", "true")
    if icon_valid:
        match icon:
            {}, {"path"}, {"source_id", "coord"}: pass
            _: return false
    
    if type != TerrainType.CATEGORY:
        for t in ts_meta.terrains:
            t[3].erase(index)
    
    ts_meta.terrains[index] = [name, color, type, categories, icon]
    _set_terrain_meta(ts, ts_meta)
    
    _clear_invalid_peering_types(ts)
    _purge_cache(ts)
    return true


## Swaps the terrains at [code]index1[/code] and [code]index2[/code] in [TileSet].
func swap_terrains(ts: TileSet, index1: int, index2: int) -> bool:
    if !ts or index1 < 0 or index2 < 0 or index1 == index2:
        return false
    
    var ts_meta := _get_terrain_meta(ts)
    if index1 >= ts_meta.terrains.size() or index2 >= ts_meta.terrains.size():
        return false
    
    for t in ts_meta.terrains:
        var has1 = t[3].has(index1)
        var has2 = t[3].has(index2)
        
        if has1 and !has2:
            t[3].erase(index1)
            t[3].push_back(index2)
        elif has2 and !has1:
            t[3].erase(index2)
            t[3].push_back(index1)
    
    for s in ts.get_source_count():
        var source := ts.get_source(ts.get_source_id(s)) as TileSetAtlasSource
        if !source:
            continue
        for t in source.get_tiles_count():
            var coord := source.get_tile_id(t)
            for a in source.get_alternative_tiles_count(coord):
                var alternate := source.get_alternative_tile_id(coord, a)
                var td := source.get_tile_data(coord, alternate)
                
                var td_meta := _get_tile_meta(td)
                if td_meta.type == TileCategory.NON_TERRAIN:
                    continue
                
                if td_meta.type == index1:
                    td_meta.type = index2
                elif td_meta.type == index2:
                    td_meta.type = index1
                
                for peering in td_meta.keys():
                    if !(peering is int):
                        continue
                    
                    var fixed_peering = []
                    for p in td_meta[peering]:
                        if p == index1:
                            fixed_peering.append(index2)
                        elif p == index2:
                            fixed_peering.append(index1)
                        else:
                            fixed_peering.append(p)
                    td_meta[peering] = fixed_peering
                
                _set_tile_meta(ts, td, td_meta)
    
    var temp = ts_meta.terrains[index1]
    ts_meta.terrains[index1] = ts_meta.terrains[index2]
    ts_meta.terrains[index2] = temp
    _set_terrain_meta(ts, ts_meta)
    
    _purge_cache(ts)
    return true


# Terrain tile data

## For a tile in a [TileSet] as specified by [TileData], set the terrain associated
## with that tile to [code]type[/code], which is an index of an existing terrain.
## Returns [code]true[/code] on success.
func set_tile_terrain_type(ts: TileSet, td: TileData, type: int) -> bool:
    if !ts or !td or type < TileCategory.NON_TERRAIN:
        return false
    
    var td_meta = _get_tile_meta(td)
    td_meta.type = type
    if type == TileCategory.NON_TERRAIN:
        td_meta = null
    _set_tile_meta(ts, td, td_meta)
    
    _clear_invalid_peering_types(ts)
    _purge_cache(ts)
    return true


## Returns the terrain type associated with tile specified by [TileData]. Returns
## -1 if the tile has no associated terrain.
func get_tile_terrain_type(td: TileData) -> int:
    if !td:
        return TileCategory.ERROR
    var td_meta := _get_tile_meta(td)
    return td_meta.type


## For a tile represented by [TileData] [code]td[/code] in [TileSet]
## [code]ts[/code], sets [enum SymmetryType] [code]type[/code]. This controls
## how the tile is rotated/mirrored during placement.
func set_tile_symmetry_type(ts: TileSet, td: TileData, type: int) -> bool:
    if !ts or !td or type < SymmetryType.NONE or type > SymmetryType.ALL:
        return false
    
    var td_meta := _get_tile_meta(td)
    if td_meta.type == TileCategory.NON_TERRAIN:
        return false
    
    td_meta.symmetry = type
    _set_tile_meta(ts, td, td_meta)
    _purge_cache(ts)
    return true


## For a tile [code]td[/code], returns the [enum SymmetryType] which that
## tile uses.
func get_tile_symmetry_type(td: TileData) -> int:
    if !td:
        return SymmetryType.NONE
    
    var td_meta := _get_tile_meta(td)
    return td_meta.get("symmetry", SymmetryType.NONE)


## Returns an Array of all [TileData] tiles included in the specified
## terrain [code]type[/code] for the [TileSet] [code]ts[/code]
func get_tiles_in_terrain(ts: TileSet, type: int) -> Array[TileData]:
    var result:Array[TileData] = []
    if !ts or type < TileCategory.EMPTY:
        return result
    
    var cache := _get_cache(ts)
    if type > cache.size():
        return result
    
    var tiles = cache[type]
    if !tiles:
        return result
    for c in tiles:
        if c[0] < 0:
            continue
        var source := ts.get_source(c[0]) as TileSetAtlasSource
        var td := source.get_tile_data(c[1], c[2])
        result.push_back(td)
    
    return result


## Returns an [Array] of [Dictionary] items including information about each 
## tile included in the specified terrain [code]type[/code] for 
## the [TileSet] [code]ts[/code]. Each Dictionary item includes 
## [TileSetAtlasSource] [code]source[/code], [TileData] [code]td[/code], 
## [Vector2i] [code]coord[/code], and [int] [code]alt_id[/code].
func get_tile_sources_in_terrain(ts: TileSet, type: int) -> Array[Dictionary]:
    var result:Array[Dictionary] = []
    
    var cache := _get_cache(ts)
    var tiles = cache[type]
    if !tiles:
        return result
    for c in tiles:
        if c[0] < 0:
            continue
        var source := ts.get_source(c[0]) as TileSetAtlasSource
        if not source:
            continue
        var td := source.get_tile_data(c[1], c[2])
        result.push_back({
            source = source,
            td = td,
            coord = c[1],
            alt_id = c[2]
        })
    
    return result


## For a [TileSet]'s tile, specified by [TileData], add terrain [code]type[/code]
## (an index of a terrain) to match this tile in direction [code]peering[/code],
## which is of type [enum TileSet.CellNeighbor]. Returns [code]true[/code] on success.
func add_tile_peering_type(ts: TileSet, td: TileData, peering: int, type: int) -> bool:
    if !ts or !td or peering < 0 or peering > 15 or type < TileCategory.EMPTY:
        return false
    
    var ts_meta := _get_terrain_meta(ts)
    var td_meta := _get_tile_meta(td)
    if td_meta.type < TileCategory.EMPTY or td_meta.type >= ts_meta.terrains.size():
        return false
    
    if !td_meta.has(peering):
        td_meta[peering] = [type]
    elif !td_meta[peering].has(type):
        td_meta[peering].append(type)
    else:
        return false
    _set_tile_meta(ts, td, td_meta)
    _purge_cache(ts)
    return true


## For a [TileSet]'s tile, specified by [TileData], remove terrain [code]type[/code]
## from matching in direction [code]peering[/code], which is of type [enum TileSet.CellNeighbor].
## Returns [code]true[/code] on success.
func remove_tile_peering_type(ts: TileSet, td: TileData, peering: int, type: int) -> bool:
    if !ts or !td or peering < 0 or peering > 15 or type < TileCategory.EMPTY:
        return false
    
    var td_meta := _get_tile_meta(td)
    if !td_meta.has(peering):
        return false
    if !td_meta[peering].has(type):
        return false
    td_meta[peering].erase(type)
    if td_meta[peering].is_empty():
        td_meta.erase(peering)
    _set_tile_meta(ts, td, td_meta)
    _purge_cache(ts)
    return true


## For the tile specified by [TileData], return an [Array] of peering directions
## for which terrain matching is set up. These will be of type [enum TileSet.CellNeighbor].
func tile_peering_keys(td: TileData) -> Array:
    if !td:
        return []
    
    var td_meta := _get_tile_meta(td)
    var result := []
    for k in td_meta:
        if k is int:
            result.append(k)
    return result


## For the tile specified by [TileData], return the [Array] of terrains that match
## for the direction [code]peering[/code] which should be of type [enum TileSet.CellNeighbor].
func tile_peering_types(td: TileData, peering: int) -> Array:
    if !td or peering < 0 or peering > 15:
        return []
    
    var td_meta := _get_tile_meta(td)
    return td_meta[peering].duplicate() if td_meta.has(peering) else []


## For the tile specified by [TileData], return the [Array] of peering directions
## for the specified terrain type [code]type[/code].
func tile_peering_for_type(td: TileData, type: int) -> Array:
    if !td:
        return []
    
    var td_meta := _get_tile_meta(td)
    var result := []
    var sides := tile_peering_keys(td)
    for side in sides:
        if td_meta[side].has(type):
            result.push_back(side)
    
    result.sort()
    return result


# Painting

## Applies the terrain [code]type[/code] to the [TileMapLayer] for the [Vector2i]
## [code]coord[/code]. Returns [code]true[/code] if it succeeds. Use [method set_cells]
## to change multiple tiles at once.
## [br][br]
## Use terrain type -1 to erase cells.
func set_cell(tm: TileMapLayer, coord: Vector2i, type: int) -> bool:
    if !tm or !tm.tile_set or type < TileCategory.EMPTY:
        return false
    
    if type == TileCategory.EMPTY:
        tm.erase_cell(coord)
        return true
    
    var cache := _get_cache(tm.tile_set)
    if type >= cache.size():
        return false
    
    if cache[type].is_empty():
        return false
    
    var tile = cache[type].front()
    tm.set_cell(coord, tile[0], tile[1], tile[2])
    return true


## Applies the terrain [code]type[/code] to the [TileMapLayer] for the
## [Vector2i] [code]coords[/code]. Returns [code]true[/code] if it succeeds.
## [br][br]
## Note that this does not cause the terrain solver to run, so this will just place
## an arbitrary terrain-associated tile in the given position. To run the solver,
## you must set the require cells, and then call either [method update_terrain_cell],
## [method update_terrain_cels], or [method update_terrain_area].
## [br][br]
## If you want to prepare changes to the tiles in advance, you can use [method create_terrain_changeset]
## and the associated functions.
## [br][br]
## Use terrain type -1 to erase cells.
func set_cells(tm: TileMapLayer, coords: Array, type: int) -> bool:
    if !tm or !tm.tile_set or type < TileCategory.EMPTY:
        return false
    
    if type == TileCategory.EMPTY:
        for c in coords:
            tm.erase_cell(c)
        return true
    
    var cache := _get_cache(tm.tile_set)
    if type >= cache.size():
        return false
    
    if cache[type].is_empty():
        return false
    
    var tile = cache[type].front()
    for c in coords:
        tm.set_cell(c, tile[0], tile[1], tile[2])
    return true


## Replaces an existing tile on the [TileMapLayer] for the [Vector2i]
## [code]coord[/code] with a new tile in the provided terrain [code]type[/code] 
## *only if* there is a tile with a matching set of peering sides in this terrain.
## Returns [code]true[/code] if any tiles were changed. Use [method replace_cells]
## to replace multiple tiles at once.
func replace_cell(tm: TileMapLayer, coord: Vector2i, type: int) -> bool:
    if !tm or !tm.tile_set or type < 0:
        return false
    
    var cache := _get_cache(tm.tile_set)
    if type >= cache.size():
        return false
    
    if cache[type].is_empty():
        return false
    
    var td = tm.get_cell_tile_data(coord)
    if !td:
        return false
    
    var ts_meta := _get_terrain_meta(tm.tile_set)
    var categories = ts_meta.terrains[type][3]
    var check_types = [type] + categories
    
    for check_type in check_types:
        var placed_peering = tile_peering_for_type(td, check_type)
        for pt in get_tiles_in_terrain(tm.tile_set, type):
            var check_peering := tile_peering_for_type(pt, check_type)
            if placed_peering == check_peering:
                var tile = cache[type].front()
                tm.set_cell(coord, tile[0], tile[1], tile[2])
                return true
    
    return false


## Replaces existing tiles on the [TileMapLayer] for the [Vector2i]
## [code]coords[/code] with new tiles in the provided terrain [code]type[/code] 
## *only if* there is a tile with a matching set of peering sides in this terrain
## for each tile.
## Returns [code]true[/code] if any tiles were changed.
func replace_cells(tm: TileMapLayer, coords: Array, type: int) -> bool:
    if !tm or !tm.tile_set or type < 0:
        return false
    
    var cache := _get_cache(tm.tile_set)
    if type >= cache.size():
        return false
    
    if cache[type].is_empty():
        return false
    
    var ts_meta := _get_terrain_meta(tm.tile_set)
    var categories = ts_meta.terrains[type][3]
    var check_types = [type] + categories
    
    var changed = false
    var potential_tiles = get_tiles_in_terrain(tm.tile_set, type)
    for c in coords:
        var found = false
        var td = tm.get_cell_tile_data(c)
        if !td:
            continue
        for check_type in check_types:
            var placed_peering = tile_peering_for_type(td, check_type)
            for pt in potential_tiles:
                var check_peering = tile_peering_for_type(pt, check_type)
                if placed_peering == check_peering:
                    var tile = cache[type].front()
                    tm.set_cell(c, tile[0], tile[1], tile[2])
                    changed = true
                    found = true
                    break
            
            if found:
                break
    
    return changed


## Returns the terrain type detected in the [TileMapLayer] at specified [Vector2i]
## [code]coord[/code]. Returns -1 if tile is not valid or does not contain a
## tile associated with a terrain.
func get_cell(tm: TileMapLayer, coord: Vector2i) -> int:
    if !tm or !tm.tile_set:
        return TileCategory.ERROR
    
    if tm.get_cell_source_id(coord) == -1:
        return TileCategory.EMPTY
    
    var t := tm.get_cell_tile_data(coord)
    if !t:
        return TileCategory.NON_TERRAIN
    
    return _get_tile_meta(t).type


## Runs the tile solving algorithm on the [TileMapLayer] for the given
## [Vector2i] coordinates in the [code]cells[/code] parameter. By default,
## the surrounding cells are also solved, but this can be adjusted by passing [code]false[/code]
## to the [code]and_surrounding_cells[/code] parameter.
## [br][br]
## See also [method update_terrain_area] and [method update_terrain_cell].
func update_terrain_cells(tm: TileMapLayer, cells: Array, and_surrounding_cells := true) -> void:
    if !tm or !tm.tile_set:
        return
    
    if and_surrounding_cells:
        cells = _widen(tm, cells)
    var needed_cells := _widen(tm, cells)
    
    var types := {}
    for c in needed_cells:
        types[c] = get_cell(tm, c)
    
    var ts_meta := _get_terrain_meta(tm.tile_set)
    var cache := _get_cache(tm.tile_set)
    for c in cells:
        _update_tile_immediate(tm, c, ts_meta, types, cache)


## Runs the tile solving algorithm on the [TileMapLayer] for the given [Vector2i]
## [code]cell[/code]. By default, the surrounding cells are also solved, but
## this can be adjusted by passing [code]false[/code] to the [code]and_surrounding_cells[/code]
## parameter. This calls through to [method update_terrain_cells].
func update_terrain_cell(tm: TileMapLayer, cell: Vector2i, and_surrounding_cells := true) -> void:
    update_terrain_cells(tm, [cell], and_surrounding_cells)


## Runs the tile solving algorithm on the [TileMapLayer] for the given [Rect2i]
## [code]area[/code]. By default, the surrounding cells are also solved, but
## this can be adjusted by passing [code]false[/code] to the [code]and_surrounding_cells[/code]
## parameter.
## [br][br]
## See also [method update_terrain_cells].
func update_terrain_area(tm: TileMapLayer, area: Rect2i, and_surrounding_cells := true) -> void:
    if !tm or !tm.tile_set:
        return
    
    # Normalize area and extend so tiles cover inclusive space
    area = area.abs()
    area.size += Vector2i.ONE
    
    var edges = []
    for x in range(area.position.x, area.end.x):
        edges.append(Vector2i(x, area.position.y))
        edges.append(Vector2i(x, area.end.y - 1))
    for y in range(area.position.y + 1, area.end.y - 1):
        edges.append(Vector2i(area.position.x, y))
        edges.append(Vector2i(area.end.x - 1, y))
    
    var additional_cells := []
    var needed_cells := _widen_with_exclusion(tm, edges, area)
    
    if and_surrounding_cells:
        additional_cells = needed_cells
        needed_cells = _widen_with_exclusion(tm, needed_cells, area)
    
    var types := {}
    for y in range(area.position.y, area.end.y):
        for x in range(area.position.x, area.end.x):
            var coord = Vector2i(x, y)
            types[coord] = get_cell(tm, coord)
    for c in needed_cells:
        types[c] = get_cell(tm, c)
    
    var ts_meta := _get_terrain_meta(tm.tile_set)
    var cache := _get_cache(tm.tile_set)
    for y in range(area.position.y, area.end.y):
        for x in range(area.position.x, area.end.x):
            var coord := Vector2i(x, y)
            _update_tile_immediate(tm, coord, ts_meta, types, cache)
    for c in additional_cells:
        _update_tile_immediate(tm, c, ts_meta, types, cache)


## For a [TileMapLayer], create a changeset that will
## be calculated via a [WorkerThreadPool], so it will not delay processing the current
## frame or affect the framerate.
## [br][br]
## The [code]paint[/code] parameter must be a [Dictionary] with keys of type [Vector2i]
## representing map coordinates, and integer values representing terrain types.
## [br][br]
## Returns a [Dictionary] with internal details. See also [method is_terrain_changeset_ready],
## [method apply_terrain_changeset], and [method wait_for_terrain_changeset].
func create_terrain_changeset(tm: TileMapLayer, paint: Dictionary) -> Dictionary:
    # Force cache rebuild if required
    var _cache := _get_cache(tm.tile_set)
    
    var cells := paint.keys()
    var needed_cells := _widen(tm, cells)
    
    var types := {}
    for c in needed_cells:
        types[c] = paint[c] if paint.has(c) else get_cell(tm, c)
    
    var placements := []
    placements.resize(cells.size())
    
    var ts_meta := _get_terrain_meta(tm.tile_set)
    var work := func(n: int):
        placements[n] = _update_tile_deferred(tm, cells[n], ts_meta, types, _cache)
    
    return {
        "valid": true,
        "tilemap": tm,
        "cells": cells,
        "placements": placements,
        "group_id": WorkerThreadPool.add_group_task(work, cells.size(), -1, false, "BetterTerrain")
    }


## Returns [code]true[/code] if a changeset created by [method create_terrain_changeset]
## has finished the threaded calculation and is ready to be applied by [method apply_terrain_changeset].
## See also [method wait_for_terrain_changeset].
func is_terrain_changeset_ready(change: Dictionary) -> bool:
    if !change.has("group_id"):
        return false
    
    return WorkerThreadPool.is_group_task_completed(change.group_id)


## Blocks until a changeset created by [method create_terrain_changeset] finishes.
## This is useful to tidy up threaded work in the event that a node is to be removed
## whilst still waiting on threads.
## [br][br]
## Usage example:
## [codeblock]
## func _exit_tree():
##     if changeset.valid:
##         BetterTerrain.wait_for_terrain_changeset(changeset)
## [/codeblock]
func wait_for_terrain_changeset(change: Dictionary) -> void:
    if change.has("group_id"):
        WorkerThreadPool.wait_for_group_task_completion(change.group_id)


## Apply the changes in a changeset created by [method create_terrain_changeset]
## once it is confirmed by [method is_terrain_changeset_ready]. The changes will
## be applied to the [TileMapLayer] that the changeset was initialized with.
## [br][br]
## Completed changesets can be applied multiple times, and stored for as long as
## needed once calculated.
func apply_terrain_changeset(change: Dictionary) -> void:
    for n in change.cells.size():
        var placement = change.placements[n]
        if placement:
            change.tilemap.set_cell(change.cells[n], placement[0], placement[1], placement[2])
</file>

<file path="addons/better-terrain/BetterTerrain.gd.uid">
uid://uakaispc7dfo
</file>

<file path="addons/better-terrain/BetterTerrainData.gd">
@tool

## Data functions for [TileSet] properties.
##
## This data class has functions for retrieving data regarding the mathematical
## properties of a tile set.

const _terrain_peering_square_tiles : Array[int] = [0, 3, 4, 7, 8, 11, 12, 15]
const _terrain_peering_square_vertices : Array[int] = [3, 7, 11, 15]
const _terrain_peering_isometric_tiles : Array[int] = [1, 2, 5, 6, 9, 10, 13, 14]
const _terrain_peering_isometric_vertices : Array[int] = [1, 5, 9, 13]
const _terrain_peering_horiztonal_tiles : Array[int] = [0, 2, 6, 8, 10, 14]
const _terrain_peering_horiztonal_vertices : Array[int] = [3, 5, 7, 11, 13, 15]
const _terrain_peering_vertical_tiles : Array[int] = [2, 4, 6, 10, 12, 14]
const _terrain_peering_vertical_vertices : Array[int] = [1, 3, 7, 9, 11, 15]
const _terrain_peering_non_modifying : Array[int] = []

const _terrain_peering_hflip : Array[int] = [8, 9, 6, 7, 4, 5, 2, 3, 0, 1, 14, 15, 12, 13, 10, 11]
const _terrain_peering_vflip : Array[int] = [0, 1, 14, 15, 12, 13, 10, 11, 8, 9, 6, 7, 4, 5, 2, 3]
const _terrain_peering_transpose : Array[int] = [4, 5, 2, 3, 0, 1, 14, 15, 12, 13, 10, 11, 8, 9, 6, 7]

const symmetry_mapping := {
    BetterTerrain.SymmetryType.NONE: [0],
    BetterTerrain.SymmetryType.MIRROR: [0, TileSetAtlasSource.TRANSFORM_FLIP_H],
    BetterTerrain.SymmetryType.FLIP: [0, TileSetAtlasSource.TRANSFORM_FLIP_V],
    BetterTerrain.SymmetryType.REFLECT: [
        0,
        TileSetAtlasSource.TRANSFORM_FLIP_H,
        TileSetAtlasSource.TRANSFORM_FLIP_V,
        TileSetAtlasSource.TRANSFORM_FLIP_H | TileSetAtlasSource.TRANSFORM_FLIP_V
    ],
    BetterTerrain.SymmetryType.ROTATE_CLOCKWISE: [0, TileSetAtlasSource.TRANSFORM_FLIP_H | TileSetAtlasSource.TRANSFORM_TRANSPOSE],
    BetterTerrain.SymmetryType.ROTATE_COUNTER_CLOCKWISE: [0, TileSetAtlasSource.TRANSFORM_FLIP_V | TileSetAtlasSource.TRANSFORM_TRANSPOSE],
    BetterTerrain.SymmetryType.ROTATE_180: [0, TileSetAtlasSource.TRANSFORM_FLIP_H | TileSetAtlasSource.TRANSFORM_FLIP_V],
    BetterTerrain.SymmetryType.ROTATE_ALL: [
        0,
        TileSetAtlasSource.TRANSFORM_FLIP_H | TileSetAtlasSource.TRANSFORM_TRANSPOSE,
        TileSetAtlasSource.TRANSFORM_FLIP_H | TileSetAtlasSource.TRANSFORM_FLIP_V,
        TileSetAtlasSource.TRANSFORM_FLIP_V | TileSetAtlasSource.TRANSFORM_TRANSPOSE
    ],
    BetterTerrain.SymmetryType.ALL: [
        0,
        TileSetAtlasSource.TRANSFORM_FLIP_H,
        TileSetAtlasSource.TRANSFORM_FLIP_V,
        TileSetAtlasSource.TRANSFORM_FLIP_H | TileSetAtlasSource.TRANSFORM_FLIP_V,
        TileSetAtlasSource.TRANSFORM_TRANSPOSE,
        TileSetAtlasSource.TRANSFORM_FLIP_H | TileSetAtlasSource.TRANSFORM_TRANSPOSE,
        TileSetAtlasSource.TRANSFORM_FLIP_V | TileSetAtlasSource.TRANSFORM_TRANSPOSE,
        TileSetAtlasSource.TRANSFORM_FLIP_H | TileSetAtlasSource.TRANSFORM_FLIP_V | TileSetAtlasSource.TRANSFORM_TRANSPOSE
    ]
}


## Returns an [Array] of ints of type [enum TileSet.CellNeighbor] which represent
## the valid neighboring tiles for a terrain of [code]type[/code] in TileSet
static func get_terrain_peering_cells(ts: TileSet, type: int) -> Array[int]:
    if !ts or type < 0 or type >= BetterTerrain.TerrainType.MAX:
        return []
    
    if type == BetterTerrain.TerrainType.CATEGORY:
        return _terrain_peering_non_modifying
    if type == BetterTerrain.TerrainType.DECORATION:
        type = BetterTerrain.TerrainType.MATCH_TILES
    
    match [ts.tile_shape, type]:
        [TileSet.TILE_SHAPE_SQUARE, BetterTerrain.TerrainType.MATCH_TILES]:
            return _terrain_peering_square_tiles
        [TileSet.TILE_SHAPE_SQUARE, BetterTerrain.TerrainType.MATCH_VERTICES]:
            return _terrain_peering_square_vertices
        [TileSet.TILE_SHAPE_ISOMETRIC, BetterTerrain.TerrainType.MATCH_TILES]:
            return _terrain_peering_isometric_tiles
        [TileSet.TILE_SHAPE_ISOMETRIC, BetterTerrain.TerrainType.MATCH_VERTICES]:
            return _terrain_peering_isometric_vertices
    
    match [ts.tile_offset_axis, type]:
        [TileSet.TILE_OFFSET_AXIS_VERTICAL, BetterTerrain.TerrainType.MATCH_TILES]:
            return _terrain_peering_vertical_tiles
        [TileSet.TILE_OFFSET_AXIS_VERTICAL, BetterTerrain.TerrainType.MATCH_VERTICES]:
            return _terrain_peering_vertical_vertices
        [TileSet.TILE_OFFSET_AXIS_HORIZONTAL, BetterTerrain.TerrainType.MATCH_TILES]:
            return _terrain_peering_horiztonal_tiles
        [TileSet.TILE_OFFSET_AXIS_HORIZONTAL, BetterTerrain.TerrainType.MATCH_VERTICES]:
            return _terrain_peering_horiztonal_vertices
    
    return []


## Returns true if [code]peering[/code] is a valid neighboring cell for a terrain of
## [code]type[/code] in [TileSet]
static func is_terrain_peering_cell(ts: TileSet, type: int, peering: int) -> bool:
    return peering in get_terrain_peering_cells(ts, type)


static func _peering_polygon_square_tiles(peering: int) -> PackedVector2Array:
    const t := 1.0 / 3.0
    var result : PackedVector2Array
    match peering:
        TileSet.CELL_NEIGHBOR_RIGHT_SIDE: result.append(Vector2(2*t, t))
        TileSet.CELL_NEIGHBOR_BOTTOM_RIGHT_CORNER: result.append(Vector2(2*t, 2*t))
        TileSet.CELL_NEIGHBOR_BOTTOM_SIDE: result.append(Vector2(t, 2*t))
        TileSet.CELL_NEIGHBOR_BOTTOM_LEFT_CORNER: result.append(Vector2(0, 2*t))
        TileSet.CELL_NEIGHBOR_LEFT_SIDE: result.append(Vector2(0, t))
        TileSet.CELL_NEIGHBOR_TOP_LEFT_CORNER: result.append(Vector2(0, 0))
        TileSet.CELL_NEIGHBOR_TOP_SIDE: result.append(Vector2(t, 0))
        TileSet.CELL_NEIGHBOR_TOP_RIGHT_CORNER: result.append(Vector2(2*t, 0))
        -1: result.append(Vector2(t, t))
    result.append(result[0] + Vector2(t, 0))
    result.append(result[0] + Vector2(t, t))
    result.append(result[0] + Vector2(0, t))
    return result


static func _peering_polygon_square_vertices(peering: int) -> PackedVector2Array:
    const t := 1.0 / 2.0
    var result : PackedVector2Array
    match peering:
        TileSet.CELL_NEIGHBOR_BOTTOM_RIGHT_CORNER:
            result.append(Vector2(1, t))
            result.append(Vector2(1, 1))
            result.append(Vector2(t, 1))
        TileSet.CELL_NEIGHBOR_BOTTOM_LEFT_CORNER:
            result.append(Vector2(0, t))
            result.append(Vector2(t, 1))
            result.append(Vector2(0, 1))
        TileSet.CELL_NEIGHBOR_TOP_LEFT_CORNER:
            result.append(Vector2(0, 0))
            result.append(Vector2(t, 0))
            result.append(Vector2(0, t))
        TileSet.CELL_NEIGHBOR_TOP_RIGHT_CORNER:
            result.append(Vector2(t, 0))
            result.append(Vector2(1, 0))
            result.append(Vector2(1, t))
        -1:
            result.append(Vector2(t, 0))
            result.append(Vector2(1, t))
            result.append(Vector2(t, 1))
            result.append(Vector2(0, t))
    return result


static func _peering_polygon_isometric_tiles(peering: int) -> PackedVector2Array:
    const t := 1.0 / 4.0
    match peering:
        -1: return PackedVector2Array([Vector2(2 * t, t), Vector2(3 * t, 2 * t), Vector2(2 * t, 3 * t), Vector2(t, 2 * t)])
        TileSet.CELL_NEIGHBOR_RIGHT_CORNER:
            return PackedVector2Array([Vector2(3 * t, 2 * t), Vector2(1, t), Vector2(1, 3 * t)])
        TileSet.CELL_NEIGHBOR_BOTTOM_RIGHT_SIDE:
            return PackedVector2Array([Vector2(3 * t, 2 * t), Vector2(1, 3 * t), Vector2(3 * t, 1), Vector2(2 * t, 3 * t)])
        TileSet.CELL_NEIGHBOR_BOTTOM_CORNER:
            return PackedVector2Array([Vector2(2 * t, 3 * t), Vector2(3 * t, 1), Vector2(t, 1)])
        TileSet.CELL_NEIGHBOR_BOTTOM_LEFT_SIDE:
            return PackedVector2Array([Vector2(t, 2 * t), Vector2(2 * t, 3 * t), Vector2(t, 1), Vector2(0, 3 * t)])
        TileSet.CELL_NEIGHBOR_LEFT_CORNER:
            return PackedVector2Array([Vector2(0, t), Vector2(t, 2 * t), Vector2(0, 3 * t)])
        TileSet.CELL_NEIGHBOR_TOP_LEFT_SIDE:
            return PackedVector2Array([Vector2(t, 0), Vector2(2 * t, t), Vector2(t, 2 * t), Vector2(0, t)])
        TileSet.CELL_NEIGHBOR_TOP_CORNER:
            return PackedVector2Array([Vector2(t, 0), Vector2(3 * t, 0), Vector2(2 * t, t)])
        TileSet.CELL_NEIGHBOR_TOP_RIGHT_SIDE:
            return PackedVector2Array([Vector2(3 * t, 0), Vector2(1, t), Vector2(3 * t, 2 * t), Vector2(2 * t, t)])
    return PackedVector2Array()


static func _peering_polygon_isometric_vertices(peering: int) -> PackedVector2Array:
    const t := 1.0 / 4.0
    const ttt := 3.0 * t
    match peering:
        -1: return PackedVector2Array([Vector2(t, t), Vector2(ttt, t), Vector2(ttt, ttt), Vector2(t, ttt)])
        TileSet.CELL_NEIGHBOR_RIGHT_CORNER:
            return PackedVector2Array([Vector2(ttt, t), Vector2(1, 0), Vector2(1, 1), Vector2(ttt, ttt)])
        TileSet.CELL_NEIGHBOR_BOTTOM_CORNER:
            return PackedVector2Array([Vector2(t, ttt), Vector2(ttt, ttt), Vector2(1, 1), Vector2(0, 1)])
        TileSet.CELL_NEIGHBOR_LEFT_CORNER:
            return PackedVector2Array([Vector2(0, 0), Vector2(t, t), Vector2(t, ttt), Vector2(0, 1)])
        TileSet.CELL_NEIGHBOR_TOP_CORNER:
            return PackedVector2Array([Vector2(0, 0), Vector2(1, 0), Vector2(ttt, t), Vector2(t, t)])
    return PackedVector2Array()


static func _peering_polygon_horizontal_tiles(peering: int) -> PackedVector2Array:
    const e := 1.0 / (2.0 * sqrt(3.0))
    const w := sqrt(3.0) / 8.0
    const t := 1.0 / 2.0
    const s := 1.0 / 8.0
    match peering:
        -1:
            return PackedVector2Array([
                Vector2(t, 2 * s),
                Vector2(t + w, t - s),
                Vector2(t + w, t + s),
                Vector2(t, 6 * s),
                Vector2(t - w, t + s),
                Vector2(t - w, t - s)
            ])
        TileSet.CELL_NEIGHBOR_RIGHT_SIDE:
            return PackedVector2Array([
                Vector2(t + w, t - s),
                Vector2(1, t - e),
                Vector2(1, t + e),
                Vector2(t + w, t + s)
            ])
        TileSet.CELL_NEIGHBOR_BOTTOM_RIGHT_SIDE:
            return PackedVector2Array([
                Vector2(t + w, t + s),
                Vector2(1, t + e),
                Vector2(t, 1),
                Vector2(t, 6 * s)
            ])
        TileSet.CELL_NEIGHBOR_BOTTOM_LEFT_SIDE:
            return PackedVector2Array([
                Vector2(t, 6 * s),
                Vector2(t, 1),
                Vector2(0, t + e),
                Vector2(t - w, t + s)
            ])
        TileSet.CELL_NEIGHBOR_LEFT_SIDE:
            return PackedVector2Array([
                Vector2(t - w, t + s),
                Vector2(0, t + e),
                Vector2(0, t - e),
                Vector2(t - w, t - s)
            ])
        TileSet.CELL_NEIGHBOR_TOP_LEFT_SIDE:
            return PackedVector2Array([
                Vector2(t - w, t - s),
                Vector2(0, t - e),
                Vector2(t, 0),
                Vector2(t, 2 * s)
            ])
        TileSet.CELL_NEIGHBOR_TOP_RIGHT_SIDE:
            return PackedVector2Array([
                Vector2(t, 2 * s),
                Vector2(t, 0),
                Vector2(1, t - e),
                Vector2(t + w, t - s)
            ])
    return PackedVector2Array()


static func _peering_polygon_horizontal_vertices(peering: int) -> PackedVector2Array:
    const e := 1.0 / (2.0 * sqrt(3.0))
    const w := sqrt(3.0) / 8.0
    const t := 1.0 / 2.0
    const s := 1.0 / 8.0
    match peering:
        -1:
            return PackedVector2Array([
                Vector2(t - s, t - w),
                Vector2(t + s, t - w),
                Vector2(6 * s, t),
                Vector2(t + s, t + w),
                Vector2(t - s, t + w),
                Vector2(2 * s, t)
            ])
        TileSet.CELL_NEIGHBOR_BOTTOM_RIGHT_CORNER:
            return PackedVector2Array([
                Vector2(6 * s, t),
                Vector2(1, t),
                Vector2(1, t + e),
                Vector2(t + e, 1 - s),
                Vector2(t + s, t +  w)
            ])
        TileSet.CELL_NEIGHBOR_BOTTOM_CORNER:
            return PackedVector2Array([
                Vector2(t - s, t + w),
                Vector2(t + s, t + w),
                Vector2(t + e, 1 - s),
                Vector2(t, 1),
                Vector2(t - e, 1 - s)
            ])
        TileSet.CELL_NEIGHBOR_BOTTOM_LEFT_CORNER:
            return PackedVector2Array([
                Vector2(0, t),
                Vector2(2 * s, t),
                Vector2(t - s, t +  w),
                Vector2(t - e, 1 - s),
                Vector2(0, t + e)
            ])
        TileSet.CELL_NEIGHBOR_TOP_LEFT_CORNER:
            return PackedVector2Array([
                Vector2(t - e, s),
                Vector2(t - s, t - w),
                Vector2(2 * s, t),
                Vector2(0, t),
                Vector2(0, t - e)
            ])
        TileSet.CELL_NEIGHBOR_TOP_CORNER:
            return PackedVector2Array([
                Vector2(t, 0),
                Vector2(t + e, s),
                Vector2(t + s, t - w),
                Vector2(t - s, t - w),
                Vector2(t - e, s)
            ])
        TileSet.CELL_NEIGHBOR_TOP_RIGHT_CORNER:
            return PackedVector2Array([
                Vector2(t + e, s),
                Vector2(1, t - e),
                Vector2(1, t),
                Vector2(6 * s, t),
                Vector2(t + s, t - w)
            ])
    return PackedVector2Array()


static func _peering_polygon_vertical_tiles(peering: int) -> PackedVector2Array:
    const e := 1.0 / (2.0 * sqrt(3.0))
    const w := sqrt(3.0) / 8.0
    const t := 1.0 / 2.0
    const s := 1.0 / 8.0
    match peering:
        -1:
            return PackedVector2Array([
                Vector2(t - s, t - w),
                Vector2(t + s, t - w),
                Vector2(6 * s, t),
                Vector2(t + s, t + w),
                Vector2(t - s, t + w),
                Vector2(2 * s, t)
            ])
        TileSet.CELL_NEIGHBOR_BOTTOM_RIGHT_SIDE:
            return PackedVector2Array([
                Vector2(6 * s, t),
                Vector2(1, t),
                Vector2(t + e, 1),
                Vector2(t + s, t + w)
            ])
        TileSet.CELL_NEIGHBOR_BOTTOM_SIDE:
            return PackedVector2Array([
                Vector2(t - s, t + w),
                Vector2(t + s, t + w),
                Vector2(t + e, 1),
                Vector2(t - e, 1)
            ])
        TileSet.CELL_NEIGHBOR_BOTTOM_LEFT_SIDE:
            return PackedVector2Array([
                Vector2(0, t),
                Vector2(2 * s, t),
                Vector2(t - s, t + w),
                Vector2(t - e, 1)
            ])
        TileSet.CELL_NEIGHBOR_TOP_LEFT_SIDE:
            return PackedVector2Array([
                Vector2(t - e, 0),
                Vector2(t - s, t - w),
                Vector2(2 * s, t),
                Vector2(0, t)
            ])
        TileSet.CELL_NEIGHBOR_TOP_SIDE:
            return PackedVector2Array([
                Vector2(t - e, 0),
                Vector2(t + e, 0),
                Vector2(t + s, t - w),
                Vector2(t - s, t - w)
            ])
        TileSet.CELL_NEIGHBOR_TOP_RIGHT_SIDE:
            return PackedVector2Array([
                Vector2(t + e, 0),
                Vector2(1, t),
                Vector2(6 * s, t),
                Vector2(t + s, t - w)
            ])
    return PackedVector2Array()


static func _peering_polygon_vertical_vertices(peering: int) -> PackedVector2Array:
    const e := 1.0 / (2.0 * sqrt(3.0))
    const w := sqrt(3.0) / 8.0
    const t := 1.0 / 2.0
    const s := 1.0 / 8.0
    match peering:
        -1:
            return PackedVector2Array([
                Vector2(t, 2 * s),
                Vector2(t + w, t - s),
                Vector2(t + w, t + s),
                Vector2(t, 6 * s),
                Vector2(t - w, t + s),
                Vector2(t - w, t - s)
            ])
        TileSet.CELL_NEIGHBOR_RIGHT_CORNER:
            return PackedVector2Array([
                Vector2(1 - s, t - e),
                Vector2(1, t),
                Vector2(1 - s, t + e),
                Vector2(t + w, t + s),
                Vector2(t + w, t - s)
            ])
        TileSet.CELL_NEIGHBOR_BOTTOM_RIGHT_CORNER:			
            return PackedVector2Array([
                Vector2(t + w, t + s),
                Vector2(1 - s, t + e),
                Vector2(t + e, 1),
                Vector2(t, 1),
                Vector2(t, 6 * s)
            ])
        TileSet.CELL_NEIGHBOR_BOTTOM_LEFT_CORNER:
            return PackedVector2Array([
                Vector2(t - w, t + s),
                Vector2(t, 6 * s),
                Vector2(t, 1),
                Vector2(t - e, 1),
                Vector2(s, t + e)
            ])
        TileSet.CELL_NEIGHBOR_LEFT_CORNER:
            return PackedVector2Array([
                Vector2(s, t - e),
                Vector2(t - w, t - s),
                Vector2(t - w, t + s),
                Vector2(s, t + e),
                Vector2(0, t)
            ])
        TileSet.CELL_NEIGHBOR_TOP_LEFT_CORNER:
            return PackedVector2Array([
                Vector2(t - e, 0),
                Vector2(t, 0),
                Vector2(t, 2 * s),
                Vector2(t - w, t - s),
                Vector2(s, t - e)
            ])
        TileSet.CELL_NEIGHBOR_TOP_RIGHT_CORNER:
            return PackedVector2Array([
                Vector2(t, 0),
                Vector2(t + e, 0),
                Vector2(1 - s, t - e),
                Vector2(t + w, t - s),
                Vector2(t, 2 * s)
            ])
    return PackedVector2Array()


static func _peering_non_modifying() -> PackedVector2Array:
    const t := 1.0 / 3.0
    return PackedVector2Array([
        Vector2(t, 0),
        Vector2(2 * t, 0),
        Vector2(1, t),
        Vector2(1, 2 * t),
        Vector2(2 * t, 1),
        Vector2(t, 1),
        Vector2(0, 2 * t),
        Vector2(0, t)
    ])


## Returns a parameterized polygon (coordinated are between 0 and 1) for [code]peering[/code]
## direction for a terrain of [code]type[/code] in [TileSet]
static func peering_polygon(ts: TileSet, type: int, peering: int) -> PackedVector2Array:
    if type == BetterTerrain.TerrainType.CATEGORY:
        return _peering_non_modifying()
    if type == BetterTerrain.TerrainType.DECORATION:
        type = BetterTerrain.TerrainType.MATCH_TILES
    
    match [ts.tile_shape, type]:
        [TileSet.TILE_SHAPE_SQUARE, BetterTerrain.TerrainType.MATCH_TILES]:
            return _peering_polygon_square_tiles(peering)
        [TileSet.TILE_SHAPE_SQUARE, BetterTerrain.TerrainType.MATCH_VERTICES]:
            return _peering_polygon_square_vertices(peering)
        [TileSet.TILE_SHAPE_ISOMETRIC, BetterTerrain.TerrainType.MATCH_TILES]:
            return _peering_polygon_isometric_tiles(peering)
        [TileSet.TILE_SHAPE_ISOMETRIC, BetterTerrain.TerrainType.MATCH_VERTICES]:
            return _peering_polygon_isometric_vertices(peering)
    
    match [ts.tile_offset_axis, type]:
        [TileSet.TILE_OFFSET_AXIS_VERTICAL, BetterTerrain.TerrainType.MATCH_TILES]:
            return _peering_polygon_vertical_tiles(peering)
        [TileSet.TILE_OFFSET_AXIS_VERTICAL, BetterTerrain.TerrainType.MATCH_VERTICES]:
            return _peering_polygon_vertical_vertices(peering)
        [TileSet.TILE_OFFSET_AXIS_HORIZONTAL, BetterTerrain.TerrainType.MATCH_TILES]:
            return _peering_polygon_horizontal_tiles(peering)
        [TileSet.TILE_OFFSET_AXIS_HORIZONTAL, BetterTerrain.TerrainType.MATCH_VERTICES]:
            return _peering_polygon_horizontal_vertices(peering)
    
    return PackedVector2Array()


## Returns as polygon centered on 0, 0 which represents the shape of the cell of
## a tile from [TileSet].
static func cell_polygon(ts: TileSet) -> PackedVector2Array:
    const t := 1.0 / 2.0
    if ts.tile_shape in [TileSet.TILE_SHAPE_SQUARE, TileSet.TILE_SHAPE_HALF_OFFSET_SQUARE]:
        return PackedVector2Array([Vector2(-t, -t), Vector2(t, -t), Vector2(t, t), Vector2(-t, t)])
    if ts.tile_shape == TileSet.TILE_SHAPE_ISOMETRIC:
        return PackedVector2Array([Vector2(0, -t), Vector2(t, 0), Vector2(0, t), Vector2(-t, 0)])
    
    const e := t - 1.0 / (2.0 * sqrt(3.0))
    if ts.tile_offset_axis == TileSet.TILE_OFFSET_AXIS_HORIZONTAL:
        return PackedVector2Array([
            Vector2(0, -t),
            Vector2(t, -e),
            Vector2(t, e),
            Vector2(0, t),
            Vector2(-t, e),
            Vector2(-t, -e),
        ])
    
    return PackedVector2Array([
        Vector2(-t, 0),
        Vector2(-e, -t),
        Vector2(e, -t),
        Vector2(t, 0),
        Vector2(e, t),
        Vector2(-e, t),
    ])


## Returns an [Array] of coordinated that neighbor [code]coord[/code] based on [code]peering[/code]
## [Array] of [enum TileSet.CellNeighbor] for a [TileSet].
static func neighboring_coords(tm: TileMapLayer, coord: Vector2i, peerings: Array) -> Array:
    return peerings.map(func(p): return tm.get_neighbor_cell(coord, p))


## Returns an [Array] of coordinates which neighbor the vertex describe by [code]corner[/code]
## (which is of type [enum TileSet.CellNeighbor]) from [code]coord[/code] in [TileSet].
static func associated_vertex_cells(tm: TileMapLayer, coord: Vector2i, corner: int) -> Array:
    # get array of associated peering bits
    if tm.tile_set.tile_shape in [TileSet.TILE_SHAPE_SQUARE, TileSet.TILE_SHAPE_ISOMETRIC]:
        match corner:
            # Square
            TileSet.CELL_NEIGHBOR_BOTTOM_RIGHT_CORNER:
                return neighboring_coords(tm, coord, [0, 3, 4])
            TileSet.CELL_NEIGHBOR_BOTTOM_LEFT_CORNER:
                return neighboring_coords(tm, coord, [4, 7, 8])
            TileSet.CELL_NEIGHBOR_TOP_LEFT_CORNER:
                return neighboring_coords(tm, coord, [8, 11, 12])
            TileSet.CELL_NEIGHBOR_TOP_RIGHT_CORNER:
                return neighboring_coords(tm, coord, [12, 15, 0])
            # Isometric
            TileSet.CELL_NEIGHBOR_RIGHT_CORNER:
                return neighboring_coords(tm, coord, [14, 1, 2])
            TileSet.CELL_NEIGHBOR_BOTTOM_CORNER:
                return neighboring_coords(tm, coord, [2, 5, 6])
            TileSet.CELL_NEIGHBOR_LEFT_CORNER:
                return neighboring_coords(tm, coord, [6, 9, 10])
            TileSet.CELL_NEIGHBOR_TOP_CORNER:
                return neighboring_coords(tm, coord, [10, 13, 14])
    
    if tm.tile_set.tile_offset_axis == TileSet.TILE_OFFSET_AXIS_HORIZONTAL:
        match corner:
            TileSet.CELL_NEIGHBOR_BOTTOM_RIGHT_CORNER:
                return neighboring_coords(tm, coord, [0, 2])
            TileSet.CELL_NEIGHBOR_BOTTOM_CORNER:
                return neighboring_coords(tm, coord, [2, 6])
            TileSet.CELL_NEIGHBOR_BOTTOM_LEFT_CORNER:
                return neighboring_coords(tm, coord, [6, 8])
            TileSet.CELL_NEIGHBOR_TOP_LEFT_CORNER:
                return neighboring_coords(tm, coord, [8, 10])
            TileSet.CELL_NEIGHBOR_TOP_CORNER:
                return neighboring_coords(tm, coord, [10, 14])
            TileSet.CELL_NEIGHBOR_TOP_RIGHT_CORNER:
                return neighboring_coords(tm, coord, [14, 0])
    
    # TileSet.TILE_OFFSET_AXIS_VERTICAL
    match corner:
        TileSet.CELL_NEIGHBOR_RIGHT_CORNER:
            return neighboring_coords(tm, coord, [14, 2])
        TileSet.CELL_NEIGHBOR_BOTTOM_RIGHT_CORNER:
            return neighboring_coords(tm, coord, [2, 4])
        TileSet.CELL_NEIGHBOR_BOTTOM_LEFT_CORNER:
            return neighboring_coords(tm, coord, [4, 6])
        TileSet.CELL_NEIGHBOR_LEFT_CORNER:
            return neighboring_coords(tm, coord, [6, 10])
        TileSet.CELL_NEIGHBOR_TOP_LEFT_CORNER:
            return neighboring_coords(tm, coord, [10, 12])
        TileSet.CELL_NEIGHBOR_TOP_RIGHT_CORNER:
            return neighboring_coords(tm, coord, [12, 14])
    
    return []


## Returns an [Array] of [enum TileSet.CellNeighbor] suitable for flood filling
## an area in [TileSet].
static func cells_adjacent_for_fill(ts: TileSet) -> Array[int]:
    if ts.tile_shape == TileSet.TILE_SHAPE_SQUARE:
        return [0, 4, 8, 12]
    if ts.tile_shape == TileSet.TILE_SHAPE_ISOMETRIC:
        return [2, 6, 10, 14]
    if ts.tile_offset_axis == TileSet.TILE_OFFSET_AXIS_HORIZONTAL:
        return _terrain_peering_horiztonal_tiles
    return _terrain_peering_vertical_tiles


static func peering_bit_after_symmetry(bit: int, altflags: int) -> int:
    if altflags & TileSetAtlasSource.TRANSFORM_TRANSPOSE:
        bit = _terrain_peering_transpose[bit]
    if altflags & TileSetAtlasSource.TRANSFORM_FLIP_H:
        bit = _terrain_peering_hflip[bit]
    if altflags & TileSetAtlasSource.TRANSFORM_FLIP_V:
        bit = _terrain_peering_vflip[bit]
    return bit


static func peering_bits_after_symmetry(dict: Dictionary, altflags: int) -> Dictionary:
    # rearrange dictionary keys based on altflags
    var result := {}
    for k in dict:
        result[peering_bit_after_symmetry(k, altflags)] = dict[k]
    return result
</file>

<file path="addons/better-terrain/BetterTerrainData.gd.uid">
uid://p3fnptjevpot
</file>

<file path="addons/better-terrain/editor/Dock.gd">
@tool
extends Control

signal update_overlay
signal force_show_terrains

# The maximum individual tiles the overlay will draw before shortcutting the display
# To prevent editor lag when drawing large rectangles or filling large areas
const MAX_CANVAS_RENDER_TILES = 1500
const TERRAIN_PROPERTIES_SCENE := preload("res://addons/better-terrain/editor/TerrainProperties.tscn")
const TERRAIN_ENTRY_SCENE := preload("res://addons/better-terrain/editor/TerrainEntry.tscn")
const MIN_ZOOM_SETTING := "editor/better_terrain/min_zoom_amount"
const MAX_ZOOM_SETTING := "editor/better_terrain/max_zoom_amount"


# Buttons
@onready var draw_button: Button = $VBox/Toolbar/Draw
@onready var line_button: Button = $VBox/Toolbar/Line
@onready var rectangle_button: Button = $VBox/Toolbar/Rectangle
@onready var fill_button: Button = $VBox/Toolbar/Fill
@onready var replace_button: Button = $VBox/Toolbar/Replace

@onready var paint_type: Button = $VBox/Toolbar/PaintType
@onready var paint_terrain: Button = $VBox/Toolbar/PaintTerrain
@onready var select_tiles: Button = $VBox/Toolbar/SelectTiles

@onready var paint_symmetry: Button = $VBox/Toolbar/PaintSymmetry
@onready var symmetry_options: OptionButton = $VBox/Toolbar/SymmetryOptions

@onready var shuffle_random: Button = $VBox/Toolbar/ShuffleRandom
@onready var zoom_slider_container: VBoxContainer = $VBox/Toolbar/ZoomContainer

@onready var source_selector: MenuBar = $VBox/Toolbar/Sources
@onready var source_selector_popup: PopupMenu = $VBox/Toolbar/Sources/Sources

@onready var clean_button: Button = $VBox/Toolbar/Clean
@onready var layer_up: Button = $VBox/Toolbar/LayerUp
@onready var layer_down: Button = $VBox/Toolbar/LayerDown
@onready var layer_highlight: Button = $VBox/Toolbar/LayerHighlight
@onready var layer_grid: Button = $VBox/Toolbar/LayerGrid

@onready var grid_mode_button: Button = $VBox/HSplit/Terrains/LowerToolbar/GridMode
@onready var quick_mode_button: Button = $VBox/HSplit/Terrains/LowerToolbar/QuickMode

@onready var edit_tool_buttons: HBoxContainer = $VBox/HSplit/Terrains/LowerToolbar/EditTools
@onready var add_terrain_button: Button = $VBox/HSplit/Terrains/LowerToolbar/EditTools/AddTerrain
@onready var edit_terrain_button: Button = $VBox/HSplit/Terrains/LowerToolbar/EditTools/EditTerrain
@onready var pick_icon_button: Button = $VBox/HSplit/Terrains/LowerToolbar/EditTools/PickIcon
@onready var move_up_button: Button = $VBox/HSplit/Terrains/LowerToolbar/EditTools/MoveUp
@onready var move_down_button: Button = $VBox/HSplit/Terrains/LowerToolbar/EditTools/MoveDown
@onready var remove_terrain_button: Button = $VBox/HSplit/Terrains/LowerToolbar/EditTools/RemoveTerrain

@onready var scroll_container: ScrollContainer = $VBox/HSplit/Terrains/Panel/ScrollContainer
@onready var terrain_list: HFlowContainer = $VBox/HSplit/Terrains/Panel/ScrollContainer/TerrainList
@onready var tile_view: Control = $VBox/HSplit/Panel/ScrollArea/TileView


var selected_entry := -2

var tilemap : TileMapLayer
var tileset : TileSet

var undo_manager : EditorUndoRedoManager
var terrain_undo

var draw_overlay := false
var initial_click : Vector2i
var prev_position : Vector2i
var current_position : Vector2i
var tileset_dirty := false
var zoom_slider : HSlider

enum PaintMode {
    NO_PAINT,
    PAINT,
    ERASE
}

enum PaintAction {
    NO_ACTION,
    LINE,
    RECT
}

enum SourceSelectors {
    ALL = 1000000,
    NONE = 1000001,
}

var paint_mode := PaintMode.NO_PAINT

var paint_action := PaintAction.NO_ACTION


# Called when the node enters the scene tree for the first time.
func _ready() -> void:
    draw_button.icon = get_theme_icon("Edit", "EditorIcons")
    line_button.icon = get_theme_icon("Line", "EditorIcons")
    rectangle_button.icon = get_theme_icon("Rectangle", "EditorIcons")
    fill_button.icon = get_theme_icon("Bucket", "EditorIcons")
    select_tiles.icon = get_theme_icon("ToolSelect", "EditorIcons")
    add_terrain_button.icon = get_theme_icon("Add", "EditorIcons")
    edit_terrain_button.icon = get_theme_icon("Tools", "EditorIcons")
    pick_icon_button.icon = get_theme_icon("ColorPick", "EditorIcons")
    move_up_button.icon = get_theme_icon("ArrowUp", "EditorIcons")
    move_down_button.icon = get_theme_icon("ArrowDown", "EditorIcons")
    remove_terrain_button.icon = get_theme_icon("Remove", "EditorIcons")
    grid_mode_button.icon = get_theme_icon("FileThumbnail", "EditorIcons")
    quick_mode_button.icon = get_theme_icon("GuiVisibilityVisible", "EditorIcons")
    layer_up.icon = get_theme_icon("MoveUp", "EditorIcons")
    layer_down.icon = get_theme_icon("MoveDown", "EditorIcons")
    layer_highlight.icon = get_theme_icon("TileMapHighlightSelected", "EditorIcons")
    layer_grid.icon = get_theme_icon("Grid", "EditorIcons")
    
    select_tiles.button_group.pressed.connect(_on_bit_button_pressed)
    
    terrain_undo = load("res://addons/better-terrain/editor/TerrainUndo.gd").new()
    add_child(terrain_undo)
    tile_view.undo_manager = undo_manager
    tile_view.terrain_undo = terrain_undo
    
    tile_view.paste_occurred.connect(_on_paste_occurred)
    tile_view.change_zoom_level.connect(_on_change_zoom_level)
    tile_view.terrain_updated.connect(_on_terrain_updated)
    
    # Zoom slider is manipulated by settings, make it at runtime
    zoom_slider = HSlider.new()
    zoom_slider.custom_minimum_size = Vector2(100, 0)
    zoom_slider.value_changed.connect(tile_view._on_zoom_value_changed)
    zoom_slider_container.add_child(zoom_slider)
    
    # Init settings if needed
    if !ProjectSettings.has_setting(MIN_ZOOM_SETTING):
        ProjectSettings.set(MIN_ZOOM_SETTING, 1.0)
    ProjectSettings.add_property_info({
        "name": MIN_ZOOM_SETTING,
        "type": TYPE_FLOAT,
        "hint": PROPERTY_HINT_RANGE,
        "hint_string": "0.1,1.0,0.1"
    })
    ProjectSettings.set_initial_value(MIN_ZOOM_SETTING, 1.0)
    ProjectSettings.set_as_basic(MIN_ZOOM_SETTING, true)
    
    if !ProjectSettings.has_setting(MAX_ZOOM_SETTING):
        ProjectSettings.set(MAX_ZOOM_SETTING, 8.0)
    ProjectSettings.add_property_info({
        "name": MAX_ZOOM_SETTING,
        "type": TYPE_FLOAT,
        "hint": PROPERTY_HINT_RANGE,
        "hint_string": "2.0,32.0,1.0"
    })
    ProjectSettings.set_initial_value(MAX_ZOOM_SETTING, 8.0)
    ProjectSettings.set_as_basic(MAX_ZOOM_SETTING, true)
    ProjectSettings.set_order(MAX_ZOOM_SETTING, ProjectSettings.get_order(MIN_ZOOM_SETTING) + 1)
    
    ProjectSettings.settings_changed.connect(_on_adjust_settings)
    _on_adjust_settings()
    zoom_slider.value = 1.0


func _process(delta):
    scroll_container.scroll_horizontal = 0


func _on_adjust_settings():
    zoom_slider.min_value = ProjectSettings.get_setting(MIN_ZOOM_SETTING, 1.0)
    zoom_slider.max_value = ProjectSettings.get_setting(MAX_ZOOM_SETTING, 8.0)
    zoom_slider.step = (zoom_slider.max_value - zoom_slider.min_value) / 100.0


func _get_fill_cells(target: Vector2i) -> Array:
    var pick := BetterTerrain.get_cell(tilemap, target)
    var bounds := tilemap.get_used_rect()
    var neighbors = BetterTerrain.data.cells_adjacent_for_fill(tileset)
    
    # No sets yet, so use a dictionary
    var checked := {}
    var pending := [target]
    var goal := []
    
    while !pending.is_empty():
        var p = pending.pop_front()
        if checked.has(p):
            continue
        checked[p] = true
        if !bounds.has_point(p) or BetterTerrain.get_cell(tilemap, p) != pick:
            continue
        
        goal.append(p)
        pending.append_array(BetterTerrain.data.neighboring_coords(tilemap, p, neighbors))
    
    return goal


func tiles_about_to_change() -> void:
    if tileset and tileset.changed.is_connected(queue_tiles_changed):
        tileset.changed.disconnect(queue_tiles_changed)


func tiles_changed() -> void:
    # ensure up to date
    BetterTerrain._update_terrain_data(tileset)
    
    # clear terrains
    for c in terrain_list.get_children():
        terrain_list.remove_child(c)
        c.queue_free()
    
    # load terrains from tileset
    var terrain_count := BetterTerrain.terrain_count(tileset)
    var item_count = terrain_count + 1
    for i in terrain_count:
        var terrain := BetterTerrain.get_terrain(tileset, i)
        if i >= terrain_list.get_child_count():
            add_terrain_entry(terrain, i)
    
    if item_count > terrain_list.get_child_count():
        var terrain := BetterTerrain.get_terrain(tileset, BetterTerrain.TileCategory.EMPTY)
        if terrain.valid:
            add_terrain_entry(terrain, item_count - 1)
    
    while item_count < terrain_list.get_child_count():
        var child = terrain_list.get_child(terrain_list.get_child_count() - 1)
        terrain_list.remove_child(child)
        child.free()
    
    source_selector_popup.clear()
    source_selector_popup.add_item("All", SourceSelectors.ALL)
    source_selector_popup.add_item("None", SourceSelectors.NONE)
    var source_count = tileset.get_source_count() if tileset else 0
    for s in source_count:
        var source_id = tileset.get_source_id(s)
        var source := tileset.get_source(source_id)
        if !(source is TileSetAtlasSource):
            continue
        
        var name := source.resource_name
        if name.is_empty():
            var texture := (source as TileSetAtlasSource).texture
            var texture_name := texture.resource_name if texture else ""
            if !texture_name.is_empty():
                name = texture_name
            else:
                var texture_path := texture.resource_path if texture else ""
                if !texture_path.is_empty():
                    name = texture_path.get_file()
        
        if !name.is_empty():
            name += " "
        name += " (ID: %d)" % source_id
        
        source_selector_popup.add_check_item(name, source_id)
        source_selector_popup.set_item_checked(source_selector_popup.get_item_index(source_id), true)
    source_selector.visible = source_selector_popup.item_count > 3 # All, None and more than one source
    
    update_tile_view_paint()
    tile_view.refresh_tileset(tileset)
    
    if tileset and !tileset.changed.is_connected(queue_tiles_changed):
        tileset.changed.connect(queue_tiles_changed)
    
    clean_button.visible = BetterTerrain._has_invalid_peering_types(tileset)
    
    tileset_dirty = false
    _on_grid_mode_pressed()
    _on_quick_mode_pressed()


func about_to_be_visible(visible: bool) -> void:
    if !visible:
        return
    
    if tileset != tilemap.tile_set:
        tiles_about_to_change()
        tileset = tilemap.tile_set
        tiles_changed()
    
    var settings := EditorInterface.get_editor_settings()
    layer_highlight.set_pressed_no_signal(settings.get_setting("editors/tiles_editor/highlight_selected_layer"))
    layer_grid.set_pressed_no_signal(settings.get_setting("editors/tiles_editor/display_grid"))


func queue_tiles_changed() -> void:
    # Bring terrain data up to date with complex tileset changes
    if !tileset or tileset_dirty:
        return
    
    tileset_dirty = true
    tiles_changed.call_deferred()


func _on_entry_select(index:int):
    selected_entry = index
    if selected_entry >= BetterTerrain.terrain_count(tileset):
        selected_entry = BetterTerrain.TileCategory.EMPTY
    for i in range(terrain_list.get_child_count()):
        if i != index:
            terrain_list.get_child(i).set_selected(false)
    update_tile_view_paint()


func _on_clean_pressed() -> void:
    var confirmed := [false]
    var popup := ConfirmationDialog.new()
    popup.dialog_text = tr("Tile set changes have caused terrain to become invalid. Remove invalid terrain data?")
    popup.dialog_hide_on_ok = false
    popup.confirmed.connect(func():
        confirmed[0] = true
        popup.hide()
    )
    EditorInterface.popup_dialog_centered(popup)
    await popup.visibility_changed
    popup.queue_free()
    
    if confirmed[0]:
        undo_manager.create_action("Clean invalid terrain peering data", UndoRedo.MERGE_DISABLE, tileset)
        undo_manager.add_do_method(BetterTerrain, &"_clear_invalid_peering_types", tileset)
        undo_manager.add_do_method(self, &"tiles_changed")
        terrain_undo.create_peering_restore_point(undo_manager, tileset)
        undo_manager.add_undo_method(self, &"tiles_changed")
        undo_manager.commit_action()


func _on_grid_mode_pressed() -> void:
    for c in terrain_list.get_children():
        c.grid_mode = grid_mode_button.button_pressed
        c.update_style()


func _on_quick_mode_pressed() -> void:
    edit_tool_buttons.visible = !quick_mode_button.button_pressed
    for c in terrain_list.get_children():
        c.visible = !quick_mode_button.button_pressed or c.terrain.type in [BetterTerrain.TerrainType.MATCH_TILES, BetterTerrain.TerrainType.MATCH_VERTICES]


func update_tile_view_paint() -> void:
    tile_view.paint = selected_entry
    tile_view.queue_redraw()
    
    var editable = tile_view.paint != BetterTerrain.TileCategory.EMPTY
    edit_terrain_button.disabled = !editable
    move_up_button.disabled = !editable or tile_view.paint == 0
    move_down_button.disabled = !editable or tile_view.paint == BetterTerrain.terrain_count(tileset) - 1
    remove_terrain_button.disabled = !editable
    pick_icon_button.disabled = !editable


func _on_add_terrain_pressed() -> void:
    if !tileset:
        return
    
    var popup := TERRAIN_PROPERTIES_SCENE.instantiate()
    popup.set_category_data(BetterTerrain.get_terrain_categories(tileset))
    popup.terrain_name = "New terrain"
    popup.terrain_color = Color.from_hsv(randf(), 0.3 + 0.7 * randf(), 0.6 + 0.4 * randf())
    popup.terrain_icon = ""
    popup.terrain_type = 0
    EditorInterface.popup_dialog_centered(popup)
    await popup.visibility_changed
    if popup.accepted:
        undo_manager.create_action("Add terrain type", UndoRedo.MERGE_DISABLE, tileset)
        undo_manager.add_do_method(self, &"perform_add_terrain", popup.terrain_name, popup.terrain_color, popup.terrain_type, popup.terrain_categories, {path = popup.terrain_icon})
        undo_manager.add_undo_method(self, &"perform_remove_terrain", terrain_list.get_child_count() - 1)
        undo_manager.commit_action()
    popup.queue_free()


func _on_edit_terrain_pressed() -> void:
    if !tileset:
        return
    
    if selected_entry < 0:
        return
    
    var t := BetterTerrain.get_terrain(tileset, selected_entry)
    var categories = BetterTerrain.get_terrain_categories(tileset)
    categories = categories.filter(func(x): return x.id != selected_entry)
    
    var popup := TERRAIN_PROPERTIES_SCENE.instantiate()
    popup.set_category_data(categories)
    
    t.icon = t.icon.duplicate()
    
    popup.terrain_name = t.name
    popup.terrain_type = t.type
    popup.terrain_color = t.color
    if t.has("icon") and t.icon.has("path"):
        popup.terrain_icon = t.icon.path
    popup.terrain_categories = t.categories
    EditorInterface.popup_dialog_centered(popup)
    await popup.visibility_changed
    if popup.accepted:
        undo_manager.create_action("Edit terrain details", UndoRedo.MERGE_DISABLE, tileset)
        undo_manager.add_do_method(self, &"perform_edit_terrain", selected_entry, popup.terrain_name, popup.terrain_color, popup.terrain_type, popup.terrain_categories, {path = popup.terrain_icon})
        undo_manager.add_undo_method(self, &"perform_edit_terrain", selected_entry, t.name, t.color, t.type, t.categories, t.icon)
        if t.type != popup.terrain_type:
            terrain_undo.create_terrain_type_restore_point(undo_manager, tileset)
            terrain_undo.create_peering_restore_point_specific(undo_manager, tileset, selected_entry)
        undo_manager.commit_action()
    popup.queue_free()


func _on_pick_icon_pressed():
    if selected_entry < 0:
        return
    tile_view.pick_icon_terrain = selected_entry


func _on_pick_icon_focus_exited():
    tile_view.pick_icon_terrain_cancel = true
    pick_icon_button.button_pressed = false


func _on_move_pressed(down: bool) -> void:
    if !tileset:
        return
    
    if selected_entry < 0:
        return
    
    var index1 = selected_entry
    var index2 = index1 + (1 if down else -1)
    if index2 < 0 or index2 >= terrain_list.get_child_count():
        return
    
    undo_manager.create_action("Reorder terrains", UndoRedo.MERGE_DISABLE, tileset)
    undo_manager.add_do_method(self, &"perform_swap_terrain", index1, index2)
    undo_manager.add_undo_method(self, &"perform_swap_terrain", index1, index2)
    undo_manager.commit_action()


func _on_remove_terrain_pressed() -> void:
    if !tileset:
        return
    
    if selected_entry < 0:
        return
    
    # store confirmation in array to pass by ref
    var t := BetterTerrain.get_terrain(tileset, selected_entry)
    var confirmed := [false]
    var popup := ConfirmationDialog.new()
    popup.dialog_text = tr("Are you sure you want to remove {0}?").format([t.name])
    popup.dialog_hide_on_ok = false
    popup.confirmed.connect(func():
        confirmed[0] = true
        popup.hide()
    )
    EditorInterface.popup_dialog_centered(popup)
    await popup.visibility_changed
    popup.queue_free()
    
    if confirmed[0]:
        undo_manager.create_action("Remove terrain type", UndoRedo.MERGE_DISABLE, tileset)
        undo_manager.add_do_method(self, &"perform_remove_terrain", selected_entry)
        undo_manager.add_undo_method(self, &"perform_add_terrain", t.name, t.color, t.type, t.categories, t.icon)
        for n in range(terrain_list.get_child_count() - 2, selected_entry, -1):
            undo_manager.add_undo_method(self, &"perform_swap_terrain", n, n - 1)
        if t.type == BetterTerrain.TerrainType.CATEGORY:
            terrain_undo.create_terrain_type_restore_point(undo_manager, tileset)
        terrain_undo.create_peering_restore_point_specific(undo_manager, tileset, selected_entry)
        undo_manager.commit_action()


func add_terrain_entry(terrain:Dictionary, index:int = -1):
    if index < 0:
        index = terrain_list.get_child_count()
    
    var entry = TERRAIN_ENTRY_SCENE.instantiate()
    entry.tileset = tileset
    entry.terrain = terrain
    entry.grid_mode = grid_mode_button.button_pressed
    entry.select.connect(_on_entry_select)
    
    terrain_list.add_child(entry)
    terrain_list.move_child(entry, index)


func remove_terrain_entry(index: int):
    terrain_list.get_child(index).free()
    for i in range(index, terrain_list.get_child_count()):
        var child = terrain_list.get_child(i)
        child.terrain = BetterTerrain.get_terrain(tileset, i)
        child.update()


func perform_add_terrain(name: String, color: Color, type: int, categories: Array, icon:Dictionary = {}) -> void:
    if BetterTerrain.add_terrain(tileset, name, color, type, categories, icon):
        var index = BetterTerrain.terrain_count(tileset) - 1
        var terrain = BetterTerrain.get_terrain(tileset, index)
        add_terrain_entry(terrain, index)


func perform_remove_terrain(index: int) -> void:
    if index >= BetterTerrain.terrain_count(tileset):
        return
    if BetterTerrain.remove_terrain(tileset, index):
        remove_terrain_entry(index)
        update_tile_view_paint()


func perform_swap_terrain(index1: int, index2: int) -> void:
    var lower := min(index1, index2)
    var higher := max(index1, index2)
    if lower >= terrain_list.get_child_count() or higher >= terrain_list.get_child_count():
        return
    var item1 = terrain_list.get_child(lower)
    var item2 = terrain_list.get_child(higher)
    if BetterTerrain.swap_terrains(tileset, lower, higher):
        terrain_list.move_child(item1, higher)
        item1.terrain = BetterTerrain.get_terrain(tileset, higher)
        item1.update()
        item2.terrain = BetterTerrain.get_terrain(tileset, lower)
        item2.update()
        selected_entry = index2
        terrain_list.get_child(index2).set_selected(true)
        update_tile_view_paint()


func perform_edit_terrain(index: int, name: String, color: Color, type: int, categories: Array, icon: Dictionary = {}) -> void:
    if index >= terrain_list.get_child_count():
        return
    var entry = terrain_list.get_child(index)
    # don't overwrite empty icon
    var valid_icon = icon
    if icon.has("path") and icon.path.is_empty():
        var terrain = BetterTerrain.get_terrain(tileset, index)
        valid_icon = terrain.icon
    if BetterTerrain.set_terrain(tileset, index, name, color, type, categories, valid_icon):
        entry.terrain = BetterTerrain.get_terrain(tileset, index)
        entry.update()
        tile_view.queue_redraw()


func _on_shuffle_random_pressed():
    BetterTerrain.use_seed = !shuffle_random.button_pressed 


func _on_bit_button_pressed(button: BaseButton) -> void:
    match select_tiles.button_group.get_pressed_button():
        select_tiles: tile_view.paint_mode = tile_view.PaintMode.SELECT
        paint_type: tile_view.paint_mode = tile_view.PaintMode.PAINT_TYPE
        paint_terrain: tile_view.paint_mode = tile_view.PaintMode.PAINT_PEERING
        paint_symmetry: tile_view.paint_mode = tile_view.PaintMode.PAINT_SYMMETRY
        _: tile_view.paint_mode = tile_view.PaintMode.NO_PAINT
    tile_view.queue_redraw()
    
    symmetry_options.visible = paint_symmetry.button_pressed


func _on_symmetry_selected(index):
    tile_view.paint_symmetry = index


func _on_paste_occurred():
    select_tiles.button_pressed = true


func _on_change_zoom_level(value):
    zoom_slider.value = value


func _on_terrain_updated(index):
    var entry = terrain_list.get_child(index)
    entry.terrain = BetterTerrain.get_terrain(tileset, index)
    entry.update()


func canvas_tilemap_transform() -> Transform2D:
    var transform := tilemap.get_viewport_transform() * tilemap.global_transform
    
    # Handle subviewport
    var editor_viewport := EditorInterface.get_editor_viewport_2d()
    if tilemap.get_viewport() != editor_viewport:
        var container = tilemap.get_viewport().get_parent() as SubViewportContainer
        if container:
            transform = editor_viewport.global_canvas_transform * container.get_transform() * transform
    
    return transform


func canvas_draw(overlay: Control) -> void:
    if !draw_overlay:
        return
    
    if selected_entry < 0:
        return
    
    var type = selected_entry
    var terrain := BetterTerrain.get_terrain(tileset, type)
    if !terrain.valid:
        return
    
    var tiles := []
    var transform := canvas_tilemap_transform()
    
    if paint_action == PaintAction.RECT and paint_mode != PaintMode.NO_PAINT:
        var area := Rect2i(initial_click, current_position - initial_click).abs()

        # Shortcut fill for large areas
        if area.size.x > 1 and area.size.y > 1 and area.size.x * area.size.y > MAX_CANVAS_RENDER_TILES:
            var shortcut := PackedVector2Array([
                tilemap.map_to_local(area.position),
                tilemap.map_to_local(Vector2i(area.end.x, area.position.y)),
                tilemap.map_to_local(area.end),
                tilemap.map_to_local(Vector2i(area.position.x, area.end.y))
            ])
            overlay.draw_colored_polygon(transform * shortcut, Color(terrain.color, 0.5))
            return
        
        for y in range(area.position.y, area.end.y + 1):
            for x in range(area.position.x, area.end.x + 1):
                tiles.append(Vector2i(x, y))
    elif paint_action == PaintAction.LINE and paint_mode != PaintMode.NO_PAINT:
        var cells := _get_tileset_line(initial_click, current_position, tileset)
        var shape = BetterTerrain.data.cell_polygon(tileset)
        for c in cells:
            var tile_transform := Transform2D(0.0, tilemap.tile_set.tile_size, 0.0, tilemap.map_to_local(c))
            overlay.draw_colored_polygon(transform * tile_transform * shape, Color(terrain.color, 0.5))
    elif fill_button.button_pressed:
        tiles = _get_fill_cells(current_position)
        if tiles.size() > MAX_CANVAS_RENDER_TILES:
            tiles.resize(MAX_CANVAS_RENDER_TILES)
    else:
        tiles.append(current_position)
    
    var shape = BetterTerrain.data.cell_polygon(tileset)
    for t in tiles:
        var tile_transform := Transform2D(0.0, tilemap.tile_set.tile_size, 0.0, tilemap.map_to_local(t))
        overlay.draw_colored_polygon(transform * tile_transform * shape, Color(terrain.color, 0.5))


func canvas_input(event: InputEvent) -> bool:
    if selected_entry < 0:
        return false
    
    draw_overlay = true
    if event is InputEventMouseMotion:
        var tr := canvas_tilemap_transform()
        var pos := tr.affine_inverse() * Vector2(event.position)
        var event_position := tilemap.local_to_map(pos)
        prev_position = current_position
        if event_position == current_position:
            return false
        current_position = event_position
        update_overlay.emit()
    
    var replace_mode = replace_button.button_pressed
    
    var released : bool = event is InputEventMouseButton and !event.pressed
    if released:
        terrain_undo.finish_action()
        var type = selected_entry
        if paint_action == PaintAction.RECT and paint_mode != PaintMode.NO_PAINT:
            var area := Rect2i(initial_click, current_position - initial_click).abs()
            # Fill from initial_target to target
            undo_manager.create_action(tr("Draw terrain rectangle"), UndoRedo.MERGE_DISABLE, tilemap)
            for y in range(area.position.y, area.end.y + 1):
                for x in range(area.position.x, area.end.x + 1):
                    var coord := Vector2i(x, y)
                    if paint_mode == PaintMode.PAINT:
                        if replace_mode:
                            undo_manager.add_do_method(BetterTerrain, &"replace_cell", tilemap, coord, type)
                        else:
                            undo_manager.add_do_method(BetterTerrain, &"set_cell", tilemap, coord, type)
                    else:
                        undo_manager.add_do_method(tilemap, &"erase_cell", coord)
            
            undo_manager.add_do_method(BetterTerrain, &"update_terrain_area", tilemap, area)
            terrain_undo.create_tile_restore_point_area(undo_manager, tilemap, area)
            undo_manager.commit_action()
            update_overlay.emit()
        elif paint_action == PaintAction.LINE and paint_mode != PaintMode.NO_PAINT:
            undo_manager.create_action(tr("Draw terrain line"), UndoRedo.MERGE_DISABLE, tilemap)
            var cells := _get_tileset_line(initial_click, current_position, tileset)
            if paint_mode == PaintMode.PAINT:
                if replace_mode:
                    undo_manager.add_do_method(BetterTerrain, &"replace_cells", tilemap, cells, type)
                else:
                    undo_manager.add_do_method(BetterTerrain, &"set_cells", tilemap, cells, type)
            elif paint_mode == PaintMode.ERASE:
                for c in cells:
                    undo_manager.add_do_method(tilemap, &"erase_cell", c)
            undo_manager.add_do_method(BetterTerrain, &"update_terrain_cells", tilemap, cells)
            terrain_undo.create_tile_restore_point(undo_manager, tilemap, cells)
            undo_manager.commit_action()
            update_overlay.emit()
        
        paint_mode = PaintMode.NO_PAINT
        return true
    
    var clicked : bool = event is InputEventMouseButton and event.pressed
    if clicked:
        paint_mode = PaintMode.NO_PAINT
        
        if (event.is_command_or_control_pressed() and !event.shift_pressed):
            var pick = BetterTerrain.get_cell(tilemap, current_position)
            if pick >= 0:
                terrain_list.get_children()[pick]._on_focus_entered()
                #_on_entry_select(pick)
            return true
        
        paint_action = PaintAction.NO_ACTION
        if rectangle_button.button_pressed:
            paint_action = PaintAction.RECT
        elif line_button.button_pressed:
            paint_action = PaintAction.LINE
        elif draw_button.button_pressed:
            if event.shift_pressed:
                paint_action = PaintAction.LINE
                if event.is_command_or_control_pressed():
                    paint_action = PaintAction.RECT
        
        if event.button_index == MOUSE_BUTTON_LEFT:
            paint_mode = PaintMode.PAINT
        elif event.button_index == MOUSE_BUTTON_RIGHT:
            paint_mode = PaintMode.ERASE
        else:
            return false
    
    if (clicked or event is InputEventMouseMotion) and paint_mode != PaintMode.NO_PAINT:
        if clicked:
            initial_click = current_position
            terrain_undo.action_index += 1
            terrain_undo.action_count = 0
        var type = selected_entry
        
        if paint_action == PaintAction.LINE or paint_action == PaintAction.RECT:
            # if painting as line, execution happens on release. 
            # prevent other painting actions from running.
            pass
        elif draw_button.button_pressed:
            undo_manager.create_action(tr("Draw terrain") + str(terrain_undo.action_index), UndoRedo.MERGE_ALL, tilemap, true)
            var cells := _get_tileset_line(prev_position, current_position, tileset)
            if paint_mode == PaintMode.PAINT:
                if replace_mode:
                    terrain_undo.add_do_method(undo_manager, BetterTerrain, &"replace_cells", [tilemap, cells, type])
                else:
                    terrain_undo.add_do_method(undo_manager, BetterTerrain, &"set_cells", [tilemap, cells, type])
            elif paint_mode == PaintMode.ERASE:
                for c in cells:
                    terrain_undo.add_do_method(undo_manager, tilemap, &"erase_cell", [c])
            terrain_undo.add_do_method(undo_manager, BetterTerrain, &"update_terrain_cells", [tilemap, cells])
            terrain_undo.create_tile_restore_point(undo_manager, tilemap, cells)
            undo_manager.commit_action()
            terrain_undo.action_count += 1
        elif fill_button.button_pressed:
            var cells := _get_fill_cells(current_position)
            undo_manager.create_action(tr("Fill terrain"), UndoRedo.MERGE_DISABLE, tilemap)
            if paint_mode == PaintMode.PAINT:
                if replace_mode:
                    undo_manager.add_do_method(BetterTerrain, &"replace_cells", tilemap, cells, type)
                else:
                    undo_manager.add_do_method(BetterTerrain, &"set_cells", tilemap, cells, type)
            elif paint_mode == PaintMode.ERASE:
                for c in cells:
                    undo_manager.add_do_method(tilemap, &"erase_cell", c)
            undo_manager.add_do_method(BetterTerrain, &"update_terrain_cells", tilemap, cells)
            terrain_undo.create_tile_restore_point(undo_manager, tilemap, cells)
            undo_manager.commit_action()
        
        update_overlay.emit()
        return true
    
    return false


func canvas_mouse_exit() -> void:
    draw_overlay = false
    update_overlay.emit()


func _shortcut_input(event) -> void:
    if event is InputEventKey:
        if event.keycode == KEY_C and (event.is_command_or_control_pressed() and not event.echo):
            get_viewport().set_input_as_handled()
            tile_view.copy_selection()
        if event.keycode == KEY_V and (event.is_command_or_control_pressed() and not event.echo):
            get_viewport().set_input_as_handled()
            tile_view.paste_selection()


## bresenham alg ported from Geometry2D::bresenham_line()
func _get_line(from:Vector2i, to:Vector2i) -> Array[Vector2i]:
    if from == to:
        return [to]
    
    var points:Array[Vector2i] = []
    var delta := (to - from).abs() * 2
    var step := (to - from).sign()
    var current := from
    
    if delta.x > delta.y:
        var err:int = delta.x / 2
        while current.x != to.x:
            points.push_back(current);
            err -= delta.y
            if err < 0:
                current.y += step.y
                err += delta.x
            current.x += step.x
    else:
        var err:int = delta.y / 2
        while current.y != to.y:
            points.push_back(current)
            err -= delta.x
            if err < 0:
                current.x += step.x
                err += delta.y
            current.y += step.y
    
    points.push_back(current);
    return points;


## half-offset bresenham alg ported from TileMapEditor::get_line
func _get_tileset_line(from:Vector2i, to:Vector2i, tileset:TileSet) -> Array[Vector2i]:
    if tileset.tile_shape == TileSet.TILE_SHAPE_SQUARE:
        return _get_line(from, to)
    
    var points:Array[Vector2i] = []
    
    var transposed := tileset.get_tile_offset_axis() == TileSet.TILE_OFFSET_AXIS_VERTICAL
    if transposed:
        from = Vector2i(from.y, from.x)
        to = Vector2i(to.y, to.x)

    var delta:Vector2i = to - from
    delta = Vector2i(2 * delta.x + abs(posmod(to.y, 2)) - abs(posmod(from.y, 2)), delta.y)
    var sign:Vector2i = delta.sign()

    var current := from;
    points.push_back(Vector2i(current.y, current.x) if transposed else current)

    var err := 0
    if abs(delta.y) < abs(delta.x):
        var err_step:Vector2i = 3 * delta.abs()
        while current != to:
            err += err_step.y
            if err > abs(delta.x):
                if sign.x == 0:
                    current += Vector2i(sign.y, 0)
                else:
                    current += Vector2i(sign.x if bool(current.y % 2) != (sign.x < 0) else 0, sign.y)
                err -= err_step.x
            else:
                current += Vector2i(sign.x, 0)
                err += err_step.y
            points.push_back(Vector2i(current.y, current.x) if transposed else current)
    else:
        var err_step:Vector2i = delta.abs()
        while current != to:
            err += err_step.x
            if err > 0:
                if sign.x == 0:
                    current += Vector2i(0, sign.y)
                else:
                    current += Vector2i(sign.x if bool(current.y % 2) != (sign.x < 0) else 0, sign.y)
                err -= err_step.y;
            else:
                if sign.x == 0:
                    current += Vector2i(0, sign.y)
                else:
                    current += Vector2i(-sign.x if bool(current.y % 2) != (sign.x > 0) else 0, sign.y)
                err += err_step.y
            points.push_back(Vector2i(current.y, current.x) if transposed else current)
    
    return points


func _on_terrain_enable_id_pressed(id):
    if id in [SourceSelectors.ALL, SourceSelectors.NONE]:
        for i in source_selector_popup.item_count:
            if source_selector_popup.is_item_checkable(i):
                source_selector_popup.set_item_checked(i, id == SourceSelectors.ALL)
    else:
        var index = source_selector_popup.get_item_index(id)
        var checked = source_selector_popup.is_item_checked(index)
        source_selector_popup.set_item_checked(index, !checked)
    
    var disabled_sources : Array[int]
    for i in source_selector_popup.item_count:
        if source_selector_popup.is_item_checkable(i) and !source_selector_popup.is_item_checked(i):
            disabled_sources.append(source_selector_popup.get_item_id(i))
    tile_view.disabled_sources = disabled_sources


func corresponding_tilemap_editor_button(similar: Button) -> Button:
    var editors = EditorInterface.get_base_control().find_children("*", "TileMapLayerEditor", true, false)
    var tile_map_layer_editor = editors[0]
    var buttons = tile_map_layer_editor.find_children("*", "Button", true, false)
    for button: Button in buttons:
        if button.icon == similar.icon:
            return button
    return null


func _on_layer_up_or_down_pressed(button: Button) -> void:
    var matching_button = corresponding_tilemap_editor_button(button)
    if !matching_button:
        return
    
    # Major hack, to reduce flicker hide the tileset editor briefly
    var editors = EditorInterface.get_base_control().find_children("*", "TileSetEditor", true, false)
    var tile_set_editor = editors[0]
    
    matching_button.pressed.emit()
    tile_set_editor.modulate = Color.TRANSPARENT
    await get_tree().process_frame
    await get_tree().process_frame
    force_show_terrains.emit()
    tile_set_editor.modulate = Color.WHITE



func _on_layer_up_pressed() -> void:
    _on_layer_up_or_down_pressed(layer_up)


func _on_layer_down_pressed() -> void:
    _on_layer_up_or_down_pressed(layer_down)


func _on_layer_highlight_toggled(toggled: bool) -> void:
    var settings = EditorInterface.get_editor_settings()
    settings.set_setting("editors/tiles_editor/highlight_selected_layer", toggled)
    
    var highlight = corresponding_tilemap_editor_button(layer_highlight)
    if highlight:
        highlight.toggled.emit(toggled)


func _on_layer_grid_toggled(toggled: bool) -> void:
    var settings = EditorInterface.get_editor_settings()
    settings.set_setting("editors/tiles_editor/display_grid", toggled)
    
    var grid = corresponding_tilemap_editor_button(layer_grid)
    if grid:
        grid.toggled.emit(toggled)
</file>

<file path="addons/better-terrain/editor/Dock.gd.uid">
uid://camybj2f0l5l8
</file>

<file path="addons/better-terrain/editor/Dock.tscn">
[gd_scene load_steps=33 format=3 uid="uid://de8b6h6ieal7r"]

[ext_resource type="Script" path="res://addons/better-terrain/editor/Dock.gd" id="1_raoha"]
[ext_resource type="Texture2D" uid="uid://c6lxq2y7mpb18" path="res://addons/better-terrain/icons/EditType.svg" id="2_cpm2t"]
[ext_resource type="Texture2D" uid="uid://y3xy6qdckht6" path="res://addons/better-terrain/icons/Replace.svg" id="2_fvmt6"]
[ext_resource type="Texture2D" uid="uid://bo2cjv08jkvf8" path="res://addons/better-terrain/icons/EditTerrain.svg" id="3_pqb1p"]
[ext_resource type="Texture2D" uid="uid://b0es228gfcykd" path="res://addons/better-terrain/icons/Warning.svg" id="4_6ahwe"]
[ext_resource type="Script" path="res://addons/better-terrain/editor/TileView.gd" id="4_nqppq"]
[ext_resource type="Texture2D" uid="uid://co6gwwmog0pjy" path="res://addons/better-terrain/icons/EditSymmetry.svg" id="5_kfjwu"]
[ext_resource type="Texture2D" uid="uid://cs4mdmluiydj6" path="res://addons/better-terrain/icons/ShuffleRandom.svg" id="5_n3owo"]
[ext_resource type="Texture2D" uid="uid://5hm3bfj3dvej" path="res://addons/better-terrain/icons/SymmetryMirror.svg" id="6_mofuh"]
[ext_resource type="Texture2D" uid="uid://dqmc1jp56or8m" path="res://addons/better-terrain/icons/SymmetryFlip.svg" id="7_ojxs0"]
[ext_resource type="Texture2D" uid="uid://cxoewno1cefua" path="res://addons/better-terrain/icons/SymmetryReflect.svg" id="8_8dhyg"]
[ext_resource type="Texture2D" uid="uid://baxhjy28r1iqj" path="res://addons/better-terrain/icons/SymmetryRotateClockwise.svg" id="9_tq76a"]
[ext_resource type="Texture2D" uid="uid://csbwdkr6bc2db" path="res://addons/better-terrain/icons/SymmetryRotateCounterClockwise.svg" id="10_o5h1f"]
[ext_resource type="Texture2D" uid="uid://8mcycyl3e66r" path="res://addons/better-terrain/icons/SymmetryRotate180.svg" id="11_m6syp"]
[ext_resource type="Texture2D" uid="uid://b7fx4mk18lmls" path="res://addons/better-terrain/icons/SymmetryRotateAll.svg" id="12_11vru"]
[ext_resource type="Texture2D" uid="uid://cyjra4g05dwh" path="res://addons/better-terrain/icons/SymmetryAll.svg" id="13_lp5m2"]

[sub_resource type="ButtonGroup" id="ButtonGroup_aon7c"]

[sub_resource type="InputEventKey" id="InputEventKey_saph6"]
device = -1
keycode = 68
unicode = 100

[sub_resource type="Shortcut" id="Shortcut_3k2al"]
events = [SubResource("InputEventKey_saph6")]

[sub_resource type="Image" id="Image_3r1gs"]
data = {
"data": PackedByteArray(255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 255, 255, 0, 255, 94, 94, 127, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 255, 255, 0, 255, 93, 93, 255, 255, 94, 94, 127, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 255, 255, 0, 255, 93, 93, 255, 255, 93, 93, 255, 255, 94, 94, 127, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 255, 255, 0, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 94, 94, 127, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 93, 93, 231, 255, 94, 94, 54, 255, 94, 94, 57, 255, 93, 93, 233, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 231, 255, 94, 94, 54, 255, 94, 94, 57, 255, 93, 93, 233, 255, 93, 93, 255, 255, 93, 93, 255, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 97, 97, 42, 255, 255, 255, 0, 255, 255, 255, 0, 255, 97, 97, 42, 255, 93, 93, 233, 255, 93, 93, 232, 255, 93, 93, 41, 255, 255, 255, 0, 255, 255, 255, 0, 255, 97, 97, 42, 255, 93, 93, 233, 255, 93, 93, 232, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 96, 96, 45, 255, 93, 93, 44, 255, 255, 255, 0, 255, 97, 97, 42, 255, 97, 97, 42, 255, 255, 255, 0, 255, 96, 96, 45, 255, 93, 93, 44, 255, 255, 255, 0, 255, 97, 97, 42, 255, 97, 97, 42, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 96, 96, 45, 255, 93, 93, 235, 255, 94, 94, 234, 255, 95, 95, 43, 255, 255, 255, 0, 255, 255, 255, 0, 255, 96, 96, 45, 255, 93, 93, 235, 255, 94, 94, 234, 255, 95, 95, 43, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 93, 93, 235, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 233, 255, 95, 95, 59, 255, 96, 96, 61, 255, 93, 93, 235, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 233, 255, 95, 95, 59, 255, 96, 96, 61, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 93, 93, 255, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0),
"format": "RGBA8",
"height": 16,
"mipmaps": false,
"width": 16
}

[sub_resource type="ImageTexture" id="ImageTexture_v6msm"]
image = SubResource("Image_3r1gs")

[sub_resource type="InputEventKey" id="InputEventKey_q1v0d"]
device = -1
keycode = 76
unicode = 108

[sub_resource type="Shortcut" id="Shortcut_wc6bu"]
events = [SubResource("InputEventKey_q1v0d")]

[sub_resource type="InputEventKey" id="InputEventKey_68n3h"]
device = -1
keycode = 82
unicode = 114

[sub_resource type="InputEventKey" id="InputEventKey_qcu1e"]
device = -1
keycode = 67
unicode = 99

[sub_resource type="Shortcut" id="Shortcut_tcjet"]
events = [SubResource("InputEventKey_68n3h"), SubResource("InputEventKey_qcu1e")]

[sub_resource type="InputEventKey" id="InputEventKey_grxy4"]
device = -1
keycode = 66
unicode = 98

[sub_resource type="Shortcut" id="Shortcut_46fac"]
events = [SubResource("InputEventKey_grxy4")]

[sub_resource type="InputEventKey" id="InputEventKey_xd61m"]
device = -1
keycode = 80
unicode = 112

[sub_resource type="Shortcut" id="Shortcut_uwwa1"]
events = [SubResource("InputEventKey_xd61m")]

[sub_resource type="ButtonGroup" id="ButtonGroup_3wrxn"]
allow_unpress = true

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_mpeb7"]
bg_color = Color(0, 0, 0, 0.4)

[node name="Dock" type="Control" node_paths=PackedStringArray("shortcut_context")]
custom_minimum_size = Vector2(0, 100)
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
focus_mode = 2
shortcut_context = NodePath(".")
script = ExtResource("1_raoha")

[node name="VBox" type="VBoxContainer" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="Toolbar" type="HBoxContainer" parent="VBox"]
layout_mode = 2

[node name="Draw" type="Button" parent="VBox/Toolbar"]
layout_mode = 2
tooltip_text = "Draw terrain
Shift: Draw line.
Ctrl/Cmd+Shift: Draw rectangle."
toggle_mode = true
button_pressed = true
button_group = SubResource("ButtonGroup_aon7c")
shortcut = SubResource("Shortcut_3k2al")
icon = SubResource("ImageTexture_v6msm")
flat = true

[node name="Line" type="Button" parent="VBox/Toolbar"]
layout_mode = 2
tooltip_text = "Draw line"
toggle_mode = true
button_group = SubResource("ButtonGroup_aon7c")
shortcut = SubResource("Shortcut_wc6bu")
icon = SubResource("ImageTexture_v6msm")
flat = true

[node name="Rectangle" type="Button" parent="VBox/Toolbar"]
layout_mode = 2
tooltip_text = "Fill a rectangle of terrain"
toggle_mode = true
button_group = SubResource("ButtonGroup_aon7c")
shortcut = SubResource("Shortcut_tcjet")
icon = SubResource("ImageTexture_v6msm")
flat = true

[node name="Fill" type="Button" parent="VBox/Toolbar"]
layout_mode = 2
tooltip_text = "Bucket fill terrain"
toggle_mode = true
button_group = SubResource("ButtonGroup_aon7c")
shortcut = SubResource("Shortcut_46fac")
icon = SubResource("ImageTexture_v6msm")
flat = true

[node name="Replace" type="Button" parent="VBox/Toolbar"]
layout_mode = 2
tooltip_text = "Toggle replace mode"
toggle_mode = true
shortcut = SubResource("Shortcut_uwwa1")
icon = ExtResource("2_fvmt6")

[node name="VSeparator" type="VSeparator" parent="VBox/Toolbar"]
layout_mode = 2

[node name="SelectTiles" type="Button" parent="VBox/Toolbar"]
layout_mode = 2
tooltip_text = "Select"
toggle_mode = true
button_group = SubResource("ButtonGroup_3wrxn")
icon = SubResource("ImageTexture_v6msm")
flat = true

[node name="PaintType" type="Button" parent="VBox/Toolbar"]
layout_mode = 2
tooltip_text = "Paint terrain types"
toggle_mode = true
button_group = SubResource("ButtonGroup_3wrxn")
icon = ExtResource("2_cpm2t")
flat = true

[node name="PaintTerrain" type="Button" parent="VBox/Toolbar"]
layout_mode = 2
tooltip_text = "Paint terrain connecting types"
toggle_mode = true
button_group = SubResource("ButtonGroup_3wrxn")
icon = ExtResource("3_pqb1p")
flat = true

[node name="PaintSymmetry" type="Button" parent="VBox/Toolbar"]
layout_mode = 2
tooltip_text = "Paint tile symmetry"
toggle_mode = true
button_group = SubResource("ButtonGroup_3wrxn")
icon = ExtResource("5_kfjwu")
flat = true

[node name="SymmetryOptions" type="OptionButton" parent="VBox/Toolbar"]
visible = false
custom_minimum_size = Vector2(100, 0)
layout_mode = 2
selected = 0
item_count = 9
popup/item_0/text = "No symmetry"
popup/item_0/id = 8
popup/item_1/text = "Mirror"
popup/item_1/icon = ExtResource("6_mofuh")
popup/item_1/id = 1
popup/item_2/text = "Flip"
popup/item_2/icon = ExtResource("7_ojxs0")
popup/item_2/id = 1
popup/item_3/text = "Reflect"
popup/item_3/icon = ExtResource("8_8dhyg")
popup/item_3/id = 2
popup/item_4/text = "Rotate clockwise"
popup/item_4/icon = ExtResource("9_tq76a")
popup/item_4/id = 3
popup/item_5/text = "Rotate counter-clockwise"
popup/item_5/icon = ExtResource("10_o5h1f")
popup/item_5/id = 4
popup/item_6/text = "Rotate 180"
popup/item_6/icon = ExtResource("11_m6syp")
popup/item_6/id = 5
popup/item_7/text = "All rotations"
popup/item_7/icon = ExtResource("12_11vru")
popup/item_7/id = 6
popup/item_8/text = "All reflections & rotations"
popup/item_8/icon = ExtResource("13_lp5m2")
popup/item_8/id = 7

[node name="VSeparator3" type="VSeparator" parent="VBox/Toolbar"]
layout_mode = 2

[node name="ZoomContainer" type="VBoxContainer" parent="VBox/Toolbar"]
layout_mode = 2
alignment = 1

[node name="Sources" type="MenuBar" parent="VBox/Toolbar"]
layout_mode = 2

[node name="Sources" type="PopupMenu" parent="VBox/Toolbar/Sources"]
hide_on_item_selection = false
hide_on_checkable_item_selection = false

[node name="Spacer" type="Control" parent="VBox/Toolbar"]
layout_mode = 2
size_flags_horizontal = 3

[node name="ShuffleRandom" type="Button" parent="VBox/Toolbar"]
layout_mode = 2
tooltip_text = "Shuffle random tiles each update"
toggle_mode = true
icon = ExtResource("5_n3owo")
flat = true

[node name="Clean" type="Button" parent="VBox/Toolbar"]
layout_mode = 2
text = "Clean tile data"
icon = ExtResource("4_6ahwe")

[node name="VSeparator2" type="VSeparator" parent="VBox/Toolbar"]
layout_mode = 2

[node name="LayerUp" type="Button" parent="VBox/Toolbar"]
layout_mode = 2
tooltip_text = "Select previous layer"
icon = SubResource("ImageTexture_v6msm")
flat = true

[node name="LayerDown" type="Button" parent="VBox/Toolbar"]
layout_mode = 2
tooltip_text = "Select next layer"
icon = SubResource("ImageTexture_v6msm")
flat = true

[node name="LayerHighlight" type="Button" parent="VBox/Toolbar"]
layout_mode = 2
tooltip_text = "Highlight selected layer"
toggle_mode = true
icon = SubResource("ImageTexture_v6msm")
flat = true

[node name="LayerGrid" type="Button" parent="VBox/Toolbar"]
layout_mode = 2
tooltip_text = "Toggle grid visibility"
toggle_mode = true
icon = SubResource("ImageTexture_v6msm")
flat = true

[node name="HSplit" type="HSplitContainer" parent="VBox"]
layout_mode = 2
size_flags_vertical = 3
split_offset = 325

[node name="Terrains" type="VBoxContainer" parent="VBox/HSplit"]
layout_mode = 2

[node name="Panel" type="PanelContainer" parent="VBox/HSplit/Terrains"]
layout_mode = 2
size_flags_vertical = 3
theme_override_styles/panel = SubResource("StyleBoxFlat_mpeb7")

[node name="ScrollContainer" type="ScrollContainer" parent="VBox/HSplit/Terrains/Panel"]
layout_mode = 2
horizontal_scroll_mode = 3

[node name="TerrainList" type="HFlowContainer" parent="VBox/HSplit/Terrains/Panel/ScrollContainer"]
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3

[node name="LowerToolbar" type="HBoxContainer" parent="VBox/HSplit/Terrains"]
layout_mode = 2

[node name="GridMode" type="Button" parent="VBox/HSplit/Terrains/LowerToolbar"]
layout_mode = 2
tooltip_text = "Toggle grid view"
toggle_mode = true
icon = SubResource("ImageTexture_v6msm")
flat = true

[node name="QuickMode" type="Button" parent="VBox/HSplit/Terrains/LowerToolbar"]
auto_translate_mode = 1
layout_mode = 2
tooltip_text = "Toggle quick mode. Only shows paintable terrain types."
toggle_mode = true
icon = SubResource("ImageTexture_v6msm")
flat = true

[node name="VSeparator" type="VSeparator" parent="VBox/HSplit/Terrains/LowerToolbar"]
layout_mode = 2

[node name="EditTools" type="HBoxContainer" parent="VBox/HSplit/Terrains/LowerToolbar"]
layout_mode = 2
size_flags_horizontal = 3
alignment = 2

[node name="AddTerrain" type="Button" parent="VBox/HSplit/Terrains/LowerToolbar/EditTools"]
layout_mode = 2
tooltip_text = "Add terrain type"
icon = SubResource("ImageTexture_v6msm")
flat = true

[node name="EditTerrain" type="Button" parent="VBox/HSplit/Terrains/LowerToolbar/EditTools"]
layout_mode = 2
tooltip_text = "Edit terrain type"
icon = SubResource("ImageTexture_v6msm")
flat = true

[node name="PickIcon" type="Button" parent="VBox/HSplit/Terrains/LowerToolbar/EditTools"]
layout_mode = 2
tooltip_text = "Pick terrain icon from tileset"
toggle_mode = true
icon = SubResource("ImageTexture_v6msm")
flat = true

[node name="MoveUp" type="Button" parent="VBox/HSplit/Terrains/LowerToolbar/EditTools"]
layout_mode = 2
tooltip_text = "Move selected terrain up"
icon = SubResource("ImageTexture_v6msm")
flat = true

[node name="MoveDown" type="Button" parent="VBox/HSplit/Terrains/LowerToolbar/EditTools"]
layout_mode = 2
tooltip_text = "Move selected terrain down"
icon = SubResource("ImageTexture_v6msm")
flat = true

[node name="RemoveTerrain" type="Button" parent="VBox/HSplit/Terrains/LowerToolbar/EditTools"]
layout_mode = 2
tooltip_text = "Remove selected terrain type(s)"
icon = SubResource("ImageTexture_v6msm")
flat = true

[node name="Panel" type="Panel" parent="VBox/HSplit"]
custom_minimum_size = Vector2(0, 80)
layout_mode = 2

[node name="ScrollArea" type="ScrollContainer" parent="VBox/HSplit/Panel"]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
size_flags_horizontal = 3

[node name="TileView" type="Control" parent="VBox/HSplit/Panel/ScrollArea"]
texture_filter = 1
texture_repeat = 1
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
focus_mode = 2
script = ExtResource("4_nqppq")

[connection signal="item_selected" from="VBox/Toolbar/SymmetryOptions" to="." method="_on_symmetry_selected"]
[connection signal="id_pressed" from="VBox/Toolbar/Sources/Sources" to="." method="_on_terrain_enable_id_pressed"]
[connection signal="pressed" from="VBox/Toolbar/ShuffleRandom" to="." method="_on_shuffle_random_pressed"]
[connection signal="pressed" from="VBox/Toolbar/Clean" to="." method="_on_clean_pressed"]
[connection signal="pressed" from="VBox/Toolbar/LayerUp" to="." method="_on_layer_up_pressed"]
[connection signal="pressed" from="VBox/Toolbar/LayerDown" to="." method="_on_layer_down_pressed"]
[connection signal="toggled" from="VBox/Toolbar/LayerHighlight" to="." method="_on_layer_highlight_toggled"]
[connection signal="toggled" from="VBox/Toolbar/LayerGrid" to="." method="_on_layer_grid_toggled"]
[connection signal="pressed" from="VBox/HSplit/Terrains/LowerToolbar/GridMode" to="." method="_on_grid_mode_pressed"]
[connection signal="pressed" from="VBox/HSplit/Terrains/LowerToolbar/QuickMode" to="." method="_on_quick_mode_pressed"]
[connection signal="pressed" from="VBox/HSplit/Terrains/LowerToolbar/EditTools/AddTerrain" to="." method="_on_add_terrain_pressed"]
[connection signal="pressed" from="VBox/HSplit/Terrains/LowerToolbar/EditTools/EditTerrain" to="." method="_on_edit_terrain_pressed"]
[connection signal="focus_exited" from="VBox/HSplit/Terrains/LowerToolbar/EditTools/PickIcon" to="." method="_on_pick_icon_focus_exited"]
[connection signal="pressed" from="VBox/HSplit/Terrains/LowerToolbar/EditTools/PickIcon" to="." method="_on_pick_icon_pressed"]
[connection signal="pressed" from="VBox/HSplit/Terrains/LowerToolbar/EditTools/MoveUp" to="." method="_on_move_pressed" binds= [false]]
[connection signal="pressed" from="VBox/HSplit/Terrains/LowerToolbar/EditTools/MoveDown" to="." method="_on_move_pressed" binds= [true]]
[connection signal="pressed" from="VBox/HSplit/Terrains/LowerToolbar/EditTools/RemoveTerrain" to="." method="_on_remove_terrain_pressed"]
[connection signal="mouse_exited" from="VBox/HSplit/Panel/ScrollArea/TileView" to="VBox/HSplit/Panel/ScrollArea/TileView" method="clear_highlighted_tile"]
</file>

<file path="addons/better-terrain/editor/TerrainEntry.gd">
@tool
extends PanelContainer

signal select(index)

@onready var color_panel := %Color
@onready var terrain_icon_slot := %TerrainIcon
@onready var type_icon_slot := %TypeIcon
@onready var type_icon_panel := %TerrainIconPanel
@onready var name_label := %Name
@onready var layout_container := %Layout
@onready var icon_layout_container := %IconLayout

var selected := false

var tileset:TileSet
var terrain:Dictionary

var grid_mode := false
var color_style_list:StyleBoxFlat
var color_style_grid:StyleBoxFlat
var color_style_decoration:StyleBoxFlat

var _terrain_texture:Texture2D
var _terrain_texture_rect:Rect2i
var _icon_draw_connected := false


func _ready():
    update()

func update():
    if !terrain or !terrain.valid:
        return
    if !tileset:
        return
    
    name_label.text = terrain.name
    tooltip_text = "%s (%d)" % [terrain.name, terrain.id]
    
    color_style_list = color_panel.get_theme_stylebox("panel").duplicate()
    color_style_grid = color_panel.get_theme_stylebox("panel").duplicate()
    color_style_decoration = color_panel.get_theme_stylebox("panel").duplicate()
    
    color_style_list.bg_color = terrain.color
    color_style_list.corner_radius_top_left = 8
    color_style_list.corner_radius_bottom_left = 8
    color_style_list.corner_radius_top_right = 0
    color_style_list.corner_radius_bottom_right = 0
    color_style_list.content_margin_left = -1
    color_style_list.content_margin_right = -1
    color_style_list.border_width_left = 0
    color_style_list.border_width_right = 0
    color_style_list.border_width_top = 0
    color_style_list.border_width_bottom = 0
    
    color_style_grid.bg_color = terrain.color
    color_style_grid.corner_radius_top_left = 6
    color_style_grid.corner_radius_bottom_left = 6
    color_style_grid.corner_radius_top_right = 6
    color_style_grid.corner_radius_bottom_right = 6
    color_style_grid.content_margin_left = -1
    color_style_grid.content_margin_right = -1
    color_style_grid.border_width_left = 0
    color_style_grid.border_width_right = 0
    color_style_grid.border_width_top = 0
    color_style_grid.border_width_bottom = 0
    
    color_style_decoration.bg_color = terrain.color
    color_style_decoration.corner_radius_top_left = 8
    color_style_decoration.corner_radius_bottom_left = 8
    color_style_decoration.corner_radius_top_right = 8
    color_style_decoration.corner_radius_bottom_right = 8
    color_style_decoration.content_margin_left = -1
    color_style_decoration.content_margin_right = -1
    color_style_decoration.border_width_left = 4
    color_style_decoration.border_width_right = 4
    color_style_decoration.border_width_top = 4
    color_style_decoration.border_width_bottom = 4
    
    match terrain.type:
        BetterTerrain.TerrainType.MATCH_TILES:
            type_icon_slot.texture = load("res://addons/better-terrain/icons/MatchTiles.svg")
        BetterTerrain.TerrainType.MATCH_VERTICES:
            type_icon_slot.texture = load("res://addons/better-terrain/icons/MatchVertices.svg")
        BetterTerrain.TerrainType.CATEGORY:
            type_icon_slot.texture = load("res://addons/better-terrain/icons/NonModifying.svg")
        BetterTerrain.TerrainType.DECORATION:
            type_icon_slot.texture = load("res://addons/better-terrain/icons/Decoration.svg")
    
    var has_icon = false
    if terrain.has("icon"):
        if terrain.icon.has("path") and not terrain.icon.path.is_empty():
            terrain_icon_slot.texture = load(terrain.icon.path)
            _terrain_texture = null
            terrain_icon_slot.queue_redraw()
            has_icon = true
        elif terrain.icon.has("source_id") and tileset.has_source(terrain.icon.source_id):
            var source := tileset.get_source(terrain.icon.source_id) as TileSetAtlasSource
            var coord := terrain.icon.coord as Vector2i
            var rect := source.get_tile_texture_region(coord, 0)
            _terrain_texture = source.texture
            _terrain_texture_rect = rect
            terrain_icon_slot.queue_redraw()
            has_icon = true
    
    if not has_icon:
        var tiles = BetterTerrain.get_tile_sources_in_terrain(tileset, get_index())
        if tiles.size() > 0:
            var source := tiles[0].source as TileSetAtlasSource
            var coord := tiles[0].coord as Vector2i
            var rect := source.get_tile_texture_region(coord, 0)
            _terrain_texture = source.texture
            _terrain_texture_rect = rect
            terrain_icon_slot.queue_redraw()
    
    if _terrain_texture:
        terrain_icon_slot.texture = null
    
    if not _icon_draw_connected:
        terrain_icon_slot.connect("draw", func():
            if _terrain_texture:
                terrain_icon_slot.draw_texture_rect_region(_terrain_texture, Rect2i(0,0, 44, 44), _terrain_texture_rect)
        )
        _icon_draw_connected = true
    
    update_style()


func update_style():
    if terrain.type == BetterTerrain.TerrainType.DECORATION:
        type_icon_panel.visible = false
        color_panel.custom_minimum_size = Vector2i(52,52)
    else:
        type_icon_panel.visible = true
        color_panel.custom_minimum_size = Vector2i(24,24)
            
    if grid_mode:
        if terrain.type == BetterTerrain.TerrainType.DECORATION:
            color_panel.add_theme_stylebox_override("panel", color_style_decoration)
            color_panel.size_flags_vertical = Control.SIZE_FILL
            icon_layout_container.size_flags_vertical = Control.SIZE_EXPAND_FILL
        else:
            color_panel.add_theme_stylebox_override("panel", color_style_grid)
            color_panel.size_flags_vertical = Control.SIZE_SHRINK_BEGIN
            icon_layout_container.size_flags_vertical = Control.SIZE_FILL
        custom_minimum_size = Vector2(0, 60)
        size_flags_horizontal = Control.SIZE_FILL
        layout_container.vertical = true
        name_label.visible = false
        icon_layout_container.add_theme_constant_override("separation", -24)
    else:
        if terrain.type == BetterTerrain.TerrainType.DECORATION:
            color_panel.add_theme_stylebox_override("panel", color_style_decoration)
        else:
            color_panel.add_theme_stylebox_override("panel", color_style_list)
        icon_layout_container.size_flags_vertical = Control.SIZE_FILL
        custom_minimum_size = Vector2(2000, 60)
        size_flags_horizontal = Control.SIZE_EXPAND_FILL
        layout_container.vertical = false
        name_label.visible = true
        color_panel.size_flags_vertical = Control.SIZE_FILL
        icon_layout_container.add_theme_constant_override("separation", 4)


func set_selected(value:bool = true):
    selected = value
    if value:
        select.emit(get_index())
    queue_redraw()


func _draw():
    if selected:
        draw_rect(Rect2(Vector2.ZERO, get_rect().size), Color(0.15, 0.70, 1, 0.3))


func _on_focus_entered():
    queue_redraw()
    selected = true
    select.emit(get_index())


func _on_focus_exited():
    queue_redraw()
</file>

<file path="addons/better-terrain/editor/TerrainEntry.gd.uid">
uid://b6hoqvl1761e8
</file>

<file path="addons/better-terrain/editor/TerrainEntry.tscn">
[gd_scene load_steps=8 format=3 uid="uid://u2y444hj182c"]

[ext_resource type="Script" path="res://addons/better-terrain/editor/TerrainEntry.gd" id="1_o2na3"]
[ext_resource type="Texture2D" uid="uid://kmypxsqhynyv" path="res://addons/better-terrain/icons/Decoration.svg" id="2_ossyj"]

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_3pdcc"]
content_margin_left = 4.0
content_margin_top = 4.0
content_margin_right = 4.0
content_margin_bottom = 4.0
draw_center = false

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_dqhir"]
bg_color = Color(0.243, 0.816, 0.518, 1)
border_color = Color(0, 0, 0, 0.439216)
corner_radius_top_left = 8
corner_radius_bottom_left = 8

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_rohyw"]
content_margin_left = 2.0
content_margin_top = 2.0
content_margin_right = 2.0
content_margin_bottom = 2.0
bg_color = Color(0, 0, 0, 0.439216)
corner_radius_top_left = 4
corner_radius_top_right = 4
corner_radius_bottom_right = 4
corner_radius_bottom_left = 4

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_xa0fl"]
content_margin_left = 4.0
content_margin_top = 4.0
content_margin_right = 4.0
content_margin_bottom = 4.0
bg_color = Color(0, 0, 0, 0.439216)

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_b4rkm"]
content_margin_left = 3.0
bg_color = Color(0, 0, 0, 0.439216)
draw_center = false

[node name="TerrainEntry" type="PanelContainer"]
custom_minimum_size = Vector2(60, 60)
offset_right = 200.0
offset_bottom = 60.0
size_flags_vertical = 3
focus_mode = 2
theme_override_styles/panel = SubResource("StyleBoxFlat_3pdcc")
script = ExtResource("1_o2na3")

[node name="Layout" type="BoxContainer" parent="."]
unique_name_in_owner = true
layout_mode = 2
theme_override_constants/separation = 4

[node name="IconLayout" type="HBoxContainer" parent="Layout"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 4

[node name="Color" type="PanelContainer" parent="Layout/IconLayout"]
unique_name_in_owner = true
z_index = 1
custom_minimum_size = Vector2(24, 24)
layout_mode = 2
size_flags_horizontal = 0
mouse_filter = 1
theme_override_styles/panel = SubResource("StyleBoxFlat_dqhir")

[node name="PanelContainer" type="PanelContainer" parent="Layout/IconLayout/Color"]
layout_mode = 2
size_flags_horizontal = 4
size_flags_vertical = 4
mouse_filter = 1
theme_override_styles/panel = SubResource("StyleBoxFlat_rohyw")

[node name="TypeIcon" type="TextureRect" parent="Layout/IconLayout/Color/PanelContainer"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 4
size_flags_vertical = 4
texture = ExtResource("2_ossyj")

[node name="TerrainIconPanel" type="PanelContainer" parent="Layout/IconLayout"]
unique_name_in_owner = true
custom_minimum_size = Vector2(52, 52)
layout_mode = 2
size_flags_horizontal = 4
size_flags_vertical = 4
mouse_filter = 1
theme_override_styles/panel = SubResource("StyleBoxFlat_xa0fl")

[node name="TerrainIcon" type="TextureRect" parent="Layout/IconLayout/TerrainIconPanel"]
unique_name_in_owner = true
texture_filter = 1
custom_minimum_size = Vector2(40, 40)
layout_mode = 2
expand_mode = 4
stretch_mode = 5

[node name="Name" type="Label" parent="Layout"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 1
theme_override_colors/font_outline_color = Color(0, 0, 0, 1)
theme_override_constants/outline_size = 0
theme_override_styles/normal = SubResource("StyleBoxFlat_b4rkm")
text = "New Terrain"
vertical_alignment = 1
text_overrun_behavior = 3

[connection signal="focus_entered" from="." to="." method="_on_focus_entered"]
[connection signal="focus_exited" from="." to="." method="_on_focus_exited"]
</file>

<file path="addons/better-terrain/editor/TerrainProperties.gd">
@tool
extends ConfirmationDialog

var category_icon := load("res://addons/better-terrain/icons/NonModifying.svg")

const CATEGORY_CHECK_ID = &"category_check_id"

var accepted := false

var terrain_name : String:
    set(value): %NameEdit.text = value
    get: return %NameEdit.text

var terrain_color : Color:
    set(value): %ColorPicker.color = value
    get: return %ColorPicker.color

var terrain_icon : String:
    set(value): %IconEdit.text = value
    get: return %IconEdit.text

var terrain_type : int:
    set(value):
        %TypeOption.selected = value
        _on_type_option_item_selected(value)
    get: return %TypeOption.selected

var terrain_categories : Array: set = set_categories, get = get_categories


# category is name, color, id
func set_category_data(options: Array) -> void:
    if !options.is_empty():
        %CategoryLabel.show()
        %CategoryContainer.show()
    
    for o in options:
        var c = CheckBox.new()
        c.text = o.name
        c.icon = category_icon
        c.add_theme_color_override(&"icon_normal_color", o.color)
        c.add_theme_color_override(&"icon_disabled_color", Color(o.color, 0.4))
        c.add_theme_color_override(&"icon_focus_color", o.color)
        c.add_theme_color_override(&"icon_hover_color", o.color)
        c.add_theme_color_override(&"icon_hover_pressed_color", o.color)
        c.add_theme_color_override(&"icon_normal_color", o.color)
        c.add_theme_color_override(&"icon_pressed_color", o.color)
        
        c.set_meta(CATEGORY_CHECK_ID, o.id)
        %CategoryLayout.add_child(c)


func set_categories(ids : Array):
    for c in %CategoryLayout.get_children():
        c.button_pressed = c.get_meta(CATEGORY_CHECK_ID) in ids


func get_categories() -> Array:
    var result := []
    if terrain_type == BetterTerrain.TerrainType.CATEGORY:
        return result
    for c in %CategoryLayout.get_children():
        if c.button_pressed:
            result.push_back(c.get_meta(CATEGORY_CHECK_ID))
    return result


func _on_confirmed() -> void:
    # confirm valid name
    if terrain_name.is_empty():
        var dialog := AcceptDialog.new()
        dialog.dialog_text = "Name cannot be empty"
        EditorInterface.popup_dialog_centered(dialog)
        await dialog.visibility_changed
        dialog.queue_free()
        return
    
    accepted = true
    hide()


func _on_type_option_item_selected(index: int) -> void:
    var categories_available = (index != BetterTerrain.TerrainType.CATEGORY)
    for c in %CategoryLayout.get_children():
        c.disabled = !categories_available
</file>

<file path="addons/better-terrain/editor/TerrainProperties.gd.uid">
uid://njk88x45ijmn
</file>

<file path="addons/better-terrain/editor/TerrainProperties.tscn">
[gd_scene load_steps=5 format=3 uid="uid://fdjybw6e7whr"]

[ext_resource type="Script" path="res://addons/better-terrain/editor/TerrainProperties.gd" id="1_52nx8"]
[ext_resource type="Texture2D" uid="uid://d1h1p7pcwdnjk" path="res://addons/better-terrain/icons/MatchTiles.svg" id="2_ncc5p"]
[ext_resource type="Texture2D" uid="uid://dfemy1g6okwlv" path="res://addons/better-terrain/icons/MatchVertices.svg" id="3_0nvmi"]
[ext_resource type="Texture2D" uid="uid://1yr6yruwl63u" path="res://addons/better-terrain/icons/NonModifying.svg" id="5_awp83"]

[node name="TerrainProperties" type="ConfirmationDialog"]
title = "Edit terrain properties"
initial_position = 2
size = Vector2i(317, 257)
visible = true
dialog_hide_on_ok = false
script = ExtResource("1_52nx8")

[node name="GridContainer" type="GridContainer" parent="."]
offset_left = 8.0
offset_top = 8.0
offset_right = 309.0
offset_bottom = 208.0
columns = 2

[node name="NameLabel" type="Label" parent="GridContainer"]
layout_mode = 2
text = "Name"

[node name="NameEdit" type="LineEdit" parent="GridContainer"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 3
placeholder_text = "Terrain name"

[node name="ColorLabel" type="Label" parent="GridContainer"]
layout_mode = 2
text = "Color"

[node name="ColorPicker" type="ColorPickerButton" parent="GridContainer"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 3
color = Color(1, 0.262745, 0.498039, 1)
edit_alpha = false

[node name="IconLabel" type="Label" parent="GridContainer"]
layout_mode = 2
text = "Icon"

[node name="IconEdit" type="LineEdit" parent="GridContainer"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 3
placeholder_text = "Icon path (optional)"

[node name="TypeLabel" type="Label" parent="GridContainer"]
layout_mode = 2
text = "Mode"

[node name="TypeOption" type="OptionButton" parent="GridContainer"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 3
item_count = 3
popup/item_0/text = "Match tiles"
popup/item_0/icon = ExtResource("2_ncc5p")
popup/item_1/text = "Match vertices"
popup/item_1/icon = ExtResource("3_0nvmi")
popup/item_1/id = 1
popup/item_2/text = "Category"
popup/item_2/icon = ExtResource("5_awp83")
popup/item_2/id = 2

[node name="CategoryLabel" type="Label" parent="GridContainer"]
unique_name_in_owner = true
visible = false
layout_mode = 2
size_flags_vertical = 1
text = "Categories"

[node name="CategoryContainer" type="ScrollContainer" parent="GridContainer"]
unique_name_in_owner = true
visible = false
custom_minimum_size = Vector2(0, 100)
layout_mode = 2
size_flags_vertical = 3

[node name="CategoryLayout" type="VBoxContainer" parent="GridContainer/CategoryContainer"]
unique_name_in_owner = true
custom_minimum_size = Vector2(0, 100)
layout_mode = 2
size_flags_vertical = 3

[connection signal="confirmed" from="." to="." method="_on_confirmed"]
[connection signal="item_selected" from="GridContainer/TypeOption" to="." method="_on_type_option_item_selected"]
</file>

<file path="addons/better-terrain/editor/TerrainUndo.gd">
@tool
extends Node

var action_index := 0
var action_count := 0
var _current_action_index := 0
var _current_action_count := 0

func create_tile_restore_point(undo_manager: EditorUndoRedoManager, tm: TileMapLayer, cells: Array, and_surrounding_cells: bool = true) -> void:
    if and_surrounding_cells:
        cells = BetterTerrain._widen(tm, cells)
    
    var restore := []
    for c in cells:
        restore.append([
            c,
            tm.get_cell_source_id(c),
            tm.get_cell_atlas_coords(c),
            tm.get_cell_alternative_tile(c)
        ])
    
    undo_manager.add_undo_method(self, &"restore_tiles", tm, restore)


func create_tile_restore_point_area(undo_manager: EditorUndoRedoManager, tm: TileMapLayer, area: Rect2i, and_surrounding_cells: bool = true) -> void:
    area.end += Vector2i.ONE
    
    var restore := []
    for y in range(area.position.y, area.end.y):
        for x in range(area.position.x, area.end.x):
            var c := Vector2i(x, y)
            restore.append([
                c,
                tm.get_cell_source_id(c),
                tm.get_cell_atlas_coords(c),
                tm.get_cell_alternative_tile(c)
            ])
    
    undo_manager.add_undo_method(self, &"restore_tiles", tm, restore)
    
    if !and_surrounding_cells:
        return
    
    var edges := []
    for x in range(area.position.x, area.end.x):
        edges.append(Vector2i(x, area.position.y))
        edges.append(Vector2i(x, area.end.y))
    for y in range(area.position.y + 1, area.end.y - 1):
        edges.append(Vector2i(area.position.x, y))
        edges.append(Vector2i(area.end.x, y))
    
    edges = BetterTerrain._widen_with_exclusion(tm, edges, area)
    create_tile_restore_point(undo_manager, tm, edges, false)


func restore_tiles(tm: TileMapLayer, restore: Array) -> void:
    for r in restore:
        tm.set_cell(r[0], r[1], r[2], r[3])


func create_peering_restore_point(undo_manager: EditorUndoRedoManager, ts: TileSet) -> void:
    var restore := []
    
    for s in ts.get_source_count():
        var source_id := ts.get_source_id(s)
        var source := ts.get_source(source_id) as TileSetAtlasSource
        if !source:
            continue
        
        for t in source.get_tiles_count():
            var coord := source.get_tile_id(t)
            for a in source.get_alternative_tiles_count(coord):
                var alternate := source.get_alternative_tile_id(coord, a)
                
                var td := source.get_tile_data(coord, alternate)
                var tile_type := BetterTerrain.get_tile_terrain_type(td)
                if tile_type == BetterTerrain.TileCategory.NON_TERRAIN:
                    continue
                
                var peering_dict := {}
                for c in BetterTerrain.tile_peering_keys(td):
                    peering_dict[c] = BetterTerrain.tile_peering_types(td, c)
                var symmetry = BetterTerrain.get_tile_symmetry_type(td)
                restore.append([source_id, coord, alternate, tile_type, peering_dict, symmetry])
    
    undo_manager.add_undo_method(self, &"restore_peering", ts, restore)


func create_peering_restore_point_specific(undo_manager: EditorUndoRedoManager, ts: TileSet, protect: int) -> void:
    var restore := []
    
    for s in ts.get_source_count():
        var source_id := ts.get_source_id(s)
        var source := ts.get_source(source_id) as TileSetAtlasSource
        if !source:
            continue
        
        for t in source.get_tiles_count():
            var coord := source.get_tile_id(t)
            for a in source.get_alternative_tiles_count(coord):
                var alternate := source.get_alternative_tile_id(coord, a)
                
                var td := source.get_tile_data(coord, alternate)
                var tile_type := BetterTerrain.get_tile_terrain_type(td)
                if tile_type == BetterTerrain.TileCategory.NON_TERRAIN:
                    continue
                
                var to_restore : bool = tile_type == protect
                
                var terrain := BetterTerrain.get_terrain(ts, tile_type)
                var cells = BetterTerrain.data.get_terrain_peering_cells(ts, terrain.type)
                for c in cells:
                    if protect in BetterTerrain.tile_peering_types(td, c):
                        to_restore = true
                        break
                
                if !to_restore:
                    continue
                
                var peering_dict := {}
                for c in cells:
                    peering_dict[c] = BetterTerrain.tile_peering_types(td, c)
                var symmetry = BetterTerrain.get_tile_symmetry_type(td)
                restore.append([source_id, coord, alternate, tile_type, peering_dict, symmetry])
    
    undo_manager.add_undo_method(self, &"restore_peering", ts, restore)


func create_peering_restore_point_tile(undo_manager: EditorUndoRedoManager, ts: TileSet, source_id: int, coord: Vector2i, alternate: int) -> void:
    var source := ts.get_source(source_id) as TileSetAtlasSource
    var td := source.get_tile_data(coord, alternate)
    var tile_type := BetterTerrain.get_tile_terrain_type(td)
    
    var restore := []
    var peering_dict := {}
    for c in BetterTerrain.tile_peering_keys(td):
        peering_dict[c] = BetterTerrain.tile_peering_types(td, c)
    var symmetry = BetterTerrain.get_tile_symmetry_type(td)
    restore.append([source_id, coord, alternate, tile_type, peering_dict, symmetry])
    
    undo_manager.add_undo_method(self, &"restore_peering", ts, restore)


func restore_peering(ts: TileSet, restore: Array) -> void:
    for r in restore:
        var source := ts.get_source(r[0]) as TileSetAtlasSource
        var td := source.get_tile_data(r[1], r[2])
        BetterTerrain.set_tile_terrain_type(ts, td, r[3])
        var peering_types = r[4]
        for peering in peering_types:
            var types := BetterTerrain.tile_peering_types(td, peering)
            for t in types:
                BetterTerrain.remove_tile_peering_type(ts, td, peering, t)
            for t in peering_types[peering]:
                BetterTerrain.add_tile_peering_type(ts, td, peering, t)
        var symmetry = r[5]
        BetterTerrain.set_tile_symmetry_type(ts, td, symmetry)


func create_terrain_type_restore_point(undo_manager: EditorUndoRedoManager, ts: TileSet) -> void:
    var count = BetterTerrain.terrain_count(ts)
    var restore = []
    for i in count:
        restore.push_back(BetterTerrain.get_terrain(ts, i))
    
    undo_manager.add_undo_method(self, &"restore_terrain", ts, restore)


func restore_terrain(ts: TileSet, restore: Array) -> void:
    for i in restore.size():
        var r = restore[i]
        BetterTerrain.set_terrain(ts, i, r.name, r.color, r.type, r.categories, r.icon)


func add_do_method(undo_manager: EditorUndoRedoManager, object:Object, method:StringName, args:Array):
    if action_index > _current_action_index:
        _current_action_index = action_index
        _current_action_count = action_count
    if action_count > _current_action_count:
        _current_action_count = action_count
    undo_manager.add_do_method(self, "_do_method", object, method, args, action_count)


func _do_method(object:Object, method:StringName, args:Array, this_action_count:int):
    if this_action_count >= _current_action_count:
        object.callv(method, args)


func finish_action():
    _current_action_count = 0
</file>

<file path="addons/better-terrain/editor/TerrainUndo.gd.uid">
uid://c4til6tumisvn
</file>

<file path="addons/better-terrain/editor/TileView.gd">
@tool
extends Control

signal paste_occurred
signal change_zoom_level(value)
signal terrain_updated(index)

@onready var checkerboard := get_theme_icon("Checkerboard", "EditorIcons")

@onready var paint_symmetry_icons := [
    null,
    preload("res://addons/better-terrain/icons/paint-symmetry/SymmetryMirror.svg"),
    preload("res://addons/better-terrain/icons/paint-symmetry/SymmetryFlip.svg"),
    preload("res://addons/better-terrain/icons/paint-symmetry/SymmetryReflect.svg"),
    preload("res://addons/better-terrain/icons/paint-symmetry/SymmetryRotateClockwise.svg"),
    preload("res://addons/better-terrain/icons/paint-symmetry/SymmetryRotateCounterClockwise.svg"),
    preload("res://addons/better-terrain/icons/paint-symmetry/SymmetryRotate180.svg"),
    preload("res://addons/better-terrain/icons/paint-symmetry/SymmetryRotateAll.svg"),
    preload("res://addons/better-terrain/icons/paint-symmetry/SymmetryAll.svg"),
]

# Draw checkerboard and tiles with specific  materials in
# individual canvas items via rendering server
var _canvas_item_map = {}
var _canvas_item_background : RID

var tileset: TileSet
var disabled_sources: Array[int] = []: set = set_disabled_sources

var paint := BetterTerrain.TileCategory.NON_TERRAIN
var paint_symmetry := BetterTerrain.SymmetryType.NONE
var highlighted_tile_part := { valid = false }
var zoom_level := 1.0

var tiles_size : Vector2
var tile_size : Vector2i
var tile_part_size : Vector2
var alternate_size : Vector2
var alternate_lookup := []
var initial_click : Vector2i
var prev_position : Vector2i
var current_position : Vector2i

var selection_start : Vector2i
var selection_end : Vector2i
var selection_rect : Rect2i
var selected_tile_states : Array[Dictionary] = []
var copied_tile_states : Array[Dictionary] = []
var staged_paste_tile_states : Array[Dictionary] = []

var pick_icon_terrain : int = -1
var pick_icon_terrain_cancel := false

var undo_manager : EditorUndoRedoManager
var terrain_undo

# Modes for painting
enum PaintMode {
    NO_PAINT,
    PAINT_TYPE,
    PAINT_PEERING,
    PAINT_SYMMETRY,
    SELECT,
    PASTE
}

var paint_mode := PaintMode.NO_PAINT

# Actual interactions for painting
enum PaintAction {
    NO_ACTION,
    DRAW_TYPE,
    ERASE_TYPE,
    DRAW_PEERING,
    ERASE_PEERING,
    DRAW_SYMMETRY,
    ERASE_SYMMETRY,
    SELECT,
    PASTE
}

var paint_action := PaintAction.NO_ACTION

const ALTERNATE_TILE_MARGIN := 18

func _enter_tree() -> void:
    _canvas_item_background = RenderingServer.canvas_item_create()
    RenderingServer.canvas_item_set_parent(_canvas_item_background, get_canvas_item())
    RenderingServer.canvas_item_set_draw_behind_parent(_canvas_item_background, true)


func _exit_tree() -> void:
    RenderingServer.free_rid(_canvas_item_background)
    for p in _canvas_item_map:
        RenderingServer.free_rid(_canvas_item_map[p])
    _canvas_item_map.clear()


func refresh_tileset(ts: TileSet) -> void:
    tileset = ts
    
    tiles_size = Vector2.ZERO
    alternate_size = Vector2.ZERO
    alternate_lookup = []
    disabled_sources = []
    
    if !tileset:
        return
    
    for s in tileset.get_source_count():
        var source_id := tileset.get_source_id(s)
        var source := tileset.get_source(source_id) as TileSetAtlasSource
        if !source or !source.texture:
            continue
        
        tiles_size.x = max(tiles_size.x, source.texture.get_width())
        tiles_size.y += source.texture.get_height()
        
        tile_size = source.texture_region_size
        tile_part_size = Vector2(tile_size) / 3.0
        
        for t in source.get_tiles_count():
            var coord := source.get_tile_id(t)
            var alt_count := source.get_alternative_tiles_count(coord)
            if alt_count <= 1:
                continue
            
            var rect := source.get_tile_texture_region(coord, 0)
            alternate_lookup.append([rect.size, source_id, coord])
            alternate_size.x = max(alternate_size.x, rect.size.x * (alt_count - 1))
            alternate_size.y += rect.size.y
    
    _on_zoom_value_changed(zoom_level)


func is_tile_in_source(source: TileSetAtlasSource, coord: Vector2i) -> bool:
    var origin := source.get_tile_at_coords(coord)
    if origin == Vector2i(-1, -1):
        return false
    
    # Animation frames are not needed
    var size := source.get_tile_size_in_atlas(origin)
    return coord.x < origin.x + size.x and coord.y < origin.y + size.y


func _build_tile_part_from_position(result: Dictionary, position: Vector2i, rect: Rect2) -> void:
    result.rect = rect
    var type := BetterTerrain.get_tile_terrain_type(result.data)
    if type == BetterTerrain.TileCategory.NON_TERRAIN:
        return
    result.terrain_type = type
    
    var normalize_position := (Vector2(position) - rect.position) / rect.size
    
    var terrain := BetterTerrain.get_terrain(tileset, type)
    if !terrain.valid:
        return
    for p in BetterTerrain.data.get_terrain_peering_cells(tileset, terrain.type):
        var side_polygon = BetterTerrain.data.peering_polygon(tileset, terrain.type, p)
        if Geometry2D.is_point_in_polygon(normalize_position, side_polygon):
            result.peering = p
            result.polygon = side_polygon
            break


func tile_part_from_position(position: Vector2i) -> Dictionary:
    if !tileset:
        return { valid = false }
    
    var offset := Vector2.ZERO
    var alt_offset := Vector2.RIGHT * (zoom_level * tiles_size.x + ALTERNATE_TILE_MARGIN)
    if Rect2(alt_offset, zoom_level * alternate_size).has_point(position):
        for a in alternate_lookup:
            if a[1] in disabled_sources:
                continue
            var next_offset_y = alt_offset.y + zoom_level * a[0].y
            if position.y > next_offset_y:
                alt_offset.y = next_offset_y
                continue
            
            var source := tileset.get_source(a[1]) as TileSetAtlasSource
            if !source:
                break
            
            var count := source.get_alternative_tiles_count(a[2])
            var index := int((position.x - alt_offset.x) / (zoom_level * a[0].x)) + 1
            
            if index < count:
                var alt_id := source.get_alternative_tile_id(a[2], index)
                var target_rect := Rect2(
                    alt_offset + Vector2.RIGHT * (index - 1) * zoom_level * a[0].x,
                    zoom_level * a[0]
                )
                
                var result := {
                    valid = true,
                    source_id = a[1],
                    coord = a[2],
                    alternate = alt_id,
                    data = source.get_tile_data(a[2], alt_id)
                }
                _build_tile_part_from_position(result, position, target_rect)
                return result
    
    else:
        for s in tileset.get_source_count():
            var source_id := tileset.get_source_id(s)
            if source_id in disabled_sources:
                continue
            var source := tileset.get_source(source_id) as TileSetAtlasSource
            if !source || !source.texture:
                continue
            for t in source.get_tiles_count():
                var coord := source.get_tile_id(t)
                var rect := source.get_tile_texture_region(coord, 0)
                var target_rect := Rect2(offset + zoom_level * rect.position, zoom_level * rect.size)
                if !target_rect.has_point(position):
                    continue
                
                var result := {
                    valid = true,
                    source_id = source_id,
                    coord = coord,
                    alternate = 0,
                    data = source.get_tile_data(coord, 0)
                }
                _build_tile_part_from_position(result, position, target_rect)
                return result
            
            offset.y += zoom_level * source.texture.get_height()
    
    return { valid = false }


func tile_rect_from_position(position: Vector2i) -> Rect2:
    if !tileset:
        return Rect2(-1,-1,0,0)
    
    var offset := Vector2.ZERO
    var alt_offset := Vector2.RIGHT * (zoom_level * tiles_size.x + ALTERNATE_TILE_MARGIN)
    if Rect2(alt_offset, zoom_level * alternate_size).has_point(position):
        for a in alternate_lookup:
            if a[1] in disabled_sources:
                continue
            var next_offset_y = alt_offset.y + zoom_level * a[0].y
            if position.y > next_offset_y:
                alt_offset.y = next_offset_y
                continue
            
            var source := tileset.get_source(a[1]) as TileSetAtlasSource
            if !source:
                break
            
            var count := source.get_alternative_tiles_count(a[2])
            var index := int((position.x - alt_offset.x) / (zoom_level * a[0].x)) + 1
            
            if index < count:
                var target_rect := Rect2(
                    alt_offset + Vector2.RIGHT * (index - 1) * zoom_level * a[0].x,
                    zoom_level * a[0]
                )
                return target_rect
    
    else:
        for s in tileset.get_source_count():
            var source_id := tileset.get_source_id(s)
            if source_id in disabled_sources:
                continue
            var source := tileset.get_source(source_id) as TileSetAtlasSource
            if !source:
                continue
            for t in source.get_tiles_count():
                var coord := source.get_tile_id(t)
                var rect := source.get_tile_texture_region(coord, 0)
                var target_rect := Rect2(offset + zoom_level * rect.position, zoom_level * rect.size)
                if target_rect.has_point(position):
                    return target_rect
            
            offset.y += zoom_level * source.texture.get_height()
    
    return Rect2(-1,-1,0,0)


func tile_parts_from_rect(rect:Rect2) -> Array[Dictionary]:
    if !tileset:
        return []
    
    var tiles:Array[Dictionary] = []
    
    var offset := Vector2.ZERO
    var alt_offset := Vector2.RIGHT * (zoom_level * tiles_size.x + ALTERNATE_TILE_MARGIN)
    for s in tileset.get_source_count():
        var source_id := tileset.get_source_id(s)
        if source_id in disabled_sources:
            continue
        var source := tileset.get_source(source_id) as TileSetAtlasSource
        if !source:
            continue
        for t in source.get_tiles_count():
            var coord := source.get_tile_id(t)
            var tile_rect := source.get_tile_texture_region(coord, 0)
            var target_rect := Rect2(offset + zoom_level * tile_rect.position, zoom_level * tile_rect.size)
            if target_rect.intersects(rect):
                var result := {
                    valid = true,
                    source_id = source_id,
                    coord = coord,
                    alternate = 0,
                    data = source.get_tile_data(coord, 0)
                }
                var pos = target_rect.position + target_rect.size/2
                _build_tile_part_from_position(result, pos, target_rect)
                tiles.push_back(result)
            var alt_count := source.get_alternative_tiles_count(coord)
            for a in alt_count:
                var alt_id := 0
                if a == 0:
                    continue
                
                target_rect = Rect2(alt_offset + zoom_level * (a - 1) * tile_rect.size.x * Vector2.RIGHT, zoom_level * tile_rect.size)
                alt_id = source.get_alternative_tile_id(coord, a)
                if target_rect.intersects(rect):
                    var td := source.get_tile_data(coord, alt_id)
                    var result := {
                        valid = true,
                        source_id = source_id,
                        coord = coord,
                        alternate = alt_id,
                        data = td
                    }
                    var pos = target_rect.position + target_rect.size/2
                    _build_tile_part_from_position(result, pos, target_rect)
                    tiles.push_back(result)
            if alt_count > 1:
                alt_offset.y += zoom_level * tile_rect.size.y
        
        offset.y += zoom_level * source.texture.get_height()
    
    return tiles


func _get_canvas_item(td: TileData) -> RID:
    if !td.material:
        return self.get_canvas_item()
    if _canvas_item_map.has(td.material):
        return _canvas_item_map[td.material]
    
    var rid = RenderingServer.canvas_item_create()
    RenderingServer.canvas_item_set_material(rid, td.material.get_rid())
    RenderingServer.canvas_item_set_parent(rid, get_canvas_item())
    RenderingServer.canvas_item_set_draw_behind_parent(rid, true)
    RenderingServer.canvas_item_set_default_texture_filter(rid, RenderingServer.CANVAS_ITEM_TEXTURE_FILTER_NEAREST)
    _canvas_item_map[td.material] = rid
    return rid


func _draw_tile_data(texture: Texture2D, rect: Rect2, src_rect: Rect2, td: TileData, draw_sides: bool = true) -> void:
    var flipped_rect := rect
    if td.flip_h:
        flipped_rect.size.x = -rect.size.x
    if td.flip_v:
        flipped_rect.size.y = -rect.size.y
    
    RenderingServer.canvas_item_add_texture_rect_region(
        _get_canvas_item(td),
        flipped_rect,
        texture.get_rid(),
        src_rect,
        td.modulate,
        td.transpose
    )
    
    var type := BetterTerrain.get_tile_terrain_type(td)
    if type == BetterTerrain.TileCategory.NON_TERRAIN:
        draw_rect(rect, Color(0.1, 0.1, 0.1, 0.5), true)
        return
    
    var terrain := BetterTerrain.get_terrain(tileset, type)
    if !terrain.valid:
        return
    
    var transform := Transform2D(0.0, rect.size, 0.0, rect.position)
    var center_polygon = transform * BetterTerrain.data.peering_polygon(tileset, terrain.type, -1)
    draw_colored_polygon(center_polygon, Color(terrain.color, 0.6))
    if terrain.type == BetterTerrain.TerrainType.DECORATION:
        center_polygon.append(center_polygon[0])
        draw_polyline(center_polygon, Color.BLACK)
    
    if paint < BetterTerrain.TileCategory.EMPTY or paint >= BetterTerrain.terrain_count(tileset):
        return
    
    if not draw_sides:
        return
    
    var paint_terrain := BetterTerrain.get_terrain(tileset, paint)
    for p in BetterTerrain.data.get_terrain_peering_cells(tileset, terrain.type):
        if paint in BetterTerrain.tile_peering_types(td, p):
            var side_polygon = transform * BetterTerrain.data.peering_polygon(tileset, terrain.type, p)
            draw_colored_polygon(side_polygon, Color(paint_terrain.color, 0.6))
            if paint_terrain.type == BetterTerrain.TerrainType.DECORATION:
                side_polygon.append(side_polygon[0])
                draw_polyline(side_polygon, Color.BLACK)


func _draw_tile_symmetry(texture: Texture2D, rect: Rect2, src_rect: Rect2, td: TileData, draw_icon: bool = true) -> void:
    var flipped_rect := rect
    if td.flip_h:
        flipped_rect.size.x = -rect.size.x
    if td.flip_v:
        flipped_rect.size.y = -rect.size.y
    
    RenderingServer.canvas_item_add_texture_rect_region(
        _get_canvas_item(td),
        flipped_rect,
        texture.get_rid(),
        src_rect,
        td.modulate,
        td.transpose
    )
    
    if not draw_icon:
        return
    
    var symmetry_type = BetterTerrain.get_tile_symmetry_type(td)
    if symmetry_type == 0:
        return
    var symmetry_icon = paint_symmetry_icons[symmetry_type]
    
    RenderingServer.canvas_item_add_texture_rect_region(
        _get_canvas_item(td),
        rect,
        symmetry_icon.get_rid(),
        Rect2(Vector2.ZERO, symmetry_icon.get_size()),
        Color(1,1,1,0.5)
    )


func _draw() -> void:
    if !tileset:
        return
    
    # Clear material-based render targets
    RenderingServer.canvas_item_clear(_canvas_item_background)
    for p in _canvas_item_map:
        RenderingServer.canvas_item_clear(_canvas_item_map[p])
    
    var offset := Vector2.ZERO
    var alt_offset := Vector2.RIGHT * (zoom_level * tiles_size.x + ALTERNATE_TILE_MARGIN)
    
    RenderingServer.canvas_item_add_texture_rect(
        _canvas_item_background,
        Rect2(alt_offset, zoom_level * alternate_size),
        checkerboard.get_rid(),
        true
    )
    
    for s in tileset.get_source_count():
        var source_id := tileset.get_source_id(s)
        if source_id in disabled_sources:
            continue
        var source := tileset.get_source(source_id) as TileSetAtlasSource
        if !source or !source.texture:
            continue
        
        RenderingServer.canvas_item_add_texture_rect(
            _canvas_item_background,
            Rect2(offset, zoom_level * source.texture.get_size()),
            checkerboard.get_rid(),
            true
        )
        for t in source.get_tiles_count():
            var coord := source.get_tile_id(t)
            var rect := source.get_tile_texture_region(coord, 0)
            var alt_count := source.get_alternative_tiles_count(coord)
            var target_rect : Rect2
            for a in alt_count:
                var alt_id := 0
                if a == 0:
                    target_rect = Rect2(offset + zoom_level * rect.position, zoom_level * rect.size)
                else:
                    target_rect = Rect2(alt_offset + zoom_level * (a - 1) * rect.size.x * Vector2.RIGHT, zoom_level * rect.size)
                    alt_id = source.get_alternative_tile_id(coord, a)
                
                var td := source.get_tile_data(coord, alt_id)
                var drawing_current = BetterTerrain.get_tile_terrain_type(td) == paint
                if paint_mode == PaintMode.PAINT_SYMMETRY:
                    _draw_tile_symmetry(source.texture, target_rect, rect, td, drawing_current)
                else:
                    _draw_tile_data(source.texture, target_rect, rect, td)
                
                if drawing_current:
                    draw_rect(target_rect.grow(-1), Color(0,0,0, 0.75), false, 1)
                    draw_rect(target_rect, Color(1,1,1, 0.75), false, 1)
                
                if paint_mode == PaintMode.SELECT:
                    if selected_tile_states.any(func(v):
                        return v.part.data == td
                        ):
                        draw_rect(target_rect.grow(-1), Color.DEEP_SKY_BLUE, false, 2)
            
            if alt_count > 1:
                alt_offset.y += zoom_level * rect.size.y
        
        # Blank out unused or uninteresting tiles
        var size := source.get_atlas_grid_size()
        for y in size.y:
            for x in size.x:
                var pos := Vector2i(x, y)
                if !is_tile_in_source(source, pos):
                    var atlas_pos := source.margins + pos * (source.separation + source.texture_region_size)
                    draw_rect(Rect2(offset + zoom_level * atlas_pos, zoom_level * source.texture_region_size), Color(0.0, 0.0, 0.0, 0.8), true)
        
        offset.y += zoom_level * source.texture.get_height()
    
    # Blank out unused alternate tile sections
    alt_offset = Vector2.RIGHT * (zoom_level * tiles_size.x + ALTERNATE_TILE_MARGIN)
    for a in alternate_lookup:
        if a[1] in disabled_sources:
            continue
        var source := tileset.get_source(a[1]) as TileSetAtlasSource
        if source:
            var count := source.get_alternative_tiles_count(a[2]) - 1
            var occupied_width = count * zoom_level * a[0].x
            var area := Rect2(
                alt_offset.x + occupied_width,
                alt_offset.y,
                zoom_level * alternate_size.x - occupied_width,
                zoom_level * a[0].y
            )
            draw_rect(area, Color(0.0, 0.0, 0.0, 0.8), true)
        alt_offset.y += zoom_level * a[0].y
    
    if highlighted_tile_part.valid:
        if paint_mode == PaintMode.PAINT_PEERING and highlighted_tile_part.has("polygon"):
            var transform := Transform2D(0.0, highlighted_tile_part.rect.size - 2 * Vector2.ONE, 0.0, highlighted_tile_part.rect.position + Vector2.ONE)
            draw_colored_polygon(transform * highlighted_tile_part.polygon, Color(Color.WHITE, 0.2))
        if paint_mode != PaintMode.NO_PAINT:
            var inner_rect := Rect2(highlighted_tile_part.rect.position + Vector2.ONE, highlighted_tile_part.rect.size - 2 * Vector2.ONE) 
            draw_rect(inner_rect, Color.WHITE, false)
        if paint_mode == PaintMode.PAINT_SYMMETRY:
            if paint_symmetry > 0:
                var symmetry_icon = paint_symmetry_icons[paint_symmetry]
                draw_texture_rect(symmetry_icon, highlighted_tile_part.rect, false, Color(0.5,0.75,1,0.5))
    
    if paint_mode == PaintMode.SELECT:
        draw_rect(selection_rect, Color.WHITE, false)
    
    if paint_mode == PaintMode.PASTE:
        if staged_paste_tile_states.size() > 0:
            var base_rect = staged_paste_tile_states[0].base_rect
            var paint_terrain := BetterTerrain.get_terrain(tileset, paint)
            var paint_terrain_type = paint_terrain.type
            if paint_terrain_type == BetterTerrain.TerrainType.CATEGORY:
                paint_terrain_type = 0
            for state in staged_paste_tile_states:
                var staged_rect:Rect2 = state.base_rect
                staged_rect.position -= base_rect.position + base_rect.size / 2
                
                staged_rect.position *= zoom_level
                staged_rect.size *= zoom_level
                
                staged_rect.position += Vector2(current_position)
                
                var real_rect = tile_rect_from_position(staged_rect.get_center())
                if real_rect.position.x >= 0:
                    draw_rect(real_rect, Color(0,0,0, 0.3), true)
                    var transform := Transform2D(0.0, real_rect.size, 0.0, real_rect.position)
                    var tile_sides = BetterTerrain.data.get_terrain_peering_cells(tileset, paint_terrain_type)
                    for p in tile_sides:
                        if state.paint in BetterTerrain.tile_peering_types(state.part.data, p):
                            var side_polygon = BetterTerrain.data.peering_polygon(tileset, paint_terrain_type, p)
                            var color = Color(paint_terrain.color, 0.6)
                            draw_colored_polygon(transform * side_polygon, color)
                
                draw_rect(staged_rect, Color.DEEP_PINK, false)
    


func delete_selection():
    undo_manager.create_action("Delete tile terrain peering types", UndoRedo.MERGE_DISABLE, tileset)
    for t in selected_tile_states:
        for side in range(16):
            var old_peering = BetterTerrain.tile_peering_types(t.part.data, side)
            if old_peering.has(paint):
                undo_manager.add_do_method(BetterTerrain, &"remove_tile_peering_type", tileset, t.part.data, side, paint)
                undo_manager.add_undo_method(BetterTerrain, &"add_tile_peering_type", tileset, t.part.data, side, paint)
    
    undo_manager.add_do_method(self, &"queue_redraw")
    undo_manager.add_undo_method(self, &"queue_redraw")
    undo_manager.commit_action()


func toggle_selection():
    undo_manager.create_action("Toggle tile terrain", UndoRedo.MERGE_DISABLE, tileset, true)
    for t in selected_tile_states:
        var type := BetterTerrain.get_tile_terrain_type(t.part.data)
        var goal := paint if paint != type else BetterTerrain.TileCategory.NON_TERRAIN
        
        terrain_undo.add_do_method(undo_manager, BetterTerrain, &"set_tile_terrain_type", [tileset, t.part.data, goal])
        if goal == BetterTerrain.TileCategory.NON_TERRAIN:
            terrain_undo.create_peering_restore_point_tile(
                undo_manager,
                tileset,
                t.part.source_id,
                t.part.coord,
                t.part.alternate
            )
        else:
            undo_manager.add_undo_method(BetterTerrain, &"set_tile_terrain_type", tileset, t.part.data, type)
    
    terrain_undo.add_do_method(undo_manager, self, &"queue_redraw", [])
    undo_manager.add_undo_method(self, &"queue_redraw")
    undo_manager.commit_action()
    terrain_undo.action_count += 1


func copy_selection():
    copied_tile_states = selected_tile_states


func paste_selection():
    staged_paste_tile_states = copied_tile_states
    selected_tile_states = []
    paint_mode = PaintMode.PASTE
    paint_action = PaintAction.PASTE
    paste_occurred.emit()
    queue_redraw()


func set_disabled_sources(list):
    disabled_sources = list
    queue_redraw()


func emit_terrain_updated(index):
    terrain_updated.emit(index)


func _gui_input(event) -> void:
    if event is InputEventKey and event.is_pressed():
        if event.keycode == KEY_DELETE and not event.echo:
            accept_event()
            delete_selection()
        if event.keycode == KEY_ENTER and not event.echo:
            accept_event()
            toggle_selection()
        if event.keycode == KEY_ESCAPE and not event.echo:
            accept_event()
            if paint_action == PaintAction.PASTE:
                staged_paste_tile_states = []
                paint_mode = PaintMode.SELECT
                paint_action = PaintAction.NO_ACTION
                selection_start = Vector2i(-1,-1)
        if event.keycode == KEY_C and (event.ctrl_pressed or event.meta_pressed) and not event.echo:
            accept_event()
            copy_selection()
        if event.keycode == KEY_X and (event.ctrl_pressed or event.meta_pressed) and not event.echo:
            accept_event()
            copy_selection()
            delete_selection()
        if event.keycode == KEY_V and (event.ctrl_pressed or event.meta_pressed) and not event.echo:
            accept_event()
            paste_selection()
    if event is InputEventMouseButton:
        if event.button_index == MOUSE_BUTTON_WHEEL_UP and (event.ctrl_pressed or event.meta_pressed):
            accept_event()
            change_zoom_level.emit(zoom_level * 1.1)
        if event.button_index == MOUSE_BUTTON_WHEEL_DOWN and (event.ctrl_pressed or event.meta_pressed):
            accept_event()
            change_zoom_level.emit(zoom_level / 1.1)
    
    var released : bool = event is InputEventMouseButton and (not event.pressed and (event.button_index == MOUSE_BUTTON_LEFT or event.button_index == MOUSE_BUTTON_RIGHT))
    if released:
        paint_action = PaintAction.NO_ACTION
    
    if event is InputEventMouseMotion:
        prev_position = current_position
        current_position = event.position
        var tile := tile_part_from_position(event.position)
        if tile.valid != highlighted_tile_part.valid or\
            (tile.valid and tile.data != highlighted_tile_part.data) or\
            (tile.valid and tile.get("peering") != highlighted_tile_part.get("peering")) or\
            event.button_mask & MOUSE_BUTTON_LEFT and paint_action == PaintAction.SELECT:
            queue_redraw()
        highlighted_tile_part = tile
    
    var clicked : bool = event is InputEventMouseButton and (event.pressed and (event.button_index == MOUSE_BUTTON_LEFT or event.button_index == MOUSE_BUTTON_RIGHT))
    if clicked:
        initial_click = current_position
        selection_start = Vector2i(-1,-1)
        terrain_undo.action_index += 1
        terrain_undo.action_count = 0
    if released:
        terrain_undo.finish_action()
        selection_rect = Rect2i(0,0,0,0)
        queue_redraw()
    
    if paint_action == PaintAction.PASTE:
        if event is InputEventMouseMotion:
            queue_redraw()
        
        if clicked:
            if event.button_index == MOUSE_BUTTON_LEFT and staged_paste_tile_states.size() > 0:
                undo_manager.create_action("Paste tile terrain peering types", UndoRedo.MERGE_DISABLE, tileset)
                var base_rect = staged_paste_tile_states[0].base_rect
                for p in staged_paste_tile_states:
                    var staged_rect:Rect2 = p.base_rect
                    staged_rect.position -= base_rect.position + base_rect.size / 2
                    
                    staged_rect.position *= zoom_level
                    staged_rect.size *= zoom_level
                    
                    staged_rect.position += Vector2(current_position)
                    
                    var old_tile_part = tile_part_from_position(staged_rect.get_center())
                    var new_tile_state = p
                    if (not old_tile_part.valid) or (not new_tile_state.part.valid):
                        continue
                    
                    for side in range(16):
                        var old_peering = BetterTerrain.tile_peering_types(old_tile_part.data, side)
                        var new_sides = new_tile_state.sides
                        if new_sides.has(side) and not old_peering.has(paint):
                            undo_manager.add_do_method(BetterTerrain, &"add_tile_peering_type", tileset, old_tile_part.data, side, paint)
                            undo_manager.add_undo_method(BetterTerrain, &"remove_tile_peering_type", tileset, old_tile_part.data, side, paint)
                        elif old_peering.has(paint) and not new_sides.has(side):
                            undo_manager.add_do_method(BetterTerrain, &"remove_tile_peering_type", tileset, old_tile_part.data, side, paint)
                            undo_manager.add_undo_method(BetterTerrain, &"add_tile_peering_type", tileset, old_tile_part.data, side, paint)
                    
                    var old_symmetry = BetterTerrain.get_tile_symmetry_type(old_tile_part.data)
                    var new_symmetry = new_tile_state.symmetry
                    if new_symmetry != old_symmetry:
                        undo_manager.add_do_method(BetterTerrain, &"set_tile_symmetry_type", tileset, old_tile_part.data, new_symmetry)
                        undo_manager.add_undo_method(BetterTerrain, &"set_tile_symmetry_type", tileset, old_tile_part.data, old_symmetry)
                    
                undo_manager.add_do_method(self, &"queue_redraw")
                undo_manager.add_undo_method(self, &"queue_redraw")
                undo_manager.commit_action()
            
            staged_paste_tile_states = []
            paint_mode = PaintMode.SELECT
            paint_action = PaintAction.SELECT
        return
    
    if clicked and pick_icon_terrain >= 0:
        highlighted_tile_part = tile_part_from_position(current_position)
        if !highlighted_tile_part.valid:
            return
        
        var t = BetterTerrain.get_terrain(tileset, paint)
        var prev_icon = t.icon.duplicate()
        var icon = {
            source_id = highlighted_tile_part.source_id,
            coord = highlighted_tile_part.coord
        }
        undo_manager.create_action("Edit terrain details", UndoRedo.MERGE_DISABLE, tileset)
        undo_manager.add_do_method(BetterTerrain, &"set_terrain", tileset, paint, t.name, t.color, t.type, t.categories, icon)
        undo_manager.add_do_method(self, &"emit_terrain_updated", paint)
        undo_manager.add_undo_method(BetterTerrain, &"set_terrain", tileset, paint, t.name, t.color, t.type, t.categories, prev_icon)
        undo_manager.add_undo_method(self, &"emit_terrain_updated", paint)
        undo_manager.commit_action()
        pick_icon_terrain = -1
        return
    
    if pick_icon_terrain_cancel:
        pick_icon_terrain = -1
        pick_icon_terrain_cancel = false
    
    if paint != BetterTerrain.TileCategory.NON_TERRAIN and clicked:
        paint_action = PaintAction.NO_ACTION
        if highlighted_tile_part.valid:
            match [paint_mode, event.button_index]:
                [PaintMode.PAINT_TYPE, MOUSE_BUTTON_LEFT]: paint_action = PaintAction.DRAW_TYPE
                [PaintMode.PAINT_TYPE, MOUSE_BUTTON_RIGHT]: paint_action = PaintAction.ERASE_TYPE
                [PaintMode.PAINT_PEERING, MOUSE_BUTTON_LEFT]: paint_action = PaintAction.DRAW_PEERING
                [PaintMode.PAINT_PEERING, MOUSE_BUTTON_RIGHT]: paint_action = PaintAction.ERASE_PEERING
                [PaintMode.PAINT_SYMMETRY, MOUSE_BUTTON_LEFT]: paint_action = PaintAction.DRAW_SYMMETRY
                [PaintMode.PAINT_SYMMETRY, MOUSE_BUTTON_RIGHT]: paint_action = PaintAction.ERASE_SYMMETRY
                [PaintMode.SELECT, MOUSE_BUTTON_LEFT]: paint_action = PaintAction.SELECT
        else:
            match [paint_mode, event.button_index]:
                [PaintMode.SELECT, MOUSE_BUTTON_LEFT]: paint_action = PaintAction.SELECT
    
    if (clicked or event is InputEventMouseMotion) and paint_action != PaintAction.NO_ACTION:
        
        if paint_action == PaintAction.SELECT:
            if clicked:
                selection_start = Vector2i(-1,-1)
                queue_redraw()
            if selection_start.x < 0:
                selection_start = current_position
            selection_end = current_position
            
            selection_rect = Rect2i(selection_start, selection_end - selection_start).abs()
            var selected_tile_parts = tile_parts_from_rect(selection_rect)
            selected_tile_states = []
            for t in selected_tile_parts:
                var state := {
                    part = t,
                    base_rect = Rect2(t.rect.position / zoom_level, t.rect.size / zoom_level),
                    paint = paint,
                    sides = BetterTerrain.tile_peering_for_type(t.data, paint),
                    symmetry = BetterTerrain.get_tile_symmetry_type(t.data)
                }
                selected_tile_states.push_back(state)
        else:
            if !highlighted_tile_part.valid:
                return
            #slightly crude and non-optimal but way simpler than the "correct" solution
            var current_position_vec2 = Vector2(current_position)
            var prev_position_vec2 = Vector2(prev_position)
            var mouse_dist = current_position_vec2.distance_to(prev_position_vec2)
            var step_size = (tile_part_size.x * zoom_level)
            var steps = ceil(mouse_dist / step_size) + 1
            for i in range(steps):
                var t = float(i) / steps 
                var check_position = prev_position_vec2.lerp(current_position_vec2, t)
                highlighted_tile_part = tile_part_from_position(check_position)
            
                if !highlighted_tile_part.valid:
                    continue
                
                if paint_action == PaintAction.DRAW_TYPE or paint_action == PaintAction.ERASE_TYPE:
                    var type := BetterTerrain.get_tile_terrain_type(highlighted_tile_part.data)
                    var goal := paint if paint_action == PaintAction.DRAW_TYPE else BetterTerrain.TileCategory.NON_TERRAIN
                    if type != goal:
                        undo_manager.create_action("Set tile terrain type " + str(terrain_undo.action_index), UndoRedo.MERGE_ALL, tileset, true)
                        terrain_undo.add_do_method(undo_manager, BetterTerrain, &"set_tile_terrain_type", [tileset, highlighted_tile_part.data, goal])
                        terrain_undo.add_do_method(undo_manager, self, &"queue_redraw", [])
                        if goal == BetterTerrain.TileCategory.NON_TERRAIN:
                            terrain_undo.create_peering_restore_point_tile(
                                undo_manager,
                                tileset,
                                highlighted_tile_part.source_id,
                                highlighted_tile_part.coord,
                                highlighted_tile_part.alternate
                            )
                        else:
                            undo_manager.add_undo_method(BetterTerrain, &"set_tile_terrain_type", tileset, highlighted_tile_part.data, type)
                        undo_manager.add_undo_method(self, &"queue_redraw")
                        undo_manager.commit_action()
                        terrain_undo.action_count += 1
                elif paint_action == PaintAction.DRAW_PEERING:
                    if highlighted_tile_part.has("peering"):
                        if !(paint in BetterTerrain.tile_peering_types(highlighted_tile_part.data, highlighted_tile_part.peering)):
                            undo_manager.create_action("Set tile terrain peering type " + str(terrain_undo.action_index), UndoRedo.MERGE_ALL, tileset, true)
                            terrain_undo.add_do_method(undo_manager, BetterTerrain, &"add_tile_peering_type", [tileset, highlighted_tile_part.data, highlighted_tile_part.peering, paint])
                            terrain_undo.add_do_method(undo_manager, self, &"queue_redraw", [])
                            undo_manager.add_undo_method(BetterTerrain, &"remove_tile_peering_type", tileset, highlighted_tile_part.data, highlighted_tile_part.peering, paint)
                            undo_manager.add_undo_method(self, &"queue_redraw")
                            undo_manager.commit_action()
                            terrain_undo.action_count += 1
                elif paint_action == PaintAction.ERASE_PEERING:
                    if highlighted_tile_part.has("peering"):
                        if paint in BetterTerrain.tile_peering_types(highlighted_tile_part.data, highlighted_tile_part.peering):
                            undo_manager.create_action("Remove tile terrain peering type " + str(terrain_undo.action_index), UndoRedo.MERGE_ALL, tileset, true)
                            terrain_undo.add_do_method(undo_manager, BetterTerrain, &"remove_tile_peering_type", [tileset, highlighted_tile_part.data, highlighted_tile_part.peering, paint])
                            terrain_undo.add_do_method(undo_manager, self, &"queue_redraw", [])
                            undo_manager.add_undo_method(BetterTerrain, &"add_tile_peering_type", tileset, highlighted_tile_part.data, highlighted_tile_part.peering, paint)
                            undo_manager.add_undo_method(self, &"queue_redraw")
                            undo_manager.commit_action()
                            terrain_undo.action_count += 1
                elif paint_action == PaintAction.DRAW_SYMMETRY:
                    if paint == BetterTerrain.get_tile_terrain_type(highlighted_tile_part.data):
                        undo_manager.create_action("Set tile symmetry type " + str(terrain_undo.action_index), UndoRedo.MERGE_ALL, tileset, true)
                        var old_symmetry = BetterTerrain.get_tile_symmetry_type(highlighted_tile_part.data)
                        terrain_undo.add_do_method(undo_manager, BetterTerrain, &"set_tile_symmetry_type", [tileset, highlighted_tile_part.data, paint_symmetry])
                        terrain_undo.add_do_method(undo_manager, self, &"queue_redraw", [])
                        undo_manager.add_undo_method(BetterTerrain, &"set_tile_symmetry_type", tileset, highlighted_tile_part.data, old_symmetry)
                        undo_manager.add_undo_method(self, &"queue_redraw")
                        undo_manager.commit_action()
                        terrain_undo.action_count += 1
                elif paint_action == PaintAction.ERASE_SYMMETRY:
                    if paint == BetterTerrain.get_tile_terrain_type(highlighted_tile_part.data):
                        undo_manager.create_action("Remove tile symmetry type " + str(terrain_undo.action_index), UndoRedo.MERGE_ALL, tileset, true)
                        var old_symmetry = BetterTerrain.get_tile_symmetry_type(highlighted_tile_part.data)
                        terrain_undo.add_do_method(undo_manager, BetterTerrain, &"set_tile_symmetry_type", [tileset, highlighted_tile_part.data, BetterTerrain.SymmetryType.NONE])
                        terrain_undo.add_do_method(undo_manager, self, &"queue_redraw", [])
                        undo_manager.add_undo_method(BetterTerrain, &"set_tile_symmetry_type", tileset, highlighted_tile_part.data, old_symmetry)
                        undo_manager.add_undo_method(self, &"queue_redraw")
                        undo_manager.commit_action()
                        terrain_undo.action_count += 1


func _on_zoom_value_changed(value) -> void:
    zoom_level = value
    custom_minimum_size.x = zoom_level * tiles_size.x
    if alternate_size.x > 0:
        custom_minimum_size.x += ALTERNATE_TILE_MARGIN + zoom_level * alternate_size.x
    custom_minimum_size.y = zoom_level * max(tiles_size.y, alternate_size.y)
    queue_redraw()


func clear_highlighted_tile() -> void:
    highlighted_tile_part = { valid = false }
    queue_redraw()
</file>

<file path="addons/better-terrain/editor/TileView.gd.uid">
uid://bnpxxnrfdoqg2
</file>

<file path="addons/better-terrain/icon.svg">
<svg height="128" width="128" xmlns="http://www.w3.org/2000/svg"><path d="m83.636719 67.794922a20 20 0 0 1 -15.636719 15.800781v44.404297h40c11.08 0 20-8.92 20-20v-40.205078z" fill="#169318"/><path d="m0 67.794922v40.205078c0 11.08 8.92 20 20 20h40v-44.404297a20 20 0 0 1 -15.636719-15.800781z" fill="#993d16"/><path d="m68 0v44.404297a20 20 0 0 1 15.552734 15.390625h44.447266v-39.794922c0-11.08-8.92-20-20-20z" fill="#993d16"/><path d="m20 0c-11.08 0-20 8.92-20 20v39.794922h44.447266a20 20 0 0 1 15.552734-15.390625v-44.404297z" fill="#169318"/></svg>
</file>

<file path="addons/better-terrain/icon.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://c66nal373iwgd"
path="res://.godot/imported/icon.svg-7d4870855c0daec5051feb4adbea0091.ctex"
metadata={
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icon.svg"
dest_files=["res://.godot/imported/icon.svg-7d4870855c0daec5051feb4adbea0091.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=1.0
editor/scale_with_editor_scale=false
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/Decoration.svg">
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect x="6" y="6" width="4" height="4" fill="white"/>
<path d="M4.5 6.5L1.5 9.5M1.5 6.5L4.5 9.5" stroke="white" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M14.5 6.5L11.5 9.5M11.5 6.5L14.5 9.5" stroke="white" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M9.5 1.5L6.5 4.5M6.5 1.5L9.5 4.5" stroke="white" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M9.5 11.5L6.5 14.5M6.5 11.5L9.5 14.5" stroke="white" stroke-linecap="round" stroke-linejoin="round"/>
</svg>
</file>

<file path="addons/better-terrain/icons/Decoration.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://kmypxsqhynyv"
path="res://.godot/imported/Decoration.svg-03773e83cc849c7744ecf3d36eee0072.ctex"
metadata={
"has_editor_variant": true,
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/Decoration.svg"
dest_files=["res://.godot/imported/Decoration.svg-03773e83cc849c7744ecf3d36eee0072.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=1.0
editor/scale_with_editor_scale=true
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/EditSymmetry.svg">
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_952_3274)">
<path d="M8.68988 11.1648L12.7626 15.2375C13.446 15.9209 14.554 15.9209 15.2374 15.2375C15.9208 14.5541 15.9208 13.446 15.2374 12.7626L11.1648 8.68994C10.5815 9.72354 9.72348 10.5815 8.68988 11.1648Z" fill="#E0E0E0"/>
<path d="M11 1C11 0.447715 10.5523 0 10 0H7C6.44772 0 6 0.447715 6 1V4C6 4.55228 6.44772 5 7 5C7.55228 5 8 4.55228 8 4V3.05033C8.61889 3.68203 9 4.54703 9 5.50004C9 7.26328 7.69615 8.72198 6 8.96459V10.9776C8.80325 10.725 11 8.36906 11 5.50004C11 4.16979 10.5279 2.95059 9.74266 2H10C10.5523 2 11 1.55228 11 1Z" fill="#E0E0E0"/>
<path d="M0 10C0 10.5523 0.447715 11 1 11H4C4.55228 11 5 10.5523 5 10V7C5 6.44772 4.55228 6 4 6C3.44772 6 3 6.44772 3 7V7.94975C2.38111 7.31805 2 6.45305 2 5.50004C2 3.7368 3.30385 2.2781 5 2.03548V0.0224609C2.19675 0.275075 0 2.63102 0 5.50004C0 6.83026 0.472062 8.04943 1.25727 9H1C0.447715 9 0 9.44771 0 10Z" fill="#E0E0E0"/>
</g>
<defs>
<clipPath id="clip0_952_3274">
<rect width="16" height="16" fill="white"/>
</clipPath>
</defs>
</svg>
</file>

<file path="addons/better-terrain/icons/EditSymmetry.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://co6gwwmog0pjy"
path="res://.godot/imported/EditSymmetry.svg-794172208a8d86bb609531b82199f095.ctex"
metadata={
"has_editor_variant": true,
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/EditSymmetry.svg"
dest_files=["res://.godot/imported/EditSymmetry.svg-794172208a8d86bb609531b82199f095.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=1.0
editor/scale_with_editor_scale=true
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/EditTerrain.svg">
<svg height="16" viewBox="0 0 16 16" width="16" xmlns="http://www.w3.org/2000/svg"><path d="m1 1v14h14v-14zm1 1h12v12h-12zm1 1v2.6660156h2.6660156v-2.6660156zm3.6679688 0v2.6660156h2.6640624v-2.6660156zm3.6660152 0v2.6660156h2.666016v-2.6660156zm-7.333984 3.6660156v2.6660156h2.6660156v-2.6660156zm7.333984 0v2.6660156h2.666016v-2.6660156zm-7.333984 3.6679684v2.666016h2.6660156v-2.666016zm3.6679688 0v2.666016h2.6640624v-2.666016zm3.6660152 0v2.666016h2.666016v-2.666016z" fill="#e0e0e0"/></svg>
</file>

<file path="addons/better-terrain/icons/EditTerrain.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://bo2cjv08jkvf8"
path="res://.godot/imported/EditTerrain.svg-f7ee950d68a391de33e4e8ddd76bf2ac.ctex"
metadata={
"has_editor_variant": true,
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/EditTerrain.svg"
dest_files=["res://.godot/imported/EditTerrain.svg-f7ee950d68a391de33e4e8ddd76bf2ac.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=1.0
editor/scale_with_editor_scale=true
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/EditType.svg">
<svg height="16" viewBox="0 0 16 16" width="16" xmlns="http://www.w3.org/2000/svg"><path d="m1 1v14h14v-14zm1 1h12v12h-12zm4.6679688 4.6660156v2.6660156h2.6640624v-2.6660156z" fill="#e0e0e0"/></svg>
</file>

<file path="addons/better-terrain/icons/EditType.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://c6lxq2y7mpb18"
path="res://.godot/imported/EditType.svg-e7b3005c6a8f21d5102295c55b564ad1.ctex"
metadata={
"has_editor_variant": true,
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/EditType.svg"
dest_files=["res://.godot/imported/EditType.svg-e7b3005c6a8f21d5102295c55b564ad1.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=1.0
editor/scale_with_editor_scale=true
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/MatchTiles.svg">
<svg height="16" viewBox="0 0 16 16" width="16" xmlns="http://www.w3.org/2000/svg"><path d="m1 1v4h4v-4zm5 0v4h4v-4zm5 0v4h4v-4zm-10 5v4h4v-4zm5 0v4h4v-4zm5 0v4h4v-4zm-10 5v4h4v-4zm5 0v4h4v-4zm5 0v4h4v-4z" fill="#fff" stroke-linecap="round" stroke-linejoin="round" stroke-width="7.55906"/></svg>
</file>

<file path="addons/better-terrain/icons/MatchTiles.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://d1h1p7pcwdnjk"
path="res://.godot/imported/MatchTiles.svg-38111e21a893bd8f161311f0d1968a40.ctex"
metadata={
"has_editor_variant": true,
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/MatchTiles.svg"
dest_files=["res://.godot/imported/MatchTiles.svg-38111e21a893bd8f161311f0d1968a40.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=1.0
editor/scale_with_editor_scale=true
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/MatchVertices.svg">
<svg height="16" viewBox="0 0 16 16" width="16" xmlns="http://www.w3.org/2000/svg"><path d="m1 1v6l6-6zm8 0 6 6v-6zm-1 1-6 6 6 6 6-6zm-7 7v6h6zm14 0-6 6h6z" fill="#fff" stroke-width="3.77952"/></svg>
</file>

<file path="addons/better-terrain/icons/MatchVertices.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://dfemy1g6okwlv"
path="res://.godot/imported/MatchVertices.svg-288fe47ee1089920379407d6abf1a06c.ctex"
metadata={
"has_editor_variant": true,
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/MatchVertices.svg"
dest_files=["res://.godot/imported/MatchVertices.svg-288fe47ee1089920379407d6abf1a06c.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=1.0
editor/scale_with_editor_scale=true
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/NonModifying.svg">
<svg height="16" viewBox="0 0 16 16" width="16" xmlns="http://www.w3.org/2000/svg"><path d="m3 1-2 2v10l2 2h10l2-2v-10l-2-2zm2.1992188 3.171875a1 1 0 0 1 .6796874.2929688l2.1210938 2.1210937 2.121094-2.1210937a1 1 0 0 1 1.414062 0 1 1 0 0 1 0 1.4140624l-2.1210935 2.1210938 2.1210935 2.121094a1 1 0 0 1 0 1.414062 1 1 0 0 1 -1.414062 0l-2.121094-2.1210935-2.1210938 2.1210935a1 1 0 0 1 -1.4140624 0 1 1 0 0 1 0-1.414062l2.1210937-2.121094-2.1210937-2.1210938a1 1 0 0 1 0-1.4140624 1 1 0 0 1 .734375-.2929688z" fill="#fffaff"/></svg>
</file>

<file path="addons/better-terrain/icons/NonModifying.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://1yr6yruwl63u"
path="res://.godot/imported/NonModifying.svg-4d16d471be4a8f1d3ba0c013ff629ee1.ctex"
metadata={
"has_editor_variant": true,
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/NonModifying.svg"
dest_files=["res://.godot/imported/NonModifying.svg-4d16d471be4a8f1d3ba0c013ff629ee1.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=1.0
editor/scale_with_editor_scale=true
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/paint-symmetry/SymmetryAll.svg">
<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M4.5 9C4.5 6.51472 6.51472 4.5 9 4.5C11.4853 4.5 13.5 6.51472 13.5 9C13.5 11.4853 11.4853 13.5 9 13.5C6.51472 13.5 4.5 11.4853 4.5 9ZM9 1.5C4.85786 1.5 1.5 4.85786 1.5 9C1.5 13.1421 4.85786 16.5 9 16.5C13.1421 16.5 16.5 13.1421 16.5 9C16.5 4.85786 13.1421 1.5 9 1.5ZM9 11.5C10.3807 11.5 11.5 10.3807 11.5 9C11.5 7.61929 10.3807 6.5 9 6.5C7.61929 6.5 6.5 7.61929 6.5 9C6.5 10.3807 7.61929 11.5 9 11.5Z" fill="white" stroke="black"/>
</svg>
</file>

<file path="addons/better-terrain/icons/paint-symmetry/SymmetryAll.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://iid5buh1t5j5"
path="res://.godot/imported/SymmetryAll.svg-c2902d14b54ee9a54b7986a2ea5e47a7.ctex"
metadata={
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/paint-symmetry/SymmetryAll.svg"
dest_files=["res://.godot/imported/SymmetryAll.svg-c2902d14b54ee9a54b7986a2ea5e47a7.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=4.0
editor/scale_with_editor_scale=false
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/paint-symmetry/SymmetryFlip.svg">
<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M10.5 11.5854L10.5 6.41458C11.0277 6.60067 11.6386 6.4827 12.0607 6.06066C12.6464 5.47487 12.6464 4.52513 12.0607 3.93934L10.0607 1.93934C9.47487 1.35355 8.52513 1.35355 7.93934 1.93934L5.93934 3.93934C5.35355 4.52513 5.35355 5.47487 5.93934 6.06066C6.36138 6.4827 6.97234 6.60067 7.5 6.41458L7.5 11.5854C6.97234 11.3993 6.36138 11.5173 5.93934 11.9393C5.35355 12.5251 5.35355 13.4749 5.93934 14.0607L7.93934 16.0607C8.52513 16.6464 9.47487 16.6464 10.0607 16.0607L12.0607 14.0607C12.6464 13.4749 12.6464 12.5251 12.0607 11.9393C11.6386 11.5173 11.0277 11.3993 10.5 11.5854Z" fill="white" stroke="black" stroke-linecap="round" stroke-linejoin="round"/>
</svg>
</file>

<file path="addons/better-terrain/icons/paint-symmetry/SymmetryFlip.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://brro1lqnf3r5y"
path="res://.godot/imported/SymmetryFlip.svg-0de1b384a4706cad746bcf7b3b7f0c2d.ctex"
metadata={
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/paint-symmetry/SymmetryFlip.svg"
dest_files=["res://.godot/imported/SymmetryFlip.svg-0de1b384a4706cad746bcf7b3b7f0c2d.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=4.0
editor/scale_with_editor_scale=false
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/paint-symmetry/SymmetryMirror.svg">
<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M6.41458 10.5H11.5854C11.3993 11.0277 11.5173 11.6386 11.9393 12.0607C12.5251 12.6464 13.4749 12.6464 14.0607 12.0607L16.0607 10.0607C16.6464 9.47487 16.6464 8.52513 16.0607 7.93934L14.0607 5.93934C13.4749 5.35355 12.5251 5.35355 11.9393 5.93934C11.5173 6.36138 11.3993 6.97234 11.5854 7.5H6.41458C6.60067 6.97234 6.4827 6.36138 6.06066 5.93934C5.47487 5.35355 4.52513 5.35355 3.93934 5.93934L1.93934 7.93934C1.35355 8.52513 1.35355 9.47487 1.93934 10.0607L3.93934 12.0607C4.52513 12.6464 5.47487 12.6464 6.06066 12.0607C6.4827 11.6386 6.60067 11.0277 6.41458 10.5Z" fill="white" stroke="black" stroke-linecap="round" stroke-linejoin="round"/>
</svg>
</file>

<file path="addons/better-terrain/icons/paint-symmetry/SymmetryMirror.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://dpf5p8xxn52cb"
path="res://.godot/imported/SymmetryMirror.svg-2ba85612b4c15f1a7eab344dc47f9a9a.ctex"
metadata={
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/paint-symmetry/SymmetryMirror.svg"
dest_files=["res://.godot/imported/SymmetryMirror.svg-2ba85612b4c15f1a7eab344dc47f9a9a.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=4.0
editor/scale_with_editor_scale=false
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/paint-symmetry/SymmetryReflect.svg">
<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M6.35441 11.6456C6.52581 11.286 6.54587 10.8723 6.41458 10.5H7.5V11.5854C7.12774 11.4541 6.71401 11.4742 6.35441 11.6456ZM11.6456 11.6456C11.286 11.4742 10.8723 11.4541 10.5 11.5854V10.5H11.5854C11.4541 10.8723 11.4742 11.286 11.6456 11.6456ZM11.6456 6.35441C11.4742 6.71401 11.4541 7.12774 11.5854 7.5H10.5V6.41458C10.8723 6.54587 11.286 6.52581 11.6456 6.35441ZM6.35442 6.35442C6.71401 6.52582 7.12774 6.54587 7.5 6.41458V7.5H6.41458C6.54587 7.12774 6.52581 6.71401 6.35442 6.35442ZM5.64558 5.64558C5.08822 5.37993 4.40083 5.47785 3.93934 5.93934L1.93934 7.93934C1.35355 8.52513 1.35355 9.47487 1.93934 10.0607L3.93934 12.0607C4.40084 12.5222 5.08823 12.6201 5.64558 12.3544C5.37992 12.9118 5.47784 13.5992 5.93934 14.0607L7.93934 16.0607C8.52513 16.6464 9.47487 16.6464 10.0607 16.0607L12.0607 14.0607C12.5222 13.5992 12.6201 12.9118 12.3544 12.3544C12.9118 12.6201 13.5992 12.5222 14.0607 12.0607L16.0607 10.0607C16.6464 9.47487 16.6464 8.52513 16.0607 7.93934L14.0607 5.93934C13.5992 5.47784 12.9118 5.37992 12.3544 5.64559C12.6201 5.08823 12.5222 4.40084 12.0607 3.93934L10.0607 1.93934C9.77935 1.65804 9.39782 1.5 9 1.5C8.60217 1.5 8.22064 1.65804 7.93934 1.93934L5.93934 3.93934C5.47784 4.40083 5.37993 5.08823 5.64558 5.64558Z" fill="white" stroke="black" stroke-linecap="round" stroke-linejoin="round"/>
</svg>
</file>

<file path="addons/better-terrain/icons/paint-symmetry/SymmetryReflect.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://d251v4pxpwsre"
path="res://.godot/imported/SymmetryReflect.svg-de65ca99c884ea9239bb60e11b7c0ca4.ctex"
metadata={
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/paint-symmetry/SymmetryReflect.svg"
dest_files=["res://.godot/imported/SymmetryReflect.svg-de65ca99c884ea9239bb60e11b7c0ca4.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=4.0
editor/scale_with_editor_scale=false
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/paint-symmetry/SymmetryRotate180.svg">
<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M7.81404 5.70606C9.04953 5.26223 10.4851 5.53533 11.4749 6.52513C11.8288 6.87906 12.0891 7.28666 12.259 7.72015C12.5612 8.49147 13.4315 8.87172 14.2028 8.56946C14.9742 8.26721 15.3544 7.39691 15.0522 6.62559C14.7343 5.81449 14.2479 5.05553 13.5962 4.40381C11.3866 2.19423 7.98242 1.90803 5.46303 3.54507C5.25562 2.96524 4.70139 2.55036 4.05026 2.55036C3.22184 2.55036 2.55026 3.22194 2.55026 4.05036V6.87879C2.55026 7.70722 3.22184 8.37879 4.05026 8.37879H6.87869C7.70712 8.37879 8.37869 7.70722 8.37869 6.87879C8.37869 6.4041 8.1582 5.98092 7.81404 5.70606ZM10.186 12.2944C8.95048 12.7382 7.51492 12.4651 6.52513 11.4753C6.17119 11.1214 5.91091 10.7138 5.74104 10.2803C5.43878 9.50898 4.56848 9.12872 3.79716 9.43098C3.02584 9.73323 2.64559 10.6035 2.94784 11.3749C3.26569 12.186 3.75209 12.9449 4.40381 13.5966C6.61338 15.8062 10.0176 16.0924 12.537 14.4554C12.7444 15.0352 13.2986 15.4501 13.9497 15.4501C14.7782 15.4501 15.4497 14.7785 15.4497 13.9501V11.1217C15.4497 10.2932 14.7782 9.62165 13.9497 9.62165H11.1213C10.2929 9.62165 9.62131 10.2932 9.62131 11.1217C9.62131 11.5963 9.84181 12.0195 10.186 12.2944Z" fill="white" stroke="black" stroke-linecap="round"/>
</svg>
</file>

<file path="addons/better-terrain/icons/paint-symmetry/SymmetryRotate180.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://c1bmbyb3ig0mx"
path="res://.godot/imported/SymmetryRotate180.svg-ff244f85658bd621d56af3cf4f7c7ebe.ctex"
metadata={
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/paint-symmetry/SymmetryRotate180.svg"
dest_files=["res://.godot/imported/SymmetryRotate180.svg-ff244f85658bd621d56af3cf4f7c7ebe.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=4.0
editor/scale_with_editor_scale=false
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/paint-symmetry/SymmetryRotateAll.svg">
<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M14.8216 4.27106C15.2019 3.99897 15.4497 3.55358 15.4497 3.05029C15.4497 2.22187 14.7782 1.55029 13.9497 1.55029H11.1213C10.2929 1.55029 9.62131 2.22187 9.62131 3.05029V5.87872C9.62131 6.70715 10.2929 7.37872 11.1213 7.37872C11.8172 7.37872 12.4024 6.90487 12.5718 6.26224C13.0101 6.83299 13.314 7.51086 13.4377 8.24808C13.5748 9.06509 14.3482 9.61629 15.1652 9.47922C15.9822 9.34216 16.5334 8.56872 16.3964 7.75172C16.1771 6.44496 15.6211 5.25423 14.8216 4.27106ZM6.26246 5.42796C6.83316 4.98981 7.51098 4.68586 8.24817 4.56218C9.06518 4.42511 9.61638 3.65168 9.47932 2.83467C9.34225 2.01766 8.56882 1.46646 7.75181 1.60353C6.44508 1.82276 5.2543 2.37868 4.27106 3.17821C3.99897 2.79787 3.55356 2.54999 3.05026 2.54999C2.22184 2.54999 1.55026 3.22156 1.55026 4.04999V6.87842C1.55026 7.70684 2.22184 8.37842 3.05026 8.37842H5.87869C6.70712 8.37842 7.37869 7.70685 7.37869 6.87842C7.37869 6.18264 6.90496 5.59751 6.26246 5.42796ZM6.87869 10.621C6.18279 10.621 5.59757 11.0949 5.42814 11.7376C4.98992 11.1668 4.68596 10.4889 4.56227 9.75172C4.42521 8.93471 3.65177 8.3835 2.83476 8.52057C2.01776 8.65764 1.46655 9.43107 1.60362 10.2481C1.82285 11.5548 2.37891 12.7455 3.17838 13.7287C2.7981 14.0008 2.55027 14.4461 2.55027 14.9494C2.55027 15.7778 3.22184 16.4494 4.05027 16.4494H6.87869C7.70712 16.4494 8.37869 15.7778 8.37869 14.9494L8.37869 12.121C8.37869 11.2926 7.70712 10.621 6.87869 10.621ZM11.7376 12.5718C11.1669 13.01 10.489 13.3139 9.75181 13.4376C8.9348 13.5747 8.3836 14.3481 8.52066 15.1651C8.65773 15.9821 9.43117 16.5333 10.2482 16.3963C11.555 16.177 12.7457 15.621 13.7289 14.8215C14.001 15.2018 14.4464 15.4497 14.9497 15.4497C15.7782 15.4497 16.4497 14.7781 16.4497 13.9497V11.1213C16.4497 10.2929 15.7782 9.62128 14.9497 9.62128H12.1213C11.2929 9.62128 10.6213 10.2929 10.6213 11.1213C10.6213 11.8171 11.0951 12.4022 11.7376 12.5718Z" fill="white" stroke="black" stroke-linecap="round" stroke-linejoin="round"/>
</svg>
</file>

<file path="addons/better-terrain/icons/paint-symmetry/SymmetryRotateAll.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://bcky1dfn4umac"
path="res://.godot/imported/SymmetryRotateAll.svg-795a9b37a8f5df7e7376c9f762121b21.ctex"
metadata={
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/paint-symmetry/SymmetryRotateAll.svg"
dest_files=["res://.godot/imported/SymmetryRotateAll.svg-795a9b37a8f5df7e7376c9f762121b21.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=4.0
editor/scale_with_editor_scale=false
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/paint-symmetry/SymmetryRotateClockwise.svg">
<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8 5.5C9.78974 5.5 11.2657 6.84334 11.4747 8.57674C10.9529 8.40317 10.3546 8.52404 9.93934 8.93934C9.35355 9.52513 9.35355 10.4749 9.93934 11.0607L11.9393 13.0607C12.5251 13.6464 13.4749 13.6464 14.0607 13.0607L16.0607 11.0607C16.6464 10.4749 16.6464 9.52513 16.0607 8.93934C15.6352 8.5139 15.0178 8.39745 14.4873 8.58997C14.2757 5.19115 11.4521 2.5 8 2.5C4.41015 2.5 1.5 5.41015 1.5 9C1.5 12.5899 4.41015 15.5 8 15.5C8.82843 15.5 9.5 14.8284 9.5 14C9.5 13.1716 8.82843 12.5 8 12.5C6.067 12.5 4.5 10.933 4.5 9C4.5 7.067 6.067 5.5 8 5.5Z" fill="white" stroke="black" stroke-linecap="round"/>
</svg>
</file>

<file path="addons/better-terrain/icons/paint-symmetry/SymmetryRotateClockwise.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://def0fcqsn6s6x"
path="res://.godot/imported/SymmetryRotateClockwise.svg-e133d151dd3970411596d18bb133aece.ctex"
metadata={
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/paint-symmetry/SymmetryRotateClockwise.svg"
dest_files=["res://.godot/imported/SymmetryRotateClockwise.svg-e133d151dd3970411596d18bb133aece.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=4.0
editor/scale_with_editor_scale=false
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/paint-symmetry/SymmetryRotateCounterClockwise.svg">
<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M3.51272 8.58997C2.98219 8.39745 2.36478 8.5139 1.93934 8.93934C1.35355 9.52513 1.35355 10.4749 1.93934 11.0607L3.93934 13.0607C4.52513 13.6464 5.47487 13.6464 6.06066 13.0607L8.06066 11.0607C8.64645 10.4749 8.64645 9.52513 8.06066 8.93934C7.64536 8.52404 7.04712 8.40317 6.52533 8.57674C6.73428 6.84334 8.21026 5.5 10 5.5C11.933 5.5 13.5 7.067 13.5 9C13.5 10.933 11.933 12.5 10 12.5C9.17157 12.5 8.5 13.1716 8.5 14C8.5 14.8284 9.17157 15.5 10 15.5C13.5899 15.5 16.5 12.5899 16.5 9C16.5 5.41015 13.5899 2.5 10 2.5C6.54787 2.5 3.72429 5.19115 3.51272 8.58997Z" fill="white" stroke="black" stroke-linecap="round"/>
</svg>
</file>

<file path="addons/better-terrain/icons/paint-symmetry/SymmetryRotateCounterClockwise.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://ngej4qhkypb2"
path="res://.godot/imported/SymmetryRotateCounterClockwise.svg-b603f534dc5383de58f7e26cdf86fe8b.ctex"
metadata={
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/paint-symmetry/SymmetryRotateCounterClockwise.svg"
dest_files=["res://.godot/imported/SymmetryRotateCounterClockwise.svg-b603f534dc5383de58f7e26cdf86fe8b.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=4.0
editor/scale_with_editor_scale=false
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/Replace.svg">
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect x="10.5" y="1.5" width="4" height="4" stroke="#D9D9D9"/>
<rect x="1" y="10" width="5" height="5" fill="#D9D9D9"/>
<path d="M7.5 3.5H5.5C4.39543 3.5 3.5 4.39543 3.5 5.5V6.5" stroke="#E0E0E0" stroke-linecap="square"/>
<path d="M8.5 12.5H10.5C11.6046 12.5 12.5 11.6046 12.5 10.5V9.5" stroke="#E0E0E0" stroke-linecap="square"/>
<path d="M10 10L12.5 7.5L15 10H10Z" fill="#E0E0E0"/>
<path d="M6 6L3.5 8.5L1 6H6Z" fill="#E0E0E0"/>
</svg>
</file>

<file path="addons/better-terrain/icons/Replace.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://y3xy6qdckht6"
path="res://.godot/imported/Replace.svg-7654df79fd42fc27133e4d3f81a4d56b.ctex"
metadata={
"has_editor_variant": true,
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/Replace.svg"
dest_files=["res://.godot/imported/Replace.svg-7654df79fd42fc27133e4d3f81a4d56b.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=1.0
editor/scale_with_editor_scale=true
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/ShuffleRandom.svg">
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_513_3269)">
<path fill-rule="evenodd" clip-rule="evenodd" d="M6.58578 3.4144C7.24015 2.76003 8.23514 2.6539 9 3.09599V4C9 4.80892 9.48728 5.5382 10.2346 5.84776C10.7544 6.06305 11.3288 6.04585 11.8228 5.82299L12.5858 6.58597C13.3668 7.36701 13.3668 8.63334 12.5858 9.41439L9.41421 12.586C8.75985 13.2403 7.76486 13.3465 7 12.9044V12C7 11.1911 6.51272 10.4618 5.76537 10.1522C5.24551 9.93691 4.67104 9.95416 4.17695 10.1771L3.41422 9.41439C2.63317 8.63334 2.63317 7.36701 3.41422 6.58597L6.58578 3.4144ZM8 9.00018C8.55229 9.00018 9 8.55246 9 8.00018C9 7.44789 8.55229 7.00018 8 7.00018C7.44772 7.00018 7 7.44789 7 8.00018C7 8.55246 7.44772 9.00018 8 9.00018ZM6 8.00018C6 8.55246 5.55229 9.00018 5 9.00018C4.44772 9.00018 4 8.55246 4 8.00018C4 7.44789 4.44772 7.00018 5 7.00018C5.55229 7.00018 6 7.44789 6 8.00018ZM11 9.00018C11.5523 9.00018 12 8.55246 12 8.00018C12 7.44789 11.5523 7.00018 11 7.00018C10.4477 7.00018 10 7.44789 10 8.00018C10 8.55246 10.4477 9.00018 11 9.00018Z" fill="white"/>
<path d="M5.42909 2.57732C5.92795 2.34034 6.14024 1.74383 5.90326 1.24497C5.66628 0.746113 5.06976 0.53382 4.57091 0.770801C1.87043 2.05366 0 4.80762 0 8.00043C0 10.1046 0.812938 12.0189 2.13978 13.4462L1.29289 14.2931C1.0069 14.5791 0.92134 15.0092 1.07612 15.3829C1.2309 15.7566 1.59554 16.0002 2 16.0002H5C5.55228 16.0002 6 15.5525 6 15.0002V12.0002C6 11.5958 5.75636 11.2311 5.38268 11.0764C5.00901 10.9216 4.57889 11.0071 4.29289 11.2931L3.55511 12.0309C2.58795 10.9651 2 9.5514 2 8.00043C2 5.60845 3.39967 3.5414 5.42909 2.57732Z" fill="white"/>
<path d="M11 0C10.4477 0 9.99999 0.447715 9.99999 1V4C9.99999 4.40446 10.2436 4.7691 10.6173 4.92388C10.991 5.07866 11.4211 4.9931 11.7071 4.70711L12.4448 3.96939C13.4119 5.03511 14 6.44912 14 8C14 10.392 12.6003 12.459 10.5709 13.4231C10.072 13.6601 9.85975 14.2566 10.0967 14.7555C10.3337 15.2543 10.9302 15.4666 11.4291 15.2296C14.1296 13.9468 16 11.1928 16 8C16 5.8956 15.1871 3.98156 13.8601 2.55412L14.7071 1.70711C14.9931 1.42111 15.0787 0.990991 14.9239 0.617317C14.7691 0.243642 14.4045 0 14 0H11Z" fill="white"/>
</g>
<defs>
<clipPath id="clip0_513_3269">
<rect width="16" height="16" fill="white"/>
</clipPath>
</defs>
</svg>
</file>

<file path="addons/better-terrain/icons/ShuffleRandom.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://cs4mdmluiydj6"
path="res://.godot/imported/ShuffleRandom.svg-15ee49f7a06c55a1e95e1ed056732dc5.ctex"
metadata={
"has_editor_variant": true,
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/ShuffleRandom.svg"
dest_files=["res://.godot/imported/ShuffleRandom.svg-15ee49f7a06c55a1e95e1ed056732dc5.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=1.0
editor/scale_with_editor_scale=true
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/SymmetryAll.svg">
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="8" cy="8" r="6" stroke="#E0E0E0" stroke-width="2"/>
<circle cx="8" cy="8" r="3" fill="#E0E0E0"/>
</svg>
</file>

<file path="addons/better-terrain/icons/SymmetryAll.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://cyjra4g05dwh"
path="res://.godot/imported/SymmetryAll.svg-cd6a02766f60c09344aa97e0325457c1.ctex"
metadata={
"has_editor_variant": true,
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/SymmetryAll.svg"
dest_files=["res://.godot/imported/SymmetryAll.svg-cd6a02766f60c09344aa97e0325457c1.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=1.0
editor/scale_with_editor_scale=true
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/SymmetryFlip.svg">
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8 14L10 12M8 14L8 2M8 14L6 12M8 2L10 4M8 2L6 4" stroke="#E0E0E0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>
</file>

<file path="addons/better-terrain/icons/SymmetryFlip.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://dqmc1jp56or8m"
path="res://.godot/imported/SymmetryFlip.svg-ea11c1010d0643843f115093c045dc42.ctex"
metadata={
"has_editor_variant": true,
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/SymmetryFlip.svg"
dest_files=["res://.godot/imported/SymmetryFlip.svg-ea11c1010d0643843f115093c045dc42.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=1.0
editor/scale_with_editor_scale=true
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/SymmetryMirror.svg">
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M2 8L4 10M2 8H14M2 8L4 6M14 8L12 10M14 8L12 6" stroke="#E0E0E0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>
</file>

<file path="addons/better-terrain/icons/SymmetryMirror.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://5hm3bfj3dvej"
path="res://.godot/imported/SymmetryMirror.svg-0bf9d259572cc33d41c783e35586310a.ctex"
metadata={
"has_editor_variant": true,
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/SymmetryMirror.svg"
dest_files=["res://.godot/imported/SymmetryMirror.svg-0bf9d259572cc33d41c783e35586310a.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=1.0
editor/scale_with_editor_scale=true
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/SymmetryReflect.svg">
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_953_3297)">
<path d="M8 15L10 13M8 15L8 1M8 15L6 13M8 1L10 3M8 1L6 3" stroke="#E0E0E0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M1 8L3 10M1 8H15M1 8L3 6M15 8L13 10M15 8L13 6" stroke="#E0E0E0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</g>
<defs>
<clipPath id="clip0_953_3297">
<rect width="16" height="16" fill="white"/>
</clipPath>
</defs>
</svg>
</file>

<file path="addons/better-terrain/icons/SymmetryReflect.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://cxoewno1cefua"
path="res://.godot/imported/SymmetryReflect.svg-39f88a51808c88d6cb37005ed1ddd254.ctex"
metadata={
"has_editor_variant": true,
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/SymmetryReflect.svg"
dest_files=["res://.godot/imported/SymmetryReflect.svg-39f88a51808c88d6cb37005ed1ddd254.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=1.0
editor/scale_with_editor_scale=true
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/SymmetryRotate180.svg">
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M5.87869 5.87857H3.05026V3.05014" stroke="#E0E0E0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M4.46447 4.46424C6.41709 2.51162 9.58291 2.51162 11.5355 4.46424C12.0384 4.96707 12.4117 5.55035 12.6556 6.17265" stroke="#E0E0E0" stroke-width="2" stroke-linecap="round"/>
<path d="M10.1213 10.1214H12.9497V12.9499" stroke="#E0E0E0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M11.5355 11.5358C9.58291 13.4884 6.41709 13.4884 4.46447 11.5358C3.96164 11.0329 3.5883 10.4496 3.34444 9.82735" stroke="#E0E0E0" stroke-width="2" stroke-linecap="round"/>
</svg>
</file>

<file path="addons/better-terrain/icons/SymmetryRotate180.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://8mcycyl3e66r"
path="res://.godot/imported/SymmetryRotate180.svg-805113e1c31c7195ed5fec5febf455b9.ctex"
metadata={
"has_editor_variant": true,
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/SymmetryRotate180.svg"
dest_files=["res://.godot/imported/SymmetryRotate180.svg-805113e1c31c7195ed5fec5febf455b9.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=1.0
editor/scale_with_editor_scale=true
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/SymmetryRotateAll.svg">
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M4.87869 5.87857H2.05026V3.05014" stroke="#E0E0E0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M5.87869 11.1211L5.87869 13.9496L3.05026 13.9496" stroke="#E0E0E0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M10.1213 4.87887L10.1213 2.05044L12.9497 2.05044" stroke="#E0E0E0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M11.1213 10.1214H13.9497V12.9499" stroke="#E0E0E0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M14 8C14 5.57851 12.5655 3.49205 10.5 2.54404M8 14C10.4215 14 12.508 12.5655 13.456 10.5M2 8C2 10.4215 3.43447 12.508 5.5 13.456M8 2C5.54028 2 3.42626 3.48012 2.5 5.59829" stroke="#E0E0E0" stroke-width="2"/>
</svg>
</file>

<file path="addons/better-terrain/icons/SymmetryRotateAll.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://b7fx4mk18lmls"
path="res://.godot/imported/SymmetryRotateAll.svg-959ef9f7a9c5b12d37b3a1c9ddcf2432.ctex"
metadata={
"has_editor_variant": true,
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/SymmetryRotateAll.svg"
dest_files=["res://.godot/imported/SymmetryRotateAll.svg-959ef9f7a9c5b12d37b3a1c9ddcf2432.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=1.0
editor/scale_with_editor_scale=true
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/SymmetryRotateClockwise.svg">
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M10 9L12 11L14 9" stroke="#E0E0E0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M7 13C4.23858 13 2 10.7614 2 8C2 5.23858 4.23858 3 7 3C9.76142 3 12 5.23858 12 8V10" stroke="#E0E0E0" stroke-width="2" stroke-linecap="round"/>
</svg>
</file>

<file path="addons/better-terrain/icons/SymmetryRotateClockwise.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://baxhjy28r1iqj"
path="res://.godot/imported/SymmetryRotateClockwise.svg-9d1254877c31fcd2b5fd3dd58555e624.ctex"
metadata={
"has_editor_variant": true,
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/SymmetryRotateClockwise.svg"
dest_files=["res://.godot/imported/SymmetryRotateClockwise.svg-9d1254877c31fcd2b5fd3dd58555e624.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=1.0
editor/scale_with_editor_scale=true
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/SymmetryRotateCounterClockwise.svg">
<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M6 9L4 11L2 9" stroke="#E0E0E0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M9 13C11.7614 13 14 10.7614 14 8C14 5.23858 11.7614 3 9 3C6.23858 3 4 5.23858 4 8V10" stroke="#E0E0E0" stroke-width="2" stroke-linecap="round"/>
</svg>
</file>

<file path="addons/better-terrain/icons/SymmetryRotateCounterClockwise.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://csbwdkr6bc2db"
path="res://.godot/imported/SymmetryRotateCounterClockwise.svg-ba4f86a741d97c0ebfc0ae19d3460f6f.ctex"
metadata={
"has_editor_variant": true,
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/SymmetryRotateCounterClockwise.svg"
dest_files=["res://.godot/imported/SymmetryRotateCounterClockwise.svg-ba4f86a741d97c0ebfc0ae19d3460f6f.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=1.0
editor/scale_with_editor_scale=true
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/icons/Warning.svg">
<svg height="16" viewBox="0 0 16 16" width="16" xmlns="http://www.w3.org/2000/svg"><path d="m3 1c-1.1046 0-2 .89543-2 2v10c0 1.1046.89543 2 2 2h10c1.1046 0 2-.89543 2-2v-10c0-1.1046-.89543-2-2-2zm4 2h2v6h-2zm0 8h2v2h-2z" fill="#ffdd65"/></svg>
</file>

<file path="addons/better-terrain/icons/Warning.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://b0es228gfcykd"
path="res://.godot/imported/Warning.svg-7bb0ec60ff2da2c7ebdba79b0dcdd006.ctex"
metadata={
"has_editor_variant": true,
"vram_texture": false
}

[deps]

source_file="res://addons/better-terrain/icons/Warning.svg"
dest_files=["res://.godot/imported/Warning.svg-7bb0ec60ff2da2c7ebdba79b0dcdd006.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=1.0
editor/scale_with_editor_scale=true
editor/convert_colors_with_editor_theme=false
</file>

<file path="addons/better-terrain/plugin.cfg">
[plugin]

name="BetterTerrain"
description="This is a drop-in replacement for Godot 4's tilemap terrain system, offering more versatile and straightforward autotiling. It can be used with any existing TileMap or TileSet, either through the editor plugin, or directly via code."
author="Portponky"
version=""
script="TerrainPlugin.gd"
</file>

<file path="addons/better-terrain/TerrainPlugin.gd">
@tool
extends EditorPlugin

const AUTOLOAD_NAME = "BetterTerrain"
var dock : Control
var button : Button

func _enter_tree() -> void:
    # Wait for autoloads to register
    await get_tree().process_frame
    
    if !get_tree().root.get_node_or_null(^"BetterTerrain"):
        # Autoload wasn't present on plugin init, which means plugin won't have loaded correctly
        add_autoload_singleton(AUTOLOAD_NAME, "res://addons/better-terrain/BetterTerrain.gd")
        ProjectSettings.save()
        
        var confirm = ConfirmationDialog.new()
        confirm.dialog_text = "The editor needs to be restarted for Better Terrain to load correctly. Restart now? Note: Unsaved changes will be lost."
        confirm.confirmed.connect(func():
            OS.set_restart_on_exit(true, ["-e"])
            get_tree().quit()
        )
        get_editor_interface().popup_dialog_centered(confirm)
    
    dock = load("res://addons/better-terrain/editor/Dock.tscn").instantiate()
    dock.update_overlay.connect(self.update_overlays)
    get_editor_interface().get_editor_main_screen().mouse_exited.connect(dock.canvas_mouse_exit)
    dock.undo_manager = get_undo_redo()
    button = add_control_to_bottom_panel(dock, "Terrain")
    button.toggled.connect(dock.about_to_be_visible)
    dock.force_show_terrains.connect(button.toggled.emit.bind(true))
    button.visible = false


func _exit_tree() -> void:
    remove_control_from_bottom_panel(dock)
    dock.queue_free()


func _handles(object) -> bool:
    return object is TileMapLayer or object is TileSet


func _make_visible(visible) -> void:
    button.visible = visible


func _edit(object) -> void:
    var new_tileset : TileSet = null
    
    if object is TileMapLayer:
        dock.tilemap = object
        new_tileset = object.tile_set
    if object is TileSet:
        new_tileset = object
    
    if dock.tileset != new_tileset:
        dock.tiles_about_to_change()
        dock.tileset = new_tileset
        dock.tiles_changed()


func _forward_canvas_draw_over_viewport(overlay: Control) -> void:
    if dock.visible:
        dock.canvas_draw(overlay)


func _forward_canvas_gui_input(event: InputEvent) -> bool:
    if !dock.visible:
        return false
    
    return dock.canvas_input(event)
</file>

<file path="addons/better-terrain/TerrainPlugin.gd.uid">
uid://b07dm7iyg6wmr
</file>

<file path="addons/better-terrain/Watcher.gd">
@tool
extends Node

signal trigger
var complete := false
var tileset : TileSet

func tidy() -> bool:
    if complete:
        return false
    
    complete = true
    queue_free()
    return true


func activate():
    if tidy():
        trigger.emit()
</file>

<file path="addons/better-terrain/Watcher.gd.uid">
uid://t54amk1ou5t7
</file>

<file path="addons/Inventory/Inventory.gd.uid">
uid://drdwdl32kthr4
</file>

<file path="addons/Inventory/InventoryItem.gd">
class_name InventoryItem extends Resource

@export var item_type: InventoryItemType
@export var custom_name:String

var name:String:
    get:
        if custom_name:
            return custom_name
        return item_type.name
</file>

<file path="addons/Inventory/InventoryItem.gd.uid">
uid://c31st5sfn50qu
</file>

<file path="addons/Inventory/InventoryItemType.gd">
class_name InventoryItemType extends Resource

@export var name: String = "Unknown Item" : set = _set_name
@export var description: String : set = _set_description
@export var texture: Texture : set = _set_texture
@export var weight: int = 1 : set = _set_weight  # Weight of a single item
@export var stackable: bool = true : set = _set_stackable  # Whether this item can be stacked
@export var max_stack_size: int = 99 : set = _set_max_stack_size  # Maximum stack size, if stackable

# Setter for 'name'
func _set_name(n: String):
    if name != n:
        name = n
        emit_changed()

# Setter for 'description'
func _set_description(d: String):
    if description != d:
        description = d
        emit_changed()

# Setter for 'texture'
func _set_texture(t: Texture):
    if texture != t:
        texture = t
        emit_changed()

# Setter for 'weight'
func _set_weight(w: int):
    if weight != w:
        weight = w
        emit_changed()

# Setter for 'stackable'
func _set_stackable(s: bool):
    if stackable != s:
        stackable = s
        emit_changed()

# Setter for 'max_stack_size'
func _set_max_stack_size(s: int):
    if max_stack_size != s:
        max_stack_size = s
        emit_changed()
</file>

<file path="addons/Inventory/InventoryItemType.gd.uid">
uid://c2kq0x5odumur
</file>

<file path="addons/Inventory/InventorySlot.gd">
class_name InventorySlot extends RefCounted

var items:Array[InventoryItem] = []
# Zwraca pierwszy item w slocie (lub null, jeśli pusty)
var item: InventoryItem:
    get:
        if items.size() > 0:
            return items[0]
        return null

var type:InventoryItemType:
    get:
        if items.size() > 0:
            return items[0].item_type
        return null

var count:int:
    get:
        return items.size()


var weight:float:
    get:
        var weight = 0.0
        for item in items:
            weight += item.item_type.weight
        
        return weight

signal item_added(item:InventoryItem)
signal item_removed(item:InventoryItem)

func is_empty() -> bool:
    return count == 0


func available_stacks() -> int:
    if type == null:
        return INF
    
    return type.max_stack_size - count


func take(item:InventoryItem):
    if item in items:
        items.erase(item)


func take_one() -> InventoryItem:
    var item = items.pop_back()
    item_removed.emit(item)
    return item


func take_many(count:int = 1) -> Array[InventoryItem]:
    var to_take:Array[InventoryItem] = []
    
    for i in count:
        var item = items.pop_back()
        to_take.append(item)
        item_removed.emit(item)
    
    return to_take


func take_all() -> Array[InventoryItem]:
    return take_many(items.size())
    

func put(item:InventoryItem) -> bool:
    if type == null:
        items.append(item)
        item_added.emit(item)
        return true
    elif type == item.item_type and type.stackable and count < type.max_stack_size:
        items.append(item)
        item_added.emit(item)
        return true
    
    return false


func put_all(items:Array[InventoryItem]) -> bool:
    if items.size() == 1:
        return put(items[0])
    
    # incompatible type?
    if type != items[0].item_type:
        return false
    
    # verify all items are same type
    if not Inventory.is_items_of_same_type(items):
        return false
    
    # no items in this slot?
    if type == null:
        # stackable?
        if not items[0].item_type.stackable:
            return false
        
        # too many?
        if items.size() > items[0].item_type.max_stack_size:
            return false
        
        # add them
        for item in items:
            put(item)
        
        return true
    
    return false
</file>

<file path="addons/Inventory/InventorySlot.gd.uid">
uid://bhgbwuu5y8d0o
</file>

<file path="addons/Inventory/UI/InventoryGridUI/inventory.tres">
[gd_resource type="Resource" script_class="InventoryItemType" load_steps=2 format=3 uid="uid://bn0p7ekufxw31"]

[ext_resource type="Script" uid="uid://c2kq0x5odumur" path="res://addons/Inventory/InventoryItemType.gd" id="1_pa1l7"]

[resource]
script = ExtResource("1_pa1l7")
name = "Unknown Item"
description = ""
weight = 1
stackable = true
max_stack_size = 99
metadata/_custom_type_script = "uid://c2kq0x5odumur"
</file>

<file path="addons/Inventory/UI/InventoryGridUI/InventoryGridItemUI.gd.uid">
uid://caosp0lfxj55a
</file>

<file path="addons/Inventory/UI/InventoryGridUI/InventoryPopupTooltip.gd.uid">
uid://cg0mxyfmmwwak
</file>

<file path="addons/Inventory/UI/List/InventoryListItemUI.gd.uid">
uid://crbxmja2hsbda
</file>

<file path="addons/Inventory/UI/List/InventoryListUI.gd.uid">
uid://b40dmy1axmbj1
</file>

<file path="addons/Inventory/UI/PingPongScroller.gd">
class_name PingPongScroller
extends Container

enum MODE {
    ALWAYS,
    ON_HOVER
}

@export var speed: float = 32.0
@export var mode:MODE = MODE.ON_HOVER
@export var scroll_margin:int = 16
@export var text: String = "Some very long text here":
    set = set_text

@onready var label: Label = $Label

var is_scrolling := true
var direction := 1  # 1 for right, -1 for left

func set_text(t: String):
    text = t
    _update()

func _update():
    label.text = text
    is_scrolling = mode == MODE.ALWAYS
    direction = 1  # Reset to initial scrolling direction

func _ready():
    mouse_entered.connect(_on_mouse_entered)
    mouse_exited.connect(_on_mouse_exited)

func _on_mouse_entered():
    if mode == MODE.ON_HOVER:
        is_scrolling = true

func _on_mouse_exited():
    if mode == MODE.ON_HOVER:
        is_scrolling = false


func _process(delta: float) -> void:
    var child: Control = get_child(0)
    if child == null or child is Control == false:
        return
    
    if is_scrolling:
        var velocity = direction * speed * delta
        var text_size = child.get_combined_minimum_size()  # Get the full text size
        
        # If the text fits inside the container, no scrolling is needed
        if text_size.x <= size.x:
            is_scrolling = false
            child.position.x = 0
            return
        
        # Calculate scrollable width
        var scroll_width = text_size.x - size.x

        # Update the position of the child based on the velocity
        child.position.x -= velocity
        
        # Handle direction change at the boundaries
        if child.position.x < -scroll_width:
            child.position.x = -scroll_width  # Snap to the right limit
            direction *= -1  # Reverse direction (scroll to the right)
        elif child.position.x > 0:
            child.position.x = 0  # Snap to the left limit
            direction *= -1  # Reverse direction (scroll to the left)
    else:
        if child.position.x != 0:
            child.position = child.position.move_toward(Vector2.ZERO, speed * 2 * delta)
</file>

<file path="addons/Inventory/UI/PingPongScroller.gd.uid">
uid://bvegqwtipxnbg
</file>

<file path="addons/Inventory/UI/SimpleInventoryItemUI.gd">
extends Control
</file>

<file path="addons/Inventory/UI/SimpleInventoryItemUI.gd.uid">
uid://b5hdti82wmmgi
</file>

<file path="addons/Inventory/UI/SimpleInventoryUI.gd.uid">
uid://dwyndp832h061
</file>

<file path="assets/fonts/Noto_Color_Emoji/OFL.txt">
Copyright 2021 Google Inc. All Rights Reserved.

This Font Software is licensed under the SIL Open Font License, Version 1.1.
This license is copied below, and is also available with a FAQ at:
https://openfontlicense.org


-----------------------------------------------------------
SIL OPEN FONT LICENSE Version 1.1 - 26 February 2007
-----------------------------------------------------------

PREAMBLE
The goals of the Open Font License (OFL) are to stimulate worldwide
development of collaborative font projects, to support the font creation
efforts of academic and linguistic communities, and to provide a free and
open framework in which fonts may be shared and improved in partnership
with others.

The OFL allows the licensed fonts to be used, studied, modified and
redistributed freely as long as they are not sold by themselves. The
fonts, including any derivative works, can be bundled, embedded, 
redistributed and/or sold with any software provided that any reserved
names are not used by derivative works. The fonts and derivatives,
however, cannot be released under any other type of license. The
requirement for fonts to remain under this license does not apply
to any document created using the fonts or their derivatives.

DEFINITIONS
"Font Software" refers to the set of files released by the Copyright
Holder(s) under this license and clearly marked as such. This may
include source files, build scripts and documentation.

"Reserved Font Name" refers to any names specified as such after the
copyright statement(s).

"Original Version" refers to the collection of Font Software components as
distributed by the Copyright Holder(s).

"Modified Version" refers to any derivative made by adding to, deleting,
or substituting -- in part or in whole -- any of the components of the
Original Version, by changing formats or by porting the Font Software to a
new environment.

"Author" refers to any designer, engineer, programmer, technical
writer or other person who contributed to the Font Software.

PERMISSION & CONDITIONS
Permission is hereby granted, free of charge, to any person obtaining
a copy of the Font Software, to use, study, copy, merge, embed, modify,
redistribute, and sell modified and unmodified copies of the Font
Software, subject to the following conditions:

1) Neither the Font Software nor any of its individual components,
in Original or Modified Versions, may be sold by itself.

2) Original or Modified Versions of the Font Software may be bundled,
redistributed and/or sold with any software, provided that each copy
contains the above copyright notice and this license. These can be
included either as stand-alone text files, human-readable headers or
in the appropriate machine-readable metadata fields within text or
binary files as long as those fields can be easily viewed by the user.

3) No Modified Version of the Font Software may use the Reserved Font
Name(s) unless explicit written permission is granted by the corresponding
Copyright Holder. This restriction only applies to the primary font name as
presented to the users.

4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font
Software shall not be used to promote, endorse or advertise any
Modified Version, except to acknowledge the contribution(s) of the
Copyright Holder(s) and the Author(s) or with their explicit written
permission.

5) The Font Software, modified or unmodified, in part or in whole,
must be distributed entirely under this license, and must not be
distributed under any other license. The requirement for fonts to
remain under this license does not apply to any document created
using the Font Software.

TERMINATION
This license becomes null and void if any of the above conditions are
not met.

DISCLAIMER
THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE
COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL
DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM
OTHER DEALINGS IN THE FONT SOFTWARE.
</file>

<file path="assets/inventory/stone1.tres">
[gd_resource type="Resource" script_class="InventoryItemType" load_steps=2 format=3 uid="uid://c28cll6mdlnm0"]

[ext_resource type="Script" uid="uid://c2kq0x5odumur" path="res://addons/Inventory/InventoryItemType.gd" id="1_1x4at"]

[resource]
script = ExtResource("1_1x4at")
name = "Unknown Item"
description = ""
weight = 1
stackable = true
max_stack_size = 99
metadata/_custom_type_script = "uid://c2kq0x5odumur"
</file>

<file path="assets/inventory/stone2.tres">
[gd_resource type="Resource" script_class="InventoryItemType" load_steps=2 format=3 uid="uid://chkokn3xvq23v"]

[ext_resource type="Script" uid="uid://c2kq0x5odumur" path="res://addons/Inventory/InventoryItemType.gd" id="1_ob5fr"]

[resource]
script = ExtResource("1_ob5fr")
name = "Unknown Item"
description = ""
weight = 1
stackable = true
max_stack_size = 99
metadata/_custom_type_script = "uid://c2kq0x5odumur"
</file>

<file path="assets/music/steam_gardens_slowed.wav.import">
[remap]

importer="wav"
type="AudioStreamWAV"
uid="uid://bs1k4f7ulp015"
path="res://.godot/imported/steam_gardens_slowed.wav-a9221f4929c9982dca303dc8df22314e.sample"

[deps]

source_file="res://assets/music/steam_gardens_slowed.wav"
dest_files=["res://.godot/imported/steam_gardens_slowed.wav-a9221f4929c9982dca303dc8df22314e.sample"]

[params]

force/8_bit=false
force/mono=false
force/max_rate=false
force/max_rate_hz=44100
edit/trim=false
edit/normalize=false
edit/loop_mode=2
edit/loop_begin=0
edit/loop_end=-1
compress/mode=2
</file>

<file path="assets/music/time_for_adventure.mp3.import">
[remap]

importer="mp3"
type="AudioStreamMP3"
uid="uid://ieuo0k7xr2ci"
path="res://.godot/imported/time_for_adventure.mp3-b8a49ae1cfc83b211be9d82e6e985655.mp3str"

[deps]

source_file="res://assets/music/time_for_adventure.mp3"
dest_files=["res://.godot/imported/time_for_adventure.mp3-b8a49ae1cfc83b211be9d82e6e985655.mp3str"]

[params]

loop=false
loop_offset=0
bpm=0
beat_count=0
bar_beats=4
</file>

<file path="assets/scenes/BlockHealthBarUI.tscn">
[gd_scene load_steps=3 format=3 uid="uid://cric2b4k102i8"]

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_pkhv0"]
bg_color = Color(0.340339, 0.340339, 0.340339, 1)

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_i358u"]
bg_color = Color(0.77975, 0.549982, 0.17848, 1)

[node name="BlockHealthBarUI" type="Control"]
z_index = 2
layout_mode = 3
anchors_preset = 0
offset_right = 16.0
offset_bottom = 3.0

[node name="HealthBar" type="ProgressBar" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_styles/background = SubResource("StyleBoxFlat_pkhv0")
theme_override_styles/fill = SubResource("StyleBoxFlat_i358u")
value = 100.0
show_percentage = false
</file>

<file path="assets/scenes/InventoryListItemUI.tscn">
[gd_scene load_steps=7 format=3 uid="uid://dx0nelbl5t6pt"]

[ext_resource type="Script" uid="uid://crbxmja2hsbda" path="res://addons/Inventory/UI/List/InventoryListItemUI.gd" id="1_p4nf2"]
[ext_resource type="Script" uid="uid://c2kq0x5odumur" path="res://addons/Inventory/InventoryItemType.gd" id="2_pj05p"]
[ext_resource type="Script" uid="uid://c31st5sfn50qu" path="res://addons/Inventory/InventoryItem.gd" id="3_ciutl"]
[ext_resource type="Script" uid="uid://bvegqwtipxnbg" path="res://addons/Inventory/UI/PingPongScroller.gd" id="4_g7qem"]

[sub_resource type="Resource" id="Resource_xf6fd"]
script = ExtResource("2_pj05p")
name = "Unknown Item with very long random ass text"
description = ""
weight = 1
stackable = true
max_stack_size = 99

[sub_resource type="Resource" id="Resource_73rdj"]
script = ExtResource("3_ciutl")
item_type = SubResource("Resource_xf6fd")
custom_name = ""

[node name="InventoryListItemUI" type="PanelContainer"]
offset_right = 160.0
offset_bottom = 25.0
script = ExtResource("1_p4nf2")
item = SubResource("Resource_73rdj")

[node name="BoxContainer" type="BoxContainer" parent="."]
layout_mode = 2
theme_override_constants/separation = 16

[node name="Name" type="Container" parent="BoxContainer"]
clip_contents = true
custom_minimum_size = Vector2(87.23, 0)
layout_mode = 2
script = ExtResource("4_g7qem")

[node name="Label" type="Label" parent="BoxContainer/Name"]
layout_mode = 2
text = "Steel Sword of Power"
vertical_alignment = 1

[node name="Stack" type="Label" parent="BoxContainer"]
layout_mode = 2
text = "(1)"

[node name="Weight" type="Label" parent="BoxContainer"]
layout_mode = 2
text = "1kg"
</file>

<file path="assets/scenes/player_inventory.tres">
[gd_resource type="Resource" script_class="Inventory" load_steps=2 format=3 uid="uid://tc2oqyms7jt2"]

[ext_resource type="Script" uid="uid://drdwdl32kthr4" path="res://addons/Inventory/Inventory.gd" id="1_lqn4d"]

[resource]
script = ExtResource("1_lqn4d")
capacity = 5
metadata/_custom_type_script = "uid://drdwdl32kthr4"
</file>

<file path="assets/scenes/player_inventory.tscn">
[gd_scene load_steps=5 format=3 uid="uid://bomywyw1q8djp"]

[ext_resource type="Script" uid="uid://xiu1moqcmuwf" path="res://scripts/ladder.gd" id="1_mhobc"]
[ext_resource type="Texture2D" uid="uid://bcm1qkp4dydjd" path="res://assets/sprites/Miner16Bit_AllFiles_v1/Miner16Bit_WorldTiles_02.png" id="2_eatdc"]

[sub_resource type="AtlasTexture" id="AtlasTexture_xxwne"]
atlas = ExtResource("2_eatdc")
region = Rect2(0, 0, 128, 128)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_xb1tl"]
size = Vector2(8, 16)

[node name="Ladder" type="Area2D" groups=["ladders"]]
script = ExtResource("1_mhobc")

[node name="Sprite2D" type="Sprite2D" parent="."]
texture = SubResource("AtlasTexture_xxwne")
region_enabled = true
region_rect = Rect2(112, 80, 16, 16)

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(-1, 0)
shape = SubResource("RectangleShape2D_xb1tl")

[connection signal="body_entered" from="." to="." method="_on_body_entered"]
[connection signal="body_exited" from="." to="." method="_on_body_exited"]
</file>

<file path="assets/sounds/coin.wav.import">
[remap]

importer="wav"
type="AudioStreamWAV"
uid="uid://cd1b2n4k0ooft"
path="res://.godot/imported/coin.wav-9081ee1c6d81d9c34d08bc916297b892.sample"

[deps]

source_file="res://assets/sounds/coin.wav"
dest_files=["res://.godot/imported/coin.wav-9081ee1c6d81d9c34d08bc916297b892.sample"]

[params]

force/8_bit=false
force/mono=false
force/max_rate=false
force/max_rate_hz=44100
edit/trim=false
edit/normalize=false
edit/loop_mode=0
edit/loop_begin=0
edit/loop_end=-1
compress/mode=2
</file>

<file path="assets/sounds/dig1.mp3.import">
[remap]

importer="mp3"
type="AudioStreamMP3"
uid="uid://b0grpfvqb5ua1"
path="res://.godot/imported/dig1.mp3-ba6a7be689a7a9136039e7260ab7b5a8.mp3str"

[deps]

source_file="res://assets/sounds/dig1.mp3"
dest_files=["res://.godot/imported/dig1.mp3-ba6a7be689a7a9136039e7260ab7b5a8.mp3str"]

[params]

loop=false
loop_offset=0
bpm=0
beat_count=0
bar_beats=4
</file>

<file path="assets/sounds/dig2.mp3.import">
[remap]

importer="mp3"
type="AudioStreamMP3"
uid="uid://dqu0216h86oxu"
path="res://.godot/imported/dig2.mp3-fa8a0b827bcbc532d287e5a9433305f6.mp3str"

[deps]

source_file="res://assets/sounds/dig2.mp3"
dest_files=["res://.godot/imported/dig2.mp3-fa8a0b827bcbc532d287e5a9433305f6.mp3str"]

[params]

loop=false
loop_offset=0
bpm=0
beat_count=0
bar_beats=4
</file>

<file path="assets/sounds/explosion.wav.import">
[remap]

importer="wav"
type="AudioStreamWAV"
uid="uid://dpbt6838n2tnc"
path="res://.godot/imported/explosion.wav-52e05e8d4b6600106c8dde082c90f915.sample"

[deps]

source_file="res://assets/sounds/explosion.wav"
dest_files=["res://.godot/imported/explosion.wav-52e05e8d4b6600106c8dde082c90f915.sample"]

[params]

force/8_bit=false
force/mono=false
force/max_rate=false
force/max_rate_hz=44100
edit/trim=false
edit/normalize=false
edit/loop_mode=0
edit/loop_begin=0
edit/loop_end=-1
compress/mode=2
</file>

<file path="assets/sounds/hurt.wav.import">
[remap]

importer="wav"
type="AudioStreamWAV"
uid="uid://dk0c7xq65nnct"
path="res://.godot/imported/hurt.wav-792baeb99505afd6a1496d4e4330b023.sample"

[deps]

source_file="res://assets/sounds/hurt.wav"
dest_files=["res://.godot/imported/hurt.wav-792baeb99505afd6a1496d4e4330b023.sample"]

[params]

force/8_bit=false
force/mono=false
force/max_rate=false
force/max_rate_hz=44100
edit/trim=false
edit/normalize=false
edit/loop_mode=0
edit/loop_begin=0
edit/loop_end=-1
compress/mode=2
</file>

<file path="assets/sounds/jump.wav.import">
[remap]

importer="wav"
type="AudioStreamWAV"
uid="uid://bawabjij02gso"
path="res://.godot/imported/jump.wav-395b727cde98999423d5c020c9c3492f.sample"

[deps]

source_file="res://assets/sounds/jump.wav"
dest_files=["res://.godot/imported/jump.wav-395b727cde98999423d5c020c9c3492f.sample"]

[params]

force/8_bit=false
force/mono=false
force/max_rate=false
force/max_rate_hz=44100
edit/trim=false
edit/normalize=false
edit/loop_mode=0
edit/loop_begin=0
edit/loop_end=-1
compress/mode=2
</file>

<file path="assets/sounds/ladder-climbing.mp3.import">
[remap]

importer="mp3"
type="AudioStreamMP3"
uid="uid://ympmury34vme"
path="res://.godot/imported/ladder-climbing.mp3-c30ec0aa46ea4af99e357fed242c51d7.mp3str"

[deps]

source_file="res://assets/sounds/ladder-climbing.mp3"
dest_files=["res://.godot/imported/ladder-climbing.mp3-c30ec0aa46ea4af99e357fed242c51d7.mp3str"]

[params]

loop=false
loop_offset=0
bpm=0
beat_count=0
bar_beats=4
</file>

<file path="assets/sounds/ladder-create.ogg.import">
[remap]

importer="oggvorbisstr"
type="AudioStreamOggVorbis"
uid="uid://bbhbi0jxvy13x"
path="res://.godot/imported/ladder-create.ogg-70bfb0fd74a87bbf33a3e7500e4a9278.oggvorbisstr"

[deps]

source_file="res://assets/sounds/ladder-create.ogg"
dest_files=["res://.godot/imported/ladder-create.ogg-70bfb0fd74a87bbf33a3e7500e4a9278.oggvorbisstr"]

[params]

loop=false
loop_offset=0
bpm=0
beat_count=0
bar_beats=4
</file>

<file path="assets/sounds/ladder-destroy.ogg.import">
[remap]

importer="oggvorbisstr"
type="AudioStreamOggVorbis"
uid="uid://y63k8i7xjsa6"
path="res://.godot/imported/ladder-destroy.ogg-4002f9f05f168b54370c3070e87cfab1.oggvorbisstr"

[deps]

source_file="res://assets/sounds/ladder-destroy.ogg"
dest_files=["res://.godot/imported/ladder-destroy.ogg-4002f9f05f168b54370c3070e87cfab1.oggvorbisstr"]

[params]

loop=false
loop_offset=0
bpm=0
beat_count=0
bar_beats=4
</file>

<file path="assets/sounds/power_up.wav.import">
[remap]

importer="wav"
type="AudioStreamWAV"
uid="uid://c2mmf08j734fm"
path="res://.godot/imported/power_up.wav-8349ffe570559470036ebff4b80f7fc0.sample"

[deps]

source_file="res://assets/sounds/power_up.wav"
dest_files=["res://.godot/imported/power_up.wav-8349ffe570559470036ebff4b80f7fc0.sample"]

[params]

force/8_bit=false
force/mono=false
force/max_rate=false
force/max_rate_hz=44100
edit/trim=false
edit/normalize=false
edit/loop_mode=0
edit/loop_begin=0
edit/loop_end=-1
compress/mode=2
</file>

<file path="assets/sounds/tap.wav.import">
[remap]

importer="wav"
type="AudioStreamWAV"
uid="uid://cgp77733x0sa7"
path="res://.godot/imported/tap.wav-78d4c5a48b21a853d89bec74f20510e7.sample"

[deps]

source_file="res://assets/sounds/tap.wav"
dest_files=["res://.godot/imported/tap.wav-78d4c5a48b21a853d89bec74f20510e7.sample"]

[params]

force/8_bit=false
force/mono=false
force/max_rate=false
force/max_rate_hz=44100
edit/trim=false
edit/normalize=false
edit/loop_mode=0
edit/loop_begin=0
edit/loop_end=-1
compress/mode=2
</file>

<file path="assets/sounds/walk1.wav.import">
[remap]

importer="wav"
type="AudioStreamWAV"
uid="uid://0elaoiukcq1r"
path="res://.godot/imported/walk1.wav-5746d954ba0d0d2b4cfce3f17c2debc4.sample"

[deps]

source_file="res://assets/sounds/walk1.wav"
dest_files=["res://.godot/imported/walk1.wav-5746d954ba0d0d2b4cfce3f17c2debc4.sample"]

[params]

force/8_bit=false
force/mono=false
force/max_rate=false
force/max_rate_hz=44100
edit/trim=false
edit/normalize=false
edit/loop_mode=0
edit/loop_begin=0
edit/loop_end=-1
compress/mode=2
</file>

<file path="assets/sounds/walk2.ogg.import">
[remap]

importer="oggvorbisstr"
type="AudioStreamOggVorbis"
uid="uid://o1eseoysmf2y"
path="res://.godot/imported/walk2.ogg-09f6b39044f88444c804b03531813d88.oggvorbisstr"

[deps]

source_file="res://assets/sounds/walk2.ogg"
dest_files=["res://.godot/imported/walk2.ogg-09f6b39044f88444c804b03531813d88.oggvorbisstr"]

[params]

loop=false
loop_offset=0
bpm=0
beat_count=0
bar_beats=4
</file>

<file path="assets/sounds/walk3.ogg.import">
[remap]

importer="oggvorbisstr"
type="AudioStreamOggVorbis"
uid="uid://b6hbsvqkflhua"
path="res://.godot/imported/walk3.ogg-c5bfdf3398e5520b7699a73f0ae1538e.oggvorbisstr"

[deps]

source_file="res://assets/sounds/walk3.ogg"
dest_files=["res://.godot/imported/walk3.ogg-c5bfdf3398e5520b7699a73f0ae1538e.oggvorbisstr"]

[params]

loop=false
loop_offset=0
bpm=0
beat_count=0
bar_beats=4
</file>

<file path="assets/sounds/walk4.ogg.import">
[remap]

importer="oggvorbisstr"
type="AudioStreamOggVorbis"
uid="uid://cst4way2ey61b"
path="res://.godot/imported/walk4.ogg-3d5162e4a896847cde6b3fc129710cb1.oggvorbisstr"

[deps]

source_file="res://assets/sounds/walk4.ogg"
dest_files=["res://.godot/imported/walk4.ogg-3d5162e4a896847cde6b3fc129710cb1.oggvorbisstr"]

[params]

loop=false
loop_offset=0
bpm=0
beat_count=0
bar_beats=4
</file>

<file path="assets/sprites/icons/pickaxe1.tres">
[gd_resource type="AtlasTexture" load_steps=2 format=3 uid="uid://7opkbvyekt60"]

[ext_resource type="Texture2D" uid="uid://bfc8wamuawygi" path="res://assets/sprites/icons/pickaxes2.png" id="1_8cffr"]

[resource]
atlas = ExtResource("1_8cffr")
region = Rect2(64.6, 48.5, 16, 16)
</file>

<file path="assets/sprites/icons/pickaxe2.tres">
[gd_resource type="AtlasTexture" load_steps=2 format=3 uid="uid://3a6cnv81gv41"]

[ext_resource type="Texture2D" uid="uid://bfc8wamuawygi" path="res://assets/sprites/icons/pickaxes2.png" id="1_y1n0s"]

[resource]
atlas = ExtResource("1_y1n0s")
region = Rect2(64.6, 16.5, 16, 16)
</file>

<file path="assets/sprites/icons/pickaxe3.tres">
[gd_resource type="AtlasTexture" load_steps=2 format=3 uid="uid://dyt11erv83mp"]

[ext_resource type="Texture2D" uid="uid://bfc8wamuawygi" path="res://assets/sprites/icons/pickaxes2.png" id="1_8bf81"]

[resource]
atlas = ExtResource("1_8bf81")
region = Rect2(64.393, 112.596, 16, 16)
</file>

<file path="assets/sprites/other/scenes/crt_shader.tscn">
[gd_scene load_steps=3 format=3 uid="uid://dubr81815qgi"]

[ext_resource type="Shader" uid="uid://dtcblh51mq0of" path="res://shaders/crt.gdshader" id="1_70rfk"]

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ne4ig"]
shader = ExtResource("1_70rfk")
shader_parameter/resolution = Vector2(640, 360)
shader_parameter/scan_line_amount = 1.0
shader_parameter/warp_amount = 0.1
shader_parameter/noise_amount = 0.03
shader_parameter/interference_amount = 0.2
shader_parameter/grille_amount = 0.1
shader_parameter/grille_size = 1.0
shader_parameter/vignette_amount = 0.6
shader_parameter/vignette_intensity = 0.4
shader_parameter/aberation_amount = 0.5
shader_parameter/roll_line_amount = 0.0
shader_parameter/roll_speed = 1.0
shader_parameter/scan_line_strength = -8.0
shader_parameter/pixel_strength = -2.0

[node name="CRT_Shader" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="ColorRect" type="ColorRect" parent="."]
material = SubResource("ShaderMaterial_ne4ig")
layout_mode = 0
offset_right = 1153.0
offset_bottom = 649.0
</file>

<file path="assets/sprites/other/scenes/game.tscn20151021202.tmp">
[gd_scene load_steps=21 format=4 uid="uid://b1kkjep7v1n52"]

[ext_resource type="PackedScene" uid="uid://4yp0qu72jr2b" path="res://scenes/player.tscn" id="1_uwrxv"]
[ext_resource type="Script" uid="uid://dm3iihye8a3wy" path="res://scripts/game.gd" id="1_vtaks"]
[ext_resource type="Texture2D" uid="uid://bcm1qkp4dydjd" path="res://assets/sprites/Miner16Bit_AllFiles_v1/Miner16Bit_WorldTiles_02.png" id="1_yqjtg"]
[ext_resource type="PackedScene" uid="uid://dubr81815qgi" path="res://scenes/crt_shader.tscn" id="2_gee14"]
[ext_resource type="Texture2D" uid="uid://c637msvthmlc2" path="res://assets/sprites/other/sheet.png" id="2_lnu2h"]
[ext_resource type="Texture2D" uid="uid://4upmho5qau0g" path="res://assets/sprites/other/Tileset_Cave.png" id="3_iywne"]
[ext_resource type="Texture2D" uid="uid://7a3no0tyqneu" path="res://assets/sprites/other/tilesetcave.png" id="4_p57ef"]
[ext_resource type="Script" uid="uid://cc8x1tg73jmw1" path="res://scripts/game_over_ui.gd" id="5_dinhu"]
[ext_resource type="Shader" uid="uid://clgqqxru7jg8" path="res://shaders/grayscale_shader.gdshader" id="5_kvpfn"]
[ext_resource type="AudioStream" uid="uid://bs1k4f7ulp015" path="res://assets/music/steam_gardens_slowed.wav" id="6_p57ef"]
[ext_resource type="PackedScene" uid="uid://dmf6diflfftrc" path="res://scenes/ladder.tscn" id="7_u5sy4"]
[ext_resource type="Script" uid="uid://cmf651j7qk52t" path="res://scripts/ui.gd" id="9_0tnpc"]

[sub_resource type="WorldBoundaryShape2D" id="WorldBoundaryShape2D_yqjtg"]
distance = -356.0

[sub_resource type="WorldBoundaryShape2D" id="WorldBoundaryShape2D_lnu2h"]
distance = -524.0

[sub_resource type="ShaderMaterial" id="ShaderMaterial_dinhu"]
shader = ExtResource("5_kvpfn")

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_lnu2h"]
texture = ExtResource("1_yqjtg")
0:0/0 = 0
0:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
0:0/0/custom_data_0 = true
0:0/0/custom_data_1 = 1.0
2:0/0 = 0
2:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
2:0/0/custom_data_0 = true
2:0/0/custom_data_1 = 1.0
3:0/0 = 0
3:0/0/custom_data_0 = true
3:0/0/custom_data_1 = 10.0
4:0/0 = 0
4:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
4:0/0/custom_data_0 = true
4:0/0/custom_data_1 = 1.0
5:0/0 = 0
5:0/0/custom_data_0 = true
5:0/0/custom_data_1 = 1.0
6:0/0 = 0
6:0/0/custom_data_0 = true
6:0/0/custom_data_1 = 1.0
7:0/0 = 0
0:1/0 = 0
0:1/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
0:1/0/custom_data_0 = true
0:1/0/custom_data_1 = 1.0
1:1/0 = 0
1:1/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
1:1/0/custom_data_0 = true
1:1/0/custom_data_1 = 1.0
2:1/0 = 0
2:1/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
2:1/0/custom_data_0 = true
2:1/0/custom_data_1 = 1.0
4:1/0 = 0
4:1/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
4:1/0/custom_data_0 = true
4:1/0/custom_data_1 = 1.0
5:1/0 = 0
5:1/0/custom_data_0 = true
5:1/0/custom_data_1 = 1.0
6:1/0 = 0
6:1/0/custom_data_0 = true
6:1/0/custom_data_1 = 1.0
7:1/0 = 0
0:2/0 = 0
0:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
0:2/0/custom_data_0 = true
0:2/0/custom_data_1 = 1.0
1:2/0 = 0
1:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
1:2/0/custom_data_0 = true
1:2/0/custom_data_1 = 1.0
2:2/0 = 0
2:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
2:2/0/custom_data_0 = true
2:2/0/custom_data_1 = 1.0
3:2/0 = 0
3:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
3:2/0/custom_data_0 = true
3:2/0/custom_data_1 = 1.0
4:2/0 = 0
4:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
4:2/0/custom_data_0 = true
4:2/0/custom_data_1 = 1.0
5:2/0 = 0
5:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
5:2/0/custom_data_0 = true
5:2/0/custom_data_1 = 1.0
6:2/0 = 0
6:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
6:2/0/custom_data_0 = true
6:2/0/custom_data_1 = 1.0
7:2/0 = 0
0:3/0 = 0
1:3/0 = 0
2:3/0 = 0
3:3/0 = 0
4:3/0 = 0
4:3/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
4:3/0/custom_data_0 = true
5:3/0 = 0
0:4/0 = 0
2:4/0 = 0
3:4/0 = 0
5:4/0 = 0
0:5/0 = 0
1:5/0 = 0
2:5/0 = 0
3:5/0 = 0
5:5/0 = 0
7:5/0 = 0
0:6/0 = 0
1:6/0 = 0
3:6/0 = 0
5:6/0 = 0
6:6/0 = 0
7:6/0 = 0
3:7/0 = 0
5:7/0 = 0
6:7/0 = 0
7:7/0 = 0
1:0/0 = 0
1:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
1:0/0/custom_data_0 = true
1:0/0/custom_data_1 = 1.0

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_lbhrr"]
texture = ExtResource("2_lnu2h")
0:0/0 = 0
1:0/0 = 0
2:0/0 = 0
3:0/0 = 0
4:0/0 = 0
5:0/0 = 0
6:0/0 = 0
7:0/0 = 0
8:0/0 = 0
9:0/0 = 0
10:0/0 = 0
11:0/0 = 0
12:0/0 = 0
13:0/0 = 0
14:0/0 = 0
15:0/0 = 0
16:0/0 = 0
0:1/0 = 0
1:1/0 = 0
2:1/0 = 0
3:1/0 = 0
4:1/0 = 0
5:1/0 = 0
7:1/0 = 0
8:1/0 = 0
9:1/0 = 0
10:1/0 = 0
11:1/0 = 0
12:1/0 = 0
13:1/0 = 0
14:1/0 = 0
15:1/0 = 0
16:1/0 = 0
2:2/0 = 0
3:2/0 = 0
4:2/0 = 0
7:2/0 = 0
8:2/0 = 0
9:2/0 = 0
10:2/0 = 0
11:2/0 = 0
12:2/0 = 0
13:2/0 = 0
14:2/0 = 0
15:2/0 = 0
16:2/0 = 0
3:3/0 = 0
4:3/0 = 0
5:3/0 = 0
7:3/0 = 0
8:3/0 = 0
9:3/0 = 0
10:3/0 = 0
11:3/0 = 0
12:3/0 = 0
13:3/0 = 0
14:3/0 = 0
15:3/0 = 0
16:3/0 = 0
3:4/0 = 0
4:4/0 = 0
5:4/0 = 0
7:4/0 = 0
8:4/0 = 0
9:4/0 = 0
10:4/0 = 0
11:4/0 = 0
12:4/0 = 0
13:4/0 = 0
14:4/0 = 0
15:4/0 = 0
16:4/0 = 0
3:5/0 = 0
4:5/0 = 0
7:5/0 = 0
8:5/0 = 0
9:5/0 = 0
10:5/0 = 0
11:5/0 = 0
12:5/0 = 0
13:5/0 = 0
14:5/0 = 0
15:5/0 = 0
16:5/0 = 0
3:6/0 = 0
4:6/0 = 0
7:6/0 = 0
8:6/0 = 0
9:6/0 = 0
10:6/0 = 0
11:6/0 = 0
12:6/0 = 0
13:6/0 = 0
14:6/0 = 0
15:6/0 = 0
16:6/0 = 0
2:7/0 = 0
3:7/0 = 0
4:7/0 = 0
5:7/0 = 0

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_u5sy4"]
texture = ExtResource("3_iywne")
0:0/0 = 0
1:0/0 = 0
2:0/0 = 0
3:0/0 = 0
4:0/0 = 0
5:0/0 = 0
6:0/0 = 0
7:0/0 = 0
8:0/0 = 0
0:1/0 = 0
1:1/0 = 0
2:1/0 = 0
3:1/0 = 0
4:1/0 = 0
5:1/0 = 0
6:1/0 = 0
7:1/0 = 0
8:1/0 = 0
0:2/0 = 0
1:2/0 = 0
2:2/0 = 0
3:2/0 = 0
4:2/0 = 0
5:2/0 = 0
0:3/0 = 0
1:3/0 = 0
2:3/0 = 0

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_gee14"]
texture = ExtResource("4_p57ef")
4:1/0 = 0
5:1/0 = 0
6:1/0 = 0
7:1/0 = 0
4:2/0 = 0
5:2/0 = 0
6:2/0 = 0
7:2/0 = 0
4:4/0 = 0
5:4/0 = 0
7:4/0 = 0
8:4/0 = 0
9:4/0 = 0
10:4/0 = 0
11:4/0 = 0
12:4/0 = 0
4:5/0 = 0
5:5/0 = 0
7:5/0 = 0
8:5/0 = 0
9:5/0 = 0
10:5/0 = 0
11:5/0 = 0
12:5/0 = 0
4:6/0 = 0
5:6/0 = 0
7:6/0 = 0
8:6/0 = 0
9:6/0 = 0
10:6/0 = 0
11:6/0 = 0
12:6/0 = 0
4:7/0 = 0
5:7/0 = 0
7:7/0 = 0
8:7/0 = 0
9:7/0 = 0
10:7/0 = 0
11:7/0 = 0
12:7/0 = 0
4:8/0 = 0
5:8/0 = 0
7:8/0 = 0
8:8/0 = 0
9:8/0 = 0
10:8/0 = 0
11:8/0 = 0
12:8/0 = 0
4:9/0 = 0
5:9/0 = 0
7:9/0 = 0
8:9/0 = 0
9:9/0 = 0
10:9/0 = 0
11:9/0 = 0
12:9/0 = 0
7:11/0 = 0
8:11/0 = 0
9:11/0 = 0
10:11/0 = 0
11:11/0 = 0
12:11/0 = 0
7:12/0 = 0
8:12/0 = 0
9:12/0 = 0
10:12/0 = 0
11:12/0 = 0
12:12/0 = 0

[sub_resource type="TileSet" id="TileSet_lbhrr"]
physics_layer_0/collision_layer = 1
custom_data_layer_0/name = "diggable"
custom_data_layer_0/type = 1
custom_data_layer_1/name = "dig_time"
custom_data_layer_1/type = 3
sources/3 = SubResource("TileSetAtlasSource_lnu2h")
sources/4 = SubResource("TileSetAtlasSource_lbhrr")
sources/5 = SubResource("TileSetAtlasSource_u5sy4")
sources/6 = SubResource("TileSetAtlasSource_gee14")

[node name="Game" type="Node2D"]
script = ExtResource("1_vtaks")

[node name="LeftBoundry" type="StaticBody2D" parent="."]
position = Vector2(0, -9)

[node name="CollisionShape2D" type="CollisionShape2D" parent="LeftBoundry"]
position = Vector2(-137, -5)
rotation = 1.5708
shape = SubResource("WorldBoundaryShape2D_yqjtg")

[node name="RightBoundry" type="StaticBody2D" parent="."]
position = Vector2(0, -9)

[node name="CollisionShape2D" type="CollisionShape2D" parent="RightBoundry"]
position = Vector2(0, -4)
rotation = -1.5708
shape = SubResource("WorldBoundaryShape2D_lnu2h")

[node name="Music" type="AudioStreamPlayer" parent="."]
stream = ExtResource("6_p57ef")
volume_db = -30.0
autoplay = true

[node name="CRT_Shader" parent="." instance=ExtResource("2_gee14")]
z_index = 4096
offset_left = -551.0
offset_top = -325.0
offset_right = 753.0
offset_bottom = 453.0

[node name="UI" type="CanvasLayer" parent="."]
script = ExtResource("9_0tnpc")

[node name="LadderCountLabel" type="Label" parent="UI"]
offset_left = 10.0
offset_top = 10.0
offset_right = 50.0
offset_bottom = 33.0
theme_override_font_sizes/font_size = 34
text = "Drabiny: 5"

[node name="HealthLabel" type="Label" parent="UI"]
offset_left = 10.0
offset_top = 60.0
offset_right = 281.0
offset_bottom = 107.0
theme_override_font_sizes/font_size = 34
text = "HP: 100/100"

[node name="GameOverLayer" type="CanvasLayer" parent="."]
process_mode = 3
layer = 10
script = ExtResource("5_dinhu")

[node name="GrayscaleEffectRect" type="ColorRect" parent="GameOverLayer"]
material = SubResource("ShaderMaterial_dinhu")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
color = Color(1, 1, 1, 0)

[node name="GameOverLabel" type="Label" parent="GameOverLayer"]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_font_sizes/font_size = 100
text = "GAME OVER"
horizontal_alignment = 1
vertical_alignment = 1

[node name="RestartButton" type="Button" parent="GameOverLayer"]
process_mode = 3
anchors_preset = 7
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
offset_left = -87.5
offset_top = -198.0
offset_right = 87.5
offset_bottom = -135.0
grow_horizontal = 2
grow_vertical = 0
theme_override_font_sizes/font_size = 40
text = "RESTART"

[node name="WorldContainer" type="Node2D" parent="."]

[node name="TileMap" type="Node2D" parent="WorldContainer"]

[node name="Background" type="TileMapLayer" parent="WorldContainer/TileMap"]
light_mask = 0
z_index = -1
use_parent_material = true
tile_map_data = PackedByteArray("AADh/wAAAwAGAAEAAADh/wEAAwAGAAEAAADh/wIAAwAGAAEAAADh/wMAAwAGAAEAAADh/wQAAwAGAAEAAADh/wUAAwAGAAEAAADh/wYAAwAGAAEAAADh/wcAAwAGAAEAAADh/wgAAwAGAAEAAADh/wkAAwAGAAEAAADh/woAAwAGAAEAAADh/wsAAwAGAAEAAADh/wwAAwAGAAEAAADi/wAAAwAGAAEAAADi/wEAAwAGAAEAAADi/wIAAwAGAAEAAADi/wMAAwAGAAEAAADi/wQAAwAGAAEAAADi/wUAAwAGAAEAAADi/wYAAwAGAAEAAADi/wcAAwAGAAEAAADi/wgAAwAGAAEAAADi/wkAAwAGAAEAAADi/woAAwAGAAEAAADi/wsAAwAGAAEAAADi/wwAAwAGAAEAAADj/wAAAwAGAAEAAADj/wEAAwAGAAEAAADj/wIAAwAGAAEAAADj/wMAAwAGAAEAAADj/wQAAwAGAAEAAADj/wUAAwAGAAEAAADj/wYAAwAGAAEAAADj/wcAAwAGAAEAAADj/wgAAwAGAAEAAADj/wkAAwAGAAEAAADj/woAAwAGAAEAAADj/wsAAwAGAAEAAADj/wwAAwAGAAEAAADk/wAAAwAGAAEAAADk/wEAAwAGAAEAAADk/wIAAwAGAAEAAADk/wMAAwAGAAEAAADk/wQAAwAGAAEAAADk/wUAAwAGAAEAAADk/wYAAwAGAAEAAADk/wcAAwAGAAEAAADk/wgAAwAGAAEAAADk/wkAAwAGAAEAAADk/woAAwAGAAEAAADk/wsAAwAGAAEAAADk/wwAAwAGAAEAAADl/wAAAwAGAAEAAADl/wEAAwAGAAEAAADl/wIAAwAGAAEAAADl/wMAAwAGAAEAAADl/wQAAwAGAAEAAADl/wUAAwAGAAEAAADl/wYAAwAGAAEAAADl/wcAAwAGAAEAAADl/wgAAwAGAAEAAADl/wkAAwAGAAEAAADl/woAAwAGAAEAAADl/wsAAwAGAAEAAADl/wwAAwAGAAEAAADm/wAAAwAGAAEAAADm/wEAAwAGAAEAAADm/wIAAwAGAAEAAADm/wMAAwAGAAEAAADm/wQAAwAGAAEAAADm/wUAAwAGAAEAAADm/wYAAwAGAAEAAADm/wcAAwAGAAEAAADm/wgAAwAGAAEAAADm/wkAAwAGAAEAAADm/woAAwAGAAEAAADm/wsAAwAGAAEAAADm/wwAAwAGAAEAAADn/wAAAwAGAAEAAADn/wEAAwAGAAEAAADn/wIAAwAGAAEAAADn/wMAAwAGAAEAAADn/wQAAwAGAAEAAADn/wUAAwAGAAEAAADn/wYAAwAGAAEAAADn/wcAAwAGAAEAAADn/wgAAwAGAAEAAADn/wkAAwAGAAEAAADn/woAAwAGAAEAAADn/wsAAwAGAAEAAADn/wwAAwAGAAEAAADo/wAAAwAGAAEAAADo/wEAAwAGAAEAAADo/wIAAwAGAAEAAADo/wMAAwAGAAEAAADo/wQAAwAGAAEAAADo/wUAAwAGAAEAAADo/wYAAwAGAAEAAADo/wcAAwAGAAEAAADo/wgAAwAGAAEAAADo/wkAAwAGAAEAAADo/woAAwAGAAEAAADo/wsAAwAGAAEAAADo/wwAAwAGAAEAAADp/wAAAwAGAAEAAADp/wEAAwAGAAEAAADp/wIAAwAGAAEAAADp/wMAAwAGAAEAAADp/wQAAwAGAAEAAADp/wUAAwAGAAEAAADp/wYAAwAGAAEAAADp/wcAAwAGAAEAAADp/wgAAwAGAAEAAADp/wkAAwAGAAEAAADp/woAAwAGAAEAAADp/wsAAwAGAAEAAADp/wwAAwAGAAEAAADq/wAAAwAGAAEAAADq/wEAAwAGAAEAAADq/wIAAwAGAAEAAADq/wMAAwAGAAEAAADq/wQAAwAGAAEAAADq/wUAAwAGAAEAAADq/wYAAwAGAAEAAADq/wcAAwAGAAEAAADq/wgAAwAGAAEAAADq/wkAAwAGAAEAAADq/woAAwAGAAEAAADq/wsAAwAGAAEAAADq/wwAAwAGAAEAAADr/wAAAwAGAAEAAADr/wEAAwAGAAEAAADr/wIAAwAGAAEAAADr/wMAAwAGAAEAAADr/wQAAwAGAAEAAADr/wUAAwAGAAEAAADr/wYAAwAGAAEAAADr/wcAAwAGAAEAAADr/wgAAwAGAAEAAADr/wkAAwAGAAEAAADr/woAAwAGAAEAAADr/wsAAwAGAAEAAADr/wwAAwAGAAEAAADs/wAAAwAGAAEAAADs/wEAAwAGAAEAAADs/wIAAwAGAAEAAADs/wMAAwAGAAEAAADs/wQAAwAGAAEAAADs/wUAAwAGAAEAAADs/wYAAwAGAAEAAADs/wcAAwAGAAEAAADs/wgAAwAGAAEAAADs/wkAAwAGAAEAAADs/woAAwAGAAEAAADs/wsAAwAGAAEAAADs/wwAAwAGAAEAAADt/wAAAwAGAAEAAADt/wEAAwAGAAEAAADt/wIAAwAGAAEAAADt/wMAAwAGAAEAAADt/wQAAwAGAAEAAADt/wUAAwAGAAEAAADt/wYAAwAGAAEAAADt/wcAAwAGAAEAAADt/wgAAwAGAAEAAADt/wkAAwAGAAEAAADt/woAAwAGAAEAAADt/wsAAwAGAAEAAADt/wwAAwAGAAEAAADu/wAAAwAGAAEAAADu/wEAAwAGAAEAAADu/wIAAwAGAAEAAADu/wMAAwAGAAEAAADu/wQAAwAGAAEAAADu/wUAAwAGAAEAAADu/wYAAwAGAAEAAADu/wcAAwAGAAEAAADu/wgAAwAGAAEAAADu/wkAAwAGAAEAAADu/woAAwAGAAEAAADu/wsAAwAGAAEAAADu/wwAAwAGAAEAAADv/wAAAwAGAAEAAADv/wEAAwAGAAEAAADv/wIAAwAGAAEAAADv/wMAAwAGAAEAAADv/wQAAwAGAAEAAADv/wUAAwAGAAEAAADv/wYAAwAGAAEAAADv/wcAAwAGAAEAAADv/wgAAwAGAAEAAADv/wkAAwAGAAEAAADv/woAAwAGAAEAAADv/wsAAwAGAAEAAADv/wwAAwAGAAEAAADw/wAAAwAGAAEAAADw/wEAAwAGAAEAAADw/wIAAwAGAAEAAADw/wMAAwAGAAEAAADw/wQAAwAGAAEAAADw/wUAAwAGAAEAAADw/wYAAwAGAAEAAADw/wcAAwAGAAEAAADw/wgAAwAGAAEAAADw/wkAAwAGAAEAAADw/woAAwAGAAEAAADw/wsAAwAGAAEAAADw/wwAAwAGAAEAAADx/wAAAwAGAAEAAADx/wEAAwAGAAEAAADx/wIAAwAGAAEAAADx/wMAAwAGAAEAAADx/wQAAwAGAAEAAADx/wUAAwAGAAEAAADx/wYAAwAGAAEAAADx/wcAAwAGAAEAAADx/wgAAwAGAAEAAADx/wkAAwAGAAEAAADx/woAAwAGAAEAAADx/wsAAwAGAAEAAADx/wwAAwAGAAEAAADy/wAAAwAGAAEAAADy/wEAAwAGAAEAAADy/wIAAwAGAAEAAADy/wMAAwAGAAEAAADy/wQAAwAGAAEAAADy/wUAAwAGAAEAAADy/wYAAwAGAAEAAADy/wcAAwAGAAEAAADy/wgAAwAGAAEAAADy/wkAAwAGAAEAAADy/woAAwAGAAEAAADy/wsAAwAGAAEAAADy/wwAAwAGAAEAAADz/wAAAwAGAAEAAADz/wEAAwAGAAEAAADz/wIAAwAGAAEAAADz/wMAAwAGAAEAAADz/wQAAwAGAAEAAADz/wUAAwAGAAEAAADz/wYAAwAGAAEAAADz/wcAAwAGAAEAAADz/wgAAwAGAAEAAADz/wkAAwAGAAEAAADz/woAAwAGAAEAAADz/wsAAwAGAAEAAADz/wwAAwAGAAEAAAD0/wAAAwAGAAEAAAD0/wEAAwAGAAEAAAD0/wIAAwAGAAEAAAD0/wMAAwAGAAEAAAD0/wQAAwAGAAEAAAD0/wUAAwAGAAEAAAD0/wYAAwAGAAEAAAD0/wcAAwAGAAEAAAD0/wgAAwAGAAEAAAD0/wkAAwAGAAEAAAD0/woAAwAGAAEAAAD0/wsAAwAGAAEAAAD0/wwAAwAGAAEAAAD1/wAAAwAGAAEAAAD1/wEAAwAGAAEAAAD1/wIAAwAGAAEAAAD1/wMAAwAGAAEAAAD1/wQAAwAGAAEAAAD1/wUAAwAGAAEAAAD1/wYAAwAGAAEAAAD1/wcAAwAGAAEAAAD1/wgAAwAGAAEAAAD1/wkAAwAGAAEAAAD1/woAAwAGAAEAAAD1/wsAAwAGAAEAAAD1/wwAAwAGAAEAAAD2/wAAAwAGAAEAAAD2/wEAAwAGAAEAAAD2/wIAAwAGAAEAAAD2/wMAAwAGAAEAAAD2/wQAAwAGAAEAAAD2/wUAAwAGAAEAAAD2/wYAAwAGAAEAAAD2/wcAAwAGAAEAAAD2/wgAAwAGAAEAAAD2/wkAAwAGAAEAAAD2/woAAwAGAAEAAAD2/wsAAwAGAAEAAAD2/wwAAwAGAAEAAAD3/wAAAwAGAAEAAAD3/wEAAwAGAAEAAAD3/wIAAwAGAAEAAAD3/wMAAwAGAAEAAAD3/wQAAwAGAAEAAAD3/wUAAwAGAAEAAAD3/wYAAwAGAAEAAAD3/wcAAwAGAAEAAAD3/wgAAwAGAAEAAAD3/wkAAwAGAAEAAAD3/woAAwAGAAEAAAD3/wsAAwAGAAEAAAD3/wwAAwAGAAEAAAD4/wAAAwAGAAEAAAD4/wEAAwAGAAEAAAD4/wIAAwAGAAEAAAD4/wMAAwAGAAEAAAD4/wQAAwAGAAEAAAD4/wUAAwAGAAEAAAD4/wYAAwAGAAEAAAD4/wcAAwAGAAEAAAD4/wgAAwAGAAEAAAD4/wkAAwAGAAEAAAD4/woAAwAGAAEAAAD4/wsAAwAGAAEAAAD4/wwAAwAGAAEAAAD5/wAAAwAGAAEAAAD5/wEAAwAGAAEAAAD5/wIAAwAGAAEAAAD5/wMAAwAGAAEAAAD5/wQAAwAGAAEAAAD5/wUAAwAGAAEAAAD5/wYAAwAGAAEAAAD5/wcAAwAGAAEAAAD5/wgAAwAGAAEAAAD5/wkAAwAGAAEAAAD5/woAAwAGAAEAAAD5/wsAAwAGAAEAAAD5/wwAAwAGAAEAAAD6/wAAAwAGAAEAAAD6/wEAAwAGAAEAAAD6/wIAAwAGAAEAAAD6/wMAAwAGAAEAAAD6/wQAAwAGAAEAAAD6/wUAAwAGAAEAAAD6/wYAAwAGAAEAAAD6/wcAAwAGAAEAAAD6/wgAAwAGAAEAAAD6/wkAAwAGAAEAAAD6/woAAwAGAAEAAAD6/wsAAwAGAAEAAAD6/wwAAwAGAAEAAAD7/wAAAwAGAAEAAAD7/wEAAwAGAAEAAAD7/wIAAwAGAAEAAAD7/wMAAwAGAAEAAAD7/wQAAwAGAAEAAAD7/wUAAwAGAAEAAAD7/wYAAwAGAAEAAAD7/wcAAwAGAAEAAAD7/wgAAwAGAAEAAAD7/wkAAwAGAAEAAAD7/woAAwAGAAEAAAD7/wsAAwAGAAEAAAD7/wwAAwAGAAEAAAD8/wAAAwAGAAEAAAD8/wEAAwAGAAEAAAD8/wIAAwAGAAEAAAD8/wMAAwAGAAEAAAD8/wQAAwAGAAEAAAD8/wUAAwAGAAEAAAD8/wYAAwAGAAEAAAD8/wcAAwAGAAEAAAD8/wgAAwAGAAEAAAD8/wkAAwAGAAEAAAD8/woAAwAGAAEAAAD8/wsAAwAGAAEAAAD8/wwAAwAGAAEAAAD9/wAAAwAGAAEAAAD9/wEAAwAGAAEAAAD9/wIAAwAGAAEAAAD9/wMAAwAGAAEAAAD9/wQAAwAGAAEAAAD9/wUAAwAGAAEAAAD9/wYAAwAGAAEAAAD9/wcAAwAGAAEAAAD9/wgAAwAGAAEAAAD9/wkAAwAGAAEAAAD9/woAAwAGAAEAAAD9/wsAAwAGAAEAAAD9/wwAAwAGAAEAAAD+/wAAAwAGAAEAAAD+/wEAAwAGAAEAAAD+/wIAAwAGAAEAAAD+/wMAAwAGAAEAAAD+/wQAAwAGAAEAAAD+/wUAAwAGAAEAAAD+/wYAAwAGAAEAAAD+/wcAAwAGAAEAAAD+/wgAAwAGAAEAAAD+/wkAAwAGAAEAAAD+/woAAwAGAAEAAAD+/wsAAwAGAAEAAAD+/wwAAwAGAAEAAAD//wEAAwAGAAEAAAD//wIAAwAGAAEAAAD//wMAAwAGAAEAAAD//wQAAwAGAAEAAAD//wUAAwAGAAEAAAD//wYAAwAGAAEAAAD//wcAAwAGAAEAAAD//wgAAwAGAAEAAAD//wkAAwAGAAEAAAD//woAAwAGAAEAAAD//wsAAwAGAAEAAAD//wwAAwAGAAEAAAAAAAEAAwAGAAEAAAAAAAIAAwAGAAEAAAAAAAMAAwAGAAEAAAAAAAQAAwAGAAEAAAAAAAUAAwAGAAEAAAAAAAYAAwAGAAEAAAAAAAcAAwAGAAEAAAAAAAgAAwAGAAEAAAAAAAkAAwAGAAEAAAAAAAoAAwAGAAEAAAAAAAsAAwAGAAEAAAAAAAwAAwAGAAEAAAABAAEAAwAGAAEAAAABAAIAAwAGAAEAAAABAAMAAwAGAAEAAAABAAQAAwAGAAEAAAABAAUAAwAGAAEAAAABAAYAAwAGAAEAAAABAAcAAwAGAAEAAAABAAgAAwAGAAEAAAABAAkAAwAGAAEAAAABAAoAAwAGAAEAAAABAAsAAwAGAAEAAAABAAwAAwAGAAEAAAACAAEAAwAGAAEAAAACAAIAAwAGAAEAAAACAAMAAwAGAAEAAAACAAQAAwAGAAEAAAACAAUAAwAGAAEAAAACAAYAAwAGAAEAAAACAAcAAwAGAAEAAAACAAgAAwAGAAEAAAACAAkAAwAGAAEAAAACAAoAAwAGAAEAAAACAAsAAwAGAAEAAAACAAwAAwAGAAEAAAADAAEAAwAGAAEAAAADAAIAAwAGAAEAAAADAAMAAwAGAAEAAAADAAQAAwAGAAEAAAADAAUAAwAGAAEAAAADAAYAAwAGAAEAAAADAAcAAwAGAAEAAAADAAgAAwAGAAEAAAADAAkAAwAGAAEAAAADAAoAAwAGAAEAAAADAAsAAwAGAAEAAAADAAwAAwAGAAEAAAAEAAAAAwAGAAEAAAAEAAEAAwAGAAEAAAAEAAIAAwAGAAEAAAAEAAMAAwAGAAEAAAAEAAQAAwAGAAEAAAAEAAUAAwAGAAEAAAAEAAYAAwAGAAEAAAAEAAcAAwAGAAEAAAAEAAgAAwAGAAEAAAAEAAkAAwAGAAEAAAAEAAoAAwAGAAEAAAAEAAsAAwAGAAEAAAAEAAwAAwAGAAEAAAAFAAAAAwAGAAEAAAAFAAEAAwAGAAEAAAAFAAIAAwAGAAEAAAAFAAMAAwAGAAEAAAAFAAQAAwAGAAEAAAAFAAUAAwAGAAEAAAAFAAYAAwAGAAEAAAAFAAcAAwAGAAEAAAAFAAgAAwAGAAEAAAAFAAkAAwAGAAEAAAAFAAoAAwAGAAEAAAAFAAsAAwAGAAEAAAAFAAwAAwAGAAEAAAAGAAAAAwAGAAEAAAAGAAIAAwAGAAEAAAAGAAMAAwAGAAEAAAAGAAQAAwAGAAEAAAAGAAUAAwAGAAEAAAAGAAYAAwAGAAEAAAAGAAcAAwAGAAEAAAAGAAgAAwAGAAEAAAAGAAkAAwAGAAEAAAAGAAoAAwAGAAEAAAAGAAsAAwAGAAEAAAAGAAwAAwAGAAEAAAAHAAAAAwAGAAEAAAAHAAEAAwAGAAEAAAAHAAIAAwAGAAEAAAAHAAMAAwAGAAEAAAAHAAQAAwAGAAEAAAAHAAUAAwAGAAEAAAAHAAYAAwAGAAEAAAAHAAcAAwAGAAEAAAAHAAgAAwAGAAEAAAAHAAkAAwAGAAEAAAAHAAoAAwAGAAEAAAAHAAsAAwAGAAEAAAAHAAwAAwAGAAEAAAAIAAAAAwAGAAEAAAAIAAEAAwAGAAEAAAAIAAIAAwAGAAEAAAAIAAMAAwAGAAEAAAAIAAQAAwAGAAEAAAAIAAUAAwAGAAEAAAAIAAYAAwAGAAEAAAAIAAcAAwAGAAEAAAAIAAgAAwAGAAEAAAAIAAkAAwAGAAEAAAAIAAoAAwAGAAEAAAAIAAsAAwAGAAEAAAAIAAwAAwAGAAEAAAAJAAAAAwAGAAEAAAAJAAEAAwAGAAEAAAAJAAIAAwAGAAEAAAAJAAMAAwAGAAEAAAAJAAQAAwAGAAEAAAAJAAUAAwAGAAEAAAAJAAYAAwAGAAEAAAAJAAcAAwAGAAEAAAAJAAgAAwAGAAEAAAAJAAkAAwAGAAEAAAAJAAoAAwAGAAEAAAAJAAsAAwAGAAEAAAAJAAwAAwAGAAEAAAAKAAAAAwAGAAEAAAAKAAEAAwAGAAEAAAAKAAIAAwAGAAEAAAAKAAMAAwAGAAEAAAAKAAQAAwAGAAEAAAAKAAUAAwAGAAEAAAAKAAYAAwAGAAEAAAAKAAcAAwAGAAEAAAAKAAgAAwAGAAEAAAAKAAkAAwAGAAEAAAAKAAoAAwAGAAEAAAAKAAsAAwAGAAEAAAAKAAwAAwAGAAEAAAALAAAAAwAGAAEAAAALAAEAAwAGAAEAAAALAAIAAwAGAAEAAAALAAMAAwAGAAEAAAALAAQAAwAGAAEAAAALAAUAAwAGAAEAAAALAAYAAwAGAAEAAAALAAcAAwAGAAEAAAALAAgAAwAGAAEAAAALAAkAAwAGAAEAAAALAAoAAwAGAAEAAAALAAsAAwAGAAEAAAALAAwAAwAGAAEAAAAMAAAAAwAGAAEAAAAMAAEAAwAGAAEAAAAMAAIAAwAGAAEAAAAMAAMAAwAGAAEAAAAMAAQAAwAGAAEAAAAMAAUAAwAGAAEAAAAMAAYAAwAGAAEAAAAMAAcAAwAGAAEAAAAMAAgAAwAGAAEAAAAMAAkAAwAGAAEAAAAMAAoAAwAGAAEAAAAMAAsAAwAGAAEAAAAMAAwAAwAGAAEAAAANAAAAAwAGAAEAAAANAAEAAwAGAAEAAAANAAIAAwAGAAEAAAANAAMAAwAGAAEAAAANAAQAAwAGAAEAAAANAAUAAwAGAAEAAAANAAYAAwAGAAEAAAANAAcAAwAGAAEAAAANAAgAAwAGAAEAAAANAAkAAwAGAAEAAAANAAoAAwAGAAEAAAANAAsAAwAGAAEAAAANAAwAAwAGAAEAAAAOAAAAAwAGAAEAAAAOAAEAAwAGAAEAAAAOAAIAAwAGAAEAAAAOAAMAAwAGAAEAAAAOAAQAAwAGAAEAAAAOAAUAAwAGAAEAAAAOAAYAAwAGAAEAAAAOAAcAAwAGAAEAAAAOAAgAAwAGAAEAAAAOAAkAAwAGAAEAAAAOAAoAAwAGAAEAAAAOAAsAAwAGAAEAAAAOAAwAAwAGAAEAAAAPAAAAAwAGAAEAAAAPAAEAAwAGAAEAAAAPAAIAAwAGAAEAAAAPAAMAAwAGAAEAAAAPAAQAAwAGAAEAAAAPAAUAAwAGAAEAAAAPAAYAAwAGAAEAAAAPAAcAAwAGAAEAAAAPAAgAAwAGAAEAAAAPAAkAAwAGAAEAAAAPAAoAAwAGAAEAAAAPAAsAAwAGAAEAAAAPAAwAAwAGAAEAAAAQAAAAAwAGAAEAAAAQAAEAAwAGAAEAAAAQAAIAAwAGAAEAAAAQAAMAAwAGAAEAAAAQAAQAAwAGAAEAAAAQAAUAAwAGAAEAAAAQAAYAAwAGAAEAAAAQAAcAAwAGAAEAAAAQAAgAAwAGAAEAAAAQAAkAAwAGAAEAAAAQAAoAAwAGAAEAAAAQAAsAAwAGAAEAAAAQAAwAAwAGAAEAAAARAAAAAwAGAAEAAAARAAEAAwAGAAEAAAARAAIAAwAGAAEAAAARAAMAAwAGAAEAAAARAAQAAwAGAAEAAAARAAUAAwAGAAEAAAARAAYAAwAGAAEAAAARAAcAAwAGAAEAAAARAAgAAwAGAAEAAAARAAkAAwAGAAEAAAARAAoAAwAGAAEAAAARAAsAAwAGAAEAAAARAAwAAwAGAAEAAAASAAAAAwAGAAEAAAASAAEAAwAGAAEAAAASAAIAAwAGAAEAAAASAAMAAwAGAAEAAAASAAQAAwAGAAEAAAASAAUAAwAGAAEAAAASAAYAAwAGAAEAAAASAAcAAwAGAAEAAAASAAgAAwAGAAEAAAASAAkAAwAGAAEAAAASAAoAAwAGAAEAAAASAAsAAwAGAAEAAAASAAwAAwAGAAEAAAATAAAAAwAGAAEAAAATAAEAAwAGAAEAAAATAAIAAwAGAAEAAAATAAMAAwAGAAEAAAATAAQAAwAGAAEAAAATAAUAAwAGAAEAAAATAAYAAwAGAAEAAAATAAcAAwAGAAEAAAATAAgAAwAGAAEAAAATAAkAAwAGAAEAAAATAAoAAwAGAAEAAAATAAsAAwAGAAEAAAATAAwAAwAGAAEAAAAUAAAAAwAGAAEAAAAUAAEAAwAGAAEAAAAUAAIAAwAGAAEAAAAUAAMAAwAGAAEAAAAUAAQAAwAGAAEAAAAUAAUAAwAGAAEAAAAUAAYAAwAGAAEAAAAUAAcAAwAGAAEAAAAUAAgAAwAGAAEAAAAUAAkAAwAGAAEAAAAUAAoAAwAGAAEAAAAUAAsAAwAGAAEAAAAUAAwAAwAGAAEAAAAVAAAAAwAGAAEAAAAVAAEAAwAGAAEAAAAVAAIAAwAGAAEAAAAVAAMAAwAGAAEAAAAVAAQAAwAGAAEAAAAVAAUAAwAGAAEAAAAVAAYAAwAGAAEAAAAVAAcAAwAGAAEAAAAVAAgAAwAGAAEAAAAVAAkAAwAGAAEAAAAVAAoAAwAGAAEAAAAVAAsAAwAGAAEAAAAVAAwAAwAGAAEAAAAWAAAAAwAGAAEAAAAWAAEAAwAGAAEAAAAWAAIAAwAGAAEAAAAWAAMAAwAGAAEAAAAWAAQAAwAGAAEAAAAWAAUAAwAGAAEAAAAWAAYAAwAGAAEAAAAWAAcAAwAGAAEAAAAWAAgAAwAGAAEAAAAWAAkAAwAGAAEAAAAWAAoAAwAGAAEAAAAWAAsAAwAGAAEAAAAWAAwAAwAGAAEAAAAXAAAAAwAGAAEAAAAXAAEAAwAGAAEAAAAXAAIAAwAGAAEAAAAXAAMAAwAGAAEAAAAXAAQAAwAGAAEAAAAXAAUAAwAGAAEAAAAXAAYAAwAGAAEAAAAXAAcAAwAGAAEAAAAXAAgAAwAGAAEAAAAXAAkAAwAGAAEAAAAXAAoAAwAGAAEAAAAXAAsAAwAGAAEAAAAXAAwAAwAGAAEAAAAYAAAAAwAGAAEAAAAYAAEAAwAGAAEAAAAYAAIAAwAGAAEAAAAYAAMAAwAGAAEAAAAYAAQAAwAGAAEAAAAYAAUAAwAGAAEAAAAYAAYAAwAGAAEAAAAYAAcAAwAGAAEAAAAYAAgAAwAGAAEAAAAYAAkAAwAGAAEAAAAYAAoAAwAGAAEAAAAYAAsAAwAGAAEAAAAYAAwAAwAGAAEAAAAZAAAAAwAGAAEAAAAZAAEAAwAGAAEAAAAZAAIAAwAGAAEAAAAZAAMAAwAGAAEAAAAZAAQAAwAGAAEAAAAZAAUAAwAGAAEAAAAZAAYAAwAGAAEAAAAZAAcAAwAGAAEAAAAZAAgAAwAGAAEAAAAZAAkAAwAGAAEAAAAZAAoAAwAGAAEAAAAZAAsAAwAGAAEAAAAZAAwAAwAGAAEAAAAaAAAAAwAGAAEAAAAaAAEAAwAGAAEAAAAaAAIAAwAGAAEAAAAaAAMAAwAGAAEAAAAaAAQAAwAGAAEAAAAaAAUAAwAGAAEAAAAaAAYAAwAGAAEAAAAaAAcAAwAGAAEAAAAaAAgAAwAGAAEAAAAaAAkAAwAGAAEAAAAaAAoAAwAGAAEAAAAaAAsAAwAGAAEAAAAaAAwAAwAGAAEAAAAbAAAAAwAGAAEAAAAbAAEAAwAGAAEAAAAbAAIAAwAGAAEAAAAbAAMAAwAGAAEAAAAbAAQAAwAGAAEAAAAbAAUAAwAGAAEAAAAbAAYAAwAGAAEAAAAbAAcAAwAGAAEAAAAbAAgAAwAGAAEAAAAbAAkAAwAGAAEAAAAbAAoAAwAGAAEAAAAbAAsAAwAGAAEAAAAbAAwAAwAGAAEAAAAcAAAAAwAGAAEAAAAcAAEAAwAGAAEAAAAcAAIAAwAGAAEAAAAcAAMAAwAGAAEAAAAcAAQAAwAGAAEAAAAcAAUAAwAGAAEAAAAcAAYAAwAGAAEAAAAcAAcAAwAGAAEAAAAcAAgAAwAGAAEAAAAcAAkAAwAGAAEAAAAcAAoAAwAGAAEAAAAcAAsAAwAGAAEAAAAcAAwAAwAGAAEAAAAdAAAAAwAGAAEAAAAdAAEAAwAGAAEAAAAdAAIAAwAGAAEAAAAdAAMAAwAGAAEAAAAdAAQAAwAGAAEAAAAdAAUAAwAGAAEAAAAdAAYAAwAGAAEAAAAdAAcAAwAGAAEAAAAdAAgAAwAGAAEAAAAdAAkAAwAGAAEAAAAdAAoAAwAGAAEAAAAdAAsAAwAGAAEAAAAdAAwAAwAGAAEAAAAeAAAAAwAGAAEAAAAeAAEAAwAGAAEAAAAeAAIAAwAGAAEAAAAeAAMAAwAGAAEAAAAeAAQAAwAGAAEAAAAeAAUAAwAGAAEAAAAeAAYAAwAGAAEAAAAeAAcAAwAGAAEAAAAeAAgAAwAGAAEAAAAeAAkAAwAGAAEAAAAeAAoAAwAGAAEAAAAeAAsAAwAGAAEAAAAeAAwAAwAGAAEAAAAfAAAAAwAGAAEAAAAfAAEAAwAGAAEAAAAfAAIAAwAGAAEAAAAfAAMAAwAGAAEAAAAfAAQAAwAGAAEAAAAfAAUAAwAGAAEAAAAfAAYAAwAGAAEAAAAfAAcAAwAGAAEAAAAfAAgAAwAGAAEAAAAfAAkAAwAGAAEAAAAfAAoAAwAGAAEAAAAfAAsAAwAGAAEAAAAfAAwAAwAGAAEAAAAgAAAAAwAGAAEAAAAgAAEAAwAGAAEAAAAgAAIAAwAGAAEAAAAgAAMAAwAGAAEAAAAgAAQAAwAGAAEAAAAgAAUAAwAGAAEAAAAgAAYAAwAGAAEAAAAgAAcAAwAGAAEAAAAgAAgAAwAGAAEAAAAgAAkAAwAGAAEAAAAgAAoAAwAGAAEAAAAgAAsAAwAGAAEAAAAgAAwAAwAGAAEAAADh//P/AwAHAAAAAADh//T/AwAHAAAAAADh//X/AwAHAAAAAADh//b/AwAHAAEAAADh//f/AwAHAAEAAADh//j/AwAHAAEAAADh//n/AwAHAAEAAADh//r/AwAHAAIAAADh//v/AwAHAAIAAADh//z/AwAHAAIAAADh//3/AwAHAAIAAADh//7/AwAHAAIAAADh////AwAHAAIAAADi//P/AwAHAAAAAADi//T/AwAHAAAAAADi//X/AwAHAAAAAADi//b/AwAHAAEAAADi//f/AwAHAAEAAADi//j/AwAHAAEAAADi//n/AwAHAAEAAADi//r/AwAHAAIAAADi//v/AwAHAAIAAADi//z/AwAHAAIAAADi//3/AwAHAAIAAADi//7/AwAHAAIAAADi////AwAHAAIAAADj//P/AwAHAAAAAADj//T/AwAHAAAAAADj//X/AwAHAAAAAADj//b/AwAHAAEAAADj//f/AwAHAAEAAADj//j/AwAHAAEAAADj//n/AwAHAAEAAADj//r/AwAHAAIAAADj//v/AwAHAAIAAADj//z/AwAHAAIAAADj//3/AwAHAAIAAADj//7/AwAHAAIAAADj////AwAHAAIAAADk//P/AwAHAAAAAADk//T/AwAHAAAAAADk//X/AwAHAAAAAADk//b/AwAHAAEAAADk//f/AwAHAAEAAADk//j/AwAHAAEAAADk//n/AwAHAAEAAADk//r/AwAHAAIAAADk//v/AwAHAAIAAADk//z/AwAHAAIAAADk//3/AwAHAAIAAADk//7/AwAHAAIAAADk////AwAHAAIAAADl//P/AwAHAAAAAADl//T/AwAHAAAAAADl//X/AwAHAAAAAADl//b/AwAHAAEAAADl//f/AwAHAAEAAADl//j/AwAHAAEAAADl//n/AwAHAAEAAADl//r/AwAHAAIAAADl//v/AwAHAAIAAADl//z/AwAHAAIAAADl//3/AwAHAAIAAADl//7/AwAHAAIAAADl////AwAHAAIAAADm//P/AwAHAAAAAADm//T/AwAHAAAAAADm//X/AwAHAAAAAADm//b/AwAHAAEAAADm//f/AwAHAAEAAADm//j/AwAHAAEAAADm//n/AwAHAAEAAADm//r/AwAHAAIAAADm//v/AwAHAAIAAADm//z/AwAHAAIAAADm//3/AwAHAAIAAADm//7/AwAHAAIAAADm////AwAHAAIAAADn//P/AwAHAAAAAADn//T/AwAHAAAAAADn//X/AwAHAAAAAADn//b/AwAHAAEAAADn//f/AwAHAAEAAADn//j/AwAHAAEAAADn//n/AwAHAAEAAADn//r/AwAHAAIAAADn//v/AwAHAAIAAADn//z/AwAHAAIAAADn//3/AwAHAAIAAADn//7/AwAHAAIAAADn////AwAHAAIAAADo//P/AwAHAAAAAADo//T/AwAHAAAAAADo//X/AwAHAAAAAADo//b/AwAHAAEAAADo//f/AwAHAAEAAADo//j/AwAHAAEAAADo//n/AwAHAAEAAADo//r/AwAHAAIAAADo//v/AwAHAAIAAADo//z/AwAHAAIAAADo//3/AwAHAAIAAADo//7/AwAHAAIAAADo////AwAHAAIAAADp//P/AwAHAAAAAADp//T/AwAHAAAAAADp//X/AwAHAAAAAADp//b/AwAHAAEAAADp//f/AwAHAAEAAADp//j/AwAHAAEAAADp//n/AwAHAAEAAADp//r/AwAHAAIAAADp//v/AwAHAAIAAADp//z/AwAHAAIAAADp//3/AwAHAAIAAADp//7/AwAHAAIAAADp////AwAHAAIAAADq//P/AwAHAAAAAADq//T/AwAHAAAAAADq//X/AwAHAAAAAADq//b/AwAHAAEAAADq//f/AwAHAAEAAADq//j/AwAHAAEAAADq//n/AwAHAAEAAADq//r/AwAHAAIAAADq//v/AwAHAAIAAADq//z/AwAHAAIAAADq//3/AwAHAAIAAADq//7/AwAHAAIAAADq////AwAHAAIAAADr//P/AwAHAAAAAADr//T/AwAHAAAAAADr//X/AwAHAAAAAADr//b/AwAHAAEAAADr//f/AwAHAAEAAADr//j/AwAHAAEAAADr//n/AwAHAAEAAADr//r/AwAHAAIAAADr//v/AwAHAAIAAADr//z/AwAHAAIAAADr//3/AwAHAAIAAADr//7/AwAHAAIAAADr////AwAHAAIAAADs//P/AwAHAAAAAADs//T/AwAHAAAAAADs//X/AwAHAAAAAADs//b/AwAHAAEAAADs//f/AwAHAAEAAADs//j/AwAHAAEAAADs//n/AwAHAAEAAADs//r/AwAHAAIAAADs//v/AwAHAAIAAADs//z/AwAHAAIAAADs//3/AwAHAAIAAADs//7/AwAHAAIAAADs////AwAHAAIAAADt//P/AwAHAAAAAADt//T/AwAHAAAAAADt//X/AwAHAAAAAADt//b/AwAHAAEAAADt//f/AwAHAAEAAADt//j/AwAHAAEAAADt//n/AwAHAAEAAADt//r/AwAHAAIAAADt//v/AwAHAAIAAADt//z/AwAHAAIAAADt//3/AwAHAAIAAADt//7/AwAHAAIAAADt////AwAHAAIAAADu//P/AwAHAAAAAADu//T/AwAHAAAAAADu//X/AwAHAAAAAADu//b/AwAHAAEAAADu//f/AwAHAAEAAADu//j/AwAHAAEAAADu//n/AwAHAAEAAADu//r/AwAHAAIAAADu//v/AwAHAAIAAADu//z/AwAHAAIAAADu//3/AwAHAAIAAADu//7/AwAHAAIAAADu////AwAHAAIAAADv//P/AwAHAAAAAADv//T/AwAHAAAAAADv//X/AwAHAAAAAADv//b/AwAHAAEAAADv//f/AwAHAAEAAADv//j/AwAHAAEAAADv//n/AwAHAAEAAADv//r/AwAHAAIAAADv//v/AwAHAAIAAADv//z/AwAHAAIAAADv//3/AwAHAAIAAADv//7/AwAHAAIAAADv////AwAHAAIAAADw//P/AwAHAAAAAADw//T/AwAHAAAAAADw//X/AwAHAAAAAADw//b/AwAHAAEAAADw//f/AwAHAAEAAADw//j/AwAHAAEAAADw//n/AwAHAAEAAADw//r/AwAHAAIAAADw//v/AwAHAAIAAADw//z/AwAHAAIAAADw//3/AwAHAAIAAADw//7/AwAHAAIAAADw////AwAHAAIAAADx//P/AwAHAAAAAADx//T/AwAHAAAAAADx//X/AwAHAAAAAADx//b/AwAHAAEAAADx//f/AwAHAAEAAADx//j/AwAHAAEAAADx//n/AwAHAAEAAADx//r/AwAHAAIAAADx//v/AwAHAAIAAADx//z/AwAHAAIAAADx//3/AwAHAAIAAADx//7/AwAHAAIAAADx////AwAHAAIAAADy//P/AwAHAAAAAADy//T/AwAHAAAAAADy//X/AwAHAAAAAADy//b/AwAHAAEAAADy//f/AwAHAAEAAADy//j/AwAHAAEAAADy//n/AwAHAAEAAADy//r/AwAHAAIAAADy//v/AwAHAAIAAADy//z/AwAHAAIAAADy//3/AwAHAAIAAADy//7/AwAHAAIAAADy////AwAHAAIAAADz//P/AwAHAAAAAADz//T/AwAHAAAAAADz//X/AwAHAAAAAADz//b/AwAHAAEAAADz//f/AwAHAAEAAADz//j/AwAHAAEAAADz//n/AwAHAAEAAADz//r/AwAHAAIAAADz//v/AwAHAAIAAADz//z/AwAHAAIAAADz//3/AwAHAAIAAADz//7/AwAHAAIAAADz////AwAHAAIAAAD0//P/AwAHAAAAAAD0//T/AwAHAAAAAAD0//X/AwAHAAAAAAD0//b/AwAHAAEAAAD0//f/AwAHAAEAAAD0//j/AwAHAAEAAAD0//n/AwAHAAEAAAD0//r/AwAHAAIAAAD0//v/AwAHAAIAAAD0//z/AwAHAAIAAAD0//3/AwAHAAIAAAD0//7/AwAHAAIAAAD0////AwAHAAIAAAD1//P/AwAHAAAAAAD1//T/AwAHAAAAAAD1//X/AwAHAAAAAAD1//b/AwAHAAEAAAD1//f/AwAHAAEAAAD1//j/AwAHAAEAAAD1//n/AwAHAAEAAAD1//r/AwAHAAIAAAD1//v/AwAHAAIAAAD1//z/AwAHAAIAAAD1//3/AwAHAAIAAAD1//7/AwAHAAIAAAD1////AwAHAAIAAAD2//P/AwAHAAAAAAD2//T/AwAHAAAAAAD2//X/AwAHAAAAAAD2//b/AwAHAAEAAAD2//f/AwAHAAEAAAD2//j/AwAHAAEAAAD2//n/AwAHAAEAAAD2//r/AwAHAAIAAAD2//v/AwAHAAIAAAD2//z/AwAHAAIAAAD2//3/AwAHAAIAAAD2//7/AwAHAAIAAAD2////AwAHAAIAAAD3//P/AwAHAAAAAAD3//T/AwAHAAAAAAD3//X/AwAHAAAAAAD3//b/AwAHAAEAAAD3//f/AwAHAAEAAAD3//j/AwAHAAEAAAD3//n/AwAHAAEAAAD3//r/AwAHAAIAAAD3//v/AwAHAAIAAAD3//z/AwAHAAIAAAD3//3/AwAHAAIAAAD3//7/AwAHAAIAAAD3////AwAHAAIAAAD4//P/AwAHAAAAAAD4//T/AwAHAAAAAAD4//X/AwAHAAAAAAD4//b/AwAHAAEAAAD4//f/AwAHAAEAAAD4//j/AwAHAAEAAAD4//n/AwAHAAEAAAD4//r/AwAHAAIAAAD4//v/AwAHAAIAAAD4//z/AwAHAAIAAAD4//3/AwAHAAIAAAD4//7/AwAHAAIAAAD4////AwAHAAIAAAD5//P/AwAHAAAAAAD5//T/AwAHAAAAAAD5//X/AwAHAAAAAAD5//b/AwAHAAEAAAD5//f/AwAHAAEAAAD5//j/AwAHAAEAAAD5//n/AwAHAAEAAAD5//r/AwAHAAIAAAD5//v/AwAHAAIAAAD5//z/AwAHAAIAAAD5//3/AwAHAAIAAAD5//7/AwAHAAIAAAD5////AwAHAAIAAAD6//P/AwAHAAAAAAD6//T/AwAHAAAAAAD6//X/AwAHAAAAAAD6//b/AwAHAAEAAAD6//f/AwAHAAEAAAD6//j/AwAHAAEAAAD6//n/AwAHAAEAAAD6//r/AwAHAAIAAAD6//v/AwAHAAIAAAD6//z/AwAHAAIAAAD6//3/AwAHAAIAAAD6//7/AwAHAAIAAAD6////AwAHAAIAAAD7//P/AwAHAAAAAAD7//T/AwAHAAAAAAD7//X/AwAHAAAAAAD7//b/AwAHAAEAAAD7//f/AwAHAAEAAAD7//j/AwAHAAEAAAD7//n/AwAHAAEAAAD7//r/AwAHAAIAAAD7//v/AwAHAAIAAAD7//z/AwAHAAIAAAD7//3/AwAHAAIAAAD7//7/AwAHAAIAAAD7////AwAHAAIAAAD8//P/AwAHAAAAAAD8//T/AwAHAAAAAAD8//X/AwAHAAAAAAD8//b/AwAHAAEAAAD8//f/AwAHAAEAAAD8//j/AwAHAAEAAAD8//n/AwAHAAEAAAD8//r/AwAHAAIAAAD8//v/AwAHAAIAAAD8//z/AwAHAAIAAAD8//3/AwAHAAIAAAD8//7/AwAHAAIAAAD8////AwAHAAIAAAD9//P/AwAHAAAAAAD9//T/AwAHAAAAAAD9//X/AwAHAAAAAAD9//b/AwAHAAEAAAD9//f/AwAHAAEAAAD9//j/AwAHAAEAAAD9//n/AwAHAAEAAAD9//r/AwAHAAIAAAD9//v/AwAHAAIAAAD9//z/AwAHAAIAAAD9//3/AwAHAAIAAAD9//7/AwAHAAIAAAD9////AwAHAAIAAAD+//P/AwAHAAAAAAD+//T/AwAHAAAAAAD+//X/AwAHAAAAAAD+//b/AwAHAAEAAAD+//f/AwAHAAEAAAD+//j/AwAHAAEAAAD+//n/AwAHAAEAAAD+//r/AwAHAAIAAAD+//v/AwAHAAIAAAD+//z/AwAHAAIAAAD+//3/AwAHAAIAAAD+//7/AwAHAAIAAAD+////AwAHAAIAAAD///P/AwAHAAAAAAD///T/AwAHAAAAAAD///X/AwAHAAAAAAD///b/AwAHAAEAAAD///f/AwAHAAEAAAD///j/AwAHAAEAAAD///n/AwAHAAEAAAD///r/AwAHAAIAAAD///v/AwAHAAIAAAD///z/AwAHAAIAAAD///3/AwAHAAIAAAD///7/AwAHAAIAAAAAAPP/AwAHAAAAAAAAAPT/AwAHAAAAAAAAAPX/AwAHAAAAAAAAAPb/AwAHAAEAAAAAAPf/AwAHAAEAAAAAAPj/AwAHAAEAAAAAAPn/AwAHAAEAAAAAAPr/AwAHAAIAAAAAAPv/AwAHAAIAAAAAAPz/AwAHAAIAAAAAAP3/AwAHAAIAAAAAAP7/AwAHAAIAAAABAPP/AwAHAAAAAAABAPT/AwAHAAAAAAABAPX/AwAHAAAAAAABAPb/AwAHAAEAAAABAPf/AwAHAAEAAAABAPj/AwAHAAEAAAABAPn/AwAHAAEAAAABAPr/AwAHAAIAAAABAPv/AwAHAAIAAAABAP3/AwAHAAIAAAABAP7/AwAHAAIAAAACAPP/AwAHAAAAAAACAPT/AwAHAAAAAAACAPX/AwAHAAAAAAACAPb/AwAHAAEAAAACAPf/AwAHAAEAAAACAPj/AwAHAAEAAAACAPn/AwAHAAEAAAACAPr/AwAHAAIAAAACAPv/AwAHAAIAAAACAPz/AwAHAAIAAAACAP3/AwAHAAIAAAACAP7/AwAHAAIAAAADAPP/AwAHAAAAAAADAPT/AwAHAAAAAAADAPX/AwAHAAAAAAADAPb/AwAHAAEAAAADAPf/AwAHAAEAAAADAPj/AwAHAAEAAAADAPn/AwAHAAEAAAADAPr/AwAHAAIAAAADAPv/AwAHAAIAAAADAP3/AwAHAAIAAAADAP7/AwAHAAIAAAAEAPP/AwAHAAAAAAAEAPT/AwAHAAAAAAAEAPX/AwAHAAAAAAAEAPb/AwAHAAEAAAAEAPf/AwAHAAEAAAAEAPj/AwAHAAEAAAAEAPn/AwAHAAEAAAAEAPr/AwAHAAIAAAAEAPv/AwAHAAIAAAAEAPz/AwAHAAIAAAAEAP3/AwAHAAIAAAAEAP7/AwAHAAIAAAAFAPP/AwAHAAAAAAAFAPT/AwAHAAAAAAAFAPX/AwAHAAAAAAAFAPb/AwAHAAEAAAAFAPf/AwAHAAEAAAAFAPj/AwAHAAEAAAAFAPn/AwAHAAEAAAAFAPr/AwAHAAIAAAAFAPv/AwAHAAIAAAAFAPz/AwAHAAIAAAAFAP3/AwAHAAIAAAAFAP7/AwAHAAIAAAAGAPP/AwAHAAAAAAAGAPT/AwAHAAAAAAAGAPX/AwAHAAAAAAAGAPb/AwAHAAEAAAAGAPf/AwAHAAEAAAAGAPj/AwAHAAEAAAAGAPn/AwAHAAEAAAAGAPr/AwAHAAIAAAAGAPv/AwAHAAIAAAAGAPz/AwAHAAIAAAAGAP3/AwAHAAIAAAAGAP7/AwAHAAIAAAAGAP//AwAHAAIAAAAHAPP/AwAHAAAAAAAHAPT/AwAHAAAAAAAHAPX/AwAHAAAAAAAHAPb/AwAHAAEAAAAHAPf/AwAHAAEAAAAHAPj/AwAHAAEAAAAHAPn/AwAHAAEAAAAHAPr/AwAHAAIAAAAHAPv/AwAHAAIAAAAHAPz/AwAHAAIAAAAHAP3/AwAHAAIAAAAHAP7/AwAHAAIAAAAHAP//AwAHAAIAAAAIAPP/AwAHAAAAAAAIAPT/AwAHAAAAAAAIAPX/AwAHAAAAAAAIAPb/AwAHAAEAAAAIAPf/AwAHAAEAAAAIAPj/AwAHAAEAAAAIAPn/AwAHAAEAAAAIAPr/AwAHAAIAAAAIAPv/AwAHAAIAAAAIAPz/AwAHAAIAAAAIAP3/AwAHAAIAAAAIAP7/AwAHAAIAAAAIAP//AwAHAAIAAAAJAPP/AwAHAAAAAAAJAPT/AwAHAAAAAAAJAPX/AwAHAAAAAAAJAPb/AwAHAAEAAAAJAPf/AwAHAAEAAAAJAPj/AwAHAAEAAAAJAPn/AwAHAAEAAAAJAPr/AwAHAAIAAAAJAPv/AwAHAAIAAAAJAPz/AwAHAAIAAAAJAP3/AwAHAAIAAAAJAP7/AwAHAAIAAAAJAP//AwAHAAIAAAAKAPP/AwAHAAAAAAAKAPT/AwAHAAAAAAAKAPX/AwAHAAAAAAAKAPb/AwAHAAEAAAAKAPf/AwAHAAEAAAAKAPj/AwAHAAEAAAAKAPn/AwAHAAEAAAAKAPr/AwAHAAIAAAAKAPv/AwAHAAIAAAAKAPz/AwAHAAIAAAAKAP3/AwAHAAIAAAAKAP7/AwAHAAIAAAAKAP//AwAHAAIAAAALAPP/AwAHAAAAAAALAPT/AwAHAAAAAAALAPX/AwAHAAAAAAALAPb/AwAHAAEAAAALAPf/AwAHAAEAAAALAPj/AwAHAAEAAAALAPn/AwAHAAEAAAALAPr/AwAHAAIAAAALAPv/AwAHAAIAAAALAPz/AwAHAAIAAAALAP3/AwAHAAIAAAALAP7/AwAHAAIAAAALAP//AwAHAAIAAAAMAPP/AwAHAAAAAAAMAPT/AwAHAAAAAAAMAPX/AwAHAAAAAAAMAPb/AwAHAAEAAAAMAPf/AwAHAAEAAAAMAPj/AwAHAAEAAAAMAPn/AwAHAAEAAAAMAPr/AwAHAAIAAAAMAPv/AwAHAAIAAAAMAPz/AwAHAAIAAAAMAP3/AwAHAAIAAAAMAP7/AwAHAAIAAAAMAP//AwAHAAIAAAANAPP/AwAHAAAAAAANAPT/AwAHAAAAAAANAPX/AwAHAAAAAAANAPb/AwAHAAEAAAANAPf/AwAHAAEAAAANAPj/AwAHAAEAAAANAPn/AwAHAAEAAAANAPr/AwAHAAIAAAANAPv/AwAHAAIAAAANAPz/AwAHAAIAAAANAP3/AwAHAAIAAAANAP7/AwAHAAIAAAANAP//AwAHAAIAAAAOAPP/AwAHAAAAAAAOAPT/AwAHAAAAAAAOAPX/AwAHAAAAAAAOAPb/AwAHAAEAAAAOAPf/AwAHAAEAAAAOAPj/AwAHAAEAAAAOAPn/AwAHAAEAAAAOAPr/AwAHAAIAAAAOAPv/AwAHAAIAAAAOAPz/AwAHAAIAAAAOAP3/AwAHAAIAAAAOAP7/AwAHAAIAAAAOAP//AwAHAAIAAAAPAPP/AwAHAAAAAAAPAPT/AwAHAAAAAAAPAPX/AwAHAAAAAAAPAPb/AwAHAAEAAAAPAPf/AwAHAAEAAAAPAPj/AwAHAAEAAAAPAPn/AwAHAAEAAAAPAPr/AwAHAAIAAAAPAPv/AwAHAAIAAAAPAPz/AwAHAAIAAAAPAP3/AwAHAAIAAAAPAP7/AwAHAAIAAAAPAP//AwAHAAIAAAAQAPP/AwAHAAAAAAAQAPT/AwAHAAAAAAAQAPX/AwAHAAAAAAAQAPb/AwAHAAEAAAAQAPf/AwAHAAEAAAAQAPj/AwAHAAEAAAAQAPn/AwAHAAEAAAAQAPr/AwAHAAIAAAAQAPv/AwAHAAIAAAAQAPz/AwAHAAIAAAAQAP3/AwAHAAIAAAAQAP7/AwAHAAIAAAAQAP//AwAHAAIAAAARAPP/AwAHAAAAAAARAPT/AwAHAAAAAAARAPX/AwAHAAAAAAARAPb/AwAHAAEAAAARAPf/AwAHAAEAAAARAPj/AwAHAAEAAAARAPn/AwAHAAEAAAARAPr/AwAHAAIAAAARAPv/AwAHAAIAAAARAPz/AwAHAAIAAAARAP3/AwAHAAIAAAARAP7/AwAHAAIAAAARAP//AwAHAAIAAAASAPP/AwAHAAAAAAASAPT/AwAHAAAAAAASAPX/AwAHAAAAAAASAPb/AwAHAAEAAAASAPf/AwAHAAEAAAASAPj/AwAHAAEAAAASAPn/AwAHAAEAAAASAPr/AwAHAAIAAAASAPv/AwAHAAIAAAASAPz/AwAHAAIAAAASAP3/AwAHAAIAAAASAP7/AwAHAAIAAAASAP//AwAHAAIAAAATAPP/AwAHAAAAAAATAPT/AwAHAAAAAAATAPX/AwAHAAAAAAATAPb/AwAHAAEAAAATAPf/AwAHAAEAAAATAPj/AwAHAAEAAAATAPn/AwAHAAEAAAATAPr/AwAHAAIAAAATAPv/AwAHAAIAAAATAPz/AwAHAAIAAAATAP3/AwAHAAIAAAATAP7/AwAHAAIAAAATAP//AwAHAAIAAAAUAPP/AwAHAAAAAAAUAPT/AwAHAAAAAAAUAPX/AwAHAAAAAAAUAPb/AwAHAAEAAAAUAPf/AwAHAAEAAAAUAPj/AwAHAAEAAAAUAPn/AwAHAAEAAAAUAPr/AwAHAAIAAAAUAPv/AwAHAAIAAAAUAPz/AwAHAAIAAAAUAP3/AwAHAAIAAAAUAP7/AwAHAAIAAAAUAP//AwAHAAIAAAAVAPP/AwAHAAAAAAAVAPT/AwAHAAAAAAAVAPX/AwAHAAAAAAAVAPb/AwAHAAEAAAAVAPf/AwAHAAEAAAAVAPj/AwAHAAEAAAAVAPn/AwAHAAEAAAAVAPr/AwAHAAIAAAAVAPv/AwAHAAIAAAAVAPz/AwAHAAIAAAAVAP3/AwAHAAIAAAAVAP7/AwAHAAIAAAAVAP//AwAHAAIAAAAWAPP/AwAHAAAAAAAWAPT/AwAHAAAAAAAWAPX/AwAHAAAAAAAWAPb/AwAHAAEAAAAWAPf/AwAHAAEAAAAWAPj/AwAHAAEAAAAWAPn/AwAHAAEAAAAWAPr/AwAHAAIAAAAWAPv/AwAHAAIAAAAWAPz/AwAHAAIAAAAWAP3/AwAHAAIAAAAWAP7/AwAHAAIAAAAWAP//AwAHAAIAAAAXAPP/AwAHAAAAAAAXAPT/AwAHAAAAAAAXAPX/AwAHAAAAAAAXAPb/AwAHAAEAAAAXAPf/AwAHAAEAAAAXAPj/AwAHAAEAAAAXAPn/AwAHAAEAAAAXAPr/AwAHAAIAAAAXAPv/AwAHAAIAAAAXAPz/AwAHAAIAAAAXAP3/AwAHAAIAAAAXAP7/AwAHAAIAAAAXAP//AwAHAAIAAAAYAPP/AwAHAAAAAAAYAPT/AwAHAAAAAAAYAPX/AwAHAAAAAAAYAPb/AwAHAAEAAAAYAPf/AwAHAAEAAAAYAPj/AwAHAAEAAAAYAPn/AwAHAAEAAAAYAPr/AwAHAAIAAAAYAPv/AwAHAAIAAAAYAPz/AwAHAAIAAAAYAP3/AwAHAAIAAAAYAP7/AwAHAAIAAAAYAP//AwAHAAIAAAAZAPP/AwAHAAAAAAAZAPT/AwAHAAAAAAAZAPX/AwAHAAAAAAAZAPb/AwAHAAEAAAAZAPf/AwAHAAEAAAAZAPj/AwAHAAEAAAAZAPn/AwAHAAEAAAAZAPr/AwAHAAIAAAAZAPv/AwAHAAIAAAAZAPz/AwAHAAIAAAAZAP3/AwAHAAIAAAAZAP7/AwAHAAIAAAAZAP//AwAHAAIAAAAaAPP/AwAHAAAAAAAaAPT/AwAHAAAAAAAaAPX/AwAHAAAAAAAaAPb/AwAHAAEAAAAaAPf/AwAHAAEAAAAaAPj/AwAHAAEAAAAaAPn/AwAHAAEAAAAaAPr/AwAHAAIAAAAaAPv/AwAHAAIAAAAaAPz/AwAHAAIAAAAaAP3/AwAHAAIAAAAaAP7/AwAHAAIAAAAaAP//AwAHAAIAAAAbAPP/AwAHAAAAAAAbAPT/AwAHAAAAAAAbAPX/AwAHAAAAAAAbAPb/AwAHAAEAAAAbAPf/AwAHAAEAAAAbAPj/AwAHAAEAAAAbAPn/AwAHAAEAAAAbAPr/AwAHAAIAAAAbAPv/AwAHAAIAAAAbAPz/AwAHAAIAAAAbAP3/AwAHAAIAAAAbAP7/AwAHAAIAAAAbAP//AwAHAAIAAAAcAPP/AwAHAAAAAAAcAPT/AwAHAAAAAAAcAPX/AwAHAAAAAAAcAPb/AwAHAAEAAAAcAPf/AwAHAAEAAAAcAPj/AwAHAAEAAAAcAPn/AwAHAAEAAAAcAPr/AwAHAAIAAAAcAPv/AwAHAAIAAAAcAPz/AwAHAAIAAAAcAP3/AwAHAAIAAAAcAP7/AwAHAAIAAAAcAP//AwAHAAIAAAAdAPP/AwAHAAAAAAAdAPT/AwAHAAAAAAAdAPX/AwAHAAAAAAAdAPb/AwAHAAEAAAAdAPf/AwAHAAEAAAAdAPj/AwAHAAEAAAAdAPn/AwAHAAEAAAAdAPr/AwAHAAIAAAAdAPv/AwAHAAIAAAAdAPz/AwAHAAIAAAAdAP3/AwAHAAIAAAAdAP7/AwAHAAIAAAAdAP//AwAHAAIAAAAeAPP/AwAHAAAAAAAeAPT/AwAHAAAAAAAeAPX/AwAHAAAAAAAeAPb/AwAHAAEAAAAeAPf/AwAHAAEAAAAeAPj/AwAHAAEAAAAeAPn/AwAHAAEAAAAeAPr/AwAHAAIAAAAeAPv/AwAHAAIAAAAeAPz/AwAHAAIAAAAeAP3/AwAHAAIAAAAeAP7/AwAHAAIAAAAeAP//AwAHAAIAAAAfAPP/AwAHAAAAAAAfAPT/AwAHAAAAAAAfAPX/AwAHAAAAAAAfAPb/AwAHAAEAAAAfAPf/AwAHAAEAAAAfAPj/AwAHAAEAAAAfAPn/AwAHAAEAAAAfAPr/AwAHAAIAAAAfAPv/AwAHAAIAAAAfAPz/AwAHAAIAAAAfAP3/AwAHAAIAAAAfAP7/AwAHAAIAAAAfAP//AwAHAAIAAAAgAPP/AwAHAAAAAAAgAPT/AwAHAAAAAAAgAPX/AwAHAAAAAAAgAPb/AwAHAAEAAAAgAPf/AwAHAAEAAAAgAPj/AwAHAAEAAAAgAPn/AwAHAAEAAAAgAPr/AwAHAAIAAAAgAPv/AwAHAAIAAAAgAPz/AwAHAAIAAAAgAP3/AwAHAAIAAAAgAP7/AwAHAAIAAAAgAP//AwAHAAIAAAADAPz/AwAHAAIAAAABAPz/AwAHAAIAAAAFAP//AwAHAAIAAAACAAAAAwAGAAEAAAABAAAAAwAGAAEAAAAAAAAAAwAGAAEAAAD//wAAAwAGAAEAAAAEAP//AwAHAAIAAAADAP//AwAHAAIAAAACAP//AwAHAAIAAAABAP//AwAHAAIAAAAAAP//AwAHAAIAAAD/////AwAHAAIAAAADAAAAAwAGAAEAAAAGAAEAAwAGAAEAAAA=")
tile_set = SubResource("TileSet_lbhrr")

[node name="Ground" type="TileMapLayer" parent="WorldContainer/TileMap"]
use_parent_material = true
tile_map_data = PackedByteArray("")
tile_set = SubResource("TileSet_lbhrr")

[node name="Player" parent="WorldContainer" node_paths=PackedStringArray("ground_tilemap") groups=["player", "players"] instance=ExtResource("1_uwrxv")]
position = Vector2(0, -19)
collision_layer = 1
ladder_scene = ExtResource("7_u5sy4")
ground_tilemap = NodePath("../TileMap/Ground")

[node name="Camera2D" type="Camera2D" parent="WorldContainer/Player"]
position = Vector2(0, -8)
zoom = Vector2(4, 4)
position_smoothing_enabled = true

[node name="Ladders" type="Node" parent="WorldContainer"]

[node name="Ladder" parent="WorldContainer/Ladders" instance=ExtResource("7_u5sy4")]
position = Vector2(57, 40)

[node name="Ladder2" parent="WorldContainer/Ladders" instance=ExtResource("7_u5sy4")]
position = Vector2(57, 24)

[node name="Ladder3" parent="WorldContainer/Ladders" instance=ExtResource("7_u5sy4")]
position = Vector2(57, 8)

[node name="Ladder4" parent="WorldContainer/Ladders" instance=ExtResource("7_u5sy4")]
position = Vector2(25, 72)

[node name="Ladder5" parent="WorldContainer/Ladders" instance=ExtResource("7_u5sy4")]
position = Vector2(25, 56)

[node name="Ladder6" parent="WorldContainer/Ladders" instance=ExtResource("7_u5sy4")]
position = Vector2(25, 40)

[connection signal="pressed" from="GameOverLayer/RestartButton" to="GameOverLayer" method="_on_restart_button_pressed"]
</file>

<file path="assets/sprites/other/scenes/ladder.tscn">
[gd_scene load_steps=5 format=3 uid="uid://dmf6diflfftrc"]

[ext_resource type="Script" uid="uid://xiu1moqcmuwf" path="res://scripts/ladder.gd" id="1_xb1tl"]
[ext_resource type="Texture2D" uid="uid://bcm1qkp4dydjd" path="res://assets/sprites/Miner16Bit_AllFiles_v1/Miner16Bit_WorldTiles_02.png" id="1_xxwne"]

[sub_resource type="AtlasTexture" id="AtlasTexture_xxwne"]
atlas = ExtResource("1_xxwne")

[sub_resource type="RectangleShape2D" id="RectangleShape2D_xb1tl"]
size = Vector2(8, 16)

[node name="Ladder" type="Area2D" groups=["ladders"]]
script = ExtResource("1_xb1tl")

[node name="Sprite2D" type="Sprite2D" parent="."]
texture = SubResource("AtlasTexture_xxwne")
region_enabled = true
region_rect = Rect2(112, 80, 16, 16)

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(-1, 0)
shape = SubResource("RectangleShape2D_xb1tl")

[connection signal="body_entered" from="." to="." method="_on_body_entered"]
[connection signal="body_exited" from="." to="." method="_on_body_exited"]
</file>

<file path="assets/sprites/other/scenes/player.tscn20153892974.tmp">
[gd_scene load_steps=37 format=3 uid="uid://4yp0qu72jr2b"]

[ext_resource type="Script" uid="uid://cq0ybetkfcej5" path="res://scripts/player.gd" id="1_g2els"]
[ext_resource type="Texture2D" uid="uid://owxmkmo3hff" path="res://assets/sprites/Miner16Bit_AllFiles_v1/Miner_AllAnimations_SpriteSheet.png" id="2_g2els"]
[ext_resource type="AudioStream" uid="uid://ympmury34vme" path="res://assets/sounds/ladder-climbing.mp3" id="3_qhqgy"]
[ext_resource type="AudioStream" uid="uid://bawabjij02gso" path="res://assets/sounds/jump.wav" id="4_qlg0r"]
[ext_resource type="AudioStream" uid="uid://o1eseoysmf2y" path="res://assets/sounds/walk2.ogg" id="5_qlg0r"]

[sub_resource type="AtlasTexture" id="AtlasTexture_y4r1p"]
atlas = ExtResource("2_g2els")
region = Rect2(0, 80, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_d2wvv"]
atlas = ExtResource("2_g2els")
region = Rect2(16, 80, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_3v2ag"]
atlas = ExtResource("2_g2els")
region = Rect2(32, 80, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_jej6c"]
atlas = ExtResource("2_g2els")
region = Rect2(48, 80, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_60mlk"]
atlas = ExtResource("2_g2els")
region = Rect2(0, 96, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_i4ail"]
atlas = ExtResource("2_g2els")
region = Rect2(16, 96, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_a38lo"]
atlas = ExtResource("2_g2els")
region = Rect2(32, 96, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_4ni07"]
atlas = ExtResource("2_g2els")
region = Rect2(48, 96, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_l71n6"]
atlas = ExtResource("2_g2els")
region = Rect2(64, 96, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_f1ej7"]
atlas = ExtResource("2_g2els")
region = Rect2(0, 32, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_oprun"]
atlas = ExtResource("2_g2els")
region = Rect2(16, 32, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_a8ls1"]
atlas = ExtResource("2_g2els")
region = Rect2(32, 32, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_qfm1y"]
atlas = ExtResource("2_g2els")
region = Rect2(48, 32, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_fulsm"]
atlas = ExtResource("2_g2els")
region = Rect2(64, 32, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_4r5pv"]
atlas = ExtResource("2_g2els")
region = Rect2(80, 32, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_ke2ow"]
atlas = ExtResource("2_g2els")
region = Rect2(0, 48, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_ujl30"]
atlas = ExtResource("2_g2els")
region = Rect2(16, 48, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_31cv2"]
atlas = ExtResource("2_g2els")
region = Rect2(32, 48, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_pf23h"]
atlas = ExtResource("2_g2els")
region = Rect2(48, 48, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_dt7fs"]
atlas = ExtResource("2_g2els")
region = Rect2(64, 48, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_wqfne"]
atlas = ExtResource("2_g2els")
region = Rect2(80, 48, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_qhqgy"]
atlas = ExtResource("2_g2els")
region = Rect2(0, 0, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_dqkch"]
atlas = ExtResource("2_g2els")
region = Rect2(176, 0, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_g2els"]
atlas = ExtResource("2_g2els")
region = Rect2(0, 0, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_qlg0r"]
atlas = ExtResource("2_g2els")
region = Rect2(16, 0, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_tuyoq"]
atlas = ExtResource("2_g2els")
region = Rect2(32, 0, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_fjrip"]
atlas = ExtResource("2_g2els")
region = Rect2(48, 0, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_smehm"]
atlas = ExtResource("2_g2els")
region = Rect2(64, 0, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_ur7pv"]
atlas = ExtResource("2_g2els")
region = Rect2(80, 0, 16, 16)

[sub_resource type="SpriteFrames" id="SpriteFrames_ur7pv"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_y4r1p")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_d2wvv")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_3v2ag")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_jej6c")
}],
"loop": true,
"name": &"climb",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_60mlk")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_i4ail")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_a38lo")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_4ni07")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_l71n6")
}],
"loop": true,
"name": &"death",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_f1ej7")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_oprun")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_a8ls1")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_qfm1y")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_fulsm")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_4r5pv")
}],
"loop": true,
"name": &"dig",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_ke2ow")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ujl30")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_31cv2")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_pf23h")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_dt7fs")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_wqfne")
}],
"loop": true,
"name": &"dig_under",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_qhqgy")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_dqkch")
}],
"loop": true,
"name": &"idle",
"speed": 0.7
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_g2els")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_qlg0r")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_tuyoq")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_fjrip")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_smehm")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ur7pv")
}],
"loop": true,
"name": &"walk",
"speed": 7.0
}]

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_g2els"]
radius = 3.0
height = 12.0

[node name="Player" type="CharacterBody2D"]
z_index = 1
collision_layer = 2
script = ExtResource("1_g2els")

[node name="AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
position = Vector2(0, -8)
sprite_frames = SubResource("SpriteFrames_ur7pv")
animation = &"death"
autoplay = "idle"

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(0, -6)
shape = SubResource("CapsuleShape2D_g2els")

[node name="LadderClimbSound" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource("3_qhqgy")

[node name="JumpSound" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource("4_qlg0r")
volume_db = -15.951

[node name="WalkSound" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource("5_qlg0r")
</file>

<file path="export/index.audio.position.worklet.js">
/**************************************************************************/
/*  godot.audio.position.worklet.js                                                      */
/**************************************************************************/
/*                         This file is part of:                          */
/*                             GODOT ENGINE                               */
/*                        https://godotengine.org                         */
/**************************************************************************/
/* Copyright (c) 2014-present Godot Engine contributors (see AUTHORS.md). */
/* Copyright (c) 2007-2014 Juan Linietsky, Ariel Manzur.                  */
/*                                                                        */
/* Permission is hereby granted, free of charge, to any person obtaining  */
/* a copy of this software and associated documentation files (the        */
/* "Software"), to deal in the Software without restriction, including    */
/* without limitation the rights to use, copy, modify, merge, publish,    */
/* distribute, sublicense, and/or sell copies of the Software, and to     */
/* permit persons to whom the Software is furnished to do so, subject to  */
/* the following conditions:                                              */
/*                                                                        */
/* The above copyright notice and this permission notice shall be         */
/* included in all copies or substantial portions of the Software.        */
/*                                                                        */
/* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        */
/* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     */
/* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. */
/* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY   */
/* CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,   */
/* TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE      */
/* SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                 */
/**************************************************************************/

const POST_THRESHOLD_S = 0.1;

class GodotPositionReportingProcessor extends AudioWorkletProcessor {
    constructor(...args) {
        super(...args);
        this.lastPostTime = currentTime;
        this.position = 0;
        this.ended = false;

        this.port.onmessage = (event) => {
            if (event?.data?.type === 'ended') {
                this.ended = true;
            }
        };
    }

    process(inputs, _outputs, _parameters) {
        if (this.ended) {
            return false;
        }

        if (inputs.length > 0) {
            const input = inputs[0];
            if (input.length > 0) {
                this.position += input[0].length;
            }
        }

        // Posting messages is expensive. Let's limit the number of posts.
        if (currentTime - this.lastPostTime > POST_THRESHOLD_S) {
            this.lastPostTime = currentTime;
            this.port.postMessage({ type: 'position', data: this.position });
        }

        return true;
    }
}

registerProcessor('godot-position-reporting-processor', GodotPositionReportingProcessor);
</file>

<file path="export/index.audio.worklet.js">
/**************************************************************************/
/*  audio.worklet.js                                                      */
/**************************************************************************/
/*                         This file is part of:                          */
/*                             GODOT ENGINE                               */
/*                        https://godotengine.org                         */
/**************************************************************************/
/* Copyright (c) 2014-present Godot Engine contributors (see AUTHORS.md). */
/* Copyright (c) 2007-2014 Juan Linietsky, Ariel Manzur.                  */
/*                                                                        */
/* Permission is hereby granted, free of charge, to any person obtaining  */
/* a copy of this software and associated documentation files (the        */
/* "Software"), to deal in the Software without restriction, including    */
/* without limitation the rights to use, copy, modify, merge, publish,    */
/* distribute, sublicense, and/or sell copies of the Software, and to     */
/* permit persons to whom the Software is furnished to do so, subject to  */
/* the following conditions:                                              */
/*                                                                        */
/* The above copyright notice and this permission notice shall be         */
/* included in all copies or substantial portions of the Software.        */
/*                                                                        */
/* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        */
/* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     */
/* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. */
/* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY   */
/* CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,   */
/* TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE      */
/* SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                 */
/**************************************************************************/

class RingBuffer {
    constructor(p_buffer, p_state, p_threads) {
        this.buffer = p_buffer;
        this.avail = p_state;
        this.threads = p_threads;
        this.rpos = 0;
        this.wpos = 0;
    }

    data_left() {
        return this.threads ? Atomics.load(this.avail, 0) : this.avail;
    }

    space_left() {
        return this.buffer.length - this.data_left();
    }

    read(output) {
        const size = this.buffer.length;
        let from = 0;
        let to_write = output.length;
        if (this.rpos + to_write > size) {
            const high = size - this.rpos;
            output.set(this.buffer.subarray(this.rpos, size));
            from = high;
            to_write -= high;
            this.rpos = 0;
        }
        if (to_write) {
            output.set(this.buffer.subarray(this.rpos, this.rpos + to_write), from);
        }
        this.rpos += to_write;
        if (this.threads) {
            Atomics.add(this.avail, 0, -output.length);
            Atomics.notify(this.avail, 0);
        } else {
            this.avail -= output.length;
        }
    }

    write(p_buffer) {
        const to_write = p_buffer.length;
        const mw = this.buffer.length - this.wpos;
        if (mw >= to_write) {
            this.buffer.set(p_buffer, this.wpos);
            this.wpos += to_write;
            if (mw === to_write) {
                this.wpos = 0;
            }
        } else {
            const high = p_buffer.subarray(0, mw);
            const low = p_buffer.subarray(mw);
            this.buffer.set(high, this.wpos);
            this.buffer.set(low);
            this.wpos = low.length;
        }
        if (this.threads) {
            Atomics.add(this.avail, 0, to_write);
            Atomics.notify(this.avail, 0);
        } else {
            this.avail += to_write;
        }
    }
}

class GodotProcessor extends AudioWorkletProcessor {
    constructor() {
        super();
        this.threads = false;
        this.running = true;
        this.lock = null;
        this.notifier = null;
        this.output = null;
        this.output_buffer = new Float32Array();
        this.input = null;
        this.input_buffer = new Float32Array();
        this.port.onmessage = (event) => {
            const cmd = event.data['cmd'];
            const data = event.data['data'];
            this.parse_message(cmd, data);
        };
    }

    process_notify() {
        if (this.notifier) {
            Atomics.add(this.notifier, 0, 1);
            Atomics.notify(this.notifier, 0);
        }
    }

    parse_message(p_cmd, p_data) {
        if (p_cmd === 'start' && p_data) {
            const state = p_data[0];
            let idx = 0;
            this.threads = true;
            this.lock = state.subarray(idx, ++idx);
            this.notifier = state.subarray(idx, ++idx);
            const avail_in = state.subarray(idx, ++idx);
            const avail_out = state.subarray(idx, ++idx);
            this.input = new RingBuffer(p_data[1], avail_in, true);
            this.output = new RingBuffer(p_data[2], avail_out, true);
        } else if (p_cmd === 'stop') {
            this.running = false;
            this.output = null;
            this.input = null;
            this.lock = null;
            this.notifier = null;
        } else if (p_cmd === 'start_nothreads') {
            this.output = new RingBuffer(p_data[0], p_data[0].length, false);
        } else if (p_cmd === 'chunk') {
            this.output.write(p_data);
        }
    }

    static array_has_data(arr) {
        return arr.length && arr[0].length && arr[0][0].length;
    }

    process(inputs, outputs, parameters) {
        if (!this.running) {
            return false; // Stop processing.
        }
        if (this.output === null) {
            return true; // Not ready yet, keep processing.
        }
        const process_input = GodotProcessor.array_has_data(inputs);
        if (process_input) {
            const input = inputs[0];
            const chunk = input[0].length * input.length;
            if (this.input_buffer.length !== chunk) {
                this.input_buffer = new Float32Array(chunk);
            }
            if (!this.threads) {
                GodotProcessor.write_input(this.input_buffer, input);
                this.port.postMessage({ 'cmd': 'input', 'data': this.input_buffer });
            } else if (this.input.space_left() >= chunk) {
                GodotProcessor.write_input(this.input_buffer, input);
                this.input.write(this.input_buffer);
            } else {
                // this.port.postMessage('Input buffer is full! Skipping input frame.'); // Uncomment this line to debug input buffer.
            }
        }
        const process_output = GodotProcessor.array_has_data(outputs);
        if (process_output) {
            const output = outputs[0];
            const chunk = output[0].length * output.length;
            if (this.output_buffer.length !== chunk) {
                this.output_buffer = new Float32Array(chunk);
            }
            if (this.output.data_left() >= chunk) {
                this.output.read(this.output_buffer);
                GodotProcessor.write_output(output, this.output_buffer);
                if (!this.threads) {
                    this.port.postMessage({ 'cmd': 'read', 'data': chunk });
                }
            } else {
                // this.port.postMessage('Output buffer has not enough frames! Skipping output frame.'); // Uncomment this line to debug output buffer.
            }
        }
        this.process_notify();
        return true;
    }

    static write_output(dest, source) {
        const channels = dest.length;
        for (let ch = 0; ch < channels; ch++) {
            for (let sample = 0; sample < dest[ch].length; sample++) {
                dest[ch][sample] = source[sample * channels + ch];
            }
        }
    }

    static write_input(dest, source) {
        const channels = source.length;
        for (let ch = 0; ch < channels; ch++) {
            for (let sample = 0; sample < source[ch].length; sample++) {
                dest[sample * channels + ch] = source[ch][sample];
            }
        }
    }
}

registerProcessor('godot-processor', GodotProcessor);
</file>

<file path="export/index.html">
<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0">
        <title>Hollow Depths</title>
        <style>
html, body, #canvas {
    margin: 0;
    padding: 0;
    border: 0;
}

body {
    color: white;
    background-color: black;
    overflow: hidden;
    touch-action: none;
}

#canvas {
    display: block;
}

#canvas:focus {
    outline: none;
}

#status, #status-splash, #status-progress {
    position: absolute;
    left: 0;
    right: 0;
}

#status, #status-splash {
    top: 0;
    bottom: 0;
}

#status {
    background-color: #242424;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    visibility: hidden;
}

#status-splash {
    max-height: 100%;
    max-width: 100%;
    margin: auto;
}

#status-splash.show-image--false {
    display: none;
}

#status-splash.fullsize--true {
    height: 100%;
    width: 100%;
    object-fit: contain;
}

#status-splash.use-filter--false {
    image-rendering: pixelated;
}

#status-progress, #status-notice {
    display: none;
}

#status-progress {
    bottom: 10%;
    width: 50%;
    margin: 0 auto;
}

#status-notice {
    background-color: #5b3943;
    border-radius: 0.5rem;
    border: 1px solid #9b3943;
    color: #e0e0e0;
    font-family: 'Noto Sans', 'Droid Sans', Arial, sans-serif;
    line-height: 1.3;
    margin: 0 2rem;
    overflow: hidden;
    padding: 1rem;
    text-align: center;
    z-index: 1;
}
        </style>
        <link id="-gd-engine-icon" rel="icon" type="image/png" href="index.icon.png" />
<link rel="apple-touch-icon" href="index.apple-touch-icon.png"/>

    </head>
    <body>
        <canvas id="canvas">
            Your browser does not support the canvas tag.
        </canvas>

        <noscript>
            Your browser does not support JavaScript.
        </noscript>

        <div id="status">
            <img id="status-splash" class="show-image--true fullsize--true use-filter--true" src="index.png" alt="">
            <progress id="status-progress"></progress>
            <div id="status-notice"></div>
        </div>

        <script src="index.js"></script>
        <script>
const GODOT_CONFIG = {"args":[],"canvasResizePolicy":2,"ensureCrossOriginIsolationHeaders":true,"executable":"index","experimentalVK":false,"fileSizes":{"index.pck":19103040,"index.wasm":52126319},"focusCanvas":true,"gdextensionLibs":[]};
const GODOT_THREADS_ENABLED = false;
const engine = new Engine(GODOT_CONFIG);

(function () {
    const statusOverlay = document.getElementById('status');
    const statusProgress = document.getElementById('status-progress');
    const statusNotice = document.getElementById('status-notice');

    let initializing = true;
    let statusMode = '';

    function setStatusMode(mode) {
        if (statusMode === mode || !initializing) {
            return;
        }
        if (mode === 'hidden') {
            statusOverlay.remove();
            initializing = false;
            return;
        }
        statusOverlay.style.visibility = 'visible';
        statusProgress.style.display = mode === 'progress' ? 'block' : 'none';
        statusNotice.style.display = mode === 'notice' ? 'block' : 'none';
        statusMode = mode;
    }

    function setStatusNotice(text) {
        while (statusNotice.lastChild) {
            statusNotice.removeChild(statusNotice.lastChild);
        }
        const lines = text.split('\n');
        lines.forEach((line) => {
            statusNotice.appendChild(document.createTextNode(line));
            statusNotice.appendChild(document.createElement('br'));
        });
    }

    function displayFailureNotice(err) {
        console.error(err);
        if (err instanceof Error) {
            setStatusNotice(err.message);
        } else if (typeof err === 'string') {
            setStatusNotice(err);
        } else {
            setStatusNotice('An unknown error occurred.');
        }
        setStatusMode('notice');
        initializing = false;
    }

    const missing = Engine.getMissingFeatures({
        threads: GODOT_THREADS_ENABLED,
    });

    if (missing.length !== 0) {
        if (GODOT_CONFIG['serviceWorker'] && GODOT_CONFIG['ensureCrossOriginIsolationHeaders'] && 'serviceWorker' in navigator) {
            let serviceWorkerRegistrationPromise;
            try {
                serviceWorkerRegistrationPromise = navigator.serviceWorker.getRegistration();
            } catch (err) {
                serviceWorkerRegistrationPromise = Promise.reject(new Error('Service worker registration failed.'));
            }
            // There's a chance that installing the service worker would fix the issue
            Promise.race([
                serviceWorkerRegistrationPromise.then((registration) => {
                    if (registration != null) {
                        return Promise.reject(new Error('Service worker already exists.'));
                    }
                    return registration;
                }).then(() => engine.installServiceWorker()),
                // For some reason, `getRegistration()` can stall
                new Promise((resolve) => {
                    setTimeout(() => resolve(), 2000);
                }),
            ]).then(() => {
                // Reload if there was no error.
                window.location.reload();
            }).catch((err) => {
                console.error('Error while registering service worker:', err);
            });
        } else {
            // Display the message as usual
            const missingMsg = 'Error\nThe following features required to run Godot projects on the Web are missing:\n';
            displayFailureNotice(missingMsg + missing.join('\n'));
        }
    } else {
        setStatusMode('progress');
        engine.startGame({
            'onProgress': function (current, total) {
                if (current > 0 && total > 0) {
                    statusProgress.value = current;
                    statusProgress.max = total;
                } else {
                    statusProgress.removeAttribute('value');
                    statusProgress.removeAttribute('max');
                }
            },
        }).then(() => {
            setStatusMode('hidden');
        }, displayFailureNotice);
    }
}());
        </script>
    </body>
</html>
</file>

<file path="export/index.js">
var Godot = (() => {
  var _scriptName = typeof document != 'undefined' ? document.currentScript?.src : undefined;
  
  return (
function(moduleArg = {}) {
  var moduleRtn;

var Module=moduleArg;var readyPromiseResolve,readyPromiseReject;var readyPromise=new Promise((resolve,reject)=>{readyPromiseResolve=resolve;readyPromiseReject=reject});var ENVIRONMENT_IS_WEB=typeof window=="object";var ENVIRONMENT_IS_WORKER=typeof importScripts=="function";var ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";var moduleOverrides=Object.assign({},Module);var arguments_=[];var thisProgram="./this.program";var quit_=(status,toThrow)=>{throw toThrow};var scriptDirectory="";function locateFile(path){if(Module["locateFile"]){return Module["locateFile"](path,scriptDirectory)}return scriptDirectory+path}var readAsync,readBinary;if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(typeof document!="undefined"&&document.currentScript){scriptDirectory=document.currentScript.src}if(_scriptName){scriptDirectory=_scriptName}if(scriptDirectory.startsWith("blob:")){scriptDirectory=""}else{scriptDirectory=scriptDirectory.substr(0,scriptDirectory.replace(/[?#].*/,"").lastIndexOf("/")+1)}{if(ENVIRONMENT_IS_WORKER){readBinary=url=>{var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.responseType="arraybuffer";xhr.send(null);return new Uint8Array(xhr.response)}}readAsync=url=>fetch(url,{credentials:"same-origin"}).then(response=>{if(response.ok){return response.arrayBuffer()}return Promise.reject(new Error(response.status+" : "+response.url))})}}else{}var out=Module["print"]||console.log.bind(console);var err=Module["printErr"]||console.error.bind(console);Object.assign(Module,moduleOverrides);moduleOverrides=null;if(Module["arguments"])arguments_=Module["arguments"];if(Module["thisProgram"])thisProgram=Module["thisProgram"];if(Module["quit"])quit_=Module["quit"];var wasmBinary;if(Module["wasmBinary"])wasmBinary=Module["wasmBinary"];var wasmMemory;var ABORT=false;var EXITSTATUS;var HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAP64,HEAPU64,HEAPF64;function updateMemoryViews(){var b=wasmMemory.buffer;Module["HEAP8"]=HEAP8=new Int8Array(b);Module["HEAP16"]=HEAP16=new Int16Array(b);Module["HEAPU8"]=HEAPU8=new Uint8Array(b);Module["HEAPU16"]=HEAPU16=new Uint16Array(b);Module["HEAP32"]=HEAP32=new Int32Array(b);Module["HEAPU32"]=HEAPU32=new Uint32Array(b);Module["HEAPF32"]=HEAPF32=new Float32Array(b);Module["HEAPF64"]=HEAPF64=new Float64Array(b);Module["HEAP64"]=HEAP64=new BigInt64Array(b);Module["HEAPU64"]=HEAPU64=new BigUint64Array(b)}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATEXIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;var runtimeExited=false;function preRun(){if(Module["preRun"]){if(typeof Module["preRun"]=="function")Module["preRun"]=[Module["preRun"]];while(Module["preRun"].length){addOnPreRun(Module["preRun"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){runtimeInitialized=true;if(!Module["noFSInit"]&&!FS.init.initialized)FS.init();FS.ignorePermissions=false;TTY.init();callRuntimeCallbacks(__ATINIT__)}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function exitRuntime(){___funcs_on_exit();callRuntimeCallbacks(__ATEXIT__);FS.quit();TTY.shutdown();IDBFS.quit();runtimeExited=true}function postRun(){if(Module["postRun"]){if(typeof Module["postRun"]=="function")Module["postRun"]=[Module["postRun"]];while(Module["postRun"].length){addOnPostRun(Module["postRun"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnInit(cb){__ATINIT__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function getUniqueRunDependency(id){return id}function addRunDependency(id){runDependencies++;Module["monitorRunDependencies"]?.(runDependencies)}function removeRunDependency(id){runDependencies--;Module["monitorRunDependencies"]?.(runDependencies);if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}function abort(what){Module["onAbort"]?.(what);what="Aborted("+what+")";err(what);ABORT=true;EXITSTATUS=1;what+=". Build with -sASSERTIONS for more info.";var e=new WebAssembly.RuntimeError(what);readyPromiseReject(e);throw e}var dataURIPrefix="data:application/octet-stream;base64,";var isDataURI=filename=>filename.startsWith(dataURIPrefix);function findWasmBinary(){var f="godot.web.template_debug.wasm32.nothreads.wasm";if(!isDataURI(f)){return locateFile(f)}return f}var wasmBinaryFile;function getBinarySync(file){if(file==wasmBinaryFile&&wasmBinary){return new Uint8Array(wasmBinary)}if(readBinary){return readBinary(file)}throw"both async and sync fetching of the wasm failed"}function getBinaryPromise(binaryFile){if(!wasmBinary){return readAsync(binaryFile).then(response=>new Uint8Array(response),()=>getBinarySync(binaryFile))}return Promise.resolve().then(()=>getBinarySync(binaryFile))}function instantiateArrayBuffer(binaryFile,imports,receiver){return getBinaryPromise(binaryFile).then(binary=>WebAssembly.instantiate(binary,imports)).then(receiver,reason=>{err(`failed to asynchronously prepare wasm: ${reason}`);abort(reason)})}function instantiateAsync(binary,binaryFile,imports,callback){if(!binary&&typeof WebAssembly.instantiateStreaming=="function"&&!isDataURI(binaryFile)&&typeof fetch=="function"){return fetch(binaryFile,{credentials:"same-origin"}).then(response=>{var result=WebAssembly.instantiateStreaming(response,imports);return result.then(callback,function(reason){err(`wasm streaming compile failed: ${reason}`);err("falling back to ArrayBuffer instantiation");return instantiateArrayBuffer(binaryFile,imports,callback)})})}return instantiateArrayBuffer(binaryFile,imports,callback)}function getWasmImports(){return{a:wasmImports}}function createWasm(){var info=getWasmImports();function receiveInstance(instance,module){wasmExports=instance.exports;wasmMemory=wasmExports["hf"];updateMemoryViews();wasmTable=wasmExports["rf"];addOnInit(wasmExports["jf"]);removeRunDependency("wasm-instantiate");return wasmExports}addRunDependency("wasm-instantiate");function receiveInstantiationResult(result){receiveInstance(result["instance"])}if(Module["instantiateWasm"]){try{return Module["instantiateWasm"](info,receiveInstance)}catch(e){err(`Module.instantiateWasm callback failed with error: ${e}`);readyPromiseReject(e)}}if(!wasmBinaryFile)wasmBinaryFile=findWasmBinary();instantiateAsync(wasmBinary,wasmBinaryFile,info,receiveInstantiationResult).catch(readyPromiseReject);return{}}function ExitStatus(status){this.name="ExitStatus";this.message=`Program terminated with exit(${status})`;this.status=status}var callRuntimeCallbacks=callbacks=>{while(callbacks.length>0){callbacks.shift()(Module)}};function getValue(ptr,type="i8"){if(type.endsWith("*"))type="*";switch(type){case"i1":return HEAP8[ptr];case"i8":return HEAP8[ptr];case"i16":return HEAP16[ptr>>1];case"i32":return HEAP32[ptr>>2];case"i64":return HEAP64[ptr>>3];case"float":return HEAPF32[ptr>>2];case"double":return HEAPF64[ptr>>3];case"*":return HEAPU32[ptr>>2];default:abort(`invalid type for getValue: ${type}`)}}var noExitRuntime=Module["noExitRuntime"]||false;function setValue(ptr,value,type="i8"){if(type.endsWith("*"))type="*";switch(type){case"i1":HEAP8[ptr]=value;break;case"i8":HEAP8[ptr]=value;break;case"i16":HEAP16[ptr>>1]=value;break;case"i32":HEAP32[ptr>>2]=value;break;case"i64":HEAP64[ptr>>3]=BigInt(value);break;case"float":HEAPF32[ptr>>2]=value;break;case"double":HEAPF64[ptr>>3]=value;break;case"*":HEAPU32[ptr>>2]=value;break;default:abort(`invalid type for setValue: ${type}`)}}var wasmTable;var getWasmTableEntry=funcPtr=>wasmTable.get(funcPtr);var ___call_sighandler=(fp,sig)=>getWasmTableEntry(fp)(sig);var PATH={isAbs:path=>path.charAt(0)==="/",splitPath:filename=>{var splitPathRe=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;return splitPathRe.exec(filename).slice(1)},normalizeArray:(parts,allowAboveRoot)=>{var up=0;for(var i=parts.length-1;i>=0;i--){var last=parts[i];if(last==="."){parts.splice(i,1)}else if(last===".."){parts.splice(i,1);up++}else if(up){parts.splice(i,1);up--}}if(allowAboveRoot){for(;up;up--){parts.unshift("..")}}return parts},normalize:path=>{var isAbsolute=PATH.isAbs(path),trailingSlash=path.substr(-1)==="/";path=PATH.normalizeArray(path.split("/").filter(p=>!!p),!isAbsolute).join("/");if(!path&&!isAbsolute){path="."}if(path&&trailingSlash){path+="/"}return(isAbsolute?"/":"")+path},dirname:path=>{var result=PATH.splitPath(path),root=result[0],dir=result[1];if(!root&&!dir){return"."}if(dir){dir=dir.substr(0,dir.length-1)}return root+dir},basename:path=>{if(path==="/")return"/";path=PATH.normalize(path);path=path.replace(/\/$/,"");var lastSlash=path.lastIndexOf("/");if(lastSlash===-1)return path;return path.substr(lastSlash+1)},join:(...paths)=>PATH.normalize(paths.join("/")),join2:(l,r)=>PATH.normalize(l+"/"+r)};var initRandomFill=()=>{if(typeof crypto=="object"&&typeof crypto["getRandomValues"]=="function"){return view=>crypto.getRandomValues(view)}else abort("initRandomDevice")};var randomFill=view=>(randomFill=initRandomFill())(view);var PATH_FS={resolve:(...args)=>{var resolvedPath="",resolvedAbsolute=false;for(var i=args.length-1;i>=-1&&!resolvedAbsolute;i--){var path=i>=0?args[i]:FS.cwd();if(typeof path!="string"){throw new TypeError("Arguments to path.resolve must be strings")}else if(!path){return""}resolvedPath=path+"/"+resolvedPath;resolvedAbsolute=PATH.isAbs(path)}resolvedPath=PATH.normalizeArray(resolvedPath.split("/").filter(p=>!!p),!resolvedAbsolute).join("/");return(resolvedAbsolute?"/":"")+resolvedPath||"."},relative:(from,to)=>{from=PATH_FS.resolve(from).substr(1);to=PATH_FS.resolve(to).substr(1);function trim(arr){var start=0;for(;start<arr.length;start++){if(arr[start]!=="")break}var end=arr.length-1;for(;end>=0;end--){if(arr[end]!=="")break}if(start>end)return[];return arr.slice(start,end-start+1)}var fromParts=trim(from.split("/"));var toParts=trim(to.split("/"));var length=Math.min(fromParts.length,toParts.length);var samePartsLength=length;for(var i=0;i<length;i++){if(fromParts[i]!==toParts[i]){samePartsLength=i;break}}var outputParts=[];for(var i=samePartsLength;i<fromParts.length;i++){outputParts.push("..")}outputParts=outputParts.concat(toParts.slice(samePartsLength));return outputParts.join("/")}};var UTF8Decoder=typeof TextDecoder!="undefined"?new TextDecoder:undefined;var UTF8ArrayToString=(heapOrArray,idx,maxBytesToRead)=>{var endIdx=idx+maxBytesToRead;var endPtr=idx;while(heapOrArray[endPtr]&&!(endPtr>=endIdx))++endPtr;if(endPtr-idx>16&&heapOrArray.buffer&&UTF8Decoder){return UTF8Decoder.decode(heapOrArray.subarray(idx,endPtr))}var str="";while(idx<endPtr){var u0=heapOrArray[idx++];if(!(u0&128)){str+=String.fromCharCode(u0);continue}var u1=heapOrArray[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}var u2=heapOrArray[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u0=(u0&7)<<18|u1<<12|u2<<6|heapOrArray[idx++]&63}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}return str};var FS_stdin_getChar_buffer=[];var lengthBytesUTF8=str=>{var len=0;for(var i=0;i<str.length;++i){var c=str.charCodeAt(i);if(c<=127){len++}else if(c<=2047){len+=2}else if(c>=55296&&c<=57343){len+=4;++i}else{len+=3}}return len};var stringToUTF8Array=(str,heap,outIdx,maxBytesToWrite)=>{if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343){var u1=str.charCodeAt(++i);u=65536+((u&1023)<<10)|u1&1023}if(u<=127){if(outIdx>=endIdx)break;heap[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;heap[outIdx++]=192|u>>6;heap[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;heap[outIdx++]=224|u>>12;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63}else{if(outIdx+3>=endIdx)break;heap[outIdx++]=240|u>>18;heap[outIdx++]=128|u>>12&63;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63}}heap[outIdx]=0;return outIdx-startIdx};function intArrayFromString(stringy,dontAddNull,length){var len=length>0?length:lengthBytesUTF8(stringy)+1;var u8array=new Array(len);var numBytesWritten=stringToUTF8Array(stringy,u8array,0,u8array.length);if(dontAddNull)u8array.length=numBytesWritten;return u8array}var FS_stdin_getChar=()=>{if(!FS_stdin_getChar_buffer.length){var result=null;if(typeof window!="undefined"&&typeof window.prompt=="function"){result=window.prompt("Input: ");if(result!==null){result+="\n"}}else{}if(!result){return null}FS_stdin_getChar_buffer=intArrayFromString(result,true)}return FS_stdin_getChar_buffer.shift()};var TTY={ttys:[],init(){},shutdown(){},register(dev,ops){TTY.ttys[dev]={input:[],output:[],ops:ops};FS.registerDevice(dev,TTY.stream_ops)},stream_ops:{open(stream){var tty=TTY.ttys[stream.node.rdev];if(!tty){throw new FS.ErrnoError(43)}stream.tty=tty;stream.seekable=false},close(stream){stream.tty.ops.fsync(stream.tty)},fsync(stream){stream.tty.ops.fsync(stream.tty)},read(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.get_char){throw new FS.ErrnoError(60)}var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=stream.tty.ops.get_char(stream.tty)}catch(e){throw new FS.ErrnoError(29)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(6)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result}if(bytesRead){stream.node.timestamp=Date.now()}return bytesRead},write(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.put_char){throw new FS.ErrnoError(60)}try{for(var i=0;i<length;i++){stream.tty.ops.put_char(stream.tty,buffer[offset+i])}}catch(e){throw new FS.ErrnoError(29)}if(length){stream.node.timestamp=Date.now()}return i}},default_tty_ops:{get_char(tty){return FS_stdin_getChar()},put_char(tty,val){if(val===null||val===10){out(UTF8ArrayToString(tty.output,0));tty.output=[]}else{if(val!=0)tty.output.push(val)}},fsync(tty){if(tty.output&&tty.output.length>0){out(UTF8ArrayToString(tty.output,0));tty.output=[]}},ioctl_tcgets(tty){return{c_iflag:25856,c_oflag:5,c_cflag:191,c_lflag:35387,c_cc:[3,28,127,21,4,0,1,0,17,19,26,0,18,15,23,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},ioctl_tcsets(tty,optional_actions,data){return 0},ioctl_tiocgwinsz(tty){return[24,80]}},default_tty1_ops:{put_char(tty,val){if(val===null||val===10){err(UTF8ArrayToString(tty.output,0));tty.output=[]}else{if(val!=0)tty.output.push(val)}},fsync(tty){if(tty.output&&tty.output.length>0){err(UTF8ArrayToString(tty.output,0));tty.output=[]}}}};var mmapAlloc=size=>{abort()};var MEMFS={ops_table:null,mount(mount){return MEMFS.createNode(null,"/",16384|511,0)},createNode(parent,name,mode,dev){if(FS.isBlkdev(mode)||FS.isFIFO(mode)){throw new FS.ErrnoError(63)}MEMFS.ops_table||={dir:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,lookup:MEMFS.node_ops.lookup,mknod:MEMFS.node_ops.mknod,rename:MEMFS.node_ops.rename,unlink:MEMFS.node_ops.unlink,rmdir:MEMFS.node_ops.rmdir,readdir:MEMFS.node_ops.readdir,symlink:MEMFS.node_ops.symlink},stream:{llseek:MEMFS.stream_ops.llseek}},file:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:{llseek:MEMFS.stream_ops.llseek,read:MEMFS.stream_ops.read,write:MEMFS.stream_ops.write,allocate:MEMFS.stream_ops.allocate,mmap:MEMFS.stream_ops.mmap,msync:MEMFS.stream_ops.msync}},link:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,readlink:MEMFS.node_ops.readlink},stream:{}},chrdev:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:FS.chrdev_stream_ops}};var node=FS.createNode(parent,name,mode,dev);if(FS.isDir(node.mode)){node.node_ops=MEMFS.ops_table.dir.node;node.stream_ops=MEMFS.ops_table.dir.stream;node.contents={}}else if(FS.isFile(node.mode)){node.node_ops=MEMFS.ops_table.file.node;node.stream_ops=MEMFS.ops_table.file.stream;node.usedBytes=0;node.contents=null}else if(FS.isLink(node.mode)){node.node_ops=MEMFS.ops_table.link.node;node.stream_ops=MEMFS.ops_table.link.stream}else if(FS.isChrdev(node.mode)){node.node_ops=MEMFS.ops_table.chrdev.node;node.stream_ops=MEMFS.ops_table.chrdev.stream}node.timestamp=Date.now();if(parent){parent.contents[name]=node;parent.timestamp=node.timestamp}return node},getFileDataAsTypedArray(node){if(!node.contents)return new Uint8Array(0);if(node.contents.subarray)return node.contents.subarray(0,node.usedBytes);return new Uint8Array(node.contents)},expandFileStorage(node,newCapacity){var prevCapacity=node.contents?node.contents.length:0;if(prevCapacity>=newCapacity)return;var CAPACITY_DOUBLING_MAX=1024*1024;newCapacity=Math.max(newCapacity,prevCapacity*(prevCapacity<CAPACITY_DOUBLING_MAX?2:1.125)>>>0);if(prevCapacity!=0)newCapacity=Math.max(newCapacity,256);var oldContents=node.contents;node.contents=new Uint8Array(newCapacity);if(node.usedBytes>0)node.contents.set(oldContents.subarray(0,node.usedBytes),0)},resizeFileStorage(node,newSize){if(node.usedBytes==newSize)return;if(newSize==0){node.contents=null;node.usedBytes=0}else{var oldContents=node.contents;node.contents=new Uint8Array(newSize);if(oldContents){node.contents.set(oldContents.subarray(0,Math.min(newSize,node.usedBytes)))}node.usedBytes=newSize}},node_ops:{getattr(node){var attr={};attr.dev=FS.isChrdev(node.mode)?node.id:1;attr.ino=node.id;attr.mode=node.mode;attr.nlink=1;attr.uid=0;attr.gid=0;attr.rdev=node.rdev;if(FS.isDir(node.mode)){attr.size=4096}else if(FS.isFile(node.mode)){attr.size=node.usedBytes}else if(FS.isLink(node.mode)){attr.size=node.link.length}else{attr.size=0}attr.atime=new Date(node.timestamp);attr.mtime=new Date(node.timestamp);attr.ctime=new Date(node.timestamp);attr.blksize=4096;attr.blocks=Math.ceil(attr.size/attr.blksize);return attr},setattr(node,attr){if(attr.mode!==undefined){node.mode=attr.mode}if(attr.timestamp!==undefined){node.timestamp=attr.timestamp}if(attr.size!==undefined){MEMFS.resizeFileStorage(node,attr.size)}},lookup(parent,name){throw FS.genericErrors[44]},mknod(parent,name,mode,dev){return MEMFS.createNode(parent,name,mode,dev)},rename(old_node,new_dir,new_name){if(FS.isDir(old_node.mode)){var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(new_node){for(var i in new_node.contents){throw new FS.ErrnoError(55)}}}delete old_node.parent.contents[old_node.name];old_node.parent.timestamp=Date.now();old_node.name=new_name;new_dir.contents[new_name]=old_node;new_dir.timestamp=old_node.parent.timestamp},unlink(parent,name){delete parent.contents[name];parent.timestamp=Date.now()},rmdir(parent,name){var node=FS.lookupNode(parent,name);for(var i in node.contents){throw new FS.ErrnoError(55)}delete parent.contents[name];parent.timestamp=Date.now()},readdir(node){var entries=[".",".."];for(var key of Object.keys(node.contents)){entries.push(key)}return entries},symlink(parent,newname,oldpath){var node=MEMFS.createNode(parent,newname,511|40960,0);node.link=oldpath;return node},readlink(node){if(!FS.isLink(node.mode)){throw new FS.ErrnoError(28)}return node.link}},stream_ops:{read(stream,buffer,offset,length,position){var contents=stream.node.contents;if(position>=stream.node.usedBytes)return 0;var size=Math.min(stream.node.usedBytes-position,length);if(size>8&&contents.subarray){buffer.set(contents.subarray(position,position+size),offset)}else{for(var i=0;i<size;i++)buffer[offset+i]=contents[position+i]}return size},write(stream,buffer,offset,length,position,canOwn){if(buffer.buffer===HEAP8.buffer){canOwn=false}if(!length)return 0;var node=stream.node;node.timestamp=Date.now();if(buffer.subarray&&(!node.contents||node.contents.subarray)){if(canOwn){node.contents=buffer.subarray(offset,offset+length);node.usedBytes=length;return length}else if(node.usedBytes===0&&position===0){node.contents=buffer.slice(offset,offset+length);node.usedBytes=length;return length}else if(position+length<=node.usedBytes){node.contents.set(buffer.subarray(offset,offset+length),position);return length}}MEMFS.expandFileStorage(node,position+length);if(node.contents.subarray&&buffer.subarray){node.contents.set(buffer.subarray(offset,offset+length),position)}else{for(var i=0;i<length;i++){node.contents[position+i]=buffer[offset+i]}}node.usedBytes=Math.max(node.usedBytes,position+length);return length},llseek(stream,offset,whence){var position=offset;if(whence===1){position+=stream.position}else if(whence===2){if(FS.isFile(stream.node.mode)){position+=stream.node.usedBytes}}if(position<0){throw new FS.ErrnoError(28)}return position},allocate(stream,offset,length){MEMFS.expandFileStorage(stream.node,offset+length);stream.node.usedBytes=Math.max(stream.node.usedBytes,offset+length)},mmap(stream,length,position,prot,flags){if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(43)}var ptr;var allocated;var contents=stream.node.contents;if(!(flags&2)&&contents.buffer===HEAP8.buffer){allocated=false;ptr=contents.byteOffset}else{if(position>0||position+length<contents.length){if(contents.subarray){contents=contents.subarray(position,position+length)}else{contents=Array.prototype.slice.call(contents,position,position+length)}}allocated=true;ptr=mmapAlloc(length);if(!ptr){throw new FS.ErrnoError(48)}HEAP8.set(contents,ptr)}return{ptr:ptr,allocated:allocated}},msync(stream,buffer,offset,length,mmapFlags){MEMFS.stream_ops.write(stream,buffer,0,length,offset,false);return 0}}};var asyncLoad=(url,onload,onerror,noRunDep)=>{var dep=!noRunDep?getUniqueRunDependency(`al ${url}`):"";readAsync(url).then(arrayBuffer=>{onload(new Uint8Array(arrayBuffer));if(dep)removeRunDependency(dep)},err=>{if(onerror){onerror()}else{throw`Loading data file "${url}" failed.`}});if(dep)addRunDependency(dep)};var FS_createDataFile=(parent,name,fileData,canRead,canWrite,canOwn)=>{FS.createDataFile(parent,name,fileData,canRead,canWrite,canOwn)};var preloadPlugins=Module["preloadPlugins"]||[];var FS_handledByPreloadPlugin=(byteArray,fullname,finish,onerror)=>{if(typeof Browser!="undefined")Browser.init();var handled=false;preloadPlugins.forEach(plugin=>{if(handled)return;if(plugin["canHandle"](fullname)){plugin["handle"](byteArray,fullname,finish,onerror);handled=true}});return handled};var FS_createPreloadedFile=(parent,name,url,canRead,canWrite,onload,onerror,dontCreateFile,canOwn,preFinish)=>{var fullname=name?PATH_FS.resolve(PATH.join2(parent,name)):parent;var dep=getUniqueRunDependency(`cp ${fullname}`);function processData(byteArray){function finish(byteArray){preFinish?.();if(!dontCreateFile){FS_createDataFile(parent,name,byteArray,canRead,canWrite,canOwn)}onload?.();removeRunDependency(dep)}if(FS_handledByPreloadPlugin(byteArray,fullname,finish,()=>{onerror?.();removeRunDependency(dep)})){return}finish(byteArray)}addRunDependency(dep);if(typeof url=="string"){asyncLoad(url,processData,onerror)}else{processData(url)}};var FS_modeStringToFlags=str=>{var flagModes={r:0,"r+":2,w:512|64|1,"w+":512|64|2,a:1024|64|1,"a+":1024|64|2};var flags=flagModes[str];if(typeof flags=="undefined"){throw new Error(`Unknown file open mode: ${str}`)}return flags};var FS_getMode=(canRead,canWrite)=>{var mode=0;if(canRead)mode|=292|73;if(canWrite)mode|=146;return mode};var IDBFS={dbs:{},indexedDB:()=>{if(typeof indexedDB!="undefined")return indexedDB;var ret=null;if(typeof window=="object")ret=window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB;return ret},DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",queuePersist:mount=>{function onPersistComplete(){if(mount.idbPersistState==="again")startPersist();else mount.idbPersistState=0}function startPersist(){mount.idbPersistState="idb";IDBFS.syncfs(mount,false,onPersistComplete)}if(!mount.idbPersistState){mount.idbPersistState=setTimeout(startPersist,0)}else if(mount.idbPersistState==="idb"){mount.idbPersistState="again"}},mount:mount=>{var mnt=MEMFS.mount(mount);if(mount?.opts?.autoPersist){mnt.idbPersistState=0;var memfs_node_ops=mnt.node_ops;mnt.node_ops=Object.assign({},mnt.node_ops);mnt.node_ops.mknod=(parent,name,mode,dev)=>{var node=memfs_node_ops.mknod(parent,name,mode,dev);node.node_ops=mnt.node_ops;node.idbfs_mount=mnt.mount;node.memfs_stream_ops=node.stream_ops;node.stream_ops=Object.assign({},node.stream_ops);node.stream_ops.write=(stream,buffer,offset,length,position,canOwn)=>{stream.node.isModified=true;return node.memfs_stream_ops.write(stream,buffer,offset,length,position,canOwn)};node.stream_ops.close=stream=>{var n=stream.node;if(n.isModified){IDBFS.queuePersist(n.idbfs_mount);n.isModified=false}if(n.memfs_stream_ops.close)return n.memfs_stream_ops.close(stream)};return node};mnt.node_ops.mkdir=(...args)=>(IDBFS.queuePersist(mnt.mount),memfs_node_ops.mkdir(...args));mnt.node_ops.rmdir=(...args)=>(IDBFS.queuePersist(mnt.mount),memfs_node_ops.rmdir(...args));mnt.node_ops.symlink=(...args)=>(IDBFS.queuePersist(mnt.mount),memfs_node_ops.symlink(...args));mnt.node_ops.unlink=(...args)=>(IDBFS.queuePersist(mnt.mount),memfs_node_ops.unlink(...args));mnt.node_ops.rename=(...args)=>(IDBFS.queuePersist(mnt.mount),memfs_node_ops.rename(...args))}return mnt},syncfs:(mount,populate,callback)=>{IDBFS.getLocalSet(mount,(err,local)=>{if(err)return callback(err);IDBFS.getRemoteSet(mount,(err,remote)=>{if(err)return callback(err);var src=populate?remote:local;var dst=populate?local:remote;IDBFS.reconcile(src,dst,callback)})})},quit:()=>{Object.values(IDBFS.dbs).forEach(value=>value.close());IDBFS.dbs={}},getDB:(name,callback)=>{var db=IDBFS.dbs[name];if(db){return callback(null,db)}var req;try{req=IDBFS.indexedDB().open(name,IDBFS.DB_VERSION)}catch(e){return callback(e)}if(!req){return callback("Unable to connect to IndexedDB")}req.onupgradeneeded=e=>{var db=e.target.result;var transaction=e.target.transaction;var fileStore;if(db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)){fileStore=transaction.objectStore(IDBFS.DB_STORE_NAME)}else{fileStore=db.createObjectStore(IDBFS.DB_STORE_NAME)}if(!fileStore.indexNames.contains("timestamp")){fileStore.createIndex("timestamp","timestamp",{unique:false})}};req.onsuccess=()=>{db=req.result;IDBFS.dbs[name]=db;callback(null,db)};req.onerror=e=>{callback(e.target.error);e.preventDefault()}},getLocalSet:(mount,callback)=>{var entries={};function isRealDir(p){return p!=="."&&p!==".."}function toAbsolute(root){return p=>PATH.join2(root,p)}var check=FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));while(check.length){var path=check.pop();var stat;try{stat=FS.stat(path)}catch(e){return callback(e)}if(FS.isDir(stat.mode)){check.push(...FS.readdir(path).filter(isRealDir).map(toAbsolute(path)))}entries[path]={timestamp:stat.mtime}}return callback(null,{type:"local",entries:entries})},getRemoteSet:(mount,callback)=>{var entries={};IDBFS.getDB(mount.mountpoint,(err,db)=>{if(err)return callback(err);try{var transaction=db.transaction([IDBFS.DB_STORE_NAME],"readonly");transaction.onerror=e=>{callback(e.target.error);e.preventDefault()};var store=transaction.objectStore(IDBFS.DB_STORE_NAME);var index=store.index("timestamp");index.openKeyCursor().onsuccess=event=>{var cursor=event.target.result;if(!cursor){return callback(null,{type:"remote",db:db,entries:entries})}entries[cursor.primaryKey]={timestamp:cursor.key};cursor.continue()}}catch(e){return callback(e)}})},loadLocalEntry:(path,callback)=>{var stat,node;try{var lookup=FS.lookupPath(path);node=lookup.node;stat=FS.stat(path)}catch(e){return callback(e)}if(FS.isDir(stat.mode)){return callback(null,{timestamp:stat.mtime,mode:stat.mode})}else if(FS.isFile(stat.mode)){node.contents=MEMFS.getFileDataAsTypedArray(node);return callback(null,{timestamp:stat.mtime,mode:stat.mode,contents:node.contents})}else{return callback(new Error("node type not supported"))}},storeLocalEntry:(path,entry,callback)=>{try{if(FS.isDir(entry["mode"])){FS.mkdirTree(path,entry["mode"])}else if(FS.isFile(entry["mode"])){FS.writeFile(path,entry["contents"],{canOwn:true})}else{return callback(new Error("node type not supported"))}FS.chmod(path,entry["mode"]);FS.utime(path,entry["timestamp"],entry["timestamp"])}catch(e){return callback(e)}callback(null)},removeLocalEntry:(path,callback)=>{try{var stat=FS.stat(path);if(FS.isDir(stat.mode)){FS.rmdir(path)}else if(FS.isFile(stat.mode)){FS.unlink(path)}}catch(e){return callback(e)}callback(null)},loadRemoteEntry:(store,path,callback)=>{var req=store.get(path);req.onsuccess=event=>callback(null,event.target.result);req.onerror=e=>{callback(e.target.error);e.preventDefault()}},storeRemoteEntry:(store,path,entry,callback)=>{try{var req=store.put(entry,path)}catch(e){callback(e);return}req.onsuccess=event=>callback();req.onerror=e=>{callback(e.target.error);e.preventDefault()}},removeRemoteEntry:(store,path,callback)=>{var req=store.delete(path);req.onsuccess=event=>callback();req.onerror=e=>{callback(e.target.error);e.preventDefault()}},reconcile:(src,dst,callback)=>{var total=0;var create=[];Object.keys(src.entries).forEach(function(key){var e=src.entries[key];var e2=dst.entries[key];if(!e2||e["timestamp"].getTime()!=e2["timestamp"].getTime()){create.push(key);total++}});var remove=[];Object.keys(dst.entries).forEach(function(key){if(!src.entries[key]){remove.push(key);total++}});if(!total){return callback(null)}var errored=false;var db=src.type==="remote"?src.db:dst.db;var transaction=db.transaction([IDBFS.DB_STORE_NAME],"readwrite");var store=transaction.objectStore(IDBFS.DB_STORE_NAME);function done(err){if(err&&!errored){errored=true;return callback(err)}}transaction.onerror=transaction.onabort=e=>{done(e.target.error);e.preventDefault()};transaction.oncomplete=e=>{if(!errored){callback(null)}};create.sort().forEach(path=>{if(dst.type==="local"){IDBFS.loadRemoteEntry(store,path,(err,entry)=>{if(err)return done(err);IDBFS.storeLocalEntry(path,entry,done)})}else{IDBFS.loadLocalEntry(path,(err,entry)=>{if(err)return done(err);IDBFS.storeRemoteEntry(store,path,entry,done)})}});remove.sort().reverse().forEach(path=>{if(dst.type==="local"){IDBFS.removeLocalEntry(path,done)}else{IDBFS.removeRemoteEntry(store,path,done)}})}};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:class{constructor(errno){this.name="ErrnoError";this.errno=errno}},genericErrors:{},filesystems:null,syncFSRequests:0,FSStream:class{constructor(){this.shared={}}get object(){return this.node}set object(val){this.node=val}get isRead(){return(this.flags&2097155)!==1}get isWrite(){return(this.flags&2097155)!==0}get isAppend(){return this.flags&1024}get flags(){return this.shared.flags}set flags(val){this.shared.flags=val}get position(){return this.shared.position}set position(val){this.shared.position=val}},FSNode:class{constructor(parent,name,mode,rdev){if(!parent){parent=this}this.parent=parent;this.mount=parent.mount;this.mounted=null;this.id=FS.nextInode++;this.name=name;this.mode=mode;this.node_ops={};this.stream_ops={};this.rdev=rdev;this.readMode=292|73;this.writeMode=146}get read(){return(this.mode&this.readMode)===this.readMode}set read(val){val?this.mode|=this.readMode:this.mode&=~this.readMode}get write(){return(this.mode&this.writeMode)===this.writeMode}set write(val){val?this.mode|=this.writeMode:this.mode&=~this.writeMode}get isFolder(){return FS.isDir(this.mode)}get isDevice(){return FS.isChrdev(this.mode)}},lookupPath(path,opts={}){path=PATH_FS.resolve(path);if(!path)return{path:"",node:null};var defaults={follow_mount:true,recurse_count:0};opts=Object.assign(defaults,opts);if(opts.recurse_count>8){throw new FS.ErrnoError(32)}var parts=path.split("/").filter(p=>!!p);var current=FS.root;var current_path="/";for(var i=0;i<parts.length;i++){var islast=i===parts.length-1;if(islast&&opts.parent){break}current=FS.lookupNode(current,parts[i]);current_path=PATH.join2(current_path,parts[i]);if(FS.isMountpoint(current)){if(!islast||islast&&opts.follow_mount){current=current.mounted.root}}if(!islast||opts.follow){var count=0;while(FS.isLink(current.mode)){var link=FS.readlink(current_path);current_path=PATH_FS.resolve(PATH.dirname(current_path),link);var lookup=FS.lookupPath(current_path,{recurse_count:opts.recurse_count+1});current=lookup.node;if(count++>40){throw new FS.ErrnoError(32)}}}}return{path:current_path,node:current}},getPath(node){var path;while(true){if(FS.isRoot(node)){var mount=node.mount.mountpoint;if(!path)return mount;return mount[mount.length-1]!=="/"?`${mount}/${path}`:mount+path}path=path?`${node.name}/${path}`:node.name;node=node.parent}},hashName(parentid,name){var hash=0;for(var i=0;i<name.length;i++){hash=(hash<<5)-hash+name.charCodeAt(i)|0}return(parentid+hash>>>0)%FS.nameTable.length},hashAddNode(node){var hash=FS.hashName(node.parent.id,node.name);node.name_next=FS.nameTable[hash];FS.nameTable[hash]=node},hashRemoveNode(node){var hash=FS.hashName(node.parent.id,node.name);if(FS.nameTable[hash]===node){FS.nameTable[hash]=node.name_next}else{var current=FS.nameTable[hash];while(current){if(current.name_next===node){current.name_next=node.name_next;break}current=current.name_next}}},lookupNode(parent,name){var errCode=FS.mayLookup(parent);if(errCode){throw new FS.ErrnoError(errCode)}var hash=FS.hashName(parent.id,name);for(var node=FS.nameTable[hash];node;node=node.name_next){var nodeName=node.name;if(node.parent.id===parent.id&&nodeName===name){return node}}return FS.lookup(parent,name)},createNode(parent,name,mode,rdev){var node=new FS.FSNode(parent,name,mode,rdev);FS.hashAddNode(node);return node},destroyNode(node){FS.hashRemoveNode(node)},isRoot(node){return node===node.parent},isMountpoint(node){return!!node.mounted},isFile(mode){return(mode&61440)===32768},isDir(mode){return(mode&61440)===16384},isLink(mode){return(mode&61440)===40960},isChrdev(mode){return(mode&61440)===8192},isBlkdev(mode){return(mode&61440)===24576},isFIFO(mode){return(mode&61440)===4096},isSocket(mode){return(mode&49152)===49152},flagsToPermissionString(flag){var perms=["r","w","rw"][flag&3];if(flag&512){perms+="w"}return perms},nodePermissions(node,perms){if(FS.ignorePermissions){return 0}if(perms.includes("r")&&!(node.mode&292)){return 2}else if(perms.includes("w")&&!(node.mode&146)){return 2}else if(perms.includes("x")&&!(node.mode&73)){return 2}return 0},mayLookup(dir){if(!FS.isDir(dir.mode))return 54;var errCode=FS.nodePermissions(dir,"x");if(errCode)return errCode;if(!dir.node_ops.lookup)return 2;return 0},mayCreate(dir,name){try{var node=FS.lookupNode(dir,name);return 20}catch(e){}return FS.nodePermissions(dir,"wx")},mayDelete(dir,name,isdir){var node;try{node=FS.lookupNode(dir,name)}catch(e){return e.errno}var errCode=FS.nodePermissions(dir,"wx");if(errCode){return errCode}if(isdir){if(!FS.isDir(node.mode)){return 54}if(FS.isRoot(node)||FS.getPath(node)===FS.cwd()){return 10}}else{if(FS.isDir(node.mode)){return 31}}return 0},mayOpen(node,flags){if(!node){return 44}if(FS.isLink(node.mode)){return 32}else if(FS.isDir(node.mode)){if(FS.flagsToPermissionString(flags)!=="r"||flags&512){return 31}}return FS.nodePermissions(node,FS.flagsToPermissionString(flags))},MAX_OPEN_FDS:4096,nextfd(){for(var fd=0;fd<=FS.MAX_OPEN_FDS;fd++){if(!FS.streams[fd]){return fd}}throw new FS.ErrnoError(33)},getStreamChecked(fd){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8)}return stream},getStream:fd=>FS.streams[fd],createStream(stream,fd=-1){stream=Object.assign(new FS.FSStream,stream);if(fd==-1){fd=FS.nextfd()}stream.fd=fd;FS.streams[fd]=stream;return stream},closeStream(fd){FS.streams[fd]=null},dupStream(origStream,fd=-1){var stream=FS.createStream(origStream,fd);stream.stream_ops?.dup?.(stream);return stream},chrdev_stream_ops:{open(stream){var device=FS.getDevice(stream.node.rdev);stream.stream_ops=device.stream_ops;stream.stream_ops.open?.(stream)},llseek(){throw new FS.ErrnoError(70)}},major:dev=>dev>>8,minor:dev=>dev&255,makedev:(ma,mi)=>ma<<8|mi,registerDevice(dev,ops){FS.devices[dev]={stream_ops:ops}},getDevice:dev=>FS.devices[dev],getMounts(mount){var mounts=[];var check=[mount];while(check.length){var m=check.pop();mounts.push(m);check.push(...m.mounts)}return mounts},syncfs(populate,callback){if(typeof populate=="function"){callback=populate;populate=false}FS.syncFSRequests++;if(FS.syncFSRequests>1){err(`warning: ${FS.syncFSRequests} FS.syncfs operations in flight at once, probably just doing extra work`)}var mounts=FS.getMounts(FS.root.mount);var completed=0;function doCallback(errCode){FS.syncFSRequests--;return callback(errCode)}function done(errCode){if(errCode){if(!done.errored){done.errored=true;return doCallback(errCode)}return}if(++completed>=mounts.length){doCallback(null)}}mounts.forEach(mount=>{if(!mount.type.syncfs){return done(null)}mount.type.syncfs(mount,populate,done)})},mount(type,opts,mountpoint){var root=mountpoint==="/";var pseudo=!mountpoint;var node;if(root&&FS.root){throw new FS.ErrnoError(10)}else if(!root&&!pseudo){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});mountpoint=lookup.path;node=lookup.node;if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}if(!FS.isDir(node.mode)){throw new FS.ErrnoError(54)}}var mount={type:type,opts:opts,mountpoint:mountpoint,mounts:[]};var mountRoot=type.mount(mount);mountRoot.mount=mount;mount.root=mountRoot;if(root){FS.root=mountRoot}else if(node){node.mounted=mount;if(node.mount){node.mount.mounts.push(mount)}}return mountRoot},unmount(mountpoint){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});if(!FS.isMountpoint(lookup.node)){throw new FS.ErrnoError(28)}var node=lookup.node;var mount=node.mounted;var mounts=FS.getMounts(mount);Object.keys(FS.nameTable).forEach(hash=>{var current=FS.nameTable[hash];while(current){var next=current.name_next;if(mounts.includes(current.mount)){FS.destroyNode(current)}current=next}});node.mounted=null;var idx=node.mount.mounts.indexOf(mount);node.mount.mounts.splice(idx,1)},lookup(parent,name){return parent.node_ops.lookup(parent,name)},mknod(path,mode,dev){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);if(!name||name==="."||name===".."){throw new FS.ErrnoError(28)}var errCode=FS.mayCreate(parent,name);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.mknod){throw new FS.ErrnoError(63)}return parent.node_ops.mknod(parent,name,mode,dev)},create(path,mode){mode=mode!==undefined?mode:438;mode&=4095;mode|=32768;return FS.mknod(path,mode,0)},mkdir(path,mode){mode=mode!==undefined?mode:511;mode&=511|512;mode|=16384;return FS.mknod(path,mode,0)},mkdirTree(path,mode){var dirs=path.split("/");var d="";for(var i=0;i<dirs.length;++i){if(!dirs[i])continue;d+="/"+dirs[i];try{FS.mkdir(d,mode)}catch(e){if(e.errno!=20)throw e}}},mkdev(path,mode,dev){if(typeof dev=="undefined"){dev=mode;mode=438}mode|=8192;return FS.mknod(path,mode,dev)},symlink(oldpath,newpath){if(!PATH_FS.resolve(oldpath)){throw new FS.ErrnoError(44)}var lookup=FS.lookupPath(newpath,{parent:true});var parent=lookup.node;if(!parent){throw new FS.ErrnoError(44)}var newname=PATH.basename(newpath);var errCode=FS.mayCreate(parent,newname);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.symlink){throw new FS.ErrnoError(63)}return parent.node_ops.symlink(parent,newname,oldpath)},rename(old_path,new_path){var old_dirname=PATH.dirname(old_path);var new_dirname=PATH.dirname(new_path);var old_name=PATH.basename(old_path);var new_name=PATH.basename(new_path);var lookup,old_dir,new_dir;lookup=FS.lookupPath(old_path,{parent:true});old_dir=lookup.node;lookup=FS.lookupPath(new_path,{parent:true});new_dir=lookup.node;if(!old_dir||!new_dir)throw new FS.ErrnoError(44);if(old_dir.mount!==new_dir.mount){throw new FS.ErrnoError(75)}var old_node=FS.lookupNode(old_dir,old_name);var relative=PATH_FS.relative(old_path,new_dirname);if(relative.charAt(0)!=="."){throw new FS.ErrnoError(28)}relative=PATH_FS.relative(new_path,old_dirname);if(relative.charAt(0)!=="."){throw new FS.ErrnoError(55)}var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(old_node===new_node){return}var isdir=FS.isDir(old_node.mode);var errCode=FS.mayDelete(old_dir,old_name,isdir);if(errCode){throw new FS.ErrnoError(errCode)}errCode=new_node?FS.mayDelete(new_dir,new_name,isdir):FS.mayCreate(new_dir,new_name);if(errCode){throw new FS.ErrnoError(errCode)}if(!old_dir.node_ops.rename){throw new FS.ErrnoError(63)}if(FS.isMountpoint(old_node)||new_node&&FS.isMountpoint(new_node)){throw new FS.ErrnoError(10)}if(new_dir!==old_dir){errCode=FS.nodePermissions(old_dir,"w");if(errCode){throw new FS.ErrnoError(errCode)}}FS.hashRemoveNode(old_node);try{old_dir.node_ops.rename(old_node,new_dir,new_name);old_node.parent=new_dir}catch(e){throw e}finally{FS.hashAddNode(old_node)}},rmdir(path){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var errCode=FS.mayDelete(parent,name,true);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.rmdir){throw new FS.ErrnoError(63)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}parent.node_ops.rmdir(parent,name);FS.destroyNode(node)},readdir(path){var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;if(!node.node_ops.readdir){throw new FS.ErrnoError(54)}return node.node_ops.readdir(node)},unlink(path){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;if(!parent){throw new FS.ErrnoError(44)}var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var errCode=FS.mayDelete(parent,name,false);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.unlink){throw new FS.ErrnoError(63)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}parent.node_ops.unlink(parent,name);FS.destroyNode(node)},readlink(path){var lookup=FS.lookupPath(path);var link=lookup.node;if(!link){throw new FS.ErrnoError(44)}if(!link.node_ops.readlink){throw new FS.ErrnoError(28)}return PATH_FS.resolve(FS.getPath(link.parent),link.node_ops.readlink(link))},stat(path,dontFollow){var lookup=FS.lookupPath(path,{follow:!dontFollow});var node=lookup.node;if(!node){throw new FS.ErrnoError(44)}if(!node.node_ops.getattr){throw new FS.ErrnoError(63)}return node.node_ops.getattr(node)},lstat(path){return FS.stat(path,true)},chmod(path,mode,dontFollow){var node;if(typeof path=="string"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}node.node_ops.setattr(node,{mode:mode&4095|node.mode&~4095,timestamp:Date.now()})},lchmod(path,mode){FS.chmod(path,mode,true)},fchmod(fd,mode){var stream=FS.getStreamChecked(fd);FS.chmod(stream.node,mode)},chown(path,uid,gid,dontFollow){var node;if(typeof path=="string"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}node.node_ops.setattr(node,{timestamp:Date.now()})},lchown(path,uid,gid){FS.chown(path,uid,gid,true)},fchown(fd,uid,gid){var stream=FS.getStreamChecked(fd);FS.chown(stream.node,uid,gid)},truncate(path,len){if(len<0){throw new FS.ErrnoError(28)}var node;if(typeof path=="string"){var lookup=FS.lookupPath(path,{follow:true});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}if(FS.isDir(node.mode)){throw new FS.ErrnoError(31)}if(!FS.isFile(node.mode)){throw new FS.ErrnoError(28)}var errCode=FS.nodePermissions(node,"w");if(errCode){throw new FS.ErrnoError(errCode)}node.node_ops.setattr(node,{size:len,timestamp:Date.now()})},ftruncate(fd,len){var stream=FS.getStreamChecked(fd);if((stream.flags&2097155)===0){throw new FS.ErrnoError(28)}FS.truncate(stream.node,len)},utime(path,atime,mtime){var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;node.node_ops.setattr(node,{timestamp:Math.max(atime,mtime)})},open(path,flags,mode){if(path===""){throw new FS.ErrnoError(44)}flags=typeof flags=="string"?FS_modeStringToFlags(flags):flags;if(flags&64){mode=typeof mode=="undefined"?438:mode;mode=mode&4095|32768}else{mode=0}var node;if(typeof path=="object"){node=path}else{path=PATH.normalize(path);try{var lookup=FS.lookupPath(path,{follow:!(flags&131072)});node=lookup.node}catch(e){}}var created=false;if(flags&64){if(node){if(flags&128){throw new FS.ErrnoError(20)}}else{node=FS.mknod(path,mode,0);created=true}}if(!node){throw new FS.ErrnoError(44)}if(FS.isChrdev(node.mode)){flags&=~512}if(flags&65536&&!FS.isDir(node.mode)){throw new FS.ErrnoError(54)}if(!created){var errCode=FS.mayOpen(node,flags);if(errCode){throw new FS.ErrnoError(errCode)}}if(flags&512&&!created){FS.truncate(node,0)}flags&=~(128|512|131072);var stream=FS.createStream({node:node,path:FS.getPath(node),flags:flags,seekable:true,position:0,stream_ops:node.stream_ops,ungotten:[],error:false});if(stream.stream_ops.open){stream.stream_ops.open(stream)}if(Module["logReadFiles"]&&!(flags&1)){if(!FS.readFiles)FS.readFiles={};if(!(path in FS.readFiles)){FS.readFiles[path]=1}}return stream},close(stream){if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(stream.getdents)stream.getdents=null;try{if(stream.stream_ops.close){stream.stream_ops.close(stream)}}catch(e){throw e}finally{FS.closeStream(stream.fd)}stream.fd=null},isClosed(stream){return stream.fd===null},llseek(stream,offset,whence){if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(!stream.seekable||!stream.stream_ops.llseek){throw new FS.ErrnoError(70)}if(whence!=0&&whence!=1&&whence!=2){throw new FS.ErrnoError(28)}stream.position=stream.stream_ops.llseek(stream,offset,whence);stream.ungotten=[];return stream.position},read(stream,buffer,offset,length,position){if(length<0||position<0){throw new FS.ErrnoError(28)}if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if((stream.flags&2097155)===1){throw new FS.ErrnoError(8)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(31)}if(!stream.stream_ops.read){throw new FS.ErrnoError(28)}var seeking=typeof position!="undefined";if(!seeking){position=stream.position}else if(!stream.seekable){throw new FS.ErrnoError(70)}var bytesRead=stream.stream_ops.read(stream,buffer,offset,length,position);if(!seeking)stream.position+=bytesRead;return bytesRead},write(stream,buffer,offset,length,position,canOwn){if(length<0||position<0){throw new FS.ErrnoError(28)}if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(8)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(31)}if(!stream.stream_ops.write){throw new FS.ErrnoError(28)}if(stream.seekable&&stream.flags&1024){FS.llseek(stream,0,2)}var seeking=typeof position!="undefined";if(!seeking){position=stream.position}else if(!stream.seekable){throw new FS.ErrnoError(70)}var bytesWritten=stream.stream_ops.write(stream,buffer,offset,length,position,canOwn);if(!seeking)stream.position+=bytesWritten;return bytesWritten},allocate(stream,offset,length){if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(offset<0||length<=0){throw new FS.ErrnoError(28)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(8)}if(!FS.isFile(stream.node.mode)&&!FS.isDir(stream.node.mode)){throw new FS.ErrnoError(43)}if(!stream.stream_ops.allocate){throw new FS.ErrnoError(138)}stream.stream_ops.allocate(stream,offset,length)},mmap(stream,length,position,prot,flags){if((prot&2)!==0&&(flags&2)===0&&(stream.flags&2097155)!==2){throw new FS.ErrnoError(2)}if((stream.flags&2097155)===1){throw new FS.ErrnoError(2)}if(!stream.stream_ops.mmap){throw new FS.ErrnoError(43)}return stream.stream_ops.mmap(stream,length,position,prot,flags)},msync(stream,buffer,offset,length,mmapFlags){if(!stream.stream_ops.msync){return 0}return stream.stream_ops.msync(stream,buffer,offset,length,mmapFlags)},ioctl(stream,cmd,arg){if(!stream.stream_ops.ioctl){throw new FS.ErrnoError(59)}return stream.stream_ops.ioctl(stream,cmd,arg)},readFile(path,opts={}){opts.flags=opts.flags||0;opts.encoding=opts.encoding||"binary";if(opts.encoding!=="utf8"&&opts.encoding!=="binary"){throw new Error(`Invalid encoding type "${opts.encoding}"`)}var ret;var stream=FS.open(path,opts.flags);var stat=FS.stat(path);var length=stat.size;var buf=new Uint8Array(length);FS.read(stream,buf,0,length,0);if(opts.encoding==="utf8"){ret=UTF8ArrayToString(buf,0)}else if(opts.encoding==="binary"){ret=buf}FS.close(stream);return ret},writeFile(path,data,opts={}){opts.flags=opts.flags||577;var stream=FS.open(path,opts.flags,opts.mode);if(typeof data=="string"){var buf=new Uint8Array(lengthBytesUTF8(data)+1);var actualNumBytes=stringToUTF8Array(data,buf,0,buf.length);FS.write(stream,buf,0,actualNumBytes,undefined,opts.canOwn)}else if(ArrayBuffer.isView(data)){FS.write(stream,data,0,data.byteLength,undefined,opts.canOwn)}else{throw new Error("Unsupported data type")}FS.close(stream)},cwd:()=>FS.currentPath,chdir(path){var lookup=FS.lookupPath(path,{follow:true});if(lookup.node===null){throw new FS.ErrnoError(44)}if(!FS.isDir(lookup.node.mode)){throw new FS.ErrnoError(54)}var errCode=FS.nodePermissions(lookup.node,"x");if(errCode){throw new FS.ErrnoError(errCode)}FS.currentPath=lookup.path},createDefaultDirectories(){FS.mkdir("/tmp");FS.mkdir("/home");FS.mkdir("/home/web_user")},createDefaultDevices(){FS.mkdir("/dev");FS.registerDevice(FS.makedev(1,3),{read:()=>0,write:(stream,buffer,offset,length,pos)=>length});FS.mkdev("/dev/null",FS.makedev(1,3));TTY.register(FS.makedev(5,0),TTY.default_tty_ops);TTY.register(FS.makedev(6,0),TTY.default_tty1_ops);FS.mkdev("/dev/tty",FS.makedev(5,0));FS.mkdev("/dev/tty1",FS.makedev(6,0));var randomBuffer=new Uint8Array(1024),randomLeft=0;var randomByte=()=>{if(randomLeft===0){randomLeft=randomFill(randomBuffer).byteLength}return randomBuffer[--randomLeft]};FS.createDevice("/dev","random",randomByte);FS.createDevice("/dev","urandom",randomByte);FS.mkdir("/dev/shm");FS.mkdir("/dev/shm/tmp")},createSpecialDirectories(){FS.mkdir("/proc");var proc_self=FS.mkdir("/proc/self");FS.mkdir("/proc/self/fd");FS.mount({mount(){var node=FS.createNode(proc_self,"fd",16384|511,73);node.node_ops={lookup(parent,name){var fd=+name;var stream=FS.getStreamChecked(fd);var ret={parent:null,mount:{mountpoint:"fake"},node_ops:{readlink:()=>stream.path}};ret.parent=ret;return ret}};return node}},{},"/proc/self/fd")},createStandardStreams(){if(Module["stdin"]){FS.createDevice("/dev","stdin",Module["stdin"])}else{FS.symlink("/dev/tty","/dev/stdin")}if(Module["stdout"]){FS.createDevice("/dev","stdout",null,Module["stdout"])}else{FS.symlink("/dev/tty","/dev/stdout")}if(Module["stderr"]){FS.createDevice("/dev","stderr",null,Module["stderr"])}else{FS.symlink("/dev/tty1","/dev/stderr")}var stdin=FS.open("/dev/stdin",0);var stdout=FS.open("/dev/stdout",1);var stderr=FS.open("/dev/stderr",1)},staticInit(){[44].forEach(code=>{FS.genericErrors[code]=new FS.ErrnoError(code);FS.genericErrors[code].stack="<generic error, no stack>"});FS.nameTable=new Array(4096);FS.mount(MEMFS,{},"/");FS.createDefaultDirectories();FS.createDefaultDevices();FS.createSpecialDirectories();FS.filesystems={MEMFS:MEMFS,IDBFS:IDBFS}},init(input,output,error){FS.init.initialized=true;Module["stdin"]=input||Module["stdin"];Module["stdout"]=output||Module["stdout"];Module["stderr"]=error||Module["stderr"];FS.createStandardStreams()},quit(){FS.init.initialized=false;_fflush(0);for(var i=0;i<FS.streams.length;i++){var stream=FS.streams[i];if(!stream){continue}FS.close(stream)}},findObject(path,dontResolveLastLink){var ret=FS.analyzePath(path,dontResolveLastLink);if(!ret.exists){return null}return ret.object},analyzePath(path,dontResolveLastLink){try{var lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});path=lookup.path}catch(e){}var ret={isRoot:false,exists:false,error:0,name:null,path:null,object:null,parentExists:false,parentPath:null,parentObject:null};try{var lookup=FS.lookupPath(path,{parent:true});ret.parentExists=true;ret.parentPath=lookup.path;ret.parentObject=lookup.node;ret.name=PATH.basename(path);lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});ret.exists=true;ret.path=lookup.path;ret.object=lookup.node;ret.name=lookup.node.name;ret.isRoot=lookup.path==="/"}catch(e){ret.error=e.errno}return ret},createPath(parent,path,canRead,canWrite){parent=typeof parent=="string"?parent:FS.getPath(parent);var parts=path.split("/").reverse();while(parts.length){var part=parts.pop();if(!part)continue;var current=PATH.join2(parent,part);try{FS.mkdir(current)}catch(e){}parent=current}return current},createFile(parent,name,properties,canRead,canWrite){var path=PATH.join2(typeof parent=="string"?parent:FS.getPath(parent),name);var mode=FS_getMode(canRead,canWrite);return FS.create(path,mode)},createDataFile(parent,name,data,canRead,canWrite,canOwn){var path=name;if(parent){parent=typeof parent=="string"?parent:FS.getPath(parent);path=name?PATH.join2(parent,name):parent}var mode=FS_getMode(canRead,canWrite);var node=FS.create(path,mode);if(data){if(typeof data=="string"){var arr=new Array(data.length);for(var i=0,len=data.length;i<len;++i)arr[i]=data.charCodeAt(i);data=arr}FS.chmod(node,mode|146);var stream=FS.open(node,577);FS.write(stream,data,0,data.length,0,canOwn);FS.close(stream);FS.chmod(node,mode)}},createDevice(parent,name,input,output){var path=PATH.join2(typeof parent=="string"?parent:FS.getPath(parent),name);var mode=FS_getMode(!!input,!!output);if(!FS.createDevice.major)FS.createDevice.major=64;var dev=FS.makedev(FS.createDevice.major++,0);FS.registerDevice(dev,{open(stream){stream.seekable=false},close(stream){if(output?.buffer?.length){output(10)}},read(stream,buffer,offset,length,pos){var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=input()}catch(e){throw new FS.ErrnoError(29)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(6)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result}if(bytesRead){stream.node.timestamp=Date.now()}return bytesRead},write(stream,buffer,offset,length,pos){for(var i=0;i<length;i++){try{output(buffer[offset+i])}catch(e){throw new FS.ErrnoError(29)}}if(length){stream.node.timestamp=Date.now()}return i}});return FS.mkdev(path,mode,dev)},forceLoadFile(obj){if(obj.isDevice||obj.isFolder||obj.link||obj.contents)return true;if(typeof XMLHttpRequest!="undefined"){throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.")}else{try{obj.contents=readBinary(obj.url);obj.usedBytes=obj.contents.length}catch(e){throw new FS.ErrnoError(29)}}},createLazyFile(parent,name,url,canRead,canWrite){class LazyUint8Array{constructor(){this.lengthKnown=false;this.chunks=[]}get(idx){if(idx>this.length-1||idx<0){return undefined}var chunkOffset=idx%this.chunkSize;var chunkNum=idx/this.chunkSize|0;return this.getter(chunkNum)[chunkOffset]}setDataGetter(getter){this.getter=getter}cacheLength(){var xhr=new XMLHttpRequest;xhr.open("HEAD",url,false);xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error("Couldn't load "+url+". Status: "+xhr.status);var datalength=Number(xhr.getResponseHeader("Content-length"));var header;var hasByteServing=(header=xhr.getResponseHeader("Accept-Ranges"))&&header==="bytes";var usesGzip=(header=xhr.getResponseHeader("Content-Encoding"))&&header==="gzip";var chunkSize=1024*1024;if(!hasByteServing)chunkSize=datalength;var doXHR=(from,to)=>{if(from>to)throw new Error("invalid range ("+from+", "+to+") or no bytes requested!");if(to>datalength-1)throw new Error("only "+datalength+" bytes available! programmer error!");var xhr=new XMLHttpRequest;xhr.open("GET",url,false);if(datalength!==chunkSize)xhr.setRequestHeader("Range","bytes="+from+"-"+to);xhr.responseType="arraybuffer";if(xhr.overrideMimeType){xhr.overrideMimeType("text/plain; charset=x-user-defined")}xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error("Couldn't load "+url+". Status: "+xhr.status);if(xhr.response!==undefined){return new Uint8Array(xhr.response||[])}return intArrayFromString(xhr.responseText||"",true)};var lazyArray=this;lazyArray.setDataGetter(chunkNum=>{var start=chunkNum*chunkSize;var end=(chunkNum+1)*chunkSize-1;end=Math.min(end,datalength-1);if(typeof lazyArray.chunks[chunkNum]=="undefined"){lazyArray.chunks[chunkNum]=doXHR(start,end)}if(typeof lazyArray.chunks[chunkNum]=="undefined")throw new Error("doXHR failed!");return lazyArray.chunks[chunkNum]});if(usesGzip||!datalength){chunkSize=datalength=1;datalength=this.getter(0).length;chunkSize=datalength;out("LazyFiles on gzip forces download of the whole file when length is accessed")}this._length=datalength;this._chunkSize=chunkSize;this.lengthKnown=true}get length(){if(!this.lengthKnown){this.cacheLength()}return this._length}get chunkSize(){if(!this.lengthKnown){this.cacheLength()}return this._chunkSize}}if(typeof XMLHttpRequest!="undefined"){if(!ENVIRONMENT_IS_WORKER)throw"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var lazyArray=new LazyUint8Array;var properties={isDevice:false,contents:lazyArray}}else{var properties={isDevice:false,url:url}}var node=FS.createFile(parent,name,properties,canRead,canWrite);if(properties.contents){node.contents=properties.contents}else if(properties.url){node.contents=null;node.url=properties.url}Object.defineProperties(node,{usedBytes:{get:function(){return this.contents.length}}});var stream_ops={};var keys=Object.keys(node.stream_ops);keys.forEach(key=>{var fn=node.stream_ops[key];stream_ops[key]=(...args)=>{FS.forceLoadFile(node);return fn(...args)}});function writeChunks(stream,buffer,offset,length,position){var contents=stream.node.contents;if(position>=contents.length)return 0;var size=Math.min(contents.length-position,length);if(contents.slice){for(var i=0;i<size;i++){buffer[offset+i]=contents[position+i]}}else{for(var i=0;i<size;i++){buffer[offset+i]=contents.get(position+i)}}return size}stream_ops.read=(stream,buffer,offset,length,position)=>{FS.forceLoadFile(node);return writeChunks(stream,buffer,offset,length,position)};stream_ops.mmap=(stream,length,position,prot,flags)=>{FS.forceLoadFile(node);var ptr=mmapAlloc(length);if(!ptr){throw new FS.ErrnoError(48)}writeChunks(stream,HEAP8,ptr,length,position);return{ptr:ptr,allocated:true}};node.stream_ops=stream_ops;return node}};var UTF8ToString=(ptr,maxBytesToRead)=>ptr?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):"";var SYSCALLS={DEFAULT_POLLMASK:5,calculateAt(dirfd,path,allowEmpty){if(PATH.isAbs(path)){return path}var dir;if(dirfd===-100){dir=FS.cwd()}else{var dirstream=SYSCALLS.getStreamFromFD(dirfd);dir=dirstream.path}if(path.length==0){if(!allowEmpty){throw new FS.ErrnoError(44)}return dir}return PATH.join2(dir,path)},doStat(func,path,buf){var stat=func(path);HEAP32[buf>>2]=stat.dev;HEAP32[buf+4>>2]=stat.mode;HEAPU32[buf+8>>2]=stat.nlink;HEAP32[buf+12>>2]=stat.uid;HEAP32[buf+16>>2]=stat.gid;HEAP32[buf+20>>2]=stat.rdev;HEAP64[buf+24>>3]=BigInt(stat.size);HEAP32[buf+32>>2]=4096;HEAP32[buf+36>>2]=stat.blocks;var atime=stat.atime.getTime();var mtime=stat.mtime.getTime();var ctime=stat.ctime.getTime();HEAP64[buf+40>>3]=BigInt(Math.floor(atime/1e3));HEAPU32[buf+48>>2]=atime%1e3*1e3;HEAP64[buf+56>>3]=BigInt(Math.floor(mtime/1e3));HEAPU32[buf+64>>2]=mtime%1e3*1e3;HEAP64[buf+72>>3]=BigInt(Math.floor(ctime/1e3));HEAPU32[buf+80>>2]=ctime%1e3*1e3;HEAP64[buf+88>>3]=BigInt(stat.ino);return 0},doMsync(addr,stream,len,flags,offset){if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(43)}if(flags&2){return 0}var buffer=HEAPU8.slice(addr,addr+len);FS.msync(stream,buffer,offset,len,flags)},getStreamFromFD(fd){var stream=FS.getStreamChecked(fd);return stream},varargs:undefined,getStr(ptr){var ret=UTF8ToString(ptr);return ret}};function ___syscall_chdir(path){try{path=SYSCALLS.getStr(path);FS.chdir(path);return 0}catch(e){if(typeof FS=="undefined"||!(e.name==="ErrnoError"))throw e;return-e.errno}}function ___syscall_chmod(path,mode){try{path=SYSCALLS.getStr(path);FS.chmod(path,mode);return 0}catch(e){if(typeof FS=="undefined"||!(e.name==="ErrnoError"))throw e;return-e.errno}}function ___syscall_faccessat(dirfd,path,amode,flags){try{path=SYSCALLS.getStr(path);path=SYSCALLS.calculateAt(dirfd,path);if(amode&~7){return-28}var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;if(!node){return-44}var perms="";if(amode&4)perms+="r";if(amode&2)perms+="w";if(amode&1)perms+="x";if(perms&&FS.nodePermissions(node,perms)){return-2}return 0}catch(e){if(typeof FS=="undefined"||!(e.name==="ErrnoError"))throw e;return-e.errno}}function ___syscall_fchmod(fd,mode){try{FS.fchmod(fd,mode);return 0}catch(e){if(typeof FS=="undefined"||!(e.name==="ErrnoError"))throw e;return-e.errno}}function syscallGetVarargI(){var ret=HEAP32[+SYSCALLS.varargs>>2];SYSCALLS.varargs+=4;return ret}var syscallGetVarargP=syscallGetVarargI;function ___syscall_fcntl64(fd,cmd,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(fd);switch(cmd){case 0:{var arg=syscallGetVarargI();if(arg<0){return-28}while(FS.streams[arg]){arg++}var newStream;newStream=FS.dupStream(stream,arg);return newStream.fd}case 1:case 2:return 0;case 3:return stream.flags;case 4:{var arg=syscallGetVarargI();stream.flags|=arg;return 0}case 12:{var arg=syscallGetVarargP();var offset=0;HEAP16[arg+offset>>1]=2;return 0}case 13:case 14:return 0}return-28}catch(e){if(typeof FS=="undefined"||!(e.name==="ErrnoError"))throw e;return-e.errno}}function ___syscall_fstat64(fd,buf){try{var stream=SYSCALLS.getStreamFromFD(fd);return SYSCALLS.doStat(FS.stat,stream.path,buf)}catch(e){if(typeof FS=="undefined"||!(e.name==="ErrnoError"))throw e;return-e.errno}}var INT53_MAX=9007199254740992;var INT53_MIN=-9007199254740992;var bigintToI53Checked=num=>num<INT53_MIN||num>INT53_MAX?NaN:Number(num);function ___syscall_ftruncate64(fd,length){length=bigintToI53Checked(length);try{if(isNaN(length))return 61;FS.ftruncate(fd,length);return 0}catch(e){if(typeof FS=="undefined"||!(e.name==="ErrnoError"))throw e;return-e.errno}}var stringToUTF8=(str,outPtr,maxBytesToWrite)=>stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite);function ___syscall_getcwd(buf,size){try{if(size===0)return-28;var cwd=FS.cwd();var cwdLengthInBytes=lengthBytesUTF8(cwd)+1;if(size<cwdLengthInBytes)return-68;stringToUTF8(cwd,buf,size);return cwdLengthInBytes}catch(e){if(typeof FS=="undefined"||!(e.name==="ErrnoError"))throw e;return-e.errno}}function ___syscall_getdents64(fd,dirp,count){try{var stream=SYSCALLS.getStreamFromFD(fd);stream.getdents||=FS.readdir(stream.path);var struct_size=280;var pos=0;var off=FS.llseek(stream,0,1);var idx=Math.floor(off/struct_size);while(idx<stream.getdents.length&&pos+struct_size<=count){var id;var type;var name=stream.getdents[idx];if(name==="."){id=stream.node.id;type=4}else if(name===".."){var lookup=FS.lookupPath(stream.path,{parent:true});id=lookup.node.id;type=4}else{var child=FS.lookupNode(stream.node,name);id=child.id;type=FS.isChrdev(child.mode)?2:FS.isDir(child.mode)?4:FS.isLink(child.mode)?10:8}HEAP64[dirp+pos>>3]=BigInt(id);HEAP64[dirp+pos+8>>3]=BigInt((idx+1)*struct_size);HEAP16[dirp+pos+16>>1]=280;HEAP8[dirp+pos+18]=type;stringToUTF8(name,dirp+pos+19,256);pos+=struct_size;idx+=1}FS.llseek(stream,idx*struct_size,0);return pos}catch(e){if(typeof FS=="undefined"||!(e.name==="ErrnoError"))throw e;return-e.errno}}function ___syscall_ioctl(fd,op,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(fd);switch(op){case 21509:{if(!stream.tty)return-59;return 0}case 21505:{if(!stream.tty)return-59;if(stream.tty.ops.ioctl_tcgets){var termios=stream.tty.ops.ioctl_tcgets(stream);var argp=syscallGetVarargP();HEAP32[argp>>2]=termios.c_iflag||0;HEAP32[argp+4>>2]=termios.c_oflag||0;HEAP32[argp+8>>2]=termios.c_cflag||0;HEAP32[argp+12>>2]=termios.c_lflag||0;for(var i=0;i<32;i++){HEAP8[argp+i+17]=termios.c_cc[i]||0}return 0}return 0}case 21510:case 21511:case 21512:{if(!stream.tty)return-59;return 0}case 21506:case 21507:case 21508:{if(!stream.tty)return-59;if(stream.tty.ops.ioctl_tcsets){var argp=syscallGetVarargP();var c_iflag=HEAP32[argp>>2];var c_oflag=HEAP32[argp+4>>2];var c_cflag=HEAP32[argp+8>>2];var c_lflag=HEAP32[argp+12>>2];var c_cc=[];for(var i=0;i<32;i++){c_cc.push(HEAP8[argp+i+17])}return stream.tty.ops.ioctl_tcsets(stream.tty,op,{c_iflag:c_iflag,c_oflag:c_oflag,c_cflag:c_cflag,c_lflag:c_lflag,c_cc:c_cc})}return 0}case 21519:{if(!stream.tty)return-59;var argp=syscallGetVarargP();HEAP32[argp>>2]=0;return 0}case 21520:{if(!stream.tty)return-59;return-28}case 21531:{var argp=syscallGetVarargP();return FS.ioctl(stream,op,argp)}case 21523:{if(!stream.tty)return-59;if(stream.tty.ops.ioctl_tiocgwinsz){var winsize=stream.tty.ops.ioctl_tiocgwinsz(stream.tty);var argp=syscallGetVarargP();HEAP16[argp>>1]=winsize[0];HEAP16[argp+2>>1]=winsize[1]}return 0}case 21524:{if(!stream.tty)return-59;return 0}case 21515:{if(!stream.tty)return-59;return 0}default:return-28}}catch(e){if(typeof FS=="undefined"||!(e.name==="ErrnoError"))throw e;return-e.errno}}function ___syscall_lstat64(path,buf){try{path=SYSCALLS.getStr(path);return SYSCALLS.doStat(FS.lstat,path,buf)}catch(e){if(typeof FS=="undefined"||!(e.name==="ErrnoError"))throw e;return-e.errno}}function ___syscall_mkdirat(dirfd,path,mode){try{path=SYSCALLS.getStr(path);path=SYSCALLS.calculateAt(dirfd,path);path=PATH.normalize(path);if(path[path.length-1]==="/")path=path.substr(0,path.length-1);FS.mkdir(path,mode,0);return 0}catch(e){if(typeof FS=="undefined"||!(e.name==="ErrnoError"))throw e;return-e.errno}}function ___syscall_mknodat(dirfd,path,mode,dev){try{path=SYSCALLS.getStr(path);path=SYSCALLS.calculateAt(dirfd,path);switch(mode&61440){case 32768:case 8192:case 24576:case 4096:case 49152:break;default:return-28}FS.mknod(path,mode,dev);return 0}catch(e){if(typeof FS=="undefined"||!(e.name==="ErrnoError"))throw e;return-e.errno}}function ___syscall_newfstatat(dirfd,path,buf,flags){try{path=SYSCALLS.getStr(path);var nofollow=flags&256;var allowEmpty=flags&4096;flags=flags&~6400;path=SYSCALLS.calculateAt(dirfd,path,allowEmpty);return SYSCALLS.doStat(nofollow?FS.lstat:FS.stat,path,buf)}catch(e){if(typeof FS=="undefined"||!(e.name==="ErrnoError"))throw e;return-e.errno}}function ___syscall_openat(dirfd,path,flags,varargs){SYSCALLS.varargs=varargs;try{path=SYSCALLS.getStr(path);path=SYSCALLS.calculateAt(dirfd,path);var mode=varargs?syscallGetVarargI():0;return FS.open(path,flags,mode).fd}catch(e){if(typeof FS=="undefined"||!(e.name==="ErrnoError"))throw e;return-e.errno}}function ___syscall_readlinkat(dirfd,path,buf,bufsize){try{path=SYSCALLS.getStr(path);path=SYSCALLS.calculateAt(dirfd,path);if(bufsize<=0)return-28;var ret=FS.readlink(path);var len=Math.min(bufsize,lengthBytesUTF8(ret));var endChar=HEAP8[buf+len];stringToUTF8(ret,buf,bufsize+1);HEAP8[buf+len]=endChar;return len}catch(e){if(typeof FS=="undefined"||!(e.name==="ErrnoError"))throw e;return-e.errno}}function ___syscall_renameat(olddirfd,oldpath,newdirfd,newpath){try{oldpath=SYSCALLS.getStr(oldpath);newpath=SYSCALLS.getStr(newpath);oldpath=SYSCALLS.calculateAt(olddirfd,oldpath);newpath=SYSCALLS.calculateAt(newdirfd,newpath);FS.rename(oldpath,newpath);return 0}catch(e){if(typeof FS=="undefined"||!(e.name==="ErrnoError"))throw e;return-e.errno}}function ___syscall_rmdir(path){try{path=SYSCALLS.getStr(path);FS.rmdir(path);return 0}catch(e){if(typeof FS=="undefined"||!(e.name==="ErrnoError"))throw e;return-e.errno}}function ___syscall_stat64(path,buf){try{path=SYSCALLS.getStr(path);return SYSCALLS.doStat(FS.stat,path,buf)}catch(e){if(typeof FS=="undefined"||!(e.name==="ErrnoError"))throw e;return-e.errno}}function ___syscall_statfs64(path,size,buf){try{path=SYSCALLS.getStr(path);HEAP32[buf+4>>2]=4096;HEAP32[buf+40>>2]=4096;HEAP32[buf+8>>2]=1e6;HEAP32[buf+12>>2]=5e5;HEAP32[buf+16>>2]=5e5;HEAP32[buf+20>>2]=FS.nextInode;HEAP32[buf+24>>2]=1e6;HEAP32[buf+28>>2]=42;HEAP32[buf+44>>2]=2;HEAP32[buf+36>>2]=255;return 0}catch(e){if(typeof FS=="undefined"||!(e.name==="ErrnoError"))throw e;return-e.errno}}function ___syscall_symlink(target,linkpath){try{target=SYSCALLS.getStr(target);linkpath=SYSCALLS.getStr(linkpath);FS.symlink(target,linkpath);return 0}catch(e){if(typeof FS=="undefined"||!(e.name==="ErrnoError"))throw e;return-e.errno}}function ___syscall_unlinkat(dirfd,path,flags){try{path=SYSCALLS.getStr(path);path=SYSCALLS.calculateAt(dirfd,path);if(flags===0){FS.unlink(path)}else if(flags===512){FS.rmdir(path)}else{abort("Invalid flags passed to unlinkat")}return 0}catch(e){if(typeof FS=="undefined"||!(e.name==="ErrnoError"))throw e;return-e.errno}}var __abort_js=()=>{abort("")};var nowIsMonotonic=1;var __emscripten_get_now_is_monotonic=()=>nowIsMonotonic;var __emscripten_runtime_keepalive_clear=()=>{noExitRuntime=false;runtimeKeepaliveCounter=0};function __gmtime_js(time,tmPtr){time=bigintToI53Checked(time);var date=new Date(time*1e3);HEAP32[tmPtr>>2]=date.getUTCSeconds();HEAP32[tmPtr+4>>2]=date.getUTCMinutes();HEAP32[tmPtr+8>>2]=date.getUTCHours();HEAP32[tmPtr+12>>2]=date.getUTCDate();HEAP32[tmPtr+16>>2]=date.getUTCMonth();HEAP32[tmPtr+20>>2]=date.getUTCFullYear()-1900;HEAP32[tmPtr+24>>2]=date.getUTCDay();var start=Date.UTC(date.getUTCFullYear(),0,1,0,0,0,0);var yday=(date.getTime()-start)/(1e3*60*60*24)|0;HEAP32[tmPtr+28>>2]=yday}var isLeapYear=year=>year%4===0&&(year%100!==0||year%400===0);var MONTH_DAYS_LEAP_CUMULATIVE=[0,31,60,91,121,152,182,213,244,274,305,335];var MONTH_DAYS_REGULAR_CUMULATIVE=[0,31,59,90,120,151,181,212,243,273,304,334];var ydayFromDate=date=>{var leap=isLeapYear(date.getFullYear());var monthDaysCumulative=leap?MONTH_DAYS_LEAP_CUMULATIVE:MONTH_DAYS_REGULAR_CUMULATIVE;var yday=monthDaysCumulative[date.getMonth()]+date.getDate()-1;return yday};function __localtime_js(time,tmPtr){time=bigintToI53Checked(time);var date=new Date(time*1e3);HEAP32[tmPtr>>2]=date.getSeconds();HEAP32[tmPtr+4>>2]=date.getMinutes();HEAP32[tmPtr+8>>2]=date.getHours();HEAP32[tmPtr+12>>2]=date.getDate();HEAP32[tmPtr+16>>2]=date.getMonth();HEAP32[tmPtr+20>>2]=date.getFullYear()-1900;HEAP32[tmPtr+24>>2]=date.getDay();var yday=ydayFromDate(date)|0;HEAP32[tmPtr+28>>2]=yday;HEAP32[tmPtr+36>>2]=-(date.getTimezoneOffset()*60);var start=new Date(date.getFullYear(),0,1);var summerOffset=new Date(date.getFullYear(),6,1).getTimezoneOffset();var winterOffset=start.getTimezoneOffset();var dst=(summerOffset!=winterOffset&&date.getTimezoneOffset()==Math.min(winterOffset,summerOffset))|0;HEAP32[tmPtr+32>>2]=dst}var __tzset_js=(timezone,daylight,std_name,dst_name)=>{var currentYear=(new Date).getFullYear();var winter=new Date(currentYear,0,1);var summer=new Date(currentYear,6,1);var winterOffset=winter.getTimezoneOffset();var summerOffset=summer.getTimezoneOffset();var stdTimezoneOffset=Math.max(winterOffset,summerOffset);HEAPU32[timezone>>2]=stdTimezoneOffset*60;HEAP32[daylight>>2]=Number(winterOffset!=summerOffset);var extractZone=timezoneOffset=>{var sign=timezoneOffset>=0?"-":"+";var absOffset=Math.abs(timezoneOffset);var hours=String(Math.floor(absOffset/60)).padStart(2,"0");var minutes=String(absOffset%60).padStart(2,"0");return`UTC${sign}${hours}${minutes}`};var winterName=extractZone(winterOffset);var summerName=extractZone(summerOffset);if(summerOffset<winterOffset){stringToUTF8(winterName,std_name,17);stringToUTF8(summerName,dst_name,17)}else{stringToUTF8(winterName,dst_name,17);stringToUTF8(summerName,std_name,17)}};var runtimeKeepaliveCounter=0;var runtimeKeepalivePush=()=>{runtimeKeepaliveCounter+=1};var _emscripten_set_main_loop_timing=(mode,value)=>{Browser.mainLoop.timingMode=mode;Browser.mainLoop.timingValue=value;if(!Browser.mainLoop.func){return 1}if(!Browser.mainLoop.running){runtimeKeepalivePush();Browser.mainLoop.running=true}if(mode==0){Browser.mainLoop.scheduler=function Browser_mainLoop_scheduler_setTimeout(){var timeUntilNextTick=Math.max(0,Browser.mainLoop.tickStartTime+value-_emscripten_get_now())|0;setTimeout(Browser.mainLoop.runner,timeUntilNextTick)};Browser.mainLoop.method="timeout"}else if(mode==1){Browser.mainLoop.scheduler=function Browser_mainLoop_scheduler_rAF(){Browser.requestAnimationFrame(Browser.mainLoop.runner)};Browser.mainLoop.method="rAF"}else if(mode==2){if(typeof Browser.setImmediate=="undefined"){if(typeof setImmediate=="undefined"){var setImmediates=[];var emscriptenMainLoopMessageId="setimmediate";var Browser_setImmediate_messageHandler=event=>{if(event.data===emscriptenMainLoopMessageId||event.data.target===emscriptenMainLoopMessageId){event.stopPropagation();setImmediates.shift()()}};addEventListener("message",Browser_setImmediate_messageHandler,true);Browser.setImmediate=function Browser_emulated_setImmediate(func){setImmediates.push(func);if(ENVIRONMENT_IS_WORKER){Module["setImmediates"]??=[];Module["setImmediates"].push(func);postMessage({target:emscriptenMainLoopMessageId})}else postMessage(emscriptenMainLoopMessageId,"*")}}else{Browser.setImmediate=setImmediate}}Browser.mainLoop.scheduler=function Browser_mainLoop_scheduler_setImmediate(){Browser.setImmediate(Browser.mainLoop.runner)};Browser.mainLoop.method="immediate"}return 0};var _emscripten_get_now;_emscripten_get_now=()=>performance.now();var webgl_enable_ANGLE_instanced_arrays=ctx=>{var ext=ctx.getExtension("ANGLE_instanced_arrays");if(ext){ctx["vertexAttribDivisor"]=(index,divisor)=>ext["vertexAttribDivisorANGLE"](index,divisor);ctx["drawArraysInstanced"]=(mode,first,count,primcount)=>ext["drawArraysInstancedANGLE"](mode,first,count,primcount);ctx["drawElementsInstanced"]=(mode,count,type,indices,primcount)=>ext["drawElementsInstancedANGLE"](mode,count,type,indices,primcount);return 1}};var webgl_enable_OES_vertex_array_object=ctx=>{var ext=ctx.getExtension("OES_vertex_array_object");if(ext){ctx["createVertexArray"]=()=>ext["createVertexArrayOES"]();ctx["deleteVertexArray"]=vao=>ext["deleteVertexArrayOES"](vao);ctx["bindVertexArray"]=vao=>ext["bindVertexArrayOES"](vao);ctx["isVertexArray"]=vao=>ext["isVertexArrayOES"](vao);return 1}};var webgl_enable_WEBGL_draw_buffers=ctx=>{var ext=ctx.getExtension("WEBGL_draw_buffers");if(ext){ctx["drawBuffers"]=(n,bufs)=>ext["drawBuffersWEBGL"](n,bufs);return 1}};var webgl_enable_WEBGL_draw_instanced_base_vertex_base_instance=ctx=>!!(ctx.dibvbi=ctx.getExtension("WEBGL_draw_instanced_base_vertex_base_instance"));var webgl_enable_WEBGL_multi_draw_instanced_base_vertex_base_instance=ctx=>!!(ctx.mdibvbi=ctx.getExtension("WEBGL_multi_draw_instanced_base_vertex_base_instance"));var webgl_enable_WEBGL_multi_draw=ctx=>!!(ctx.multiDrawWebgl=ctx.getExtension("WEBGL_multi_draw"));var getEmscriptenSupportedExtensions=ctx=>{var supportedExtensions=["ANGLE_instanced_arrays","EXT_blend_minmax","EXT_disjoint_timer_query","EXT_frag_depth","EXT_shader_texture_lod","EXT_sRGB","OES_element_index_uint","OES_fbo_render_mipmap","OES_standard_derivatives","OES_texture_float","OES_texture_half_float","OES_texture_half_float_linear","OES_vertex_array_object","WEBGL_color_buffer_float","WEBGL_depth_texture","WEBGL_draw_buffers","EXT_color_buffer_float","EXT_conservative_depth","EXT_disjoint_timer_query_webgl2","EXT_texture_norm16","NV_shader_noperspective_interpolation","WEBGL_clip_cull_distance","EXT_color_buffer_half_float","EXT_depth_clamp","EXT_float_blend","EXT_texture_compression_bptc","EXT_texture_compression_rgtc","EXT_texture_filter_anisotropic","KHR_parallel_shader_compile","OES_texture_float_linear","WEBGL_blend_func_extended","WEBGL_compressed_texture_astc","WEBGL_compressed_texture_etc","WEBGL_compressed_texture_etc1","WEBGL_compressed_texture_s3tc","WEBGL_compressed_texture_s3tc_srgb","WEBGL_debug_renderer_info","WEBGL_debug_shaders","WEBGL_lose_context","WEBGL_multi_draw"];return(ctx.getSupportedExtensions()||[]).filter(ext=>supportedExtensions.includes(ext))};var GL={counter:1,buffers:[],programs:[],framebuffers:[],renderbuffers:[],textures:[],shaders:[],vaos:[],contexts:[],offscreenCanvases:{},queries:[],samplers:[],transformFeedbacks:[],syncs:[],stringCache:{},stringiCache:{},unpackAlignment:4,unpackRowLength:0,recordError:errorCode=>{if(!GL.lastError){GL.lastError=errorCode}},getNewId:table=>{var ret=GL.counter++;for(var i=table.length;i<ret;i++){table[i]=null}return ret},genObject:(n,buffers,createFunction,objectTable)=>{for(var i=0;i<n;i++){var buffer=GLctx[createFunction]();var id=buffer&&GL.getNewId(objectTable);if(buffer){buffer.name=id;objectTable[id]=buffer}else{GL.recordError(1282)}HEAP32[buffers+i*4>>2]=id}},getSource:(shader,count,string,length)=>{var source="";for(var i=0;i<count;++i){var len=length?HEAPU32[length+i*4>>2]:undefined;source+=UTF8ToString(HEAPU32[string+i*4>>2],len)}return source},createContext:(canvas,webGLContextAttributes)=>{if(webGLContextAttributes.renderViaOffscreenBackBuffer)webGLContextAttributes["preserveDrawingBuffer"]=true;var ctx=webGLContextAttributes.majorVersion>1?canvas.getContext("webgl2",webGLContextAttributes):canvas.getContext("webgl",webGLContextAttributes);if(!ctx)return 0;var handle=GL.registerContext(ctx,webGLContextAttributes);return handle},enableOffscreenFramebufferAttributes:webGLContextAttributes=>{webGLContextAttributes.renderViaOffscreenBackBuffer=true;webGLContextAttributes.preserveDrawingBuffer=true},createOffscreenFramebuffer:context=>{var gl=context.GLctx;var fbo=gl.createFramebuffer();gl.bindFramebuffer(36160,fbo);context.defaultFbo=fbo;context.defaultFboForbidBlitFramebuffer=false;if(gl.getContextAttributes().antialias){context.defaultFboForbidBlitFramebuffer=true}context.defaultColorTarget=gl.createTexture();context.defaultDepthTarget=gl.createRenderbuffer();GL.resizeOffscreenFramebuffer(context);gl.bindTexture(3553,context.defaultColorTarget);gl.texParameteri(3553,10241,9728);gl.texParameteri(3553,10240,9728);gl.texParameteri(3553,10242,33071);gl.texParameteri(3553,10243,33071);gl.texImage2D(3553,0,6408,gl.canvas.width,gl.canvas.height,0,6408,5121,null);gl.framebufferTexture2D(36160,36064,3553,context.defaultColorTarget,0);gl.bindTexture(3553,null);var depthTarget=gl.createRenderbuffer();gl.bindRenderbuffer(36161,context.defaultDepthTarget);gl.renderbufferStorage(36161,33189,gl.canvas.width,gl.canvas.height);gl.framebufferRenderbuffer(36160,36096,36161,context.defaultDepthTarget);gl.bindRenderbuffer(36161,null);var vertices=[-1,-1,-1,1,1,-1,1,1];var vb=gl.createBuffer();gl.bindBuffer(34962,vb);gl.bufferData(34962,new Float32Array(vertices),35044);gl.bindBuffer(34962,null);context.blitVB=vb;var vsCode="attribute vec2 pos;"+"varying lowp vec2 tex;"+"void main() { tex = pos * 0.5 + vec2(0.5,0.5); gl_Position = vec4(pos, 0.0, 1.0); }";var vs=gl.createShader(35633);gl.shaderSource(vs,vsCode);gl.compileShader(vs);var fsCode="varying lowp vec2 tex;"+"uniform sampler2D sampler;"+"void main() { gl_FragColor = texture2D(sampler, tex); }";var fs=gl.createShader(35632);gl.shaderSource(fs,fsCode);gl.compileShader(fs);var blitProgram=gl.createProgram();gl.attachShader(blitProgram,vs);gl.attachShader(blitProgram,fs);gl.linkProgram(blitProgram);context.blitProgram=blitProgram;context.blitPosLoc=gl.getAttribLocation(blitProgram,"pos");gl.useProgram(blitProgram);gl.uniform1i(gl.getUniformLocation(blitProgram,"sampler"),0);gl.useProgram(null);context.defaultVao=undefined;if(gl.createVertexArray){context.defaultVao=gl.createVertexArray();gl.bindVertexArray(context.defaultVao);gl.enableVertexAttribArray(context.blitPosLoc);gl.bindVertexArray(null)}},resizeOffscreenFramebuffer:context=>{var gl=context.GLctx;if(context.defaultColorTarget){var prevTextureBinding=gl.getParameter(32873);gl.bindTexture(3553,context.defaultColorTarget);gl.texImage2D(3553,0,6408,gl.drawingBufferWidth,gl.drawingBufferHeight,0,6408,5121,null);gl.bindTexture(3553,prevTextureBinding)}if(context.defaultDepthTarget){var prevRenderBufferBinding=gl.getParameter(36007);gl.bindRenderbuffer(36161,context.defaultDepthTarget);gl.renderbufferStorage(36161,33189,gl.drawingBufferWidth,gl.drawingBufferHeight);gl.bindRenderbuffer(36161,prevRenderBufferBinding)}},blitOffscreenFramebuffer:context=>{var gl=context.GLctx;var prevScissorTest=gl.getParameter(3089);if(prevScissorTest)gl.disable(3089);var prevFbo=gl.getParameter(36006);if(gl.blitFramebuffer&&!context.defaultFboForbidBlitFramebuffer){gl.bindFramebuffer(36008,context.defaultFbo);gl.bindFramebuffer(36009,null);gl.blitFramebuffer(0,0,gl.canvas.width,gl.canvas.height,0,0,gl.canvas.width,gl.canvas.height,16384,9728)}else{gl.bindFramebuffer(36160,null);var prevProgram=gl.getParameter(35725);gl.useProgram(context.blitProgram);var prevVB=gl.getParameter(34964);gl.bindBuffer(34962,context.blitVB);var prevActiveTexture=gl.getParameter(34016);gl.activeTexture(33984);var prevTextureBinding=gl.getParameter(32873);gl.bindTexture(3553,context.defaultColorTarget);var prevBlend=gl.getParameter(3042);if(prevBlend)gl.disable(3042);var prevCullFace=gl.getParameter(2884);if(prevCullFace)gl.disable(2884);var prevDepthTest=gl.getParameter(2929);if(prevDepthTest)gl.disable(2929);var prevStencilTest=gl.getParameter(2960);if(prevStencilTest)gl.disable(2960);function draw(){gl.vertexAttribPointer(context.blitPosLoc,2,5126,false,0,0);gl.drawArrays(5,0,4)}if(context.defaultVao){var prevVAO=gl.getParameter(34229);gl.bindVertexArray(context.defaultVao);draw();gl.bindVertexArray(prevVAO)}else{var prevVertexAttribPointer={buffer:gl.getVertexAttrib(context.blitPosLoc,34975),size:gl.getVertexAttrib(context.blitPosLoc,34339),stride:gl.getVertexAttrib(context.blitPosLoc,34340),type:gl.getVertexAttrib(context.blitPosLoc,34341),normalized:gl.getVertexAttrib(context.blitPosLoc,34922),pointer:gl.getVertexAttribOffset(context.blitPosLoc,34373)};var maxVertexAttribs=gl.getParameter(34921);var prevVertexAttribEnables=[];for(var i=0;i<maxVertexAttribs;++i){var prevEnabled=gl.getVertexAttrib(i,34338);var wantEnabled=i==context.blitPosLoc;if(prevEnabled&&!wantEnabled){gl.disableVertexAttribArray(i)}if(!prevEnabled&&wantEnabled){gl.enableVertexAttribArray(i)}prevVertexAttribEnables[i]=prevEnabled}draw();for(var i=0;i<maxVertexAttribs;++i){var prevEnabled=prevVertexAttribEnables[i];var nowEnabled=i==context.blitPosLoc;if(prevEnabled&&!nowEnabled){gl.enableVertexAttribArray(i)}if(!prevEnabled&&nowEnabled){gl.disableVertexAttribArray(i)}}gl.bindBuffer(34962,prevVertexAttribPointer.buffer);gl.vertexAttribPointer(context.blitPosLoc,prevVertexAttribPointer.size,prevVertexAttribPointer.type,prevVertexAttribPointer.normalized,prevVertexAttribPointer.stride,prevVertexAttribPointer.offset)}if(prevStencilTest)gl.enable(2960);if(prevDepthTest)gl.enable(2929);if(prevCullFace)gl.enable(2884);if(prevBlend)gl.enable(3042);gl.bindTexture(3553,prevTextureBinding);gl.activeTexture(prevActiveTexture);gl.bindBuffer(34962,prevVB);gl.useProgram(prevProgram)}gl.bindFramebuffer(36160,prevFbo);if(prevScissorTest)gl.enable(3089)},registerContext:(ctx,webGLContextAttributes)=>{var handle=GL.getNewId(GL.contexts);var context={handle:handle,attributes:webGLContextAttributes,version:webGLContextAttributes.majorVersion,GLctx:ctx};if(ctx.canvas)ctx.canvas.GLctxObject=context;GL.contexts[handle]=context;if(typeof webGLContextAttributes.enableExtensionsByDefault=="undefined"||webGLContextAttributes.enableExtensionsByDefault){GL.initExtensions(context)}if(webGLContextAttributes.renderViaOffscreenBackBuffer)GL.createOffscreenFramebuffer(context);return handle},makeContextCurrent:contextHandle=>{GL.currentContext=GL.contexts[contextHandle];Module.ctx=GLctx=GL.currentContext?.GLctx;return!(contextHandle&&!GLctx)},getContext:contextHandle=>GL.contexts[contextHandle],deleteContext:contextHandle=>{if(GL.currentContext===GL.contexts[contextHandle]){GL.currentContext=null}if(typeof JSEvents=="object"){JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas)}if(GL.contexts[contextHandle]&&GL.contexts[contextHandle].GLctx.canvas){GL.contexts[contextHandle].GLctx.canvas.GLctxObject=undefined}GL.contexts[contextHandle]=null},initExtensions:context=>{context||=GL.currentContext;if(context.initExtensionsDone)return;context.initExtensionsDone=true;var GLctx=context.GLctx;webgl_enable_ANGLE_instanced_arrays(GLctx);webgl_enable_OES_vertex_array_object(GLctx);webgl_enable_WEBGL_draw_buffers(GLctx);webgl_enable_WEBGL_draw_instanced_base_vertex_base_instance(GLctx);webgl_enable_WEBGL_multi_draw_instanced_base_vertex_base_instance(GLctx);if(context.version>=2){GLctx.disjointTimerQueryExt=GLctx.getExtension("EXT_disjoint_timer_query_webgl2")}if(context.version<2||!GLctx.disjointTimerQueryExt){GLctx.disjointTimerQueryExt=GLctx.getExtension("EXT_disjoint_timer_query")}webgl_enable_WEBGL_multi_draw(GLctx);getEmscriptenSupportedExtensions(GLctx).forEach(ext=>{if(!ext.includes("lose_context")&&!ext.includes("debug")){GLctx.getExtension(ext)}})}};var _emscripten_webgl_do_commit_frame=()=>{if(!GL.currentContext||!GL.currentContext.GLctx){return-3}if(GL.currentContext.defaultFbo){GL.blitOffscreenFramebuffer(GL.currentContext);return 0}if(!GL.currentContext.attributes.explicitSwapControl){return-3}return 0};var _emscripten_webgl_commit_frame=_emscripten_webgl_do_commit_frame;var keepRuntimeAlive=()=>noExitRuntime||runtimeKeepaliveCounter>0;var _proc_exit=code=>{EXITSTATUS=code;if(!keepRuntimeAlive()){Module["onExit"]?.(code);ABORT=true}quit_(code,new ExitStatus(code))};var exitJS=(status,implicit)=>{EXITSTATUS=status;if(!keepRuntimeAlive()){exitRuntime()}_proc_exit(status)};var _exit=exitJS;var handleException=e=>{if(e instanceof ExitStatus||e=="unwind"){return EXITSTATUS}quit_(1,e)};var maybeExit=()=>{if(runtimeExited){return}if(!keepRuntimeAlive()){try{_exit(EXITSTATUS)}catch(e){handleException(e)}}};var runtimeKeepalivePop=()=>{runtimeKeepaliveCounter-=1};var setMainLoop=(browserIterationFunc,fps,simulateInfiniteLoop,arg,noSetTiming)=>{Browser.mainLoop.func=browserIterationFunc;Browser.mainLoop.arg=arg;var thisMainLoopId=Browser.mainLoop.currentlyRunningMainloop;function checkIsRunning(){if(thisMainLoopId<Browser.mainLoop.currentlyRunningMainloop){runtimeKeepalivePop();maybeExit();return false}return true}Browser.mainLoop.running=false;Browser.mainLoop.runner=function Browser_mainLoop_runner(){if(ABORT)return;if(Browser.mainLoop.queue.length>0){var start=Date.now();var blocker=Browser.mainLoop.queue.shift();blocker.func(blocker.arg);if(Browser.mainLoop.remainingBlockers){var remaining=Browser.mainLoop.remainingBlockers;var next=remaining%1==0?remaining-1:Math.floor(remaining);if(blocker.counted){Browser.mainLoop.remainingBlockers=next}else{next=next+.5;Browser.mainLoop.remainingBlockers=(8*remaining+next)/9}}Browser.mainLoop.updateStatus();if(!checkIsRunning())return;setTimeout(Browser.mainLoop.runner,0);return}if(!checkIsRunning())return;Browser.mainLoop.currentFrameNumber=Browser.mainLoop.currentFrameNumber+1|0;if(Browser.mainLoop.timingMode==1&&Browser.mainLoop.timingValue>1&&Browser.mainLoop.currentFrameNumber%Browser.mainLoop.timingValue!=0){Browser.mainLoop.scheduler();return}else if(Browser.mainLoop.timingMode==0){Browser.mainLoop.tickStartTime=_emscripten_get_now()}Browser.mainLoop.runIter(browserIterationFunc);if(!checkIsRunning())return;if(typeof SDL=="object")SDL.audio?.queueNewAudioData?.();Browser.mainLoop.scheduler()};if(!noSetTiming){if(fps&&fps>0){_emscripten_set_main_loop_timing(0,1e3/fps)}else{_emscripten_set_main_loop_timing(1,1)}Browser.mainLoop.scheduler()}if(simulateInfiniteLoop){throw"unwind"}};var callUserCallback=func=>{if(runtimeExited||ABORT){return}try{func();maybeExit()}catch(e){handleException(e)}};var safeSetTimeout=(func,timeout)=>{runtimeKeepalivePush();return setTimeout(()=>{runtimeKeepalivePop();callUserCallback(func)},timeout)};var warnOnce=text=>{warnOnce.shown||={};if(!warnOnce.shown[text]){warnOnce.shown[text]=1;err(text)}};var Browser={mainLoop:{running:false,scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause(){Browser.mainLoop.scheduler=null;Browser.mainLoop.currentlyRunningMainloop++},resume(){Browser.mainLoop.currentlyRunningMainloop++;var timingMode=Browser.mainLoop.timingMode;var timingValue=Browser.mainLoop.timingValue;var func=Browser.mainLoop.func;Browser.mainLoop.func=null;setMainLoop(func,0,false,Browser.mainLoop.arg,true);_emscripten_set_main_loop_timing(timingMode,timingValue);Browser.mainLoop.scheduler()},updateStatus(){if(Module["setStatus"]){var message=Module["statusMessage"]||"Please wait...";var remaining=Browser.mainLoop.remainingBlockers;var expected=Browser.mainLoop.expectedBlockers;if(remaining){if(remaining<expected){Module["setStatus"](`{message} ({expected - remaining}/{expected})`)}else{Module["setStatus"](message)}}else{Module["setStatus"]("")}}},runIter(func){if(ABORT)return;if(Module["preMainLoop"]){var preRet=Module["preMainLoop"]();if(preRet===false){return}}callUserCallback(func);Module["postMainLoop"]?.()}},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init(){if(Browser.initted)return;Browser.initted=true;var imagePlugin={};imagePlugin["canHandle"]=function imagePlugin_canHandle(name){return!Module.noImageDecoding&&/\.(jpg|jpeg|png|bmp)$/i.test(name)};imagePlugin["handle"]=function imagePlugin_handle(byteArray,name,onload,onerror){var b=new Blob([byteArray],{type:Browser.getMimetype(name)});if(b.size!==byteArray.length){b=new Blob([new Uint8Array(byteArray).buffer],{type:Browser.getMimetype(name)})}var url=URL.createObjectURL(b);var img=new Image;img.onload=()=>{var canvas=document.createElement("canvas");canvas.width=img.width;canvas.height=img.height;var ctx=canvas.getContext("2d");ctx.drawImage(img,0,0);preloadedImages[name]=canvas;URL.revokeObjectURL(url);onload?.(byteArray)};img.onerror=event=>{err(`Image ${url} could not be decoded`);onerror?.()};img.src=url};preloadPlugins.push(imagePlugin);var audioPlugin={};audioPlugin["canHandle"]=function audioPlugin_canHandle(name){return!Module.noAudioDecoding&&name.substr(-4)in{".ogg":1,".wav":1,".mp3":1}};audioPlugin["handle"]=function audioPlugin_handle(byteArray,name,onload,onerror){var done=false;function finish(audio){if(done)return;done=true;preloadedAudios[name]=audio;onload?.(byteArray)}var b=new Blob([byteArray],{type:Browser.getMimetype(name)});var url=URL.createObjectURL(b);var audio=new Audio;audio.addEventListener("canplaythrough",()=>finish(audio),false);audio.onerror=function audio_onerror(event){if(done)return;err(`warning: browser could not fully decode audio ${name}, trying slower base64 approach`);function encode64(data){var BASE="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";var PAD="=";var ret="";var leftchar=0;var leftbits=0;for(var i=0;i<data.length;i++){leftchar=leftchar<<8|data[i];leftbits+=8;while(leftbits>=6){var curr=leftchar>>leftbits-6&63;leftbits-=6;ret+=BASE[curr]}}if(leftbits==2){ret+=BASE[(leftchar&3)<<4];ret+=PAD+PAD}else if(leftbits==4){ret+=BASE[(leftchar&15)<<2];ret+=PAD}return ret}audio.src="data:audio/x-"+name.substr(-3)+";base64,"+encode64(byteArray);finish(audio)};audio.src=url;safeSetTimeout(()=>{finish(audio)},1e4)};preloadPlugins.push(audioPlugin);function pointerLockChange(){Browser.pointerLock=document["pointerLockElement"]===Module["canvas"]||document["mozPointerLockElement"]===Module["canvas"]||document["webkitPointerLockElement"]===Module["canvas"]||document["msPointerLockElement"]===Module["canvas"]}var canvas=Module["canvas"];if(canvas){canvas.requestPointerLock=canvas["requestPointerLock"]||canvas["mozRequestPointerLock"]||canvas["webkitRequestPointerLock"]||canvas["msRequestPointerLock"]||(()=>{});canvas.exitPointerLock=document["exitPointerLock"]||document["mozExitPointerLock"]||document["webkitExitPointerLock"]||document["msExitPointerLock"]||(()=>{});canvas.exitPointerLock=canvas.exitPointerLock.bind(document);document.addEventListener("pointerlockchange",pointerLockChange,false);document.addEventListener("mozpointerlockchange",pointerLockChange,false);document.addEventListener("webkitpointerlockchange",pointerLockChange,false);document.addEventListener("mspointerlockchange",pointerLockChange,false);if(Module["elementPointerLock"]){canvas.addEventListener("click",ev=>{if(!Browser.pointerLock&&Module["canvas"].requestPointerLock){Module["canvas"].requestPointerLock();ev.preventDefault()}},false)}}},createContext(canvas,useWebGL,setInModule,webGLContextAttributes){if(useWebGL&&Module.ctx&&canvas==Module.canvas)return Module.ctx;var ctx;var contextHandle;if(useWebGL){var contextAttributes={antialias:false,alpha:false,majorVersion:typeof WebGL2RenderingContext!="undefined"?2:1};if(webGLContextAttributes){for(var attribute in webGLContextAttributes){contextAttributes[attribute]=webGLContextAttributes[attribute]}}if(typeof GL!="undefined"){contextHandle=GL.createContext(canvas,contextAttributes);if(contextHandle){ctx=GL.getContext(contextHandle).GLctx}}}else{ctx=canvas.getContext("2d")}if(!ctx)return null;if(setInModule){Module.ctx=ctx;if(useWebGL)GL.makeContextCurrent(contextHandle);Module.useWebGL=useWebGL;Browser.moduleContextCreatedCallbacks.forEach(callback=>callback());Browser.init()}return ctx},destroyContext(canvas,useWebGL,setInModule){},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen(lockPointer,resizeCanvas){Browser.lockPointer=lockPointer;Browser.resizeCanvas=resizeCanvas;if(typeof Browser.lockPointer=="undefined")Browser.lockPointer=true;if(typeof Browser.resizeCanvas=="undefined")Browser.resizeCanvas=false;var canvas=Module["canvas"];function fullscreenChange(){Browser.isFullscreen=false;var canvasContainer=canvas.parentNode;if((document["fullscreenElement"]||document["mozFullScreenElement"]||document["msFullscreenElement"]||document["webkitFullscreenElement"]||document["webkitCurrentFullScreenElement"])===canvasContainer){canvas.exitFullscreen=Browser.exitFullscreen;if(Browser.lockPointer)canvas.requestPointerLock();Browser.isFullscreen=true;if(Browser.resizeCanvas){Browser.setFullscreenCanvasSize()}else{Browser.updateCanvasDimensions(canvas)}}else{canvasContainer.parentNode.insertBefore(canvas,canvasContainer);canvasContainer.parentNode.removeChild(canvasContainer);if(Browser.resizeCanvas){Browser.setWindowedCanvasSize()}else{Browser.updateCanvasDimensions(canvas)}}Module["onFullScreen"]?.(Browser.isFullscreen);Module["onFullscreen"]?.(Browser.isFullscreen)}if(!Browser.fullscreenHandlersInstalled){Browser.fullscreenHandlersInstalled=true;document.addEventListener("fullscreenchange",fullscreenChange,false);document.addEventListener("mozfullscreenchange",fullscreenChange,false);document.addEventListener("webkitfullscreenchange",fullscreenChange,false);document.addEventListener("MSFullscreenChange",fullscreenChange,false)}var canvasContainer=document.createElement("div");canvas.parentNode.insertBefore(canvasContainer,canvas);canvasContainer.appendChild(canvas);canvasContainer.requestFullscreen=canvasContainer["requestFullscreen"]||canvasContainer["mozRequestFullScreen"]||canvasContainer["msRequestFullscreen"]||(canvasContainer["webkitRequestFullscreen"]?()=>canvasContainer["webkitRequestFullscreen"](Element["ALLOW_KEYBOARD_INPUT"]):null)||(canvasContainer["webkitRequestFullScreen"]?()=>canvasContainer["webkitRequestFullScreen"](Element["ALLOW_KEYBOARD_INPUT"]):null);canvasContainer.requestFullscreen()},exitFullscreen(){if(!Browser.isFullscreen){return false}var CFS=document["exitFullscreen"]||document["cancelFullScreen"]||document["mozCancelFullScreen"]||document["msExitFullscreen"]||document["webkitCancelFullScreen"]||(()=>{});CFS.apply(document,[]);return true},nextRAF:0,fakeRequestAnimationFrame(func){var now=Date.now();if(Browser.nextRAF===0){Browser.nextRAF=now+1e3/60}else{while(now+2>=Browser.nextRAF){Browser.nextRAF+=1e3/60}}var delay=Math.max(Browser.nextRAF-now,0);setTimeout(func,delay)},requestAnimationFrame(func){if(typeof requestAnimationFrame=="function"){requestAnimationFrame(func);return}var RAF=Browser.fakeRequestAnimationFrame;RAF(func)},safeSetTimeout(func,timeout){return safeSetTimeout(func,timeout)},safeRequestAnimationFrame(func){runtimeKeepalivePush();return Browser.requestAnimationFrame(()=>{runtimeKeepalivePop();callUserCallback(func)})},getMimetype(name){return{jpg:"image/jpeg",jpeg:"image/jpeg",png:"image/png",bmp:"image/bmp",ogg:"audio/ogg",wav:"audio/wav",mp3:"audio/mpeg"}[name.substr(name.lastIndexOf(".")+1)]},getUserMedia(func){window.getUserMedia||=navigator["getUserMedia"]||navigator["mozGetUserMedia"];window.getUserMedia(func)},getMovementX(event){return event["movementX"]||event["mozMovementX"]||event["webkitMovementX"]||0},getMovementY(event){return event["movementY"]||event["mozMovementY"]||event["webkitMovementY"]||0},getMouseWheelDelta(event){var delta=0;switch(event.type){case"DOMMouseScroll":delta=event.detail/3;break;case"mousewheel":delta=event.wheelDelta/120;break;case"wheel":delta=event.deltaY;switch(event.deltaMode){case 0:delta/=100;break;case 1:delta/=3;break;case 2:delta*=80;break;default:throw"unrecognized mouse wheel delta mode: "+event.deltaMode}break;default:throw"unrecognized mouse wheel event: "+event.type}return delta},mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseCoords(pageX,pageY){var rect=Module["canvas"].getBoundingClientRect();var cw=Module["canvas"].width;var ch=Module["canvas"].height;var scrollX=typeof window.scrollX!="undefined"?window.scrollX:window.pageXOffset;var scrollY=typeof window.scrollY!="undefined"?window.scrollY:window.pageYOffset;var adjustedX=pageX-(scrollX+rect.left);var adjustedY=pageY-(scrollY+rect.top);adjustedX=adjustedX*(cw/rect.width);adjustedY=adjustedY*(ch/rect.height);return{x:adjustedX,y:adjustedY}},setMouseCoords(pageX,pageY){const{x:x,y:y}=Browser.calculateMouseCoords(pageX,pageY);Browser.mouseMovementX=x-Browser.mouseX;Browser.mouseMovementY=y-Browser.mouseY;Browser.mouseX=x;Browser.mouseY=y},calculateMouseEvent(event){if(Browser.pointerLock){if(event.type!="mousemove"&&"mozMovementX"in event){Browser.mouseMovementX=Browser.mouseMovementY=0}else{Browser.mouseMovementX=Browser.getMovementX(event);Browser.mouseMovementY=Browser.getMovementY(event)}Browser.mouseX+=Browser.mouseMovementX;Browser.mouseY+=Browser.mouseMovementY}else{if(event.type==="touchstart"||event.type==="touchend"||event.type==="touchmove"){var touch=event.touch;if(touch===undefined){return}var coords=Browser.calculateMouseCoords(touch.pageX,touch.pageY);if(event.type==="touchstart"){Browser.lastTouches[touch.identifier]=coords;Browser.touches[touch.identifier]=coords}else if(event.type==="touchend"||event.type==="touchmove"){var last=Browser.touches[touch.identifier];last||=coords;Browser.lastTouches[touch.identifier]=last;Browser.touches[touch.identifier]=coords}return}Browser.setMouseCoords(event.pageX,event.pageY)}},resizeListeners:[],updateResizeListeners(){var canvas=Module["canvas"];Browser.resizeListeners.forEach(listener=>listener(canvas.width,canvas.height))},setCanvasSize(width,height,noUpdates){var canvas=Module["canvas"];Browser.updateCanvasDimensions(canvas,width,height);if(!noUpdates)Browser.updateResizeListeners()},windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize(){if(typeof SDL!="undefined"){var flags=HEAPU32[SDL.screen>>2];flags=flags|8388608;HEAP32[SDL.screen>>2]=flags}Browser.updateCanvasDimensions(Module["canvas"]);Browser.updateResizeListeners()},setWindowedCanvasSize(){if(typeof SDL!="undefined"){var flags=HEAPU32[SDL.screen>>2];flags=flags&~8388608;HEAP32[SDL.screen>>2]=flags}Browser.updateCanvasDimensions(Module["canvas"]);Browser.updateResizeListeners()},updateCanvasDimensions(canvas,wNative,hNative){if(wNative&&hNative){canvas.widthNative=wNative;canvas.heightNative=hNative}else{wNative=canvas.widthNative;hNative=canvas.heightNative}var w=wNative;var h=hNative;if(Module["forcedAspectRatio"]&&Module["forcedAspectRatio"]>0){if(w/h<Module["forcedAspectRatio"]){w=Math.round(h*Module["forcedAspectRatio"])}else{h=Math.round(w/Module["forcedAspectRatio"])}}if((document["fullscreenElement"]||document["mozFullScreenElement"]||document["msFullscreenElement"]||document["webkitFullscreenElement"]||document["webkitCurrentFullScreenElement"])===canvas.parentNode&&typeof screen!="undefined"){var factor=Math.min(screen.width/w,screen.height/h);w=Math.round(w*factor);h=Math.round(h*factor)}if(Browser.resizeCanvas){if(canvas.width!=w)canvas.width=w;if(canvas.height!=h)canvas.height=h;if(typeof canvas.style!="undefined"){canvas.style.removeProperty("width");canvas.style.removeProperty("height")}}else{if(canvas.width!=wNative)canvas.width=wNative;if(canvas.height!=hNative)canvas.height=hNative;if(typeof canvas.style!="undefined"){if(w!=wNative||h!=hNative){canvas.style.setProperty("width",w+"px","important");canvas.style.setProperty("height",h+"px","important")}else{canvas.style.removeProperty("width");canvas.style.removeProperty("height")}}}}};var _emscripten_cancel_main_loop=()=>{Browser.mainLoop.pause();Browser.mainLoop.func=null};var _emscripten_date_now=()=>Date.now();var _emscripten_force_exit=status=>{__emscripten_runtime_keepalive_clear();_exit(status)};var getHeapMax=()=>2147483648;var _emscripten_get_heap_max=()=>getHeapMax();var growMemory=size=>{var b=wasmMemory.buffer;var pages=(size-b.byteLength+65535)/65536;try{wasmMemory.grow(pages);updateMemoryViews();return 1}catch(e){}};var _emscripten_resize_heap=requestedSize=>{var oldSize=HEAPU8.length;requestedSize>>>=0;var maxHeapSize=getHeapMax();if(requestedSize>maxHeapSize){return false}var alignUp=(x,multiple)=>x+(multiple-x%multiple)%multiple;for(var cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown);overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296);var newSize=Math.min(maxHeapSize,alignUp(Math.max(requestedSize,overGrownHeapSize),65536));var replacement=growMemory(newSize);if(replacement){return true}}return false};var JSEvents={removeAllEventListeners(){while(JSEvents.eventHandlers.length){JSEvents._removeHandler(JSEvents.eventHandlers.length-1)}JSEvents.deferredCalls=[]},registerRemoveEventListeners(){if(!JSEvents.removeEventListenersRegistered){__ATEXIT__.push(JSEvents.removeAllEventListeners);JSEvents.removeEventListenersRegistered=true}},inEventHandler:0,deferredCalls:[],deferCall(targetFunction,precedence,argsList){function arraysHaveEqualContent(arrA,arrB){if(arrA.length!=arrB.length)return false;for(var i in arrA){if(arrA[i]!=arrB[i])return false}return true}for(var call of JSEvents.deferredCalls){if(call.targetFunction==targetFunction&&arraysHaveEqualContent(call.argsList,argsList)){return}}JSEvents.deferredCalls.push({targetFunction:targetFunction,precedence:precedence,argsList:argsList});JSEvents.deferredCalls.sort((x,y)=>x.precedence<y.precedence)},removeDeferredCalls(targetFunction){JSEvents.deferredCalls=JSEvents.deferredCalls.filter(call=>call.targetFunction!=targetFunction)},canPerformEventHandlerRequests(){if(navigator.userActivation){return navigator.userActivation.isActive}return JSEvents.inEventHandler&&JSEvents.currentEventHandler.allowsDeferredCalls},runDeferredCalls(){if(!JSEvents.canPerformEventHandlerRequests()){return}var deferredCalls=JSEvents.deferredCalls;JSEvents.deferredCalls=[];for(var call of deferredCalls){call.targetFunction(...call.argsList)}},eventHandlers:[],removeAllHandlersOnTarget:(target,eventTypeString)=>{for(var i=0;i<JSEvents.eventHandlers.length;++i){if(JSEvents.eventHandlers[i].target==target&&(!eventTypeString||eventTypeString==JSEvents.eventHandlers[i].eventTypeString)){JSEvents._removeHandler(i--)}}},_removeHandler(i){var h=JSEvents.eventHandlers[i];h.target.removeEventListener(h.eventTypeString,h.eventListenerFunc,h.useCapture);JSEvents.eventHandlers.splice(i,1)},registerOrRemoveHandler(eventHandler){if(!eventHandler.target){return-4}if(eventHandler.callbackfunc){eventHandler.eventListenerFunc=function(event){++JSEvents.inEventHandler;JSEvents.currentEventHandler=eventHandler;JSEvents.runDeferredCalls();eventHandler.handlerFunc(event);JSEvents.runDeferredCalls();--JSEvents.inEventHandler};eventHandler.target.addEventListener(eventHandler.eventTypeString,eventHandler.eventListenerFunc,eventHandler.useCapture);JSEvents.eventHandlers.push(eventHandler);JSEvents.registerRemoveEventListeners()}else{for(var i=0;i<JSEvents.eventHandlers.length;++i){if(JSEvents.eventHandlers[i].target==eventHandler.target&&JSEvents.eventHandlers[i].eventTypeString==eventHandler.eventTypeString){JSEvents._removeHandler(i--)}}}return 0},getNodeNameForTarget(target){if(!target)return"";if(target==window)return"#window";if(target==screen)return"#screen";return target?.nodeName||""},fullscreenEnabled(){return document.fullscreenEnabled||document.webkitFullscreenEnabled}};var maybeCStringToJsString=cString=>cString>2?UTF8ToString(cString):cString;var specialHTMLTargets=[0,typeof document!="undefined"?document:0,typeof window!="undefined"?window:0];var findEventTarget=target=>{target=maybeCStringToJsString(target);var domElement=specialHTMLTargets[target]||(typeof document!="undefined"?document.querySelector(target):undefined);return domElement};var findCanvasEventTarget=findEventTarget;var _emscripten_set_canvas_element_size=(target,width,height)=>{var canvas=findCanvasEventTarget(target);if(!canvas)return-4;canvas.width=width;canvas.height=height;if(canvas.GLctxObject)GL.resizeOffscreenFramebuffer(canvas.GLctxObject);return 0};var _emscripten_set_main_loop=(func,fps,simulateInfiniteLoop)=>{var browserIterationFunc=getWasmTableEntry(func);setMainLoop(browserIterationFunc,fps,simulateInfiniteLoop)};var webglPowerPreferences=["default","low-power","high-performance"];var _emscripten_webgl_do_create_context=(target,attributes)=>{var attr32=attributes>>2;var powerPreference=HEAP32[attr32+(8>>2)];var contextAttributes={alpha:!!HEAP8[attributes+0],depth:!!HEAP8[attributes+1],stencil:!!HEAP8[attributes+2],antialias:!!HEAP8[attributes+3],premultipliedAlpha:!!HEAP8[attributes+4],preserveDrawingBuffer:!!HEAP8[attributes+5],powerPreference:webglPowerPreferences[powerPreference],failIfMajorPerformanceCaveat:!!HEAP8[attributes+12],majorVersion:HEAP32[attr32+(16>>2)],minorVersion:HEAP32[attr32+(20>>2)],enableExtensionsByDefault:HEAP8[attributes+24],explicitSwapControl:HEAP8[attributes+25],proxyContextToMainThread:HEAP32[attr32+(28>>2)],renderViaOffscreenBackBuffer:HEAP8[attributes+32]};var canvas=findCanvasEventTarget(target);if(!canvas){return 0}if(contextAttributes.explicitSwapControl&&!contextAttributes.renderViaOffscreenBackBuffer){contextAttributes.renderViaOffscreenBackBuffer=true}var contextHandle=GL.createContext(canvas,contextAttributes);return contextHandle};var _emscripten_webgl_create_context=_emscripten_webgl_do_create_context;var _emscripten_webgl_destroy_context=contextHandle=>{if(GL.currentContext==contextHandle)GL.currentContext=0;GL.deleteContext(contextHandle)};var _emscripten_webgl_enable_extension=(contextHandle,extension)=>{var context=GL.getContext(contextHandle);var extString=UTF8ToString(extension);if(extString.startsWith("GL_"))extString=extString.substr(3);if(extString=="ANGLE_instanced_arrays")webgl_enable_ANGLE_instanced_arrays(GLctx);if(extString=="OES_vertex_array_object")webgl_enable_OES_vertex_array_object(GLctx);if(extString=="WEBGL_draw_buffers")webgl_enable_WEBGL_draw_buffers(GLctx);if(extString=="WEBGL_draw_instanced_base_vertex_base_instance")webgl_enable_WEBGL_draw_instanced_base_vertex_base_instance(GLctx);if(extString=="WEBGL_multi_draw_instanced_base_vertex_base_instance")webgl_enable_WEBGL_multi_draw_instanced_base_vertex_base_instance(GLctx);if(extString=="WEBGL_multi_draw")webgl_enable_WEBGL_multi_draw(GLctx);var ext=context.GLctx.getExtension(extString);return!!ext};var stringToNewUTF8=str=>{var size=lengthBytesUTF8(str)+1;var ret=_malloc(size);if(ret)stringToUTF8(str,ret,size);return ret};var _emscripten_webgl_get_supported_extensions=()=>stringToNewUTF8(GLctx.getSupportedExtensions().join(" "));var _emscripten_webgl_make_context_current=contextHandle=>{var success=GL.makeContextCurrent(contextHandle);return success?0:-5};var ENV={};var getExecutableName=()=>thisProgram||"./this.program";var getEnvStrings=()=>{if(!getEnvStrings.strings){var lang=(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8";var env={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:lang,_:getExecutableName()};for(var x in ENV){if(ENV[x]===undefined)delete env[x];else env[x]=ENV[x]}var strings=[];for(var x in env){strings.push(`${x}=${env[x]}`)}getEnvStrings.strings=strings}return getEnvStrings.strings};var stringToAscii=(str,buffer)=>{for(var i=0;i<str.length;++i){HEAP8[buffer++]=str.charCodeAt(i)}HEAP8[buffer]=0};var _environ_get=(__environ,environ_buf)=>{var bufSize=0;getEnvStrings().forEach((string,i)=>{var ptr=environ_buf+bufSize;HEAPU32[__environ+i*4>>2]=ptr;stringToAscii(string,ptr);bufSize+=string.length+1});return 0};var _environ_sizes_get=(penviron_count,penviron_buf_size)=>{var strings=getEnvStrings();HEAPU32[penviron_count>>2]=strings.length;var bufSize=0;strings.forEach(string=>bufSize+=string.length+1);HEAPU32[penviron_buf_size>>2]=bufSize;return 0};function _fd_close(fd){try{var stream=SYSCALLS.getStreamFromFD(fd);FS.close(stream);return 0}catch(e){if(typeof FS=="undefined"||!(e.name==="ErrnoError"))throw e;return e.errno}}function _fd_fdstat_get(fd,pbuf){try{var rightsBase=0;var rightsInheriting=0;var flags=0;{var stream=SYSCALLS.getStreamFromFD(fd);var type=stream.tty?2:FS.isDir(stream.mode)?3:FS.isLink(stream.mode)?7:4}HEAP8[pbuf]=type;HEAP16[pbuf+2>>1]=flags;HEAP64[pbuf+8>>3]=BigInt(rightsBase);HEAP64[pbuf+16>>3]=BigInt(rightsInheriting);return 0}catch(e){if(typeof FS=="undefined"||!(e.name==="ErrnoError"))throw e;return e.errno}}var doReadv=(stream,iov,iovcnt,offset)=>{var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAPU32[iov>>2];var len=HEAPU32[iov+4>>2];iov+=8;var curr=FS.read(stream,HEAP8,ptr,len,offset);if(curr<0)return-1;ret+=curr;if(curr<len)break;if(typeof offset!="undefined"){offset+=curr}}return ret};function _fd_read(fd,iov,iovcnt,pnum){try{var stream=SYSCALLS.getStreamFromFD(fd);var num=doReadv(stream,iov,iovcnt);HEAPU32[pnum>>2]=num;return 0}catch(e){if(typeof FS=="undefined"||!(e.name==="ErrnoError"))throw e;return e.errno}}function _fd_seek(fd,offset,whence,newOffset){offset=bigintToI53Checked(offset);try{if(isNaN(offset))return 61;var stream=SYSCALLS.getStreamFromFD(fd);FS.llseek(stream,offset,whence);HEAP64[newOffset>>3]=BigInt(stream.position);if(stream.getdents&&offset===0&&whence===0)stream.getdents=null;return 0}catch(e){if(typeof FS=="undefined"||!(e.name==="ErrnoError"))throw e;return e.errno}}var doWritev=(stream,iov,iovcnt,offset)=>{var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAPU32[iov>>2];var len=HEAPU32[iov+4>>2];iov+=8;var curr=FS.write(stream,HEAP8,ptr,len,offset);if(curr<0)return-1;ret+=curr;if(typeof offset!="undefined"){offset+=curr}}return ret};function _fd_write(fd,iov,iovcnt,pnum){try{var stream=SYSCALLS.getStreamFromFD(fd);var num=doWritev(stream,iov,iovcnt);HEAPU32[pnum>>2]=num;return 0}catch(e){if(typeof FS=="undefined"||!(e.name==="ErrnoError"))throw e;return e.errno}}var _glActiveTexture=x0=>GLctx.activeTexture(x0);var _glAttachShader=(program,shader)=>{GLctx.attachShader(GL.programs[program],GL.shaders[shader])};var _glBeginTransformFeedback=x0=>GLctx.beginTransformFeedback(x0);var _glBindBuffer=(target,buffer)=>{if(target==35051){GLctx.currentPixelPackBufferBinding=buffer}else if(target==35052){GLctx.currentPixelUnpackBufferBinding=buffer}GLctx.bindBuffer(target,GL.buffers[buffer])};var _glBindBufferBase=(target,index,buffer)=>{GLctx.bindBufferBase(target,index,GL.buffers[buffer])};var _glBindBufferRange=(target,index,buffer,offset,ptrsize)=>{GLctx.bindBufferRange(target,index,GL.buffers[buffer],offset,ptrsize)};var _glBindFramebuffer=(target,framebuffer)=>{GLctx.bindFramebuffer(target,framebuffer?GL.framebuffers[framebuffer]:GL.currentContext.defaultFbo)};var _glBindRenderbuffer=(target,renderbuffer)=>{GLctx.bindRenderbuffer(target,GL.renderbuffers[renderbuffer])};var _glBindTexture=(target,texture)=>{GLctx.bindTexture(target,GL.textures[texture])};var _glBindVertexArray=vao=>{GLctx.bindVertexArray(GL.vaos[vao])};var _glBlendColor=(x0,x1,x2,x3)=>GLctx.blendColor(x0,x1,x2,x3);var _glBlendEquation=x0=>GLctx.blendEquation(x0);var _glBlendFunc=(x0,x1)=>GLctx.blendFunc(x0,x1);var _glBlendFuncSeparate=(x0,x1,x2,x3)=>GLctx.blendFuncSeparate(x0,x1,x2,x3);var _glBlitFramebuffer=(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9)=>GLctx.blitFramebuffer(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9);var _glBufferData=(target,size,data,usage)=>{if(GL.currentContext.version>=2){if(data&&size){GLctx.bufferData(target,HEAPU8,usage,data,size)}else{GLctx.bufferData(target,size,usage)}return}GLctx.bufferData(target,data?HEAPU8.subarray(data,data+size):size,usage)};var _glBufferSubData=(target,offset,size,data)=>{if(GL.currentContext.version>=2){size&&GLctx.bufferSubData(target,offset,HEAPU8,data,size);return}GLctx.bufferSubData(target,offset,HEAPU8.subarray(data,data+size))};var _glCheckFramebufferStatus=x0=>GLctx.checkFramebufferStatus(x0);var _glClear=x0=>GLctx.clear(x0);var _glClearBufferfv=(buffer,drawbuffer,value)=>{GLctx.clearBufferfv(buffer,drawbuffer,HEAPF32,value>>2)};var _glClearColor=(x0,x1,x2,x3)=>GLctx.clearColor(x0,x1,x2,x3);var _glClearDepthf=x0=>GLctx.clearDepth(x0);var _glColorMask=(red,green,blue,alpha)=>{GLctx.colorMask(!!red,!!green,!!blue,!!alpha)};var _glCompileShader=shader=>{GLctx.compileShader(GL.shaders[shader])};var _glCompressedTexImage2D=(target,level,internalFormat,width,height,border,imageSize,data)=>{if(GL.currentContext.version>=2){if(GLctx.currentPixelUnpackBufferBinding||!imageSize){GLctx.compressedTexImage2D(target,level,internalFormat,width,height,border,imageSize,data);return}GLctx.compressedTexImage2D(target,level,internalFormat,width,height,border,HEAPU8,data,imageSize);return}GLctx.compressedTexImage2D(target,level,internalFormat,width,height,border,data?HEAPU8.subarray(data,data+imageSize):null)};var _glCompressedTexImage3D=(target,level,internalFormat,width,height,depth,border,imageSize,data)=>{if(GLctx.currentPixelUnpackBufferBinding){GLctx.compressedTexImage3D(target,level,internalFormat,width,height,depth,border,imageSize,data)}else{GLctx.compressedTexImage3D(target,level,internalFormat,width,height,depth,border,HEAPU8,data,imageSize)}};var _glCompressedTexSubImage3D=(target,level,xoffset,yoffset,zoffset,width,height,depth,format,imageSize,data)=>{if(GLctx.currentPixelUnpackBufferBinding){GLctx.compressedTexSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,imageSize,data)}else{GLctx.compressedTexSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,HEAPU8,data,imageSize)}};var _glCopyBufferSubData=(x0,x1,x2,x3,x4)=>GLctx.copyBufferSubData(x0,x1,x2,x3,x4);var _glCreateProgram=()=>{var id=GL.getNewId(GL.programs);var program=GLctx.createProgram();program.name=id;program.maxUniformLength=program.maxAttributeLength=program.maxUniformBlockNameLength=0;program.uniformIdCounter=1;GL.programs[id]=program;return id};var _glCreateShader=shaderType=>{var id=GL.getNewId(GL.shaders);GL.shaders[id]=GLctx.createShader(shaderType);return id};var _glCullFace=x0=>GLctx.cullFace(x0);var _glDeleteBuffers=(n,buffers)=>{for(var i=0;i<n;i++){var id=HEAP32[buffers+i*4>>2];var buffer=GL.buffers[id];if(!buffer)continue;GLctx.deleteBuffer(buffer);buffer.name=0;GL.buffers[id]=null;if(id==GLctx.currentPixelPackBufferBinding)GLctx.currentPixelPackBufferBinding=0;if(id==GLctx.currentPixelUnpackBufferBinding)GLctx.currentPixelUnpackBufferBinding=0}};var _glDeleteFramebuffers=(n,framebuffers)=>{for(var i=0;i<n;++i){var id=HEAP32[framebuffers+i*4>>2];var framebuffer=GL.framebuffers[id];if(!framebuffer)continue;GLctx.deleteFramebuffer(framebuffer);framebuffer.name=0;GL.framebuffers[id]=null}};var _glDeleteProgram=id=>{if(!id)return;var program=GL.programs[id];if(!program){GL.recordError(1281);return}GLctx.deleteProgram(program);program.name=0;GL.programs[id]=null};var _glDeleteQueries=(n,ids)=>{for(var i=0;i<n;i++){var id=HEAP32[ids+i*4>>2];var query=GL.queries[id];if(!query)continue;GLctx.deleteQuery(query);GL.queries[id]=null}};var _glDeleteRenderbuffers=(n,renderbuffers)=>{for(var i=0;i<n;i++){var id=HEAP32[renderbuffers+i*4>>2];var renderbuffer=GL.renderbuffers[id];if(!renderbuffer)continue;GLctx.deleteRenderbuffer(renderbuffer);renderbuffer.name=0;GL.renderbuffers[id]=null}};var _glDeleteShader=id=>{if(!id)return;var shader=GL.shaders[id];if(!shader){GL.recordError(1281);return}GLctx.deleteShader(shader);GL.shaders[id]=null};var _glDeleteSync=id=>{if(!id)return;var sync=GL.syncs[id];if(!sync){GL.recordError(1281);return}GLctx.deleteSync(sync);sync.name=0;GL.syncs[id]=null};var _glDeleteTextures=(n,textures)=>{for(var i=0;i<n;i++){var id=HEAP32[textures+i*4>>2];var texture=GL.textures[id];if(!texture)continue;GLctx.deleteTexture(texture);texture.name=0;GL.textures[id]=null}};var _glDeleteVertexArrays=(n,vaos)=>{for(var i=0;i<n;i++){var id=HEAP32[vaos+i*4>>2];GLctx.deleteVertexArray(GL.vaos[id]);GL.vaos[id]=null}};var _glDepthFunc=x0=>GLctx.depthFunc(x0);var _glDepthMask=flag=>{GLctx.depthMask(!!flag)};var _glDisable=x0=>GLctx.disable(x0);var _glDisableVertexAttribArray=index=>{GLctx.disableVertexAttribArray(index)};var _glDrawArrays=(mode,first,count)=>{GLctx.drawArrays(mode,first,count)};var _glDrawArraysInstanced=(mode,first,count,primcount)=>{GLctx.drawArraysInstanced(mode,first,count,primcount)};var tempFixedLengthArray=[];var _glDrawBuffers=(n,bufs)=>{var bufArray=tempFixedLengthArray[n];for(var i=0;i<n;i++){bufArray[i]=HEAP32[bufs+i*4>>2]}GLctx.drawBuffers(bufArray)};var _glDrawElements=(mode,count,type,indices)=>{GLctx.drawElements(mode,count,type,indices)};var _glDrawElementsInstanced=(mode,count,type,indices,primcount)=>{GLctx.drawElementsInstanced(mode,count,type,indices,primcount)};var _glEnable=x0=>GLctx.enable(x0);var _glEnableVertexAttribArray=index=>{GLctx.enableVertexAttribArray(index)};var _glEndTransformFeedback=()=>GLctx.endTransformFeedback();var _glFenceSync=(condition,flags)=>{var sync=GLctx.fenceSync(condition,flags);if(sync){var id=GL.getNewId(GL.syncs);sync.name=id;GL.syncs[id]=sync;return id}return 0};var _glFinish=()=>GLctx.finish();var _glFramebufferRenderbuffer=(target,attachment,renderbuffertarget,renderbuffer)=>{GLctx.framebufferRenderbuffer(target,attachment,renderbuffertarget,GL.renderbuffers[renderbuffer])};var _glFramebufferTexture2D=(target,attachment,textarget,texture,level)=>{GLctx.framebufferTexture2D(target,attachment,textarget,GL.textures[texture],level)};var _glFramebufferTextureLayer=(target,attachment,texture,level,layer)=>{GLctx.framebufferTextureLayer(target,attachment,GL.textures[texture],level,layer)};var _glFrontFace=x0=>GLctx.frontFace(x0);var _glGenBuffers=(n,buffers)=>{GL.genObject(n,buffers,"createBuffer",GL.buffers)};var _glGenFramebuffers=(n,ids)=>{GL.genObject(n,ids,"createFramebuffer",GL.framebuffers)};var _glGenQueries=(n,ids)=>{GL.genObject(n,ids,"createQuery",GL.queries)};var _glGenRenderbuffers=(n,renderbuffers)=>{GL.genObject(n,renderbuffers,"createRenderbuffer",GL.renderbuffers)};var _glGenTextures=(n,textures)=>{GL.genObject(n,textures,"createTexture",GL.textures)};var _glGenVertexArrays=(n,arrays)=>{GL.genObject(n,arrays,"createVertexArray",GL.vaos)};var _glGenerateMipmap=x0=>GLctx.generateMipmap(x0);var writeI53ToI64=(ptr,num)=>{HEAPU32[ptr>>2]=num;var lower=HEAPU32[ptr>>2];HEAPU32[ptr+4>>2]=(num-lower)/4294967296};var webglGetExtensions=function $webglGetExtensions(){var exts=getEmscriptenSupportedExtensions(GLctx);exts=exts.concat(exts.map(e=>"GL_"+e));return exts};var emscriptenWebGLGet=(name_,p,type)=>{if(!p){GL.recordError(1281);return}var ret=undefined;switch(name_){case 36346:ret=1;break;case 36344:if(type!=0&&type!=1){GL.recordError(1280)}return;case 34814:case 36345:ret=0;break;case 34466:var formats=GLctx.getParameter(34467);ret=formats?formats.length:0;break;case 33309:if(GL.currentContext.version<2){GL.recordError(1282);return}ret=webglGetExtensions().length;break;case 33307:case 33308:if(GL.currentContext.version<2){GL.recordError(1280);return}ret=name_==33307?3:0;break}if(ret===undefined){var result=GLctx.getParameter(name_);switch(typeof result){case"number":ret=result;break;case"boolean":ret=result?1:0;break;case"string":GL.recordError(1280);return;case"object":if(result===null){switch(name_){case 34964:case 35725:case 34965:case 36006:case 36007:case 32873:case 34229:case 36662:case 36663:case 35053:case 35055:case 36010:case 35097:case 35869:case 32874:case 36389:case 35983:case 35368:case 34068:{ret=0;break}default:{GL.recordError(1280);return}}}else if(result instanceof Float32Array||result instanceof Uint32Array||result instanceof Int32Array||result instanceof Array){for(var i=0;i<result.length;++i){switch(type){case 0:HEAP32[p+i*4>>2]=result[i];break;case 2:HEAPF32[p+i*4>>2]=result[i];break;case 4:HEAP8[p+i]=result[i]?1:0;break}}return}else{try{ret=result.name|0}catch(e){GL.recordError(1280);err(`GL_INVALID_ENUM in glGet${type}v: Unknown object returned from WebGL getParameter(${name_})! (error: ${e})`);return}}break;default:GL.recordError(1280);err(`GL_INVALID_ENUM in glGet${type}v: Native code calling glGet${type}v(${name_}) and it returns ${result} of type ${typeof result}!`);return}}switch(type){case 1:writeI53ToI64(p,ret);break;case 0:HEAP32[p>>2]=ret;break;case 2:HEAPF32[p>>2]=ret;break;case 4:HEAP8[p]=ret?1:0;break}};var _glGetFloatv=(name_,p)=>emscriptenWebGLGet(name_,p,2);var _glGetInteger64v=(name_,p)=>{emscriptenWebGLGet(name_,p,1)};var _glGetIntegerv=(name_,p)=>emscriptenWebGLGet(name_,p,0);var _glGetProgramInfoLog=(program,maxLength,length,infoLog)=>{var log=GLctx.getProgramInfoLog(GL.programs[program]);if(log===null)log="(unknown error)";var numBytesWrittenExclNull=maxLength>0&&infoLog?stringToUTF8(log,infoLog,maxLength):0;if(length)HEAP32[length>>2]=numBytesWrittenExclNull};var _glGetProgramiv=(program,pname,p)=>{if(!p){GL.recordError(1281);return}if(program>=GL.counter){GL.recordError(1281);return}program=GL.programs[program];if(pname==35716){var log=GLctx.getProgramInfoLog(program);if(log===null)log="(unknown error)";HEAP32[p>>2]=log.length+1}else if(pname==35719){if(!program.maxUniformLength){for(var i=0;i<GLctx.getProgramParameter(program,35718);++i){program.maxUniformLength=Math.max(program.maxUniformLength,GLctx.getActiveUniform(program,i).name.length+1)}}HEAP32[p>>2]=program.maxUniformLength}else if(pname==35722){if(!program.maxAttributeLength){for(var i=0;i<GLctx.getProgramParameter(program,35721);++i){program.maxAttributeLength=Math.max(program.maxAttributeLength,GLctx.getActiveAttrib(program,i).name.length+1)}}HEAP32[p>>2]=program.maxAttributeLength}else if(pname==35381){if(!program.maxUniformBlockNameLength){for(var i=0;i<GLctx.getProgramParameter(program,35382);++i){program.maxUniformBlockNameLength=Math.max(program.maxUniformBlockNameLength,GLctx.getActiveUniformBlockName(program,i).length+1)}}HEAP32[p>>2]=program.maxUniformBlockNameLength}else{HEAP32[p>>2]=GLctx.getProgramParameter(program,pname)}};var _glGetShaderInfoLog=(shader,maxLength,length,infoLog)=>{var log=GLctx.getShaderInfoLog(GL.shaders[shader]);if(log===null)log="(unknown error)";var numBytesWrittenExclNull=maxLength>0&&infoLog?stringToUTF8(log,infoLog,maxLength):0;if(length)HEAP32[length>>2]=numBytesWrittenExclNull};var _glGetShaderiv=(shader,pname,p)=>{if(!p){GL.recordError(1281);return}if(pname==35716){var log=GLctx.getShaderInfoLog(GL.shaders[shader]);if(log===null)log="(unknown error)";var logLength=log?log.length+1:0;HEAP32[p>>2]=logLength}else if(pname==35720){var source=GLctx.getShaderSource(GL.shaders[shader]);var sourceLength=source?source.length+1:0;HEAP32[p>>2]=sourceLength}else{HEAP32[p>>2]=GLctx.getShaderParameter(GL.shaders[shader],pname)}};var _glGetString=name_=>{var ret=GL.stringCache[name_];if(!ret){switch(name_){case 7939:ret=stringToNewUTF8(webglGetExtensions().join(" "));break;case 7936:case 7937:case 37445:case 37446:var s=GLctx.getParameter(name_);if(!s){GL.recordError(1280)}ret=s?stringToNewUTF8(s):0;break;case 7938:var glVersion=GLctx.getParameter(7938);if(GL.currentContext.version>=2)glVersion=`OpenGL ES 3.0 (${glVersion})`;else{glVersion=`OpenGL ES 2.0 (${glVersion})`}ret=stringToNewUTF8(glVersion);break;case 35724:var glslVersion=GLctx.getParameter(35724);var ver_re=/^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;var ver_num=glslVersion.match(ver_re);if(ver_num!==null){if(ver_num[1].length==3)ver_num[1]=ver_num[1]+"0";glslVersion=`OpenGL ES GLSL ES ${ver_num[1]} (${glslVersion})`}ret=stringToNewUTF8(glslVersion);break;default:GL.recordError(1280)}GL.stringCache[name_]=ret}return ret};var _glGetSynciv=(sync,pname,bufSize,length,values)=>{if(bufSize<0){GL.recordError(1281);return}if(!values){GL.recordError(1281);return}var ret=GLctx.getSyncParameter(GL.syncs[sync],pname);if(ret!==null){HEAP32[values>>2]=ret;if(length)HEAP32[length>>2]=1}};var _glGetUniformBlockIndex=(program,uniformBlockName)=>GLctx.getUniformBlockIndex(GL.programs[program],UTF8ToString(uniformBlockName));var jstoi_q=str=>parseInt(str);var webglGetLeftBracePos=name=>name.slice(-1)=="]"&&name.lastIndexOf("[");var webglPrepareUniformLocationsBeforeFirstUse=program=>{var uniformLocsById=program.uniformLocsById,uniformSizeAndIdsByName=program.uniformSizeAndIdsByName,i,j;if(!uniformLocsById){program.uniformLocsById=uniformLocsById={};program.uniformArrayNamesById={};for(i=0;i<GLctx.getProgramParameter(program,35718);++i){var u=GLctx.getActiveUniform(program,i);var nm=u.name;var sz=u.size;var lb=webglGetLeftBracePos(nm);var arrayName=lb>0?nm.slice(0,lb):nm;var id=program.uniformIdCounter;program.uniformIdCounter+=sz;uniformSizeAndIdsByName[arrayName]=[sz,id];for(j=0;j<sz;++j){uniformLocsById[id]=j;program.uniformArrayNamesById[id++]=arrayName}}}};var _glGetUniformLocation=(program,name)=>{name=UTF8ToString(name);if(program=GL.programs[program]){webglPrepareUniformLocationsBeforeFirstUse(program);var uniformLocsById=program.uniformLocsById;var arrayIndex=0;var uniformBaseName=name;var leftBrace=webglGetLeftBracePos(name);if(leftBrace>0){arrayIndex=jstoi_q(name.slice(leftBrace+1))>>>0;uniformBaseName=name.slice(0,leftBrace)}var sizeAndId=program.uniformSizeAndIdsByName[uniformBaseName];if(sizeAndId&&arrayIndex<sizeAndId[0]){arrayIndex+=sizeAndId[1];if(uniformLocsById[arrayIndex]=uniformLocsById[arrayIndex]||GLctx.getUniformLocation(program,name)){return arrayIndex}}}else{GL.recordError(1281)}return-1};var _glLinkProgram=program=>{program=GL.programs[program];GLctx.linkProgram(program);program.uniformLocsById=0;program.uniformSizeAndIdsByName={}};var _glPixelStorei=(pname,param)=>{if(pname==3317){GL.unpackAlignment=param}else if(pname==3314){GL.unpackRowLength=param}GLctx.pixelStorei(pname,param)};var _glReadBuffer=x0=>GLctx.readBuffer(x0);var computeUnpackAlignedImageSize=(width,height,sizePerPixel)=>{function roundedToNextMultipleOf(x,y){return x+y-1&-y}var plainRowSize=(GL.unpackRowLength||width)*sizePerPixel;var alignedRowSize=roundedToNextMultipleOf(plainRowSize,GL.unpackAlignment);return height*alignedRowSize};var colorChannelsInGlTextureFormat=format=>{var colorChannels={5:3,6:4,8:2,29502:3,29504:4,26917:2,26918:2,29846:3,29847:4};return colorChannels[format-6402]||1};var heapObjectForWebGLType=type=>{type-=5120;if(type==0)return HEAP8;if(type==1)return HEAPU8;if(type==2)return HEAP16;if(type==4)return HEAP32;if(type==6)return HEAPF32;if(type==5||type==28922||type==28520||type==30779||type==30782)return HEAPU32;return HEAPU16};var toTypedArrayIndex=(pointer,heap)=>pointer>>>31-Math.clz32(heap.BYTES_PER_ELEMENT);var emscriptenWebGLGetTexPixelData=(type,format,width,height,pixels,internalFormat)=>{var heap=heapObjectForWebGLType(type);var sizePerPixel=colorChannelsInGlTextureFormat(format)*heap.BYTES_PER_ELEMENT;var bytes=computeUnpackAlignedImageSize(width,height,sizePerPixel);return heap.subarray(toTypedArrayIndex(pixels,heap),toTypedArrayIndex(pixels+bytes,heap))};var _glReadPixels=(x,y,width,height,format,type,pixels)=>{if(GL.currentContext.version>=2){if(GLctx.currentPixelPackBufferBinding){GLctx.readPixels(x,y,width,height,format,type,pixels);return}var heap=heapObjectForWebGLType(type);var target=toTypedArrayIndex(pixels,heap);GLctx.readPixels(x,y,width,height,format,type,heap,target);return}var pixelData=emscriptenWebGLGetTexPixelData(type,format,width,height,pixels,format);if(!pixelData){GL.recordError(1280);return}GLctx.readPixels(x,y,width,height,format,type,pixelData)};var _glRenderbufferStorage=(x0,x1,x2,x3)=>GLctx.renderbufferStorage(x0,x1,x2,x3);var _glRenderbufferStorageMultisample=(x0,x1,x2,x3,x4)=>GLctx.renderbufferStorageMultisample(x0,x1,x2,x3,x4);var _glScissor=(x0,x1,x2,x3)=>GLctx.scissor(x0,x1,x2,x3);var _glShaderSource=(shader,count,string,length)=>{var source=GL.getSource(shader,count,string,length);GLctx.shaderSource(GL.shaders[shader],source)};var _glTexImage2D=(target,level,internalFormat,width,height,border,format,type,pixels)=>{if(GL.currentContext.version>=2){if(GLctx.currentPixelUnpackBufferBinding){GLctx.texImage2D(target,level,internalFormat,width,height,border,format,type,pixels);return}if(pixels){var heap=heapObjectForWebGLType(type);var index=toTypedArrayIndex(pixels,heap);GLctx.texImage2D(target,level,internalFormat,width,height,border,format,type,heap,index);return}}var pixelData=pixels?emscriptenWebGLGetTexPixelData(type,format,width,height,pixels,internalFormat):null;GLctx.texImage2D(target,level,internalFormat,width,height,border,format,type,pixelData)};var _glTexImage3D=(target,level,internalFormat,width,height,depth,border,format,type,pixels)=>{if(GLctx.currentPixelUnpackBufferBinding){GLctx.texImage3D(target,level,internalFormat,width,height,depth,border,format,type,pixels)}else if(pixels){var heap=heapObjectForWebGLType(type);GLctx.texImage3D(target,level,internalFormat,width,height,depth,border,format,type,heap,toTypedArrayIndex(pixels,heap))}else{GLctx.texImage3D(target,level,internalFormat,width,height,depth,border,format,type,null)}};var _glTexParameterf=(x0,x1,x2)=>GLctx.texParameterf(x0,x1,x2);var _glTexParameteri=(x0,x1,x2)=>GLctx.texParameteri(x0,x1,x2);var _glTexStorage2D=(x0,x1,x2,x3,x4)=>GLctx.texStorage2D(x0,x1,x2,x3,x4);var _glTexSubImage3D=(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,pixels)=>{if(GLctx.currentPixelUnpackBufferBinding){GLctx.texSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,pixels)}else if(pixels){var heap=heapObjectForWebGLType(type);GLctx.texSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,heap,toTypedArrayIndex(pixels,heap))}else{GLctx.texSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,null)}};var _glTransformFeedbackVaryings=(program,count,varyings,bufferMode)=>{program=GL.programs[program];var vars=[];for(var i=0;i<count;i++)vars.push(UTF8ToString(HEAP32[varyings+i*4>>2]));GLctx.transformFeedbackVaryings(program,vars,bufferMode)};var webglGetUniformLocation=location=>{var p=GLctx.currentProgram;if(p){var webglLoc=p.uniformLocsById[location];if(typeof webglLoc=="number"){p.uniformLocsById[location]=webglLoc=GLctx.getUniformLocation(p,p.uniformArrayNamesById[location]+(webglLoc>0?`[${webglLoc}]`:""))}return webglLoc}else{GL.recordError(1282)}};var _glUniform1f=(location,v0)=>{GLctx.uniform1f(webglGetUniformLocation(location),v0)};var _glUniform1i=(location,v0)=>{GLctx.uniform1i(webglGetUniformLocation(location),v0)};var miniTempWebGLIntBuffers=[];var _glUniform1iv=(location,count,value)=>{if(GL.currentContext.version>=2){count&&GLctx.uniform1iv(webglGetUniformLocation(location),HEAP32,value>>2,count);return}if(count<=288){var view=miniTempWebGLIntBuffers[count];for(var i=0;i<count;++i){view[i]=HEAP32[value+4*i>>2]}}else{var view=HEAP32.subarray(value>>2,value+count*4>>2)}GLctx.uniform1iv(webglGetUniformLocation(location),view)};var _glUniform1ui=(location,v0)=>{GLctx.uniform1ui(webglGetUniformLocation(location),v0)};var _glUniform1uiv=(location,count,value)=>{count&&GLctx.uniform1uiv(webglGetUniformLocation(location),HEAPU32,value>>2,count)};var _glUniform2f=(location,v0,v1)=>{GLctx.uniform2f(webglGetUniformLocation(location),v0,v1)};var miniTempWebGLFloatBuffers=[];var _glUniform2fv=(location,count,value)=>{if(GL.currentContext.version>=2){count&&GLctx.uniform2fv(webglGetUniformLocation(location),HEAPF32,value>>2,count*2);return}if(count<=144){var view=miniTempWebGLFloatBuffers[2*count];for(var i=0;i<2*count;i+=2){view[i]=HEAPF32[value+4*i>>2];view[i+1]=HEAPF32[value+(4*i+4)>>2]}}else{var view=HEAPF32.subarray(value>>2,value+count*8>>2)}GLctx.uniform2fv(webglGetUniformLocation(location),view)};var _glUniform2iv=(location,count,value)=>{if(GL.currentContext.version>=2){count&&GLctx.uniform2iv(webglGetUniformLocation(location),HEAP32,value>>2,count*2);return}if(count<=144){var view=miniTempWebGLIntBuffers[2*count];for(var i=0;i<2*count;i+=2){view[i]=HEAP32[value+4*i>>2];view[i+1]=HEAP32[value+(4*i+4)>>2]}}else{var view=HEAP32.subarray(value>>2,value+count*8>>2)}GLctx.uniform2iv(webglGetUniformLocation(location),view)};var _glUniform3fv=(location,count,value)=>{if(GL.currentContext.version>=2){count&&GLctx.uniform3fv(webglGetUniformLocation(location),HEAPF32,value>>2,count*3);return}if(count<=96){var view=miniTempWebGLFloatBuffers[3*count];for(var i=0;i<3*count;i+=3){view[i]=HEAPF32[value+4*i>>2];view[i+1]=HEAPF32[value+(4*i+4)>>2];view[i+2]=HEAPF32[value+(4*i+8)>>2]}}else{var view=HEAPF32.subarray(value>>2,value+count*12>>2)}GLctx.uniform3fv(webglGetUniformLocation(location),view)};var _glUniform4f=(location,v0,v1,v2,v3)=>{GLctx.uniform4f(webglGetUniformLocation(location),v0,v1,v2,v3)};var _glUniform4fv=(location,count,value)=>{if(GL.currentContext.version>=2){count&&GLctx.uniform4fv(webglGetUniformLocation(location),HEAPF32,value>>2,count*4);return}if(count<=72){var view=miniTempWebGLFloatBuffers[4*count];var heap=HEAPF32;value=value>>2;for(var i=0;i<4*count;i+=4){var dst=value+i;view[i]=heap[dst];view[i+1]=heap[dst+1];view[i+2]=heap[dst+2];view[i+3]=heap[dst+3]}}else{var view=HEAPF32.subarray(value>>2,value+count*16>>2)}GLctx.uniform4fv(webglGetUniformLocation(location),view)};var _glUniformBlockBinding=(program,uniformBlockIndex,uniformBlockBinding)=>{program=GL.programs[program];GLctx.uniformBlockBinding(program,uniformBlockIndex,uniformBlockBinding)};var _glUniformMatrix3fv=(location,count,transpose,value)=>{if(GL.currentContext.version>=2){count&&GLctx.uniformMatrix3fv(webglGetUniformLocation(location),!!transpose,HEAPF32,value>>2,count*9);return}if(count<=32){var view=miniTempWebGLFloatBuffers[9*count];for(var i=0;i<9*count;i+=9){view[i]=HEAPF32[value+4*i>>2];view[i+1]=HEAPF32[value+(4*i+4)>>2];view[i+2]=HEAPF32[value+(4*i+8)>>2];view[i+3]=HEAPF32[value+(4*i+12)>>2];view[i+4]=HEAPF32[value+(4*i+16)>>2];view[i+5]=HEAPF32[value+(4*i+20)>>2];view[i+6]=HEAPF32[value+(4*i+24)>>2];view[i+7]=HEAPF32[value+(4*i+28)>>2];view[i+8]=HEAPF32[value+(4*i+32)>>2]}}else{var view=HEAPF32.subarray(value>>2,value+count*36>>2)}GLctx.uniformMatrix3fv(webglGetUniformLocation(location),!!transpose,view)};var _glUniformMatrix4fv=(location,count,transpose,value)=>{if(GL.currentContext.version>=2){count&&GLctx.uniformMatrix4fv(webglGetUniformLocation(location),!!transpose,HEAPF32,value>>2,count*16);return}if(count<=18){var view=miniTempWebGLFloatBuffers[16*count];var heap=HEAPF32;value=value>>2;for(var i=0;i<16*count;i+=16){var dst=value+i;view[i]=heap[dst];view[i+1]=heap[dst+1];view[i+2]=heap[dst+2];view[i+3]=heap[dst+3];view[i+4]=heap[dst+4];view[i+5]=heap[dst+5];view[i+6]=heap[dst+6];view[i+7]=heap[dst+7];view[i+8]=heap[dst+8];view[i+9]=heap[dst+9];view[i+10]=heap[dst+10];view[i+11]=heap[dst+11];view[i+12]=heap[dst+12];view[i+13]=heap[dst+13];view[i+14]=heap[dst+14];view[i+15]=heap[dst+15]}}else{var view=HEAPF32.subarray(value>>2,value+count*64>>2)}GLctx.uniformMatrix4fv(webglGetUniformLocation(location),!!transpose,view)};var _glUseProgram=program=>{program=GL.programs[program];GLctx.useProgram(program);GLctx.currentProgram=program};var _glVertexAttrib4f=(x0,x1,x2,x3,x4)=>GLctx.vertexAttrib4f(x0,x1,x2,x3,x4);var _glVertexAttribDivisor=(index,divisor)=>{GLctx.vertexAttribDivisor(index,divisor)};var _glVertexAttribI4ui=(x0,x1,x2,x3,x4)=>GLctx.vertexAttribI4ui(x0,x1,x2,x3,x4);var _glVertexAttribIPointer=(index,size,type,stride,ptr)=>{GLctx.vertexAttribIPointer(index,size,type,stride,ptr)};var _glVertexAttribPointer=(index,size,type,normalized,stride,ptr)=>{GLctx.vertexAttribPointer(index,size,type,!!normalized,stride,ptr)};var _glViewport=(x0,x1,x2,x3)=>GLctx.viewport(x0,x1,x2,x3);var GodotRuntime={get_func:function(ptr){return wasmTable.get(ptr)},error:function(){err.apply(null,Array.from(arguments))},print:function(){out.apply(null,Array.from(arguments))},malloc:function(p_size){return _malloc(p_size)},free:function(p_ptr){_free(p_ptr)},getHeapValue:function(p_ptr,p_type){return getValue(p_ptr,p_type)},setHeapValue:function(p_ptr,p_value,p_type){setValue(p_ptr,p_value,p_type)},heapSub:function(p_heap,p_ptr,p_len){const bytes=p_heap.BYTES_PER_ELEMENT;return p_heap.subarray(p_ptr/bytes,p_ptr/bytes+p_len)},heapSlice:function(p_heap,p_ptr,p_len){const bytes=p_heap.BYTES_PER_ELEMENT;return p_heap.slice(p_ptr/bytes,p_ptr/bytes+p_len)},heapCopy:function(p_dst,p_src,p_ptr){const bytes=p_src.BYTES_PER_ELEMENT;return p_dst.set(p_src,p_ptr/bytes)},parseString:function(p_ptr){return UTF8ToString(p_ptr)},parseStringArray:function(p_ptr,p_size){const strings=[];const ptrs=GodotRuntime.heapSub(HEAP32,p_ptr,p_size);ptrs.forEach(function(ptr){strings.push(GodotRuntime.parseString(ptr))});return strings},strlen:function(p_str){return lengthBytesUTF8(p_str)},allocString:function(p_str){const length=GodotRuntime.strlen(p_str)+1;const c_str=GodotRuntime.malloc(length);stringToUTF8(p_str,c_str,length);return c_str},allocStringArray:function(p_strings){const size=p_strings.length;const c_ptr=GodotRuntime.malloc(size*4);for(let i=0;i<size;i++){HEAP32[(c_ptr>>2)+i]=GodotRuntime.allocString(p_strings[i])}return c_ptr},freeStringArray:function(p_ptr,p_len){for(let i=0;i<p_len;i++){GodotRuntime.free(HEAP32[(p_ptr>>2)+i])}GodotRuntime.free(p_ptr)},stringToHeap:function(p_str,p_ptr,p_len){return stringToUTF8Array(p_str,HEAP8,p_ptr,p_len)}};var GodotConfig={canvas:null,locale:"en",canvas_resize_policy:2,virtual_keyboard:false,persistent_drops:false,on_execute:null,on_exit:null,init_config:function(p_opts){GodotConfig.canvas_resize_policy=p_opts["canvasResizePolicy"];GodotConfig.canvas=p_opts["canvas"];GodotConfig.locale=p_opts["locale"]||GodotConfig.locale;GodotConfig.virtual_keyboard=p_opts["virtualKeyboard"];GodotConfig.persistent_drops=!!p_opts["persistentDrops"];GodotConfig.on_execute=p_opts["onExecute"];GodotConfig.on_exit=p_opts["onExit"];if(p_opts["focusCanvas"]){GodotConfig.canvas.focus()}},locate_file:function(file){return Module["locateFile"](file)},clear:function(){GodotConfig.canvas=null;GodotConfig.locale="en";GodotConfig.canvas_resize_policy=2;GodotConfig.virtual_keyboard=false;GodotConfig.persistent_drops=false;GodotConfig.on_execute=null;GodotConfig.on_exit=null}};var GodotFS={ENOENT:44,_idbfs:false,_syncing:false,_mount_points:[],is_persistent:function(){return GodotFS._idbfs?1:0},init:function(persistentPaths){GodotFS._idbfs=false;if(!Array.isArray(persistentPaths)){return Promise.reject(new Error("Persistent paths must be an array"))}if(!persistentPaths.length){return Promise.resolve()}GodotFS._mount_points=persistentPaths.slice();function createRecursive(dir){try{FS.stat(dir)}catch(e){if(e.errno!==GodotFS.ENOENT){GodotRuntime.error(e)}FS.mkdirTree(dir)}}GodotFS._mount_points.forEach(function(path){createRecursive(path);FS.mount(IDBFS,{},path)});return new Promise(function(resolve,reject){FS.syncfs(true,function(err){if(err){GodotFS._mount_points=[];GodotFS._idbfs=false;GodotRuntime.print(`IndexedDB not available: ${err.message}`)}else{GodotFS._idbfs=true}resolve(err)})})},deinit:function(){GodotFS._mount_points.forEach(function(path){try{FS.unmount(path)}catch(e){GodotRuntime.print("Already unmounted",e)}if(GodotFS._idbfs&&IDBFS.dbs[path]){IDBFS.dbs[path].close();delete IDBFS.dbs[path]}});GodotFS._mount_points=[];GodotFS._idbfs=false;GodotFS._syncing=false},sync:function(){if(GodotFS._syncing){GodotRuntime.error("Already syncing!");return Promise.resolve()}GodotFS._syncing=true;return new Promise(function(resolve,reject){FS.syncfs(false,function(error){if(error){GodotRuntime.error(`Failed to save IDB file system: ${error.message}`)}GodotFS._syncing=false;resolve(error)})})},copy_to_fs:function(path,buffer){const idx=path.lastIndexOf("/");let dir="/";if(idx>0){dir=path.slice(0,idx)}try{FS.stat(dir)}catch(e){if(e.errno!==GodotFS.ENOENT){GodotRuntime.error(e)}FS.mkdirTree(dir)}FS.writeFile(path,new Uint8Array(buffer))}};var GodotOS={request_quit:function(){},_async_cbs:[],_fs_sync_promise:null,atexit:function(p_promise_cb){GodotOS._async_cbs.push(p_promise_cb)},cleanup:function(exit_code){const cb=GodotConfig.on_exit;GodotFS.deinit();GodotConfig.clear();if(cb){cb(exit_code)}},finish_async:function(callback){GodotOS._fs_sync_promise.then(function(err){const promises=[];GodotOS._async_cbs.forEach(function(cb){promises.push(new Promise(cb))});return Promise.all(promises)}).then(function(){return GodotFS.sync()}).then(function(err){setTimeout(function(){callback()},0)})}};var GodotAudio={MAX_VOLUME_CHANNELS:8,GodotChannel:{CHANNEL_L:0,CHANNEL_R:1,CHANNEL_C:3,CHANNEL_LFE:4,CHANNEL_RL:5,CHANNEL_RR:6,CHANNEL_SL:7,CHANNEL_SR:8},WebChannel:{CHANNEL_L:0,CHANNEL_R:1,CHANNEL_SL:2,CHANNEL_SR:3,CHANNEL_C:4,CHANNEL_LFE:5},samples:null,Sample:class Sample{static getSample(id){if(!GodotAudio.samples.has(id)){throw new ReferenceError(`Could not find sample "${id}"`)}return GodotAudio.samples.get(id)}static getSampleOrNull(id){return GodotAudio.samples.get(id)??null}static create(params,options={}){const sample=new GodotAudio.Sample(params,options);GodotAudio.samples.set(params.id,sample);return sample}static delete(id){GodotAudio.samples.delete(id)}constructor(params,options={}){this.id=params.id;this._audioBuffer=null;this.numberOfChannels=options.numberOfChannels??2;this.sampleRate=options.sampleRate??44100;this.loopMode=options.loopMode??"disabled";this.loopBegin=options.loopBegin??0;this.loopEnd=options.loopEnd??0;this.setAudioBuffer(params.audioBuffer)}getAudioBuffer(){return this._duplicateAudioBuffer()}setAudioBuffer(val){this._audioBuffer=val}clear(){this.setAudioBuffer(null);GodotAudio.Sample.delete(this.id)}_duplicateAudioBuffer(){if(this._audioBuffer==null){throw new Error("couldn't duplicate a null audioBuffer")}const channels=new Array(this._audioBuffer.numberOfChannels);for(let i=0;i<this._audioBuffer.numberOfChannels;i++){const channel=new Float32Array(this._audioBuffer.getChannelData(i));channels[i]=channel}const buffer=GodotAudio.ctx.createBuffer(this.numberOfChannels,this._audioBuffer.length,this._audioBuffer.sampleRate);for(let i=0;i<channels.length;i++){buffer.copyToChannel(channels[i],i,0)}return buffer}},SampleNodeBus:class SampleNodeBus{static create(bus){return new GodotAudio.SampleNodeBus(bus)}constructor(bus){const NUMBER_OF_WEB_CHANNELS=6;this._bus=bus;this._channelSplitter=GodotAudio.ctx.createChannelSplitter(NUMBER_OF_WEB_CHANNELS);this._l=GodotAudio.ctx.createGain();this._r=GodotAudio.ctx.createGain();this._sl=GodotAudio.ctx.createGain();this._sr=GodotAudio.ctx.createGain();this._c=GodotAudio.ctx.createGain();this._lfe=GodotAudio.ctx.createGain();this._channelMerger=GodotAudio.ctx.createChannelMerger(NUMBER_OF_WEB_CHANNELS);this._channelSplitter.connect(this._l,GodotAudio.WebChannel.CHANNEL_L).connect(this._channelMerger,GodotAudio.WebChannel.CHANNEL_L,GodotAudio.WebChannel.CHANNEL_L);this._channelSplitter.connect(this._r,GodotAudio.WebChannel.CHANNEL_R).connect(this._channelMerger,GodotAudio.WebChannel.CHANNEL_L,GodotAudio.WebChannel.CHANNEL_R);this._channelSplitter.connect(this._sl,GodotAudio.WebChannel.CHANNEL_SL).connect(this._channelMerger,GodotAudio.WebChannel.CHANNEL_L,GodotAudio.WebChannel.CHANNEL_SL);this._channelSplitter.connect(this._sr,GodotAudio.WebChannel.CHANNEL_SR).connect(this._channelMerger,GodotAudio.WebChannel.CHANNEL_L,GodotAudio.WebChannel.CHANNEL_SR);this._channelSplitter.connect(this._c,GodotAudio.WebChannel.CHANNEL_C).connect(this._channelMerger,GodotAudio.WebChannel.CHANNEL_L,GodotAudio.WebChannel.CHANNEL_C);this._channelSplitter.connect(this._lfe,GodotAudio.WebChannel.CHANNEL_L).connect(this._channelMerger,GodotAudio.WebChannel.CHANNEL_L,GodotAudio.WebChannel.CHANNEL_LFE);this._channelMerger.connect(this._bus.getInputNode())}getInputNode(){return this._channelSplitter}getOutputNode(){return this._channelMerger}setVolume(volume){if(volume.length!==GodotAudio.MAX_VOLUME_CHANNELS){throw new Error(`Volume length isn't "${GodotAudio.MAX_VOLUME_CHANNELS}", is ${volume.length} instead`)}this._l.gain.value=volume[GodotAudio.GodotChannel.CHANNEL_L]??0;this._r.gain.value=volume[GodotAudio.GodotChannel.CHANNEL_R]??0;this._sl.gain.value=volume[GodotAudio.GodotChannel.CHANNEL_SL]??0;this._sr.gain.value=volume[GodotAudio.GodotChannel.CHANNEL_SR]??0;this._c.gain.value=volume[GodotAudio.GodotChannel.CHANNEL_C]??0;this._lfe.gain.value=volume[GodotAudio.GodotChannel.CHANNEL_LFE]??0}clear(){this._bus=null;this._channelSplitter.disconnect();this._channelSplitter=null;this._l.disconnect();this._l=null;this._r.disconnect();this._r=null;this._sl.disconnect();this._sl=null;this._sr.disconnect();this._sr=null;this._c.disconnect();this._c=null;this._lfe.disconnect();this._lfe=null;this._channelMerger.disconnect();this._channelMerger=null}},sampleNodes:null,SampleNode:class SampleNode{static getSampleNode(id){if(!GodotAudio.sampleNodes.has(id)){throw new ReferenceError(`Could not find sample node "${id}"`)}return GodotAudio.sampleNodes.get(id)}static getSampleNodeOrNull(id){return GodotAudio.sampleNodes.get(id)??null}static stopSampleNode(id){const sampleNode=GodotAudio.SampleNode.getSampleNodeOrNull(id);if(sampleNode==null){return}sampleNode.stop()}static pauseSampleNode(id,enable){const sampleNode=GodotAudio.SampleNode.getSampleNodeOrNull(id);if(sampleNode==null){return}sampleNode.pause(enable)}static create(params,options={}){const sampleNode=new GodotAudio.SampleNode(params,options);GodotAudio.sampleNodes.set(params.id,sampleNode);return sampleNode}static delete(id){GodotAudio.sampleNodes.delete(id)}constructor(params,options={}){this.id=params.id;this.streamObjectId=params.streamObjectId;this.offset=options.offset??0;this._playbackPosition=options.offset;this.startTime=options.startTime??0;this.isPaused=false;this.isStarted=false;this.isCanceled=false;this.pauseTime=0;this._playbackRate=44100;this.loopMode=options.loopMode??this.getSample().loopMode??"disabled";this._pitchScale=options.pitchScale??1;this._sourceStartTime=0;this._sampleNodeBuses=new Map;this._source=GodotAudio.ctx.createBufferSource();this._onended=null;this._positionWorklet=null;this.setPlaybackRate(options.playbackRate??44100);this._source.buffer=this.getSample().getAudioBuffer();this._addEndedListener();const bus=GodotAudio.Bus.getBus(params.busIndex);const sampleNodeBus=this.getSampleNodeBus(bus);sampleNodeBus.setVolume(options.volume);this.connectPositionWorklet(options.start).catch(err=>{const newErr=new Error("Failed to create PositionWorklet.");newErr.cause=err;GodotRuntime.error(newErr)})}getPlaybackRate(){return this._playbackRate}getPlaybackPosition(){return this._playbackPosition}setPlaybackRate(val){this._playbackRate=val;this._syncPlaybackRate()}getPitchScale(){return this._pitchScale}setPitchScale(val){this._pitchScale=val;this._syncPlaybackRate()}getSample(){return GodotAudio.Sample.getSample(this.streamObjectId)}getOutputNode(){return this._source}start(){if(this.isStarted){return}this._resetSourceStartTime();this._source.start(this.startTime,this.offset);this.isStarted=true}stop(){this.clear()}restart(){this.isPaused=false;this.pauseTime=0;this._resetSourceStartTime();this._restart()}pause(enable=true){if(enable){this._pause();return}this._unpause()}connect(node){return this.getOutputNode().connect(node)}setVolumes(buses,volumes){for(let busIdx=0;busIdx<buses.length;busIdx++){const sampleNodeBus=this.getSampleNodeBus(buses[busIdx]);sampleNodeBus.setVolume(volumes.slice(busIdx*GodotAudio.MAX_VOLUME_CHANNELS,busIdx*GodotAudio.MAX_VOLUME_CHANNELS+GodotAudio.MAX_VOLUME_CHANNELS))}}getSampleNodeBus(bus){if(!this._sampleNodeBuses.has(bus)){const sampleNodeBus=GodotAudio.SampleNodeBus.create(bus);this._sampleNodeBuses.set(bus,sampleNodeBus);this._source.connect(sampleNodeBus.getInputNode())}return this._sampleNodeBuses.get(bus)}async connectPositionWorklet(start){await GodotAudio.audioPositionWorkletPromise;if(this.isCanceled){return}this._source.connect(this.getPositionWorklet());if(start){this.start()}}getPositionWorklet(){if(this._positionWorklet!=null){return this._positionWorklet}this._positionWorklet=new AudioWorkletNode(GodotAudio.ctx,"godot-position-reporting-processor");this._positionWorklet.port.onmessage=event=>{switch(event.data["type"]){case"position":this._playbackPosition=parseInt(event.data.data,10)/this.getSample().sampleRate+this.offset;break;default:}};return this._positionWorklet}clear(){this.isCanceled=true;this.isPaused=false;this.pauseTime=0;if(this._source!=null){this._source.removeEventListener("ended",this._onended);this._onended=null;if(this.isStarted){this._source.stop()}this._source.disconnect();this._source=null}for(const sampleNodeBus of this._sampleNodeBuses.values()){sampleNodeBus.clear()}this._sampleNodeBuses.clear();if(this._positionWorklet){this._positionWorklet.disconnect();this._positionWorklet.port.onmessage=null;this._positionWorklet.port.postMessage({type:"ended"});this._positionWorklet=null}GodotAudio.SampleNode.delete(this.id)}_resetSourceStartTime(){this._sourceStartTime=GodotAudio.ctx.currentTime}_syncPlaybackRate(){this._source.playbackRate.value=this.getPlaybackRate()*this.getPitchScale()}_restart(){if(this._source!=null){this._source.disconnect()}this._source=GodotAudio.ctx.createBufferSource();this._source.buffer=this.getSample().getAudioBuffer();for(const sampleNodeBus of this._sampleNodeBuses.values()){this.connect(sampleNodeBus.getInputNode())}this._addEndedListener();const pauseTime=this.isPaused?this.pauseTime:0;if(this._positionWorklet!=null){this._positionWorklet.port.postMessage({type:"clear"});this._source.connect(this._positionWorklet)}this._source.start(this.startTime,this.offset+pauseTime);this.isStarted=true}_pause(){if(!this.isStarted){return}this.isPaused=true;this.pauseTime=(GodotAudio.ctx.currentTime-this._sourceStartTime)/this.getPlaybackRate();this._source.stop()}_unpause(){this._restart();this.isPaused=false;this.pauseTime=0}_addEndedListener(){if(this._onended!=null){this._source.removeEventListener("ended",this._onended)}const self=this;this._onended=_=>{if(self.isPaused){return}switch(self.getSample().loopMode){case"disabled":{const id=this.id;self.stop();if(GodotAudio.sampleFinishedCallback!=null){const idCharPtr=GodotRuntime.allocString(id);GodotAudio.sampleFinishedCallback(idCharPtr);GodotRuntime.free(idCharPtr)}}break;case"forward":case"backward":self.restart();break;default:}};this._source.addEventListener("ended",this._onended)}},buses:null,busSolo:null,Bus:class Bus{static getCount(){return GodotAudio.buses.length}static setCount(val){const buses=GodotAudio.buses;if(val===buses.length){return}if(val<buses.length){const deletedBuses=buses.slice(val);for(let i=0;i<deletedBuses.length;i++){const deletedBus=deletedBuses[i];deletedBus.clear()}GodotAudio.buses=buses.slice(0,val);return}for(let i=GodotAudio.buses.length;i<val;i++){GodotAudio.Bus.create()}}static getBus(index){if(index<0||index>=GodotAudio.buses.length){throw new ReferenceError(`invalid bus index "${index}"`)}return GodotAudio.buses[index]}static getBusOrNull(index){if(index<0||index>=GodotAudio.buses.length){return null}return GodotAudio.buses[index]}static move(fromIndex,toIndex){const movedBus=GodotAudio.Bus.getBusOrNull(fromIndex);if(movedBus==null){return}const buses=GodotAudio.buses.filter((_,i)=>i!==fromIndex);buses.splice(toIndex-1,0,movedBus);GodotAudio.buses=buses}static addAt(index){const newBus=GodotAudio.Bus.create();if(index!==newBus.getId()){GodotAudio.Bus.move(newBus.getId(),index)}}static create(){const newBus=new GodotAudio.Bus;const isFirstBus=GodotAudio.buses.length===0;GodotAudio.buses.push(newBus);if(isFirstBus){newBus.setSend(null)}else{newBus.setSend(GodotAudio.Bus.getBus(0))}return newBus}constructor(){this._sampleNodes=new Set;this.isSolo=false;this._send=null;this._gainNode=GodotAudio.ctx.createGain();this._soloNode=GodotAudio.ctx.createGain();this._muteNode=GodotAudio.ctx.createGain();this._gainNode.connect(this._soloNode).connect(this._muteNode)}getId(){return GodotAudio.buses.indexOf(this)}getVolumeDb(){return GodotAudio.linear_to_db(this._gainNode.gain.value)}setVolumeDb(val){const linear=GodotAudio.db_to_linear(val);if(isFinite(linear)){this._gainNode.gain.value=linear}}getSend(){return this._send}setSend(val){this._send=val;if(val==null){if(this.getId()==0){this.getOutputNode().connect(GodotAudio.ctx.destination);return}throw new Error(`Cannot send to "${val}" without the bus being at index 0 (current index: ${this.getId()})`)}this.connect(val)}getInputNode(){return this._gainNode}getOutputNode(){return this._muteNode}mute(enable){this._muteNode.gain.value=enable?0:1}solo(enable){if(this.isSolo===enable){return}if(enable){if(GodotAudio.busSolo!=null&&GodotAudio.busSolo!==this){GodotAudio.busSolo._disableSolo()}this._enableSolo();return}this._disableSolo()}addSampleNode(sampleNode){this._sampleNodes.add(sampleNode);sampleNode.getOutputNode().connect(this.getInputNode())}removeSampleNode(sampleNode){this._sampleNodes.delete(sampleNode);sampleNode.getOutputNode().disconnect()}connect(bus){if(bus==null){throw new Error("cannot connect to null bus")}this.getOutputNode().disconnect();this.getOutputNode().connect(bus.getInputNode());return bus}clear(){GodotAudio.buses=GodotAudio.buses.filter(v=>v!==this)}_syncSampleNodes(){const sampleNodes=Array.from(this._sampleNodes);for(let i=0;i<sampleNodes.length;i++){const sampleNode=sampleNodes[i];sampleNode.getOutputNode().disconnect();sampleNode.getOutputNode().connect(this.getInputNode())}}_enableSolo(){this.isSolo=true;GodotAudio.busSolo=this;this._soloNode.gain.value=1;const otherBuses=GodotAudio.buses.filter(otherBus=>otherBus!==this);for(let i=0;i<otherBuses.length;i++){const otherBus=otherBuses[i];otherBus._soloNode.gain.value=0}}_disableSolo(){this.isSolo=false;GodotAudio.busSolo=null;this._soloNode.gain.value=1;const otherBuses=GodotAudio.buses.filter(otherBus=>otherBus!==this);for(let i=0;i<otherBuses.length;i++){const otherBus=otherBuses[i];otherBus._soloNode.gain.value=1}}},sampleFinishedCallback:null,ctx:null,input:null,driver:null,interval:0,audioPositionWorkletPromise:null,linear_to_db:function(linear){return Math.log(linear)*8.685889638065037},db_to_linear:function(db){return Math.exp(db*.11512925464970228)},init:function(mix_rate,latency,onstatechange,onlatencyupdate){GodotAudio.samples=new Map;GodotAudio.sampleNodes=new Map;GodotAudio.buses=[];GodotAudio.busSolo=null;const opts={};if(mix_rate){GodotAudio.sampleRate=mix_rate;opts["sampleRate"]=mix_rate}const ctx=new(window.AudioContext||window.webkitAudioContext)(opts);GodotAudio.ctx=ctx;ctx.onstatechange=function(){let state=0;switch(ctx.state){case"suspended":state=0;break;case"running":state=1;break;case"closed":state=2;break;default:}onstatechange(state)};ctx.onstatechange();GodotAudio.interval=setInterval(function(){let computed_latency=0;if(ctx.baseLatency){computed_latency+=GodotAudio.ctx.baseLatency}if(ctx.outputLatency){computed_latency+=GodotAudio.ctx.outputLatency}onlatencyupdate(computed_latency)},1e3);GodotOS.atexit(GodotAudio.close_async);const path=GodotConfig.locate_file("godot.audio.position.worklet.js");GodotAudio.audioPositionWorkletPromise=ctx.audioWorklet.addModule(path);return ctx.destination.channelCount},create_input:function(callback){if(GodotAudio.input){return 0}function gotMediaInput(stream){try{GodotAudio.input=GodotAudio.ctx.createMediaStreamSource(stream);callback(GodotAudio.input)}catch(e){GodotRuntime.error("Failed creating input.",e)}}if(navigator.mediaDevices&&navigator.mediaDevices.getUserMedia){navigator.mediaDevices.getUserMedia({audio:true}).then(gotMediaInput,function(e){GodotRuntime.error("Error getting user media.",e)})}else{if(!navigator.getUserMedia){navigator.getUserMedia=navigator.webkitGetUserMedia||navigator.mozGetUserMedia}if(!navigator.getUserMedia){GodotRuntime.error("getUserMedia not available.");return 1}navigator.getUserMedia({audio:true},gotMediaInput,function(e){GodotRuntime.print(e)})}return 0},close_async:function(resolve,reject){const ctx=GodotAudio.ctx;GodotAudio.ctx=null;if(!ctx){resolve();return}if(GodotAudio.interval){clearInterval(GodotAudio.interval);GodotAudio.interval=0}if(GodotAudio.input){GodotAudio.input.disconnect();GodotAudio.input=null}let closed=Promise.resolve();if(GodotAudio.driver){closed=GodotAudio.driver.close()}closed.then(function(){return ctx.close()}).then(function(){ctx.onstatechange=null;resolve()}).catch(function(e){ctx.onstatechange=null;GodotRuntime.error("Error closing AudioContext",e);resolve()})},start_sample:function(playbackObjectId,streamObjectId,busIndex,startOptions){GodotAudio.SampleNode.stopSampleNode(playbackObjectId);GodotAudio.SampleNode.create({busIndex:busIndex,id:playbackObjectId,streamObjectId:streamObjectId},startOptions)},stop_sample:function(playbackObjectId){GodotAudio.SampleNode.stopSampleNode(playbackObjectId)},sample_set_pause:function(playbackObjectId,pause){GodotAudio.SampleNode.pauseSampleNode(playbackObjectId,pause)},update_sample_pitch_scale:function(playbackObjectId,pitchScale){const sampleNode=GodotAudio.SampleNode.getSampleNodeOrNull(playbackObjectId);if(sampleNode==null){return}sampleNode.setPitchScale(pitchScale)},sample_set_volumes_linear:function(playbackObjectId,busIndexes,volumes){const sampleNode=GodotAudio.SampleNode.getSampleNodeOrNull(playbackObjectId);if(sampleNode==null){return}const buses=busIndexes.map(busIndex=>GodotAudio.Bus.getBus(busIndex));sampleNode.setVolumes(buses,volumes)},set_sample_bus_count:function(count){GodotAudio.Bus.setCount(count)},remove_sample_bus:function(index){const bus=GodotAudio.Bus.getBusOrNull(index);if(bus==null){return}bus.clear()},add_sample_bus:function(atPos){GodotAudio.Bus.addAt(atPos)},move_sample_bus:function(busIndex,toPos){GodotAudio.Bus.move(busIndex,toPos)},set_sample_bus_send:function(busIndex,sendIndex){const bus=GodotAudio.Bus.getBusOrNull(busIndex);if(bus==null){return}let targetBus=GodotAudio.Bus.getBusOrNull(sendIndex);if(targetBus==null){targetBus=GodotAudio.Bus.getBus(0)}bus.setSend(targetBus)},set_sample_bus_volume_db:function(busIndex,volumeDb){const bus=GodotAudio.Bus.getBusOrNull(busIndex);if(bus==null){return}bus.setVolumeDb(volumeDb)},set_sample_bus_solo:function(busIndex,enable){const bus=GodotAudio.Bus.getBusOrNull(busIndex);if(bus==null){return}bus.solo(enable)},set_sample_bus_mute:function(busIndex,enable){const bus=GodotAudio.Bus.getBusOrNull(busIndex);if(bus==null){return}bus.mute(enable)}};function _godot_audio_get_sample_playback_position(playbackObjectIdStrPtr){const playbackObjectId=GodotRuntime.parseString(playbackObjectIdStrPtr);const sampleNode=GodotAudio.SampleNode.getSampleNodeOrNull(playbackObjectId);if(sampleNode==null){return 0}return sampleNode.getPlaybackPosition()}function _godot_audio_has_script_processor(){return GodotAudio.ctx&&GodotAudio.ctx.createScriptProcessor?1:0}function _godot_audio_has_worklet(){return GodotAudio.ctx&&GodotAudio.ctx.audioWorklet?1:0}function _godot_audio_init(p_mix_rate,p_latency,p_state_change,p_latency_update){const statechange=GodotRuntime.get_func(p_state_change);const latencyupdate=GodotRuntime.get_func(p_latency_update);const mix_rate=GodotRuntime.getHeapValue(p_mix_rate,"i32");const channels=GodotAudio.init(mix_rate,p_latency,statechange,latencyupdate);GodotRuntime.setHeapValue(p_mix_rate,GodotAudio.ctx.sampleRate,"i32");return channels}function _godot_audio_input_start(){return GodotAudio.create_input(function(input){input.connect(GodotAudio.driver.get_node())})}function _godot_audio_input_stop(){if(GodotAudio.input){const tracks=GodotAudio.input["mediaStream"]["getTracks"]();for(let i=0;i<tracks.length;i++){tracks[i]["stop"]()}GodotAudio.input.disconnect();GodotAudio.input=null}}function _godot_audio_is_available(){if(!(window.AudioContext||window.webkitAudioContext)){return 0}return 1}function _godot_audio_resume(){if(GodotAudio.ctx&&GodotAudio.ctx.state!=="running"){GodotAudio.ctx.resume()}}function _godot_audio_sample_bus_add(atPos){GodotAudio.add_sample_bus(atPos)}function _godot_audio_sample_bus_move(fromPos,toPos){GodotAudio.move_sample_bus(fromPos,toPos)}function _godot_audio_sample_bus_remove(index){GodotAudio.remove_sample_bus(index)}function _godot_audio_sample_bus_set_count(count){GodotAudio.set_sample_bus_count(count)}function _godot_audio_sample_bus_set_mute(bus,enable){GodotAudio.set_sample_bus_mute(bus,Boolean(enable))}function _godot_audio_sample_bus_set_send(bus,sendIndex){GodotAudio.set_sample_bus_send(bus,sendIndex)}function _godot_audio_sample_bus_set_solo(bus,enable){GodotAudio.set_sample_bus_solo(bus,Boolean(enable))}function _godot_audio_sample_bus_set_volume_db(bus,volumeDb){GodotAudio.set_sample_bus_volume_db(bus,volumeDb)}function _godot_audio_sample_is_active(playbackObjectIdStrPtr){const playbackObjectId=GodotRuntime.parseString(playbackObjectIdStrPtr);return Number(GodotAudio.sampleNodes.has(playbackObjectId))}function _godot_audio_sample_register_stream(streamObjectIdStrPtr,framesPtr,framesTotal,loopModeStrPtr,loopBegin,loopEnd){const BYTES_PER_FLOAT32=4;const streamObjectId=GodotRuntime.parseString(streamObjectIdStrPtr);const loopMode=GodotRuntime.parseString(loopModeStrPtr);const numberOfChannels=2;const sampleRate=GodotAudio.ctx.sampleRate;const subLeft=GodotRuntime.heapSub(HEAPF32,framesPtr,framesTotal);const subRight=GodotRuntime.heapSub(HEAPF32,framesPtr+framesTotal*BYTES_PER_FLOAT32,framesTotal);const audioBuffer=GodotAudio.ctx.createBuffer(numberOfChannels,framesTotal,sampleRate);audioBuffer.copyToChannel(new Float32Array(subLeft),0,0);audioBuffer.copyToChannel(new Float32Array(subRight),1,0);GodotAudio.Sample.create({id:streamObjectId,audioBuffer:audioBuffer},{loopBegin:loopBegin,loopEnd:loopEnd,loopMode:loopMode,numberOfChannels:numberOfChannels,sampleRate:sampleRate})}function _godot_audio_sample_set_finished_callback(callbackPtr){GodotAudio.sampleFinishedCallback=GodotRuntime.get_func(callbackPtr)}function _godot_audio_sample_set_pause(playbackObjectIdStrPtr,pause){const playbackObjectId=GodotRuntime.parseString(playbackObjectIdStrPtr);GodotAudio.sample_set_pause(playbackObjectId,Boolean(pause))}function _godot_audio_sample_set_volumes_linear(playbackObjectIdStrPtr,busesPtr,busesSize,volumesPtr,volumesSize){const playbackObjectId=GodotRuntime.parseString(playbackObjectIdStrPtr);const buses=GodotRuntime.heapSub(HEAP32,busesPtr,busesSize);const volumes=GodotRuntime.heapSub(HEAPF32,volumesPtr,volumesSize);GodotAudio.sample_set_volumes_linear(playbackObjectId,Array.from(buses),volumes)}function _godot_audio_sample_start(playbackObjectIdStrPtr,streamObjectIdStrPtr,busIndex,offset,pitchScale,volumePtr){const playbackObjectId=GodotRuntime.parseString(playbackObjectIdStrPtr);const streamObjectId=GodotRuntime.parseString(streamObjectIdStrPtr);const volume=GodotRuntime.heapSub(HEAPF32,volumePtr,8);const startOptions={offset:offset,volume:volume,playbackRate:1,pitchScale:pitchScale,start:true};GodotAudio.start_sample(playbackObjectId,streamObjectId,busIndex,startOptions)}function _godot_audio_sample_stop(playbackObjectIdStrPtr){const playbackObjectId=GodotRuntime.parseString(playbackObjectIdStrPtr);GodotAudio.stop_sample(playbackObjectId)}function _godot_audio_sample_stream_is_registered(streamObjectIdStrPtr){const streamObjectId=GodotRuntime.parseString(streamObjectIdStrPtr);return Number(GodotAudio.Sample.getSampleOrNull(streamObjectId)!=null)}function _godot_audio_sample_unregister_stream(streamObjectIdStrPtr){const streamObjectId=GodotRuntime.parseString(streamObjectIdStrPtr);const sample=GodotAudio.Sample.getSampleOrNull(streamObjectId);if(sample!=null){sample.clear()}}function _godot_audio_sample_update_pitch_scale(playbackObjectIdStrPtr,pitchScale){const playbackObjectId=GodotRuntime.parseString(playbackObjectIdStrPtr);GodotAudio.update_sample_pitch_scale(playbackObjectId,pitchScale)}var GodotAudioScript={script:null,create:function(buffer_length,channel_count){GodotAudioScript.script=GodotAudio.ctx.createScriptProcessor(buffer_length,2,channel_count);GodotAudio.driver=GodotAudioScript;return GodotAudioScript.script.bufferSize},start:function(p_in_buf,p_in_size,p_out_buf,p_out_size,onprocess){GodotAudioScript.script.onaudioprocess=function(event){const inb=GodotRuntime.heapSub(HEAPF32,p_in_buf,p_in_size);const input=event.inputBuffer;if(GodotAudio.input){const inlen=input.getChannelData(0).length;for(let ch=0;ch<2;ch++){const data=input.getChannelData(ch);for(let s=0;s<inlen;s++){inb[s*2+ch]=data[s]}}}onprocess();const outb=GodotRuntime.heapSub(HEAPF32,p_out_buf,p_out_size);const output=event.outputBuffer;const channels=output.numberOfChannels;for(let ch=0;ch<channels;ch++){const data=output.getChannelData(ch);for(let sample=0;sample<data.length;sample++){data[sample]=outb[sample*channels+ch]}}};GodotAudioScript.script.connect(GodotAudio.ctx.destination)},get_node:function(){return GodotAudioScript.script},close:function(){return new Promise(function(resolve,reject){GodotAudioScript.script.disconnect();GodotAudioScript.script.onaudioprocess=null;GodotAudioScript.script=null;resolve()})}};function _godot_audio_script_create(buffer_length,channel_count){const buf_len=GodotRuntime.getHeapValue(buffer_length,"i32");try{const out_len=GodotAudioScript.create(buf_len,channel_count);GodotRuntime.setHeapValue(buffer_length,out_len,"i32")}catch(e){GodotRuntime.error("Error starting AudioDriverScriptProcessor",e);return 1}return 0}function _godot_audio_script_start(p_in_buf,p_in_size,p_out_buf,p_out_size,p_cb){const onprocess=GodotRuntime.get_func(p_cb);GodotAudioScript.start(p_in_buf,p_in_size,p_out_buf,p_out_size,onprocess)}var GodotAudioWorklet={promise:null,worklet:null,ring_buffer:null,create:function(channels){const path=GodotConfig.locate_file("godot.audio.worklet.js");GodotAudioWorklet.promise=GodotAudio.ctx.audioWorklet.addModule(path).then(function(){GodotAudioWorklet.worklet=new AudioWorkletNode(GodotAudio.ctx,"godot-processor",{outputChannelCount:[channels]});return Promise.resolve()});GodotAudio.driver=GodotAudioWorklet},start:function(in_buf,out_buf,state){GodotAudioWorklet.promise.then(function(){const node=GodotAudioWorklet.worklet;node.connect(GodotAudio.ctx.destination);node.port.postMessage({cmd:"start",data:[state,in_buf,out_buf]});node.port.onmessage=function(event){GodotRuntime.error(event.data)}})},start_no_threads:function(p_out_buf,p_out_size,out_callback,p_in_buf,p_in_size,in_callback){function RingBuffer(){let wpos=0;let rpos=0;let pending_samples=0;const wbuf=new Float32Array(p_out_size);function send(port){if(pending_samples===0){return}const buffer=GodotRuntime.heapSub(HEAPF32,p_out_buf,p_out_size);const size=buffer.length;const tot_sent=pending_samples;out_callback(wpos,pending_samples);if(wpos+pending_samples>=size){const high=size-wpos;wbuf.set(buffer.subarray(wpos,size));pending_samples-=high;wpos=0}if(pending_samples>0){wbuf.set(buffer.subarray(wpos,wpos+pending_samples),tot_sent-pending_samples)}port.postMessage({cmd:"chunk",data:wbuf.subarray(0,tot_sent)});wpos+=pending_samples;pending_samples=0}this.receive=function(recv_buf){const buffer=GodotRuntime.heapSub(HEAPF32,p_in_buf,p_in_size);const from=rpos;let to_write=recv_buf.length;let high=0;if(rpos+to_write>=p_in_size){high=p_in_size-rpos;buffer.set(recv_buf.subarray(0,high),rpos);to_write-=high;rpos=0}if(to_write){buffer.set(recv_buf.subarray(high,to_write),rpos)}in_callback(from,recv_buf.length);rpos+=to_write};this.consumed=function(size,port){pending_samples+=size;send(port)}}GodotAudioWorklet.ring_buffer=new RingBuffer;GodotAudioWorklet.promise.then(function(){const node=GodotAudioWorklet.worklet;const buffer=GodotRuntime.heapSlice(HEAPF32,p_out_buf,p_out_size);node.connect(GodotAudio.ctx.destination);node.port.postMessage({cmd:"start_nothreads",data:[buffer,p_in_size]});node.port.onmessage=function(event){if(!GodotAudioWorklet.worklet){return}if(event.data["cmd"]==="read"){const read=event.data["data"];GodotAudioWorklet.ring_buffer.consumed(read,GodotAudioWorklet.worklet.port)}else if(event.data["cmd"]==="input"){const buf=event.data["data"];if(buf.length>p_in_size){GodotRuntime.error("Input chunk is too big");return}GodotAudioWorklet.ring_buffer.receive(buf)}else{GodotRuntime.error(event.data)}}})},get_node:function(){return GodotAudioWorklet.worklet},close:function(){return new Promise(function(resolve,reject){if(GodotAudioWorklet.promise===null){return}const p=GodotAudioWorklet.promise;p.then(function(){GodotAudioWorklet.worklet.port.postMessage({cmd:"stop",data:null});GodotAudioWorklet.worklet.disconnect();GodotAudioWorklet.worklet.port.onmessage=null;GodotAudioWorklet.worklet=null;GodotAudioWorklet.promise=null;resolve()}).catch(function(err){GodotRuntime.error(err)})})}};function _godot_audio_worklet_create(channels){try{GodotAudioWorklet.create(channels)}catch(e){GodotRuntime.error("Error starting AudioDriverWorklet",e);return 1}return 0}function _godot_audio_worklet_start_no_threads(p_out_buf,p_out_size,p_out_callback,p_in_buf,p_in_size,p_in_callback){const out_callback=GodotRuntime.get_func(p_out_callback);const in_callback=GodotRuntime.get_func(p_in_callback);GodotAudioWorklet.start_no_threads(p_out_buf,p_out_size,out_callback,p_in_buf,p_in_size,in_callback)}function _godot_js_config_canvas_id_get(p_ptr,p_ptr_max){GodotRuntime.stringToHeap(`#${GodotConfig.canvas.id}`,p_ptr,p_ptr_max)}function _godot_js_config_locale_get(p_ptr,p_ptr_max){GodotRuntime.stringToHeap(GodotConfig.locale,p_ptr,p_ptr_max)}var GodotDisplayCursor={shape:"default",visible:true,cursors:{},set_style:function(style){GodotConfig.canvas.style.cursor=style},set_shape:function(shape){GodotDisplayCursor.shape=shape;let css=shape;if(shape in GodotDisplayCursor.cursors){const c=GodotDisplayCursor.cursors[shape];css=`url("${c.url}") ${c.x} ${c.y}, default`}if(GodotDisplayCursor.visible){GodotDisplayCursor.set_style(css)}},clear:function(){GodotDisplayCursor.set_style("");GodotDisplayCursor.shape="default";GodotDisplayCursor.visible=true;Object.keys(GodotDisplayCursor.cursors).forEach(function(key){URL.revokeObjectURL(GodotDisplayCursor.cursors[key]);delete GodotDisplayCursor.cursors[key]})},lockPointer:function(){const canvas=GodotConfig.canvas;if(canvas.requestPointerLock){canvas.requestPointerLock()}},releasePointer:function(){if(document.exitPointerLock){document.exitPointerLock()}},isPointerLocked:function(){return document.pointerLockElement===GodotConfig.canvas}};var GodotEventListeners={handlers:[],has:function(target,event,method,capture){return GodotEventListeners.handlers.findIndex(function(e){return e.target===target&&e.event===event&&e.method===method&&e.capture===capture})!==-1},add:function(target,event,method,capture){if(GodotEventListeners.has(target,event,method,capture)){return}function Handler(p_target,p_event,p_method,p_capture){this.target=p_target;this.event=p_event;this.method=p_method;this.capture=p_capture}GodotEventListeners.handlers.push(new Handler(target,event,method,capture));target.addEventListener(event,method,capture)},clear:function(){GodotEventListeners.handlers.forEach(function(h){h.target.removeEventListener(h.event,h.method,h.capture)});GodotEventListeners.handlers.length=0}};var _emscripten_webgl_do_get_current_context=()=>GL.currentContext?GL.currentContext.handle:0;var _emscripten_webgl_get_current_context=_emscripten_webgl_do_get_current_context;var GodotDisplayScreen={desired_size:[0,0],hidpi:true,getPixelRatio:function(){return GodotDisplayScreen.hidpi?window.devicePixelRatio||1:1},isFullscreen:function(){const elem=document.fullscreenElement||document.mozFullscreenElement||document.webkitFullscreenElement||document.msFullscreenElement;if(elem){return elem===GodotConfig.canvas}return document.fullscreen||document.mozFullScreen||document.webkitIsFullscreen},hasFullscreen:function(){return document.fullscreenEnabled||document.mozFullScreenEnabled||document.webkitFullscreenEnabled},requestFullscreen:function(){if(!GodotDisplayScreen.hasFullscreen()){return 1}const canvas=GodotConfig.canvas;try{const promise=(canvas.requestFullscreen||canvas.msRequestFullscreen||canvas.mozRequestFullScreen||canvas.mozRequestFullscreen||canvas.webkitRequestFullscreen).call(canvas);if(promise){promise.catch(function(){})}}catch(e){return 1}return 0},exitFullscreen:function(){if(!GodotDisplayScreen.isFullscreen()){return 0}try{const promise=document.exitFullscreen();if(promise){promise.catch(function(){})}}catch(e){return 1}return 0},_updateGL:function(){const gl_context_handle=_emscripten_webgl_get_current_context();const gl=GL.getContext(gl_context_handle);if(gl){GL.resizeOffscreenFramebuffer(gl)}},updateSize:function(){const isFullscreen=GodotDisplayScreen.isFullscreen();const wantsFullWindow=GodotConfig.canvas_resize_policy===2;const noResize=GodotConfig.canvas_resize_policy===0;const dWidth=GodotDisplayScreen.desired_size[0];const dHeight=GodotDisplayScreen.desired_size[1];const canvas=GodotConfig.canvas;let width=dWidth;let height=dHeight;if(noResize){if(canvas.width!==width||canvas.height!==height){GodotDisplayScreen.desired_size=[canvas.width,canvas.height];GodotDisplayScreen._updateGL();return 1}return 0}const scale=GodotDisplayScreen.getPixelRatio();if(isFullscreen||wantsFullWindow){width=window.innerWidth*scale;height=window.innerHeight*scale}const csw=`${width/scale}px`;const csh=`${height/scale}px`;if(canvas.style.width!==csw||canvas.style.height!==csh||canvas.width!==width||canvas.height!==height){canvas.width=width;canvas.height=height;canvas.style.width=csw;canvas.style.height=csh;GodotDisplayScreen._updateGL();return 1}return 0}};var GodotDisplayVK={textinput:null,textarea:null,available:function(){return GodotConfig.virtual_keyboard&&"ontouchstart"in window},init:function(input_cb){function create(what){const elem=document.createElement(what);elem.style.display="none";elem.style.position="absolute";elem.style.zIndex="-1";elem.style.background="transparent";elem.style.padding="0px";elem.style.margin="0px";elem.style.overflow="hidden";elem.style.width="0px";elem.style.height="0px";elem.style.border="0px";elem.style.outline="none";elem.readonly=true;elem.disabled=true;GodotEventListeners.add(elem,"input",function(evt){const c_str=GodotRuntime.allocString(elem.value);input_cb(c_str,elem.selectionEnd);GodotRuntime.free(c_str)},false);GodotEventListeners.add(elem,"blur",function(evt){elem.style.display="none";elem.readonly=true;elem.disabled=true},false);GodotConfig.canvas.insertAdjacentElement("beforebegin",elem);return elem}GodotDisplayVK.textinput=create("input");GodotDisplayVK.textarea=create("textarea");GodotDisplayVK.updateSize()},show:function(text,type,start,end){if(!GodotDisplayVK.textinput||!GodotDisplayVK.textarea){return}if(GodotDisplayVK.textinput.style.display!==""||GodotDisplayVK.textarea.style.display!==""){GodotDisplayVK.hide()}GodotDisplayVK.updateSize();let elem=GodotDisplayVK.textinput;switch(type){case 0:elem.type="text";elem.inputmode="";break;case 1:elem=GodotDisplayVK.textarea;break;case 2:elem.type="text";elem.inputmode="numeric";break;case 3:elem.type="text";elem.inputmode="decimal";break;case 4:elem.type="tel";elem.inputmode="";break;case 5:elem.type="email";elem.inputmode="";break;case 6:elem.type="password";elem.inputmode="";break;case 7:elem.type="url";elem.inputmode="";break;default:elem.type="text";elem.inputmode="";break}elem.readonly=false;elem.disabled=false;elem.value=text;elem.style.display="block";elem.focus();elem.setSelectionRange(start,end)},hide:function(){if(!GodotDisplayVK.textinput||!GodotDisplayVK.textarea){return}[GodotDisplayVK.textinput,GodotDisplayVK.textarea].forEach(function(elem){elem.blur();elem.style.display="none";elem.value=""})},updateSize:function(){if(!GodotDisplayVK.textinput||!GodotDisplayVK.textarea){return}const rect=GodotConfig.canvas.getBoundingClientRect();function update(elem){elem.style.left=`${rect.left}px`;elem.style.top=`${rect.top}px`;elem.style.width=`${rect.width}px`;elem.style.height=`${rect.height}px`}update(GodotDisplayVK.textinput);update(GodotDisplayVK.textarea)},clear:function(){if(GodotDisplayVK.textinput){GodotDisplayVK.textinput.remove();GodotDisplayVK.textinput=null}if(GodotDisplayVK.textarea){GodotDisplayVK.textarea.remove();GodotDisplayVK.textarea=null}}};var GodotDisplay={window_icon:"",getDPI:function(){const dpi=Math.round(window.devicePixelRatio*96);return dpi>=96?dpi:96}};function _godot_js_display_alert(p_text){window.alert(GodotRuntime.parseString(p_text))}function _godot_js_display_canvas_focus(){GodotConfig.canvas.focus()}function _godot_js_display_canvas_is_focused(){return document.activeElement===GodotConfig.canvas}function _godot_js_display_clipboard_get(callback){const func=GodotRuntime.get_func(callback);try{navigator.clipboard.readText().then(function(result){const ptr=GodotRuntime.allocString(result);func(ptr);GodotRuntime.free(ptr)}).catch(function(e){})}catch(e){}}function _godot_js_display_clipboard_set(p_text){const text=GodotRuntime.parseString(p_text);if(!navigator.clipboard||!navigator.clipboard.writeText){return 1}navigator.clipboard.writeText(text).catch(function(e){GodotRuntime.error("Setting OS clipboard is only possible from an input callback for the Web platform. Exception:",e)});return 0}function _godot_js_display_cursor_is_hidden(){return!GodotDisplayCursor.visible}function _godot_js_display_cursor_is_locked(){return GodotDisplayCursor.isPointerLocked()?1:0}function _godot_js_display_cursor_lock_set(p_lock){if(p_lock){GodotDisplayCursor.lockPointer()}else{GodotDisplayCursor.releasePointer()}}function _godot_js_display_cursor_set_custom_shape(p_shape,p_ptr,p_len,p_hotspot_x,p_hotspot_y){const shape=GodotRuntime.parseString(p_shape);const old_shape=GodotDisplayCursor.cursors[shape];if(p_len>0){const png=new Blob([GodotRuntime.heapSlice(HEAPU8,p_ptr,p_len)],{type:"image/png"});const url=URL.createObjectURL(png);GodotDisplayCursor.cursors[shape]={url:url,x:p_hotspot_x,y:p_hotspot_y}}else{delete GodotDisplayCursor.cursors[shape]}if(shape===GodotDisplayCursor.shape){GodotDisplayCursor.set_shape(GodotDisplayCursor.shape)}if(old_shape){URL.revokeObjectURL(old_shape.url)}}function _godot_js_display_cursor_set_shape(p_string){GodotDisplayCursor.set_shape(GodotRuntime.parseString(p_string))}function _godot_js_display_cursor_set_visible(p_visible){const visible=p_visible!==0;if(visible===GodotDisplayCursor.visible){return}GodotDisplayCursor.visible=visible;if(visible){GodotDisplayCursor.set_shape(GodotDisplayCursor.shape)}else{GodotDisplayCursor.set_style("none")}}function _godot_js_display_desired_size_set(width,height){GodotDisplayScreen.desired_size=[width,height];GodotDisplayScreen.updateSize()}function _godot_js_display_fullscreen_cb(callback){const canvas=GodotConfig.canvas;const func=GodotRuntime.get_func(callback);function change_cb(evt){if(evt.target===canvas){func(GodotDisplayScreen.isFullscreen())}}GodotEventListeners.add(document,"fullscreenchange",change_cb,false);GodotEventListeners.add(document,"mozfullscreenchange",change_cb,false);GodotEventListeners.add(document,"webkitfullscreenchange",change_cb,false)}function _godot_js_display_fullscreen_exit(){return GodotDisplayScreen.exitFullscreen()}function _godot_js_display_fullscreen_request(){return GodotDisplayScreen.requestFullscreen()}function _godot_js_display_has_webgl(p_version){if(p_version!==1&&p_version!==2){return false}try{return!!document.createElement("canvas").getContext(p_version===2?"webgl2":"webgl")}catch(e){}return false}function _godot_js_display_is_swap_ok_cancel(){const win=["Windows","Win64","Win32","WinCE"];const plat=navigator.platform||"";if(win.indexOf(plat)!==-1){return 1}return 0}function _godot_js_display_notification_cb(callback,p_enter,p_exit,p_in,p_out){const canvas=GodotConfig.canvas;const func=GodotRuntime.get_func(callback);const notif=[p_enter,p_exit,p_in,p_out];["mouseover","mouseleave","focus","blur"].forEach(function(evt_name,idx){GodotEventListeners.add(canvas,evt_name,function(){func(notif[idx])},true)})}function _godot_js_display_pixel_ratio_get(){return GodotDisplayScreen.getPixelRatio()}function _godot_js_display_screen_dpi_get(){return GodotDisplay.getDPI()}function _godot_js_display_screen_size_get(width,height){const scale=GodotDisplayScreen.getPixelRatio();GodotRuntime.setHeapValue(width,window.screen.width*scale,"i32");GodotRuntime.setHeapValue(height,window.screen.height*scale,"i32")}function _godot_js_display_setup_canvas(p_width,p_height,p_fullscreen,p_hidpi){const canvas=GodotConfig.canvas;GodotEventListeners.add(canvas,"contextmenu",function(ev){ev.preventDefault()},false);GodotEventListeners.add(canvas,"webglcontextlost",function(ev){alert("WebGL context lost, please reload the page");ev.preventDefault()},false);GodotDisplayScreen.hidpi=!!p_hidpi;switch(GodotConfig.canvas_resize_policy){case 0:GodotDisplayScreen.desired_size=[canvas.width,canvas.height];break;case 1:GodotDisplayScreen.desired_size=[p_width,p_height];break;default:canvas.style.position="absolute";canvas.style.top=0;canvas.style.left=0;break}GodotDisplayScreen.updateSize();if(p_fullscreen){GodotDisplayScreen.requestFullscreen()}}function _godot_js_display_size_update(){const updated=GodotDisplayScreen.updateSize();if(updated){GodotDisplayVK.updateSize()}return updated}function _godot_js_display_touchscreen_is_available(){return"ontouchstart"in window}function _godot_js_display_tts_available(){return"speechSynthesis"in window}function _godot_js_display_vk_available(){return GodotDisplayVK.available()}function _godot_js_display_vk_cb(p_input_cb){const input_cb=GodotRuntime.get_func(p_input_cb);if(GodotDisplayVK.available()){GodotDisplayVK.init(input_cb)}}function _godot_js_display_vk_hide(){GodotDisplayVK.hide()}function _godot_js_display_vk_show(p_text,p_type,p_start,p_end){const text=GodotRuntime.parseString(p_text);const start=p_start>0?p_start:0;const end=p_end>0?p_end:start;GodotDisplayVK.show(text,p_type,start,end)}function _godot_js_display_window_blur_cb(callback){const func=GodotRuntime.get_func(callback);GodotEventListeners.add(window,"blur",function(){func()},false)}function _godot_js_display_window_icon_set(p_ptr,p_len){let link=document.getElementById("-gd-engine-icon");const old_icon=GodotDisplay.window_icon;if(p_ptr){if(link===null){link=document.createElement("link");link.rel="icon";link.id="-gd-engine-icon";document.head.appendChild(link)}const png=new Blob([GodotRuntime.heapSlice(HEAPU8,p_ptr,p_len)],{type:"image/png"});GodotDisplay.window_icon=URL.createObjectURL(png);link.href=GodotDisplay.window_icon}else{if(link){link.remove()}GodotDisplay.window_icon=null}if(old_icon){URL.revokeObjectURL(old_icon)}}function _godot_js_display_window_size_get(p_width,p_height){GodotRuntime.setHeapValue(p_width,GodotConfig.canvas.width,"i32");GodotRuntime.setHeapValue(p_height,GodotConfig.canvas.height,"i32")}function _godot_js_display_window_title_set(p_data){document.title=GodotRuntime.parseString(p_data)}function _godot_js_eval(p_js,p_use_global_ctx,p_union_ptr,p_byte_arr,p_byte_arr_write,p_callback){const js_code=GodotRuntime.parseString(p_js);let eval_ret=null;try{if(p_use_global_ctx){const global_eval=eval;eval_ret=global_eval(js_code)}else{eval_ret=eval(js_code)}}catch(e){GodotRuntime.error(e)}switch(typeof eval_ret){case"boolean":GodotRuntime.setHeapValue(p_union_ptr,eval_ret,"i32");return 1;case"number":GodotRuntime.setHeapValue(p_union_ptr,eval_ret,"double");return 3;case"string":GodotRuntime.setHeapValue(p_union_ptr,GodotRuntime.allocString(eval_ret),"*");return 4;case"object":if(eval_ret===null){break}if(ArrayBuffer.isView(eval_ret)&&!(eval_ret instanceof Uint8Array)){eval_ret=new Uint8Array(eval_ret.buffer)}else if(eval_ret instanceof ArrayBuffer){eval_ret=new Uint8Array(eval_ret)}if(eval_ret instanceof Uint8Array){const func=GodotRuntime.get_func(p_callback);const bytes_ptr=func(p_byte_arr,p_byte_arr_write,eval_ret.length);HEAPU8.set(eval_ret,bytes_ptr);return 29}break}return 0}var IDHandler={_last_id:0,_references:{},get:function(p_id){return IDHandler._references[p_id]},add:function(p_data){const id=++IDHandler._last_id;IDHandler._references[id]=p_data;return id},remove:function(p_id){delete IDHandler._references[p_id]}};var GodotFetch={onread:function(id,result){const obj=IDHandler.get(id);if(!obj){return}if(result.value){obj.chunks.push(result.value)}obj.reading=false;obj.done=result.done},onresponse:function(id,response){const obj=IDHandler.get(id);if(!obj){return}let chunked=false;response.headers.forEach(function(value,header){const v=value.toLowerCase().trim();const h=header.toLowerCase().trim();if(h==="transfer-encoding"&&v==="chunked"){chunked=true}});obj.status=response.status;obj.response=response;obj.reader=response.body?.getReader();obj.chunked=chunked},onerror:function(id,err){GodotRuntime.error(err);const obj=IDHandler.get(id);if(!obj){return}obj.error=err},create:function(method,url,headers,body){const obj={request:null,response:null,reader:null,error:null,done:false,reading:false,status:0,chunks:[]};const id=IDHandler.add(obj);const init={method:method,headers:headers,body:body};obj.request=fetch(url,init);obj.request.then(GodotFetch.onresponse.bind(null,id)).catch(GodotFetch.onerror.bind(null,id));return id},free:function(id){const obj=IDHandler.get(id);if(!obj){return}IDHandler.remove(id);if(!obj.request){return}obj.request.then(function(response){response.abort()}).catch(function(e){})},read:function(id){const obj=IDHandler.get(id);if(!obj){return}if(obj.reader&&!obj.reading){if(obj.done){obj.reader=null;return}obj.reading=true;obj.reader.read().then(GodotFetch.onread.bind(null,id)).catch(GodotFetch.onerror.bind(null,id))}else if(obj.reader==null&&obj.response.body==null){obj.reading=true;GodotFetch.onread(id,{value:undefined,done:true})}}};function _godot_js_fetch_create(p_method,p_url,p_headers,p_headers_size,p_body,p_body_size){const method=GodotRuntime.parseString(p_method);const url=GodotRuntime.parseString(p_url);const headers=GodotRuntime.parseStringArray(p_headers,p_headers_size);const body=p_body_size?GodotRuntime.heapSlice(HEAP8,p_body,p_body_size):null;return GodotFetch.create(method,url,headers.map(function(hv){const idx=hv.indexOf(":");if(idx<=0){return[]}return[hv.slice(0,idx).trim(),hv.slice(idx+1).trim()]}).filter(function(v){return v.length===2}),body)}function _godot_js_fetch_free(id){GodotFetch.free(id)}function _godot_js_fetch_http_status_get(p_id){const obj=IDHandler.get(p_id);if(!obj||!obj.response){return 0}return obj.status}function _godot_js_fetch_is_chunked(p_id){const obj=IDHandler.get(p_id);if(!obj||!obj.response){return-1}return obj.chunked?1:0}function _godot_js_fetch_read_chunk(p_id,p_buf,p_buf_size){const obj=IDHandler.get(p_id);if(!obj||!obj.response){return 0}let to_read=p_buf_size;const chunks=obj.chunks;while(to_read&&chunks.length){const chunk=obj.chunks[0];if(chunk.length>to_read){GodotRuntime.heapCopy(HEAP8,chunk.slice(0,to_read),p_buf);chunks[0]=chunk.slice(to_read);to_read=0}else{GodotRuntime.heapCopy(HEAP8,chunk,p_buf);to_read-=chunk.length;chunks.pop()}}if(!chunks.length){GodotFetch.read(p_id)}return p_buf_size-to_read}function _godot_js_fetch_read_headers(p_id,p_parse_cb,p_ref){const obj=IDHandler.get(p_id);if(!obj||!obj.response){return 1}const cb=GodotRuntime.get_func(p_parse_cb);const arr=[];obj.response.headers.forEach(function(v,h){arr.push(`${h}:${v}`)});const c_ptr=GodotRuntime.allocStringArray(arr);cb(arr.length,c_ptr,p_ref);GodotRuntime.freeStringArray(c_ptr,arr.length);return 0}function _godot_js_fetch_state_get(p_id){const obj=IDHandler.get(p_id);if(!obj){return-1}if(obj.error){return-1}if(!obj.response){return 0}if(obj.reader||obj.response.body==null&&!obj.done){return 1}if(obj.done){return 2}return-1}var GodotInputGamepads={samples:[],get_pads:function(){try{const pads=navigator.getGamepads();if(pads){return pads}return[]}catch(e){return[]}},get_samples:function(){return GodotInputGamepads.samples},get_sample:function(index){const samples=GodotInputGamepads.samples;return index<samples.length?samples[index]:null},sample:function(){const pads=GodotInputGamepads.get_pads();const samples=[];for(let i=0;i<pads.length;i++){const pad=pads[i];if(!pad){samples.push(null);continue}const s={standard:pad.mapping==="standard",buttons:[],axes:[],connected:pad.connected};for(let b=0;b<pad.buttons.length;b++){s.buttons.push(pad.buttons[b].value)}for(let a=0;a<pad.axes.length;a++){s.axes.push(pad.axes[a])}samples.push(s)}GodotInputGamepads.samples=samples},init:function(onchange){GodotInputGamepads.samples=[];function add(pad){const guid=GodotInputGamepads.get_guid(pad);const c_id=GodotRuntime.allocString(pad.id);const c_guid=GodotRuntime.allocString(guid);onchange(pad.index,1,c_id,c_guid);GodotRuntime.free(c_id);GodotRuntime.free(c_guid)}const pads=GodotInputGamepads.get_pads();for(let i=0;i<pads.length;i++){if(pads[i]){add(pads[i])}}GodotEventListeners.add(window,"gamepadconnected",function(evt){if(evt.gamepad){add(evt.gamepad)}},false);GodotEventListeners.add(window,"gamepaddisconnected",function(evt){if(evt.gamepad){onchange(evt.gamepad.index,0)}},false)},get_guid:function(pad){if(pad.mapping){return pad.mapping}const ua=navigator.userAgent;let os="Unknown";if(ua.indexOf("Android")>=0){os="Android"}else if(ua.indexOf("Linux")>=0){os="Linux"}else if(ua.indexOf("iPhone")>=0){os="iOS"}else if(ua.indexOf("Macintosh")>=0){os="MacOSX"}else if(ua.indexOf("Windows")>=0){os="Windows"}const id=pad.id;const exp1=/vendor: ([0-9a-f]{4}) product: ([0-9a-f]{4})/i;const exp2=/^([0-9a-f]+)-([0-9a-f]+)-/i;let vendor="";let product="";if(exp1.test(id)){const match=exp1.exec(id);vendor=match[1].padStart(4,"0");product=match[2].padStart(4,"0")}else if(exp2.test(id)){const match=exp2.exec(id);vendor=match[1].padStart(4,"0");product=match[2].padStart(4,"0")}if(!vendor||!product){return`${os}Unknown`}return os+vendor+product}};var GodotInputDragDrop={promises:[],pending_files:[],add_entry:function(entry){if(entry.isDirectory){GodotInputDragDrop.add_dir(entry)}else if(entry.isFile){GodotInputDragDrop.add_file(entry)}else{GodotRuntime.error("Unrecognized entry...",entry)}},add_dir:function(entry){GodotInputDragDrop.promises.push(new Promise(function(resolve,reject){const reader=entry.createReader();reader.readEntries(function(entries){for(let i=0;i<entries.length;i++){GodotInputDragDrop.add_entry(entries[i])}resolve()})}))},add_file:function(entry){GodotInputDragDrop.promises.push(new Promise(function(resolve,reject){entry.file(function(file){const reader=new FileReader;reader.onload=function(){const f={path:file.relativePath||file.webkitRelativePath,name:file.name,type:file.type,size:file.size,data:reader.result};if(!f["path"]){f["path"]=f["name"]}GodotInputDragDrop.pending_files.push(f);resolve()};reader.onerror=function(){GodotRuntime.print("Error reading file");reject()};reader.readAsArrayBuffer(file)},function(err){GodotRuntime.print("Error!");reject()})}))},process:function(resolve,reject){if(GodotInputDragDrop.promises.length===0){resolve();return}GodotInputDragDrop.promises.pop().then(function(){setTimeout(function(){GodotInputDragDrop.process(resolve,reject)},0)})},_process_event:function(ev,callback){ev.preventDefault();if(ev.dataTransfer.items){for(let i=0;i<ev.dataTransfer.items.length;i++){const item=ev.dataTransfer.items[i];let entry=null;if("getAsEntry"in item){entry=item.getAsEntry()}else if("webkitGetAsEntry"in item){entry=item.webkitGetAsEntry()}if(entry){GodotInputDragDrop.add_entry(entry)}}}else{GodotRuntime.error("File upload not supported")}new Promise(GodotInputDragDrop.process).then(function(){const DROP=`/tmp/drop-${parseInt(Math.random()*(1<<30),10)}/`;const drops=[];const files=[];FS.mkdir(DROP.slice(0,-1));GodotInputDragDrop.pending_files.forEach(elem=>{const path=elem["path"];GodotFS.copy_to_fs(DROP+path,elem["data"]);let idx=path.indexOf("/");if(idx===-1){drops.push(DROP+path)}else{const sub=path.substr(0,idx);idx=sub.indexOf("/");if(idx<0&&drops.indexOf(DROP+sub)===-1){drops.push(DROP+sub)}}files.push(DROP+path)});GodotInputDragDrop.promises=[];GodotInputDragDrop.pending_files=[];callback(drops);if(GodotConfig.persistent_drops){GodotOS.atexit(function(resolve,reject){GodotInputDragDrop.remove_drop(files,DROP);resolve()})}else{GodotInputDragDrop.remove_drop(files,DROP)}})},remove_drop:function(files,drop_path){const dirs=[drop_path.substr(0,drop_path.length-1)];files.forEach(function(file){FS.unlink(file);let dir=file.replace(drop_path,"");let idx=dir.lastIndexOf("/");while(idx>0){dir=dir.substr(0,idx);if(dirs.indexOf(drop_path+dir)===-1){dirs.push(drop_path+dir)}idx=dir.lastIndexOf("/")}});dirs.sort(function(a,b){const al=(a.match(/\//g)||[]).length;const bl=(b.match(/\//g)||[]).length;if(al>bl){return-1}else if(al<bl){return 1}return 0}).forEach(function(dir){FS.rmdir(dir)})},handler:function(callback){return function(ev){GodotInputDragDrop._process_event(ev,callback)}}};var GodotIME={ime:null,active:false,focusTimerIntervalId:-1,getModifiers:function(evt){return evt.shiftKey+0+(evt.altKey+0<<1)+(evt.ctrlKey+0<<2)+(evt.metaKey+0<<3)},ime_active:function(active){function clearFocusTimerInterval(){clearInterval(GodotIME.focusTimerIntervalId);GodotIME.focusTimerIntervalId=-1}function focusTimer(){if(GodotIME.ime==null){clearFocusTimerInterval();return}GodotIME.ime.focus()}if(GodotIME.focusTimerIntervalId>-1){clearFocusTimerInterval()}if(GodotIME.ime==null){return}GodotIME.active=active;if(active){GodotIME.ime.style.display="block";GodotIME.focusTimerIntervalId=setInterval(focusTimer,100)}else{GodotIME.ime.style.display="none";GodotConfig.canvas.focus()}},ime_position:function(x,y){if(GodotIME.ime==null){return}const canvas=GodotConfig.canvas;const rect=canvas.getBoundingClientRect();const rw=canvas.width/rect.width;const rh=canvas.height/rect.height;const clx=x/rw+rect.x;const cly=y/rh+rect.y;GodotIME.ime.style.left=`${clx}px`;GodotIME.ime.style.top=`${cly}px`},init:function(ime_cb,key_cb,code,key){function key_event_cb(pressed,evt){const modifiers=GodotIME.getModifiers(evt);GodotRuntime.stringToHeap(evt.code,code,32);GodotRuntime.stringToHeap(evt.key,key,32);key_cb(pressed,evt.repeat,modifiers);evt.preventDefault()}function ime_event_cb(event){if(GodotIME.ime==null){return}switch(event.type){case"compositionstart":ime_cb(0,null);GodotIME.ime.innerHTML="";break;case"compositionupdate":{const ptr=GodotRuntime.allocString(event.data);ime_cb(1,ptr);GodotRuntime.free(ptr)}break;case"compositionend":{const ptr=GodotRuntime.allocString(event.data);ime_cb(2,ptr);GodotRuntime.free(ptr);GodotIME.ime.innerHTML=""}break;default:}}const ime=document.createElement("div");ime.className="ime";ime.style.background="none";ime.style.opacity=0;ime.style.position="fixed";ime.style.textAlign="left";ime.style.fontSize="1px";ime.style.left="0px";ime.style.top="0px";ime.style.width="100%";ime.style.height="40px";ime.style.pointerEvents="none";ime.style.display="none";ime.contentEditable="true";GodotEventListeners.add(ime,"compositionstart",ime_event_cb,false);GodotEventListeners.add(ime,"compositionupdate",ime_event_cb,false);GodotEventListeners.add(ime,"compositionend",ime_event_cb,false);GodotEventListeners.add(ime,"keydown",key_event_cb.bind(null,1),false);GodotEventListeners.add(ime,"keyup",key_event_cb.bind(null,0),false);ime.onblur=function(){this.style.display="none";GodotConfig.canvas.focus();GodotIME.active=false};GodotConfig.canvas.parentElement.appendChild(ime);GodotIME.ime=ime},clear:function(){if(GodotIME.ime==null){return}if(GodotIME.focusTimerIntervalId>-1){clearInterval(GodotIME.focusTimerIntervalId);GodotIME.focusTimerIntervalId=-1}GodotIME.ime.remove();GodotIME.ime=null}};var GodotInput={getModifiers:function(evt){return evt.shiftKey+0+(evt.altKey+0<<1)+(evt.ctrlKey+0<<2)+(evt.metaKey+0<<3)},computePosition:function(evt,rect){const canvas=GodotConfig.canvas;const rw=canvas.width/rect.width;const rh=canvas.height/rect.height;const x=(evt.clientX-rect.x)*rw;const y=(evt.clientY-rect.y)*rh;return[x,y]}};function _godot_js_input_drop_files_cb(callback){const func=GodotRuntime.get_func(callback);const dropFiles=function(files){const args=files||[];if(!args.length){return}const argc=args.length;const argv=GodotRuntime.allocStringArray(args);func(argv,argc);GodotRuntime.freeStringArray(argv,argc)};const canvas=GodotConfig.canvas;GodotEventListeners.add(canvas,"dragover",function(ev){ev.preventDefault()},false);GodotEventListeners.add(canvas,"drop",GodotInputDragDrop.handler(dropFiles))}function _godot_js_input_gamepad_cb(change_cb){const onchange=GodotRuntime.get_func(change_cb);GodotInputGamepads.init(onchange)}function _godot_js_input_gamepad_sample(){GodotInputGamepads.sample();return 0}function _godot_js_input_gamepad_sample_count(){return GodotInputGamepads.get_samples().length}function _godot_js_input_gamepad_sample_get(p_index,r_btns,r_btns_num,r_axes,r_axes_num,r_standard){const sample=GodotInputGamepads.get_sample(p_index);if(!sample||!sample.connected){return 1}const btns=sample.buttons;const btns_len=btns.length<16?btns.length:16;for(let i=0;i<btns_len;i++){GodotRuntime.setHeapValue(r_btns+(i<<2),btns[i],"float")}GodotRuntime.setHeapValue(r_btns_num,btns_len,"i32");const axes=sample.axes;const axes_len=axes.length<10?axes.length:10;for(let i=0;i<axes_len;i++){GodotRuntime.setHeapValue(r_axes+(i<<2),axes[i],"float")}GodotRuntime.setHeapValue(r_axes_num,axes_len,"i32");const is_standard=sample.standard?1:0;GodotRuntime.setHeapValue(r_standard,is_standard,"i32");return 0}function _godot_js_input_key_cb(callback,code,key){const func=GodotRuntime.get_func(callback);function key_cb(pressed,evt){const modifiers=GodotInput.getModifiers(evt);GodotRuntime.stringToHeap(evt.code,code,32);GodotRuntime.stringToHeap(evt.key,key,32);func(pressed,evt.repeat,modifiers);evt.preventDefault()}GodotEventListeners.add(GodotConfig.canvas,"keydown",key_cb.bind(null,1),false);GodotEventListeners.add(GodotConfig.canvas,"keyup",key_cb.bind(null,0),false)}function _godot_js_input_mouse_button_cb(callback){const func=GodotRuntime.get_func(callback);const canvas=GodotConfig.canvas;function button_cb(p_pressed,evt){const rect=canvas.getBoundingClientRect();const pos=GodotInput.computePosition(evt,rect);const modifiers=GodotInput.getModifiers(evt);if(p_pressed){GodotConfig.canvas.focus()}if(func(p_pressed,evt.button,pos[0],pos[1],modifiers)){evt.preventDefault()}}GodotEventListeners.add(canvas,"mousedown",button_cb.bind(null,1),false);GodotEventListeners.add(window,"mouseup",button_cb.bind(null,0),false)}function _godot_js_input_mouse_move_cb(callback){const func=GodotRuntime.get_func(callback);const canvas=GodotConfig.canvas;function move_cb(evt){const rect=canvas.getBoundingClientRect();const pos=GodotInput.computePosition(evt,rect);const rw=canvas.width/rect.width;const rh=canvas.height/rect.height;const rel_pos_x=evt.movementX*rw;const rel_pos_y=evt.movementY*rh;const modifiers=GodotInput.getModifiers(evt);func(pos[0],pos[1],rel_pos_x,rel_pos_y,modifiers)}GodotEventListeners.add(window,"mousemove",move_cb,false)}function _godot_js_input_mouse_wheel_cb(callback){const func=GodotRuntime.get_func(callback);function wheel_cb(evt){if(func(evt["deltaX"]||0,evt["deltaY"]||0)){evt.preventDefault()}}GodotEventListeners.add(GodotConfig.canvas,"wheel",wheel_cb,false)}function _godot_js_input_paste_cb(callback){const func=GodotRuntime.get_func(callback);GodotEventListeners.add(window,"paste",function(evt){const text=evt.clipboardData.getData("text");const ptr=GodotRuntime.allocString(text);func(ptr);GodotRuntime.free(ptr)},false)}function _godot_js_input_touch_cb(callback,ids,coords){const func=GodotRuntime.get_func(callback);const canvas=GodotConfig.canvas;function touch_cb(type,evt){if(type===0){GodotConfig.canvas.focus()}const rect=canvas.getBoundingClientRect();const touches=evt.changedTouches;for(let i=0;i<touches.length;i++){const touch=touches[i];const pos=GodotInput.computePosition(touch,rect);GodotRuntime.setHeapValue(coords+i*2*8,pos[0],"double");GodotRuntime.setHeapValue(coords+(i*2+1)*8,pos[1],"double");GodotRuntime.setHeapValue(ids+i*4,touch.identifier,"i32")}func(type,touches.length);if(evt.cancelable){evt.preventDefault()}}GodotEventListeners.add(canvas,"touchstart",touch_cb.bind(null,0),false);GodotEventListeners.add(canvas,"touchend",touch_cb.bind(null,1),false);GodotEventListeners.add(canvas,"touchcancel",touch_cb.bind(null,1),false);GodotEventListeners.add(canvas,"touchmove",touch_cb.bind(null,2),false)}function _godot_js_input_vibrate_handheld(p_duration_ms){if(typeof navigator.vibrate!=="function"){GodotRuntime.print("This browser does not support vibration.")}else{navigator.vibrate(p_duration_ms)}}function _godot_js_is_ime_focused(){return GodotIME.active}function _godot_js_os_download_buffer(p_ptr,p_size,p_name,p_mime){const buf=GodotRuntime.heapSlice(HEAP8,p_ptr,p_size);const name=GodotRuntime.parseString(p_name);const mime=GodotRuntime.parseString(p_mime);const blob=new Blob([buf],{type:mime});const url=window.URL.createObjectURL(blob);const a=document.createElement("a");a.href=url;a.download=name;a.style.display="none";document.body.appendChild(a);a.click();a.remove();window.URL.revokeObjectURL(url)}function _godot_js_os_execute(p_json){const json_args=GodotRuntime.parseString(p_json);const args=JSON.parse(json_args);if(GodotConfig.on_execute){GodotConfig.on_execute(args);return 0}return 1}function _godot_js_os_finish_async(p_callback){const func=GodotRuntime.get_func(p_callback);GodotOS.finish_async(func)}function _godot_js_os_fs_is_persistent(){return GodotFS.is_persistent()}function _godot_js_os_fs_sync(callback){const func=GodotRuntime.get_func(callback);GodotOS._fs_sync_promise=GodotFS.sync();GodotOS._fs_sync_promise.then(function(err){func()})}function _godot_js_os_has_feature(p_ftr){const ftr=GodotRuntime.parseString(p_ftr);const ua=navigator.userAgent;if(ftr==="web_macos"){return ua.indexOf("Mac")!==-1?1:0}if(ftr==="web_windows"){return ua.indexOf("Windows")!==-1?1:0}if(ftr==="web_android"){return ua.indexOf("Android")!==-1?1:0}if(ftr==="web_ios"){return ua.indexOf("iPhone")!==-1||ua.indexOf("iPad")!==-1||ua.indexOf("iPod")!==-1?1:0}if(ftr==="web_linuxbsd"){return ua.indexOf("CrOS")!==-1||ua.indexOf("BSD")!==-1||ua.indexOf("Linux")!==-1||ua.indexOf("X11")!==-1?1:0}return 0}function _godot_js_os_hw_concurrency_get(){const concurrency=navigator.hardwareConcurrency||1;return concurrency<2?concurrency:2}function _godot_js_os_request_quit_cb(p_callback){GodotOS.request_quit=GodotRuntime.get_func(p_callback)}function _godot_js_os_shell_open(p_uri){window.open(GodotRuntime.parseString(p_uri),"_blank")}var GodotPWA={hasUpdate:false,updateState:function(cb,reg){if(!reg){return}if(!reg.active){return}if(reg.waiting){GodotPWA.hasUpdate=true;cb()}GodotEventListeners.add(reg,"updatefound",function(){const installing=reg.installing;GodotEventListeners.add(installing,"statechange",function(){if(installing.state==="installed"){GodotPWA.hasUpdate=true;cb()}})})}};function _godot_js_pwa_cb(p_update_cb){if("serviceWorker"in navigator){try{const cb=GodotRuntime.get_func(p_update_cb);navigator.serviceWorker.getRegistration().then(GodotPWA.updateState.bind(null,cb))}catch(e){GodotRuntime.error("Failed to assign PWA callback",e)}}}function _godot_js_pwa_update(){if("serviceWorker"in navigator&&GodotPWA.hasUpdate){try{navigator.serviceWorker.getRegistration().then(function(reg){if(!reg||!reg.waiting){return}reg.waiting.postMessage("update")})}catch(e){GodotRuntime.error(e);return 1}return 0}return 1}var GodotRTCDataChannel={connect:function(p_id,p_on_open,p_on_message,p_on_error,p_on_close){const ref=IDHandler.get(p_id);if(!ref){return}ref.binaryType="arraybuffer";ref.onopen=function(event){p_on_open()};ref.onclose=function(event){p_on_close()};ref.onerror=function(event){p_on_error()};ref.onmessage=function(event){let buffer;let is_string=0;if(event.data instanceof ArrayBuffer){buffer=new Uint8Array(event.data)}else if(event.data instanceof Blob){GodotRuntime.error("Blob type not supported");return}else if(typeof event.data==="string"){is_string=1;const enc=new TextEncoder("utf-8");buffer=new Uint8Array(enc.encode(event.data))}else{GodotRuntime.error("Unknown message type");return}const len=buffer.length*buffer.BYTES_PER_ELEMENT;const out=GodotRuntime.malloc(len);HEAPU8.set(buffer,out);p_on_message(out,len,is_string);GodotRuntime.free(out)}},close:function(p_id){const ref=IDHandler.get(p_id);if(!ref){return}ref.onopen=null;ref.onmessage=null;ref.onerror=null;ref.onclose=null;ref.close()},get_prop:function(p_id,p_prop,p_def){const ref=IDHandler.get(p_id);return ref&&ref[p_prop]!==undefined?ref[p_prop]:p_def}};function _godot_js_rtc_datachannel_close(p_id){const ref=IDHandler.get(p_id);if(!ref){return}GodotRTCDataChannel.close(p_id)}function _godot_js_rtc_datachannel_connect(p_id,p_ref,p_on_open,p_on_message,p_on_error,p_on_close){const onopen=GodotRuntime.get_func(p_on_open).bind(null,p_ref);const onmessage=GodotRuntime.get_func(p_on_message).bind(null,p_ref);const onerror=GodotRuntime.get_func(p_on_error).bind(null,p_ref);const onclose=GodotRuntime.get_func(p_on_close).bind(null,p_ref);GodotRTCDataChannel.connect(p_id,onopen,onmessage,onerror,onclose)}function _godot_js_rtc_datachannel_destroy(p_id){GodotRTCDataChannel.close(p_id);IDHandler.remove(p_id)}function _godot_js_rtc_datachannel_get_buffered_amount(p_id){return GodotRTCDataChannel.get_prop(p_id,"bufferedAmount",0)}function _godot_js_rtc_datachannel_id_get(p_id){return GodotRTCDataChannel.get_prop(p_id,"id",65535)}function _godot_js_rtc_datachannel_is_negotiated(p_id){return GodotRTCDataChannel.get_prop(p_id,"negotiated",65535)}function _godot_js_rtc_datachannel_is_ordered(p_id){return GodotRTCDataChannel.get_prop(p_id,"ordered",true)}function _godot_js_rtc_datachannel_label_get(p_id){const ref=IDHandler.get(p_id);if(!ref||!ref.label){return 0}return GodotRuntime.allocString(ref.label)}function _godot_js_rtc_datachannel_max_packet_lifetime_get(p_id){const ref=IDHandler.get(p_id);if(!ref){return 65535}if(ref["maxPacketLifeTime"]!==undefined){return ref["maxPacketLifeTime"]}else if(ref["maxRetransmitTime"]!==undefined){return ref["maxRetransmitTime"]}return 65535}function _godot_js_rtc_datachannel_max_retransmits_get(p_id){return GodotRTCDataChannel.get_prop(p_id,"maxRetransmits",65535)}function _godot_js_rtc_datachannel_protocol_get(p_id){const ref=IDHandler.get(p_id);if(!ref||!ref.protocol){return 0}return GodotRuntime.allocString(ref.protocol)}function _godot_js_rtc_datachannel_ready_state_get(p_id){const ref=IDHandler.get(p_id);if(!ref){return 3}switch(ref.readyState){case"connecting":return 0;case"open":return 1;case"closing":return 2;case"closed":default:return 3}}function _godot_js_rtc_datachannel_send(p_id,p_buffer,p_length,p_raw){const ref=IDHandler.get(p_id);if(!ref){return 1}const bytes_array=new Uint8Array(p_length);for(let i=0;i<p_length;i++){bytes_array[i]=GodotRuntime.getHeapValue(p_buffer+i,"i8")}if(p_raw){ref.send(bytes_array.buffer)}else{const string=new TextDecoder("utf-8").decode(bytes_array);ref.send(string)}return 0}var GodotRTCPeerConnection={ConnectionState:{new:0,connecting:1,connected:2,disconnected:3,failed:4,closed:5},ConnectionStateCompat:{new:0,checking:1,connected:2,completed:2,disconnected:3,failed:4,closed:5},IceGatheringState:{new:0,gathering:1,complete:2},SignalingState:{stable:0,"have-local-offer":1,"have-remote-offer":2,"have-local-pranswer":3,"have-remote-pranswer":4,closed:5},create:function(config,onConnectionChange,onSignalingChange,onIceGatheringChange,onIceCandidate,onDataChannel){let conn=null;try{conn=new RTCPeerConnection(config)}catch(e){GodotRuntime.error(e);return 0}const id=IDHandler.add(conn);if("connectionState"in conn&&conn["connectionState"]!==undefined){conn.onconnectionstatechange=function(event){if(!IDHandler.get(id)){return}onConnectionChange(GodotRTCPeerConnection.ConnectionState[conn.connectionState]||0)}}else{conn.oniceconnectionstatechange=function(event){if(!IDHandler.get(id)){return}onConnectionChange(GodotRTCPeerConnection.ConnectionStateCompat[conn.iceConnectionState]||0)}}conn.onicegatheringstatechange=function(event){if(!IDHandler.get(id)){return}onIceGatheringChange(GodotRTCPeerConnection.IceGatheringState[conn.iceGatheringState]||0)};conn.onsignalingstatechange=function(event){if(!IDHandler.get(id)){return}onSignalingChange(GodotRTCPeerConnection.SignalingState[conn.signalingState]||0)};conn.onicecandidate=function(event){if(!IDHandler.get(id)){return}const c=event.candidate;if(!c||!c.candidate){return}const candidate_str=GodotRuntime.allocString(c.candidate);const mid_str=GodotRuntime.allocString(c.sdpMid);onIceCandidate(mid_str,c.sdpMLineIndex,candidate_str);GodotRuntime.free(candidate_str);GodotRuntime.free(mid_str)};conn.ondatachannel=function(event){if(!IDHandler.get(id)){return}const cid=IDHandler.add(event.channel);onDataChannel(cid)};return id},destroy:function(p_id){const conn=IDHandler.get(p_id);if(!conn){return}conn.onconnectionstatechange=null;conn.oniceconnectionstatechange=null;conn.onicegatheringstatechange=null;conn.onsignalingstatechange=null;conn.onicecandidate=null;conn.ondatachannel=null;IDHandler.remove(p_id)},onsession:function(p_id,callback,session){if(!IDHandler.get(p_id)){return}const type_str=GodotRuntime.allocString(session.type);const sdp_str=GodotRuntime.allocString(session.sdp);callback(type_str,sdp_str);GodotRuntime.free(type_str);GodotRuntime.free(sdp_str)},onerror:function(p_id,callback,error){const ref=IDHandler.get(p_id);if(!ref){return}GodotRuntime.error(error);callback()}};function _godot_js_rtc_pc_close(p_id){const ref=IDHandler.get(p_id);if(!ref){return}ref.close()}function _godot_js_rtc_pc_create(p_config,p_ref,p_on_connection_state_change,p_on_ice_gathering_state_change,p_on_signaling_state_change,p_on_ice_candidate,p_on_datachannel){const wrap=function(p_func){return GodotRuntime.get_func(p_func).bind(null,p_ref)};return GodotRTCPeerConnection.create(JSON.parse(GodotRuntime.parseString(p_config)),wrap(p_on_connection_state_change),wrap(p_on_signaling_state_change),wrap(p_on_ice_gathering_state_change),wrap(p_on_ice_candidate),wrap(p_on_datachannel))}function _godot_js_rtc_pc_datachannel_create(p_id,p_label,p_config){try{const ref=IDHandler.get(p_id);if(!ref){return 0}const label=GodotRuntime.parseString(p_label);const config=JSON.parse(GodotRuntime.parseString(p_config));const channel=ref.createDataChannel(label,config);return IDHandler.add(channel)}catch(e){GodotRuntime.error(e);return 0}}function _godot_js_rtc_pc_destroy(p_id){GodotRTCPeerConnection.destroy(p_id)}function _godot_js_rtc_pc_ice_candidate_add(p_id,p_mid_name,p_mline_idx,p_sdp){const ref=IDHandler.get(p_id);if(!ref){return}const sdpMidName=GodotRuntime.parseString(p_mid_name);const sdpName=GodotRuntime.parseString(p_sdp);ref.addIceCandidate(new RTCIceCandidate({candidate:sdpName,sdpMid:sdpMidName,sdpMlineIndex:p_mline_idx}))}function _godot_js_rtc_pc_local_description_set(p_id,p_type,p_sdp,p_obj,p_on_error){const ref=IDHandler.get(p_id);if(!ref){return}const type=GodotRuntime.parseString(p_type);const sdp=GodotRuntime.parseString(p_sdp);const onerror=GodotRuntime.get_func(p_on_error).bind(null,p_obj);ref.setLocalDescription({sdp:sdp,type:type}).catch(function(error){GodotRTCPeerConnection.onerror(p_id,onerror,error)})}function _godot_js_rtc_pc_offer_create(p_id,p_obj,p_on_session,p_on_error){const ref=IDHandler.get(p_id);if(!ref){return}const onsession=GodotRuntime.get_func(p_on_session).bind(null,p_obj);const onerror=GodotRuntime.get_func(p_on_error).bind(null,p_obj);ref.createOffer().then(function(session){GodotRTCPeerConnection.onsession(p_id,onsession,session)}).catch(function(error){GodotRTCPeerConnection.onerror(p_id,onerror,error)})}function _godot_js_rtc_pc_remote_description_set(p_id,p_type,p_sdp,p_obj,p_session_created,p_on_error){const ref=IDHandler.get(p_id);if(!ref){return}const type=GodotRuntime.parseString(p_type);const sdp=GodotRuntime.parseString(p_sdp);const onerror=GodotRuntime.get_func(p_on_error).bind(null,p_obj);const onsession=GodotRuntime.get_func(p_session_created).bind(null,p_obj);ref.setRemoteDescription({sdp:sdp,type:type}).then(function(){if(type!=="offer"){return Promise.resolve()}return ref.createAnswer().then(function(session){GodotRTCPeerConnection.onsession(p_id,onsession,session)})}).catch(function(error){GodotRTCPeerConnection.onerror(p_id,onerror,error)})}function _godot_js_set_ime_active(p_active){GodotIME.ime_active(p_active)}function _godot_js_set_ime_cb(p_ime_cb,p_key_cb,code,key){const ime_cb=GodotRuntime.get_func(p_ime_cb);const key_cb=GodotRuntime.get_func(p_key_cb);GodotIME.init(ime_cb,key_cb,code,key)}function _godot_js_set_ime_position(p_x,p_y){GodotIME.ime_position(p_x,p_y)}function _godot_js_tts_get_voices(p_callback){const func=GodotRuntime.get_func(p_callback);try{const arr=[];const voices=window.speechSynthesis.getVoices();for(let i=0;i<voices.length;i++){arr.push(`${voices[i].lang};${voices[i].name}`)}const c_ptr=GodotRuntime.allocStringArray(arr);func(arr.length,c_ptr);GodotRuntime.freeStringArray(c_ptr,arr.length)}catch(e){}}function _godot_js_tts_is_paused(){return window.speechSynthesis.paused}function _godot_js_tts_is_speaking(){return window.speechSynthesis.speaking}function _godot_js_tts_pause(){window.speechSynthesis.pause()}function _godot_js_tts_resume(){window.speechSynthesis.resume()}function _godot_js_tts_speak(p_text,p_voice,p_volume,p_pitch,p_rate,p_utterance_id,p_callback){const func=GodotRuntime.get_func(p_callback);function listener_end(evt){evt.currentTarget.cb(1,evt.currentTarget.id,0)}function listener_start(evt){evt.currentTarget.cb(0,evt.currentTarget.id,0)}function listener_error(evt){evt.currentTarget.cb(2,evt.currentTarget.id,0)}function listener_bound(evt){evt.currentTarget.cb(3,evt.currentTarget.id,evt.charIndex)}const utterance=new SpeechSynthesisUtterance(GodotRuntime.parseString(p_text));utterance.rate=p_rate;utterance.pitch=p_pitch;utterance.volume=p_volume/100;utterance.addEventListener("end",listener_end);utterance.addEventListener("start",listener_start);utterance.addEventListener("error",listener_error);utterance.addEventListener("boundary",listener_bound);utterance.id=p_utterance_id;utterance.cb=func;const voice=GodotRuntime.parseString(p_voice);const voices=window.speechSynthesis.getVoices();for(let i=0;i<voices.length;i++){if(voices[i].name===voice){utterance.voice=voices[i];break}}window.speechSynthesis.resume();window.speechSynthesis.speak(utterance)}function _godot_js_tts_stop(){window.speechSynthesis.cancel();window.speechSynthesis.resume()}var GodotWebMidi={abortControllers:[],isListening:false};function _godot_js_webmidi_close_midi_inputs(){for(const abortController of GodotWebMidi.abortControllers){abortController.abort()}GodotWebMidi.abortControllers=[];GodotWebMidi.isListening=false}function _godot_js_webmidi_open_midi_inputs(pSetInputNamesCb,pOnMidiMessageCb,pDataBuffer,dataBufferLen){if(GodotWebMidi.is_listening){return 0}if(!navigator.requestMIDIAccess){return 2}const setInputNamesCb=GodotRuntime.get_func(pSetInputNamesCb);const onMidiMessageCb=GodotRuntime.get_func(pOnMidiMessageCb);GodotWebMidi.isListening=true;navigator.requestMIDIAccess().then(midi=>{const inputs=[...midi.inputs.values()];const inputNames=inputs.map(input=>input.name);const c_ptr=GodotRuntime.allocStringArray(inputNames);setInputNamesCb(inputNames.length,c_ptr);GodotRuntime.freeStringArray(c_ptr,inputNames.length);inputs.forEach((input,i)=>{const abortController=new AbortController;GodotWebMidi.abortControllers.push(abortController);input.addEventListener("midimessage",event=>{const status=event.data[0];const data=event.data.slice(1);const size=data.length;if(size>dataBufferLen){throw new Error(`data too big ${size} > ${dataBufferLen}`)}HEAPU8.set(data,pDataBuffer);onMidiMessageCb(i,status,pDataBuffer,data.length)},{signal:abortController.signal})})});return 0}var GodotWebSocket={_onopen:function(p_id,callback,event){const ref=IDHandler.get(p_id);if(!ref){return}const c_str=GodotRuntime.allocString(ref.protocol);callback(c_str);GodotRuntime.free(c_str)},_onmessage:function(p_id,callback,event){const ref=IDHandler.get(p_id);if(!ref){return}let buffer;let is_string=0;if(event.data instanceof ArrayBuffer){buffer=new Uint8Array(event.data)}else if(event.data instanceof Blob){GodotRuntime.error("Blob type not supported");return}else if(typeof event.data==="string"){is_string=1;const enc=new TextEncoder("utf-8");buffer=new Uint8Array(enc.encode(event.data))}else{GodotRuntime.error("Unknown message type");return}const len=buffer.length*buffer.BYTES_PER_ELEMENT;const out=GodotRuntime.malloc(len);HEAPU8.set(buffer,out);callback(out,len,is_string);GodotRuntime.free(out)},_onerror:function(p_id,callback,event){const ref=IDHandler.get(p_id);if(!ref){return}callback()},_onclose:function(p_id,callback,event){const ref=IDHandler.get(p_id);if(!ref){return}const c_str=GodotRuntime.allocString(event.reason);callback(event.code,c_str,event.wasClean?1:0);GodotRuntime.free(c_str)},send:function(p_id,p_data){const ref=IDHandler.get(p_id);if(!ref||ref.readyState!==ref.OPEN){return 1}ref.send(p_data);return 0},bufferedAmount:function(p_id){const ref=IDHandler.get(p_id);if(!ref){return 0}return ref.bufferedAmount},create:function(socket,p_on_open,p_on_message,p_on_error,p_on_close){const id=IDHandler.add(socket);socket.onopen=GodotWebSocket._onopen.bind(null,id,p_on_open);socket.onmessage=GodotWebSocket._onmessage.bind(null,id,p_on_message);socket.onerror=GodotWebSocket._onerror.bind(null,id,p_on_error);socket.onclose=GodotWebSocket._onclose.bind(null,id,p_on_close);return id},close:function(p_id,p_code,p_reason){const ref=IDHandler.get(p_id);if(ref&&ref.readyState<ref.CLOSING){const code=p_code;const reason=p_reason;ref.close(code,reason)}},destroy:function(p_id){const ref=IDHandler.get(p_id);if(!ref){return}GodotWebSocket.close(p_id,3001,"destroyed");IDHandler.remove(p_id);ref.onopen=null;ref.onmessage=null;ref.onerror=null;ref.onclose=null}};function _godot_js_websocket_buffered_amount(p_id){return GodotWebSocket.bufferedAmount(p_id)}function _godot_js_websocket_close(p_id,p_code,p_reason){const code=p_code;const reason=GodotRuntime.parseString(p_reason);GodotWebSocket.close(p_id,code,reason)}function _godot_js_websocket_create(p_ref,p_url,p_proto,p_on_open,p_on_message,p_on_error,p_on_close){const on_open=GodotRuntime.get_func(p_on_open).bind(null,p_ref);const on_message=GodotRuntime.get_func(p_on_message).bind(null,p_ref);const on_error=GodotRuntime.get_func(p_on_error).bind(null,p_ref);const on_close=GodotRuntime.get_func(p_on_close).bind(null,p_ref);const url=GodotRuntime.parseString(p_url);const protos=GodotRuntime.parseString(p_proto);let socket=null;try{if(protos){socket=new WebSocket(url,protos.split(","))}else{socket=new WebSocket(url)}}catch(e){return 0}socket.binaryType="arraybuffer";return GodotWebSocket.create(socket,on_open,on_message,on_error,on_close)}function _godot_js_websocket_destroy(p_id){GodotWebSocket.destroy(p_id)}function _godot_js_websocket_send(p_id,p_buf,p_buf_len,p_raw){const bytes_array=new Uint8Array(p_buf_len);let i=0;for(i=0;i<p_buf_len;i++){bytes_array[i]=GodotRuntime.getHeapValue(p_buf+i,"i8")}let out=bytes_array.buffer;if(!p_raw){out=new TextDecoder("utf-8").decode(bytes_array)}return GodotWebSocket.send(p_id,out)}var GodotJSWrapper={proxies:null,cb_ret:null,MyProxy:function(val){const id=IDHandler.add(this);GodotJSWrapper.proxies.set(val,id);let refs=1;this.ref=function(){refs++};this.unref=function(){refs--;if(refs===0){IDHandler.remove(id);GodotJSWrapper.proxies.delete(val)}};this.get_val=function(){return val};this.get_id=function(){return id}},get_proxied:function(val){const id=GodotJSWrapper.proxies.get(val);if(id===undefined){const proxy=new GodotJSWrapper.MyProxy(val);return proxy.get_id()}IDHandler.get(id).ref();return id},get_proxied_value:function(id){const proxy=IDHandler.get(id);if(proxy===undefined){return undefined}return proxy.get_val()},variant2js:function(type,val){switch(type){case 0:return null;case 1:return Boolean(GodotRuntime.getHeapValue(val,"i64"));case 2:{const heap_value=GodotRuntime.getHeapValue(val,"i64");return heap_value>=Number.MIN_SAFE_INTEGER&&heap_value<=Number.MAX_SAFE_INTEGER?Number(heap_value):heap_value}case 3:return Number(GodotRuntime.getHeapValue(val,"double"));case 4:return GodotRuntime.parseString(GodotRuntime.getHeapValue(val,"*"));case 24:return GodotJSWrapper.get_proxied_value(GodotRuntime.getHeapValue(val,"i64"));default:return undefined}},js2variant:function(p_val,p_exchange){if(p_val===undefined||p_val===null){return 0}const type=typeof p_val;if(type==="boolean"){GodotRuntime.setHeapValue(p_exchange,p_val,"i64");return 1}else if(type==="number"){if(Number.isInteger(p_val)){GodotRuntime.setHeapValue(p_exchange,p_val,"i64");return 2}GodotRuntime.setHeapValue(p_exchange,p_val,"double");return 3}else if(type==="bigint"){GodotRuntime.setHeapValue(p_exchange,p_val,"i64");return 2}else if(type==="string"){const c_str=GodotRuntime.allocString(p_val);GodotRuntime.setHeapValue(p_exchange,c_str,"*");return 4}const id=GodotJSWrapper.get_proxied(p_val);GodotRuntime.setHeapValue(p_exchange,id,"i64");return 24},isBuffer:function(obj){return obj instanceof ArrayBuffer||ArrayBuffer.isView(obj)}};function _godot_js_wrapper_create_cb(p_ref,p_func){const func=GodotRuntime.get_func(p_func);let id=0;const cb=function(){if(!GodotJSWrapper.get_proxied_value(id)){return undefined}GodotJSWrapper.cb_ret=null;const args=Array.from(arguments);const argsProxy=new GodotJSWrapper.MyProxy(args);func(p_ref,argsProxy.get_id(),args.length);argsProxy.unref();const ret=GodotJSWrapper.cb_ret;GodotJSWrapper.cb_ret=null;return ret};id=GodotJSWrapper.get_proxied(cb);return id}function _godot_js_wrapper_create_object(p_object,p_args,p_argc,p_convert_callback,p_exchange,p_lock,p_free_lock_callback){const name=GodotRuntime.parseString(p_object);if(typeof window[name]==="undefined"){return-1}const convert=GodotRuntime.get_func(p_convert_callback);const freeLock=GodotRuntime.get_func(p_free_lock_callback);const args=new Array(p_argc);for(let i=0;i<p_argc;i++){const type=convert(p_args,i,p_exchange,p_lock);const lock=GodotRuntime.getHeapValue(p_lock,"*");args[i]=GodotJSWrapper.variant2js(type,p_exchange);if(lock){freeLock(p_lock,type)}}try{const res=new window[name](...args);return GodotJSWrapper.js2variant(res,p_exchange)}catch(e){GodotRuntime.error(`Error calling constructor ${name} with args:`,args,"error:",e);return-1}}function _godot_js_wrapper_interface_get(p_name){const name=GodotRuntime.parseString(p_name);if(typeof window[name]!=="undefined"){return GodotJSWrapper.get_proxied(window[name])}return 0}function _godot_js_wrapper_object_call(p_id,p_method,p_args,p_argc,p_convert_callback,p_exchange,p_lock,p_free_lock_callback){const obj=GodotJSWrapper.get_proxied_value(p_id);if(obj===undefined){return-1}const method=GodotRuntime.parseString(p_method);const convert=GodotRuntime.get_func(p_convert_callback);const freeLock=GodotRuntime.get_func(p_free_lock_callback);const args=new Array(p_argc);for(let i=0;i<p_argc;i++){const type=convert(p_args,i,p_exchange,p_lock);const lock=GodotRuntime.getHeapValue(p_lock,"*");args[i]=GodotJSWrapper.variant2js(type,p_exchange);if(lock){freeLock(p_lock,type)}}try{const res=obj[method](...args);return GodotJSWrapper.js2variant(res,p_exchange)}catch(e){GodotRuntime.error(`Error calling method ${method} on:`,obj,"error:",e);return-1}}function _godot_js_wrapper_object_get(p_id,p_exchange,p_prop){const obj=GodotJSWrapper.get_proxied_value(p_id);if(obj===undefined){return 0}if(p_prop){const prop=GodotRuntime.parseString(p_prop);try{return GodotJSWrapper.js2variant(obj[prop],p_exchange)}catch(e){GodotRuntime.error(`Error getting variable ${prop} on object`,obj);return 0}}return GodotJSWrapper.js2variant(obj,p_exchange)}function _godot_js_wrapper_object_getvar(p_id,p_type,p_exchange){const obj=GodotJSWrapper.get_proxied_value(p_id);if(obj===undefined){return-1}const prop=GodotJSWrapper.variant2js(p_type,p_exchange);if(prop===undefined||prop===null){return-1}try{return GodotJSWrapper.js2variant(obj[prop],p_exchange)}catch(e){GodotRuntime.error(`Error getting variable ${prop} on object`,obj,e);return-1}}function _godot_js_wrapper_object_is_buffer(p_id){const obj=GodotJSWrapper.get_proxied_value(p_id);return GodotJSWrapper.isBuffer(obj)?1:0}function _godot_js_wrapper_object_set(p_id,p_name,p_type,p_exchange){const obj=GodotJSWrapper.get_proxied_value(p_id);if(obj===undefined){return}const name=GodotRuntime.parseString(p_name);try{obj[name]=GodotJSWrapper.variant2js(p_type,p_exchange)}catch(e){GodotRuntime.error(`Error setting variable ${name} on object`,obj)}}function _godot_js_wrapper_object_set_cb_ret(p_val_type,p_val_ex){GodotJSWrapper.cb_ret=GodotJSWrapper.variant2js(p_val_type,p_val_ex)}function _godot_js_wrapper_object_setvar(p_id,p_key_type,p_key_ex,p_val_type,p_val_ex){const obj=GodotJSWrapper.get_proxied_value(p_id);if(obj===undefined){return-1}const key=GodotJSWrapper.variant2js(p_key_type,p_key_ex);try{obj[key]=GodotJSWrapper.variant2js(p_val_type,p_val_ex);return 0}catch(e){GodotRuntime.error(`Error setting variable ${key} on object`,obj);return-1}}function _godot_js_wrapper_object_transfer_buffer(p_id,p_byte_arr,p_byte_arr_write,p_callback){let obj=GodotJSWrapper.get_proxied_value(p_id);if(!GodotJSWrapper.isBuffer(obj)){return}if(ArrayBuffer.isView(obj)&&!(obj instanceof Uint8Array)){obj=new Uint8Array(obj.buffer)}else if(obj instanceof ArrayBuffer){obj=new Uint8Array(obj)}const resizePackedByteArrayAndOpenWrite=GodotRuntime.get_func(p_callback);const bytesPtr=resizePackedByteArrayAndOpenWrite(p_byte_arr,p_byte_arr_write,obj.length);HEAPU8.set(obj,bytesPtr)}function _godot_js_wrapper_object_unref(p_id){const proxy=IDHandler.get(p_id);if(proxy!==undefined){proxy.unref()}}function _godot_webgl2_glFramebufferTextureMultisampleMultiviewOVR(target,attachment,texture,level,samples,base_view_index,num_views){const context=GL.currentContext;if(typeof context.oculusMultiviewExt==="undefined"){const ext=context.GLctx.getExtension("OCULUS_multiview");if(!ext){GodotRuntime.error("Trying to call glFramebufferTextureMultisampleMultiviewOVR() without the OCULUS_multiview extension");return}context.oculusMultiviewExt=ext}const ext=context.oculusMultiviewExt;ext.framebufferTextureMultisampleMultiviewOVR(target,attachment,GL.textures[texture],level,samples,base_view_index,num_views)}function _godot_webgl2_glFramebufferTextureMultiviewOVR(target,attachment,texture,level,base_view_index,num_views){const context=GL.currentContext;if(typeof context.multiviewExt==="undefined"){const ext=context.GLctx.getExtension("OVR_multiview2");if(!ext){GodotRuntime.error("Trying to call glFramebufferTextureMultiviewOVR() without the OVR_multiview2 extension");return}context.multiviewExt=ext}const ext=context.multiviewExt;ext.framebufferTextureMultiviewOVR(target,attachment,GL.textures[texture],level,base_view_index,num_views)}function _godot_webgl2_glGetBufferSubData(target,offset,size,data){const gl_context_handle=_emscripten_webgl_get_current_context();const gl=GL.getContext(gl_context_handle);if(gl){gl.GLctx["getBufferSubData"](target,offset,HEAPU8,data,size)}}var GodotWebXR={gl:null,session:null,gl_binding:null,layer:null,space:null,frame:null,pose:null,view_count:1,input_sources:[,,,,,,,,,,,,,,,],touches:[,,,,],onsimpleevent:null,orig_requestAnimationFrame:null,requestAnimationFrame:callback=>{if(GodotWebXR.session&&GodotWebXR.space){const onFrame=function(time,frame){GodotWebXR.frame=frame;GodotWebXR.pose=frame.getViewerPose(GodotWebXR.space);callback(time);GodotWebXR.frame=null;GodotWebXR.pose=null};GodotWebXR.session.requestAnimationFrame(onFrame)}else{GodotWebXR.orig_requestAnimationFrame(callback)}},monkeyPatchRequestAnimationFrame:enable=>{if(GodotWebXR.orig_requestAnimationFrame===null){GodotWebXR.orig_requestAnimationFrame=Browser.requestAnimationFrame}Browser.requestAnimationFrame=enable?GodotWebXR.requestAnimationFrame:GodotWebXR.orig_requestAnimationFrame},pauseResumeMainLoop:()=>{Browser.mainLoop.pause();runtimeKeepalivePush();window.setTimeout(function(){runtimeKeepalivePop();Browser.mainLoop.resume()},0)},getLayer:()=>{const new_view_count=GodotWebXR.pose?GodotWebXR.pose.views.length:1;let layer=GodotWebXR.layer;if(layer&&GodotWebXR.view_count===new_view_count){return layer}if(!GodotWebXR.session||!GodotWebXR.gl_binding){return null}const gl=GodotWebXR.gl;layer=GodotWebXR.gl_binding.createProjectionLayer({textureType:new_view_count>1?"texture-array":"texture",colorFormat:gl.RGBA8,depthFormat:gl.DEPTH_COMPONENT24});GodotWebXR.session.updateRenderState({layers:[layer]});GodotWebXR.layer=layer;GodotWebXR.view_count=new_view_count;return layer},getSubImage:()=>{if(!GodotWebXR.pose){return null}const layer=GodotWebXR.getLayer();if(layer===null){return null}return GodotWebXR.gl_binding.getViewSubImage(layer,GodotWebXR.pose.views[0])},getTextureId:texture=>{if(texture.name!==undefined){return texture.name}const id=GL.getNewId(GL.textures);texture.name=id;GL.textures[id]=texture;return id},addInputSource:input_source=>{let name=-1;if(input_source.targetRayMode==="tracked-pointer"&&input_source.handedness==="left"){name=0}else if(input_source.targetRayMode==="tracked-pointer"&&input_source.handedness==="right"){name=1}else{for(let i=2;i<16;i++){if(!GodotWebXR.input_sources[i]){name=i;break}}}if(name>=0){GodotWebXR.input_sources[name]=input_source;input_source.name=name;if(input_source.targetRayMode==="screen"){let touch_index=-1;for(let i=0;i<5;i++){if(!GodotWebXR.touches[i]){touch_index=i;break}}if(touch_index>=0){GodotWebXR.touches[touch_index]=input_source;input_source.touch_index=touch_index}}}return name},removeInputSource:input_source=>{if(input_source.name!==undefined){const name=input_source.name;if(name>=0&&name<16){GodotWebXR.input_sources[name]=null}if(input_source.touch_index!==undefined){const touch_index=input_source.touch_index;if(touch_index>=0&&touch_index<5){GodotWebXR.touches[touch_index]=null}}return name}return-1},getInputSourceId:input_source=>{if(input_source!==undefined){return input_source.name}return-1},getTouchIndex:input_source=>{if(input_source.touch_index!==undefined){return input_source.touch_index}return-1}};function _godot_webxr_get_bounds_geometry(r_points){if(!GodotWebXR.space||!GodotWebXR.space.boundsGeometry){return 0}const point_count=GodotWebXR.space.boundsGeometry.length;if(point_count===0){return 0}const buf=GodotRuntime.malloc(point_count*3*4);for(let i=0;i<point_count;i++){const point=GodotWebXR.space.boundsGeometry[i];GodotRuntime.setHeapValue(buf+(i*3+0)*4,point.x,"float");GodotRuntime.setHeapValue(buf+(i*3+1)*4,point.y,"float");GodotRuntime.setHeapValue(buf+(i*3+2)*4,point.z,"float")}GodotRuntime.setHeapValue(r_points,buf,"i32");return point_count}function _godot_webxr_get_color_texture(){const subimage=GodotWebXR.getSubImage();if(subimage===null){return 0}return GodotWebXR.getTextureId(subimage.colorTexture)}function _godot_webxr_get_depth_texture(){const subimage=GodotWebXR.getSubImage();if(subimage===null){return 0}if(!subimage.depthStencilTexture){return 0}return GodotWebXR.getTextureId(subimage.depthStencilTexture)}function _godot_webxr_get_frame_rate(){if(!GodotWebXR.session||GodotWebXR.session.frameRate===undefined){return 0}return GodotWebXR.session.frameRate}function _godot_webxr_get_projection_for_view(p_view,r_transform){if(!GodotWebXR.session||!GodotWebXR.pose){return false}const matrix=GodotWebXR.pose.views[p_view].projectionMatrix;for(let i=0;i<16;i++){GodotRuntime.setHeapValue(r_transform+i*4,matrix[i],"float")}return true}function _godot_webxr_get_render_target_size(r_size){const subimage=GodotWebXR.getSubImage();if(subimage===null){return false}GodotRuntime.setHeapValue(r_size+0,subimage.viewport.width,"i32");GodotRuntime.setHeapValue(r_size+4,subimage.viewport.height,"i32");return true}function _godot_webxr_get_supported_frame_rates(r_frame_rates){if(!GodotWebXR.session||GodotWebXR.session.supportedFrameRates===undefined){return 0}const frame_rate_count=GodotWebXR.session.supportedFrameRates.length;if(frame_rate_count===0){return 0}const buf=GodotRuntime.malloc(frame_rate_count*4);for(let i=0;i<frame_rate_count;i++){GodotRuntime.setHeapValue(buf+i*4,GodotWebXR.session.supportedFrameRates[i],"float")}GodotRuntime.setHeapValue(r_frame_rates,buf,"i32");return frame_rate_count}function _godot_webxr_get_transform_for_view(p_view,r_transform){if(!GodotWebXR.session||!GodotWebXR.pose){return false}const views=GodotWebXR.pose.views;let matrix;if(p_view>=0){matrix=views[p_view].transform.matrix}else{matrix=GodotWebXR.pose.transform.matrix}for(let i=0;i<16;i++){GodotRuntime.setHeapValue(r_transform+i*4,matrix[i],"float")}return true}function _godot_webxr_get_velocity_texture(){const subimage=GodotWebXR.getSubImage();if(subimage===null){return 0}if(!subimage.motionVectorTexture){return 0}return GodotWebXR.getTextureId(subimage.motionVectorTexture)}function _godot_webxr_get_view_count(){if(!GodotWebXR.session||!GodotWebXR.pose){return 1}const view_count=GodotWebXR.pose.views.length;return view_count>0?view_count:1}function _godot_webxr_get_visibility_state(){if(!GodotWebXR.session||!GodotWebXR.session.visibilityState){return 0}return GodotRuntime.allocString(GodotWebXR.session.visibilityState)}var _godot_webxr_initialize=function(p_session_mode,p_required_features,p_optional_features,p_requested_reference_spaces,p_on_session_started,p_on_session_ended,p_on_session_failed,p_on_input_event,p_on_simple_event){GodotWebXR.monkeyPatchRequestAnimationFrame(true);const session_mode=GodotRuntime.parseString(p_session_mode);const required_features=GodotRuntime.parseString(p_required_features).split(",").map(s=>s.trim()).filter(s=>s!=="");const optional_features=GodotRuntime.parseString(p_optional_features).split(",").map(s=>s.trim()).filter(s=>s!=="");const requested_reference_space_types=GodotRuntime.parseString(p_requested_reference_spaces).split(",").map(s=>s.trim());const onstarted=GodotRuntime.get_func(p_on_session_started);const onended=GodotRuntime.get_func(p_on_session_ended);const onfailed=GodotRuntime.get_func(p_on_session_failed);const oninputevent=GodotRuntime.get_func(p_on_input_event);const onsimpleevent=GodotRuntime.get_func(p_on_simple_event);const session_init={};if(required_features.length>0){session_init["requiredFeatures"]=required_features}if(optional_features.length>0){session_init["optionalFeatures"]=optional_features}navigator.xr.requestSession(session_mode,session_init).then(function(session){GodotWebXR.session=session;session.addEventListener("end",function(evt){onended()});session.addEventListener("inputsourceschange",function(evt){evt.added.forEach(GodotWebXR.addInputSource);evt.removed.forEach(GodotWebXR.removeInputSource)});["selectstart","selectend","squeezestart","squeezeend"].forEach((input_event,index)=>{session.addEventListener(input_event,function(evt){GodotWebXR.frame=evt.frame;oninputevent(index,GodotWebXR.getInputSourceId(evt.inputSource));GodotWebXR.frame=null})});session.addEventListener("visibilitychange",function(evt){const c_str=GodotRuntime.allocString("visibility_state_changed");onsimpleevent(c_str);GodotRuntime.free(c_str)});GodotWebXR.onsimpleevent=onsimpleevent;const gl_context_handle=_emscripten_webgl_get_current_context();const gl=GL.getContext(gl_context_handle).GLctx;GodotWebXR.gl=gl;gl.makeXRCompatible().then(function(){GodotWebXR.gl_binding=new XRWebGLBinding(session,gl);GodotWebXR.getLayer();function onReferenceSpaceSuccess(reference_space,reference_space_type){GodotWebXR.space=reference_space;reference_space.onreset=function(evt){const c_str=GodotRuntime.allocString("reference_space_reset");onsimpleevent(c_str);GodotRuntime.free(c_str)};GodotWebXR.pauseResumeMainLoop();window.setTimeout(function(){const reference_space_c_str=GodotRuntime.allocString(reference_space_type);const enabled_features="enabledFeatures"in session?Array.from(session.enabledFeatures):[];const enabled_features_c_str=GodotRuntime.allocString(enabled_features.join(","));const environment_blend_mode="environmentBlendMode"in session?session.environmentBlendMode:"";const environment_blend_mode_c_str=GodotRuntime.allocString(environment_blend_mode);onstarted(reference_space_c_str,enabled_features_c_str,environment_blend_mode_c_str);GodotRuntime.free(reference_space_c_str);GodotRuntime.free(enabled_features_c_str);GodotRuntime.free(environment_blend_mode_c_str)},0)}function requestReferenceSpace(){const reference_space_type=requested_reference_space_types.shift();session.requestReferenceSpace(reference_space_type).then(refSpace=>{onReferenceSpaceSuccess(refSpace,reference_space_type)}).catch(()=>{if(requested_reference_space_types.length===0){const c_str=GodotRuntime.allocString("Unable to get any of the requested reference space types");onfailed(c_str);GodotRuntime.free(c_str)}else{requestReferenceSpace()}})}requestReferenceSpace()}).catch(function(error){const c_str=GodotRuntime.allocString(`Unable to make WebGL context compatible with WebXR: ${error}`);onfailed(c_str);GodotRuntime.free(c_str)})}).catch(function(error){const c_str=GodotRuntime.allocString(`Unable to start session: ${error}`);onfailed(c_str);GodotRuntime.free(c_str)})};function _godot_webxr_is_session_supported(p_session_mode,p_callback){const session_mode=GodotRuntime.parseString(p_session_mode);const cb=GodotRuntime.get_func(p_callback);if(navigator.xr){navigator.xr.isSessionSupported(session_mode).then(function(supported){const c_str=GodotRuntime.allocString(session_mode);cb(c_str,supported?1:0);GodotRuntime.free(c_str)})}else{const c_str=GodotRuntime.allocString(session_mode);cb(c_str,0);GodotRuntime.free(c_str)}}function _godot_webxr_is_supported(){return!!navigator.xr}var _godot_webxr_uninitialize=function(){if(GodotWebXR.session){GodotWebXR.session.end().catch(e=>{})}GodotWebXR.session=null;GodotWebXR.gl_binding=null;GodotWebXR.layer=null;GodotWebXR.space=null;GodotWebXR.frame=null;GodotWebXR.pose=null;GodotWebXR.view_count=1;GodotWebXR.input_sources=new Array(16);GodotWebXR.touches=new Array(5);GodotWebXR.onsimpleevent=null;GodotWebXR.monkeyPatchRequestAnimationFrame(false);GodotWebXR.pauseResumeMainLoop()};function _godot_webxr_update_input_source(p_input_source_id,r_target_pose,r_target_ray_mode,r_touch_index,r_has_grip_pose,r_grip_pose,r_has_standard_mapping,r_button_count,r_buttons,r_axes_count,r_axes,r_has_hand_data,r_hand_joints,r_hand_radii){if(!GodotWebXR.session||!GodotWebXR.frame){return 0}if(p_input_source_id<0||p_input_source_id>=GodotWebXR.input_sources.length||!GodotWebXR.input_sources[p_input_source_id]){return false}const input_source=GodotWebXR.input_sources[p_input_source_id];const frame=GodotWebXR.frame;const space=GodotWebXR.space;const target_pose=frame.getPose(input_source.targetRaySpace,space);if(!target_pose){return false}const target_pose_matrix=target_pose.transform.matrix;for(let i=0;i<16;i++){GodotRuntime.setHeapValue(r_target_pose+i*4,target_pose_matrix[i],"float")}let target_ray_mode=0;switch(input_source.targetRayMode){case"gaze":target_ray_mode=1;break;case"tracked-pointer":target_ray_mode=2;break;case"screen":target_ray_mode=3;break;default:}GodotRuntime.setHeapValue(r_target_ray_mode,target_ray_mode,"i32");GodotRuntime.setHeapValue(r_touch_index,GodotWebXR.getTouchIndex(input_source),"i32");let has_grip_pose=false;if(input_source.gripSpace){const grip_pose=frame.getPose(input_source.gripSpace,space);if(grip_pose){const grip_pose_matrix=grip_pose.transform.matrix;for(let i=0;i<16;i++){GodotRuntime.setHeapValue(r_grip_pose+i*4,grip_pose_matrix[i],"float")}has_grip_pose=true}}GodotRuntime.setHeapValue(r_has_grip_pose,has_grip_pose?1:0,"i32");let has_standard_mapping=false;let button_count=0;let axes_count=0;if(input_source.gamepad){if(input_source.gamepad.mapping==="xr-standard"){has_standard_mapping=true}button_count=Math.min(input_source.gamepad.buttons.length,10);for(let i=0;i<button_count;i++){GodotRuntime.setHeapValue(r_buttons+i*4,input_source.gamepad.buttons[i].value,"float")}axes_count=Math.min(input_source.gamepad.axes.length,10);for(let i=0;i<axes_count;i++){GodotRuntime.setHeapValue(r_axes+i*4,input_source.gamepad.axes[i],"float")}}GodotRuntime.setHeapValue(r_has_standard_mapping,has_standard_mapping?1:0,"i32");GodotRuntime.setHeapValue(r_button_count,button_count,"i32");GodotRuntime.setHeapValue(r_axes_count,axes_count,"i32");let has_hand_data=false;if(input_source.hand&&r_hand_joints!==0&&r_hand_radii!==0){const hand_joint_array=new Float32Array(25*16);const hand_radii_array=new Float32Array(25);if(frame.fillPoses(input_source.hand.values(),space,hand_joint_array)&&frame.fillJointRadii(input_source.hand.values(),hand_radii_array)){GodotRuntime.heapCopy(HEAPF32,hand_joint_array,r_hand_joints);GodotRuntime.heapCopy(HEAPF32,hand_radii_array,r_hand_radii);has_hand_data=true}}GodotRuntime.setHeapValue(r_has_hand_data,has_hand_data?1:0,"i32");return true}function _godot_webxr_update_target_frame_rate(p_frame_rate){if(!GodotWebXR.session||GodotWebXR.session.updateTargetFrameRate===undefined){return}GodotWebXR.session.updateTargetFrameRate(p_frame_rate).then(()=>{const c_str=GodotRuntime.allocString("display_refresh_rate_changed");GodotWebXR.onsimpleevent(c_str);GodotRuntime.free(c_str)})}var stackAlloc=sz=>__emscripten_stack_alloc(sz);var stringToUTF8OnStack=str=>{var size=lengthBytesUTF8(str)+1;var ret=stackAlloc(size);stringToUTF8(str,ret,size);return ret};var getCFunc=ident=>{var func=Module["_"+ident];return func};var writeArrayToMemory=(array,buffer)=>{HEAP8.set(array,buffer)};var stackSave=()=>_emscripten_stack_get_current();var stackRestore=val=>__emscripten_stack_restore(val);var ccall=(ident,returnType,argTypes,args,opts)=>{var toC={string:str=>{var ret=0;if(str!==null&&str!==undefined&&str!==0){ret=stringToUTF8OnStack(str)}return ret},array:arr=>{var ret=stackAlloc(arr.length);writeArrayToMemory(arr,ret);return ret}};function convertReturnValue(ret){if(returnType==="string"){return UTF8ToString(ret)}if(returnType==="boolean")return Boolean(ret);return ret}var func=getCFunc(ident);var cArgs=[];var stack=0;if(args){for(var i=0;i<args.length;i++){var converter=toC[argTypes[i]];if(converter){if(stack===0)stack=stackSave();cArgs[i]=converter(args[i])}else{cArgs[i]=args[i]}}}var ret=func(...cArgs);function onDone(ret){if(stack!==0)stackRestore(stack);return convertReturnValue(ret)}ret=onDone(ret);return ret};var cwrap=(ident,returnType,argTypes,opts)=>{var numericArgs=!argTypes||argTypes.every(type=>type==="number"||type==="boolean");var numericRet=returnType!=="string";if(numericRet&&numericArgs&&!opts){return getCFunc(ident)}return(...args)=>ccall(ident,returnType,argTypes,args,opts)};FS.createPreloadedFile=FS_createPreloadedFile;FS.staticInit();Module["requestFullscreen"]=Browser.requestFullscreen;Module["requestAnimationFrame"]=Browser.requestAnimationFrame;Module["setCanvasSize"]=Browser.setCanvasSize;Module["pauseMainLoop"]=Browser.mainLoop.pause;Module["resumeMainLoop"]=Browser.mainLoop.resume;Module["getUserMedia"]=Browser.getUserMedia;Module["createContext"]=Browser.createContext;var preloadedImages={};var preloadedAudios={};var GLctx;for(var i=0;i<32;++i)tempFixedLengthArray.push(new Array(i));var miniTempWebGLIntBuffersStorage=new Int32Array(288);for(var i=0;i<=288;++i){miniTempWebGLIntBuffers[i]=miniTempWebGLIntBuffersStorage.subarray(0,i)}var miniTempWebGLFloatBuffersStorage=new Float32Array(288);for(var i=0;i<=288;++i){miniTempWebGLFloatBuffers[i]=miniTempWebGLFloatBuffersStorage.subarray(0,i)}Module["request_quit"]=function(){GodotOS.request_quit()};Module["onExit"]=GodotOS.cleanup;GodotOS._fs_sync_promise=Promise.resolve();Module["initConfig"]=GodotConfig.init_config;Module["initFS"]=GodotFS.init;Module["copyToFS"]=GodotFS.copy_to_fs;GodotOS.atexit(function(resolve,reject){GodotDisplayCursor.clear();resolve()});GodotOS.atexit(function(resolve,reject){GodotEventListeners.clear();resolve()});GodotOS.atexit(function(resolve,reject){GodotDisplayVK.clear();resolve()});GodotOS.atexit(function(resolve,reject){GodotIME.clear();resolve()});GodotJSWrapper.proxies=new Map;var wasmImports={Kc:___call_sighandler,dd:___syscall_chdir,Ya:___syscall_chmod,ed:___syscall_faccessat,ad:___syscall_fchmod,V:___syscall_fcntl64,$c:___syscall_fstat64,Xc:___syscall_ftruncate64,Vc:___syscall_getcwd,Jc:___syscall_getdents64,Ba:___syscall_ioctl,Zc:___syscall_lstat64,Rc:___syscall_mkdirat,Qc:___syscall_mknodat,Yc:___syscall_newfstatat,Xa:___syscall_openat,Ic:___syscall_readlinkat,Hc:___syscall_renameat,Ua:___syscall_rmdir,_c:___syscall_stat64,Gc:___syscall_statfs64,Fc:___syscall_symlink,Va:___syscall_unlinkat,fd:__abort_js,bd:__emscripten_get_now_is_monotonic,Nc:__emscripten_runtime_keepalive_clear,Oc:__gmtime_js,Pc:__localtime_js,gd:__tzset_js,Pe:_emscripten_cancel_main_loop,za:_emscripten_date_now,Qe:_emscripten_force_exit,Ec:_emscripten_get_heap_max,ia:_emscripten_get_now,Cc:_emscripten_resize_heap,Dc:_emscripten_set_canvas_element_size,Ma:_emscripten_set_main_loop,Qa:_emscripten_webgl_commit_frame,_b:_emscripten_webgl_create_context,Ib:_emscripten_webgl_destroy_context,Yb:_emscripten_webgl_enable_extension,td:_emscripten_webgl_get_supported_extensions,Zb:_emscripten_webgl_make_context_current,Tc:_environ_get,Uc:_environ_sizes_get,La:_exit,na:_fd_close,Wa:_fd_fdstat_get,Za:_fd_read,Sc:_fd_seek,Aa:_fd_write,i:_glActiveTexture,cb:_glAttachShader,ea:_glBeginTransformFeedback,b:_glBindBuffer,y:_glBindBufferBase,Ea:_glBindBufferRange,d:_glBindFramebuffer,ta:_glBindRenderbuffer,c:_glBindTexture,e:_glBindVertexArray,Md:_glBlendColor,J:_glBlendEquation,ka:_glBlendFunc,D:_glBlendFuncSeparate,ha:_glBlitFramebuffer,h:_glBufferData,R:_glBufferSubData,P:_glCheckFramebufferStatus,G:_glClear,Ga:_glClearBufferfv,Q:_glClearColor,aa:_glClearDepthf,Y:_glColorMask,eb:_glCompileShader,ld:_glCompressedTexImage2D,nd:_glCompressedTexImage3D,md:_glCompressedTexSubImage3D,pd:_glCopyBufferSubData,yd:_glCreateProgram,gb:_glCreateShader,ma:_glCullFace,o:_glDeleteBuffers,v:_glDeleteFramebuffers,ga:_glDeleteProgram,jd:_glDeleteQueries,oa:_glDeleteRenderbuffers,X:_glDeleteShader,lb:_glDeleteSync,l:_glDeleteTextures,L:_glDeleteVertexArrays,U:_glDepthFunc,w:_glDepthMask,g:_glDisable,p:_glDisableVertexAttribArray,F:_glDrawArrays,Z:_glDrawArraysInstanced,la:_glDrawBuffers,M:_glDrawElements,N:_glDrawElementsInstanced,x:_glEnable,f:_glEnableVertexAttribArray,da:_glEndTransformFeedback,kb:_glFenceSync,Ed:_glFinish,Ja:_glFramebufferRenderbuffer,t:_glFramebufferTexture2D,$:_glFramebufferTextureLayer,ib:_glFrontFace,m:_glGenBuffers,B:_glGenFramebuffers,kd:_glGenQueries,Ka:_glGenRenderbuffers,r:_glGenTextures,K:_glGenVertexArrays,id:_glGenerateMipmap,qd:_glGetFloatv,sd:_glGetInteger64v,fa:_glGetIntegerv,ud:_glGetProgramInfoLog,bb:_glGetProgramiv,db:_glGetShaderInfoLog,ra:_glGetShaderiv,_:_glGetString,Od:_glGetSynciv,Bd:_glGetUniformBlockIndex,Fa:_glGetUniformLocation,vd:_glLinkProgram,Ca:_glPixelStorei,jb:_glReadBuffer,Da:_glReadPixels,Hd:_glRenderbufferStorage,$a:_glRenderbufferStorageMultisample,va:_glScissor,fb:_glShaderSource,q:_glTexImage2D,T:_glTexImage3D,Ia:_glTexParameterf,a:_glTexParameteri,Ha:_glTexStorage2D,_a:_glTexSubImage3D,wd:_glTransformFeedbackVaryings,k:_glUniform1f,E:_glUniform1i,zd:_glUniform1iv,u:_glUniform1ui,sa:_glUniform1uiv,ba:_glUniform2f,H:_glUniform2fv,ja:_glUniform2iv,s:_glUniform3fv,O:_glUniform4f,C:_glUniform4fv,Ad:_glUniformBlockBinding,hb:_glUniformMatrix3fv,I:_glUniformMatrix4fv,n:_glUseProgram,ua:_glVertexAttrib4f,z:_glVertexAttribDivisor,ca:_glVertexAttribI4ui,S:_glVertexAttribIPointer,j:_glVertexAttribPointer,A:_glViewport,Ce:_godot_audio_get_sample_playback_position,rd:_godot_audio_has_script_processor,Dd:_godot_audio_has_worklet,ff:_godot_audio_init,vc:_godot_audio_input_start,oc:_godot_audio_input_stop,gf:_godot_audio_is_available,pa:_godot_audio_resume,Nd:_godot_audio_sample_bus_add,Ld:_godot_audio_sample_bus_move,Td:_godot_audio_sample_bus_remove,ae:_godot_audio_sample_bus_set_count,Fd:_godot_audio_sample_bus_set_mute,Jd:_godot_audio_sample_bus_set_send,Gd:_godot_audio_sample_bus_set_solo,Id:_godot_audio_sample_bus_set_volume_db,Ne:_godot_audio_sample_is_active,Vb:_godot_audio_sample_register_stream,Kd:_godot_audio_sample_set_finished_callback,We:_godot_audio_sample_set_pause,ke:_godot_audio_sample_set_volumes_linear,Cb:_godot_audio_sample_start,ef:_godot_audio_sample_stop,ec:_godot_audio_sample_stream_is_registered,Kb:_godot_audio_sample_unregister_stream,te:_godot_audio_sample_update_pitch_scale,od:_godot_audio_script_create,hd:_godot_audio_script_start,Cd:_godot_audio_worklet_create,xd:_godot_audio_worklet_start_no_threads,dc:_godot_js_config_canvas_id_get,Fe:_godot_js_config_locale_get,Oe:_godot_js_display_alert,pc:_godot_js_display_canvas_focus,qc:_godot_js_display_canvas_is_focused,fc:_godot_js_display_clipboard_get,gc:_godot_js_display_clipboard_set,sc:_godot_js_display_cursor_is_hidden,rc:_godot_js_display_cursor_is_locked,xa:_godot_js_display_cursor_lock_set,Ta:_godot_js_display_cursor_set_custom_shape,tc:_godot_js_display_cursor_set_shape,ya:_godot_js_display_cursor_set_visible,Bb:_godot_js_display_desired_size_set,Nb:_godot_js_display_fullscreen_cb,Ab:_godot_js_display_fullscreen_exit,zb:_godot_js_display_fullscreen_request,$b:_godot_js_display_has_webgl,bc:_godot_js_display_is_swap_ok_cancel,Lb:_godot_js_display_notification_cb,Eb:_godot_js_display_pixel_ratio_get,Fb:_godot_js_display_screen_dpi_get,Gb:_godot_js_display_screen_size_get,cc:_godot_js_display_setup_canvas,Mc:_godot_js_display_size_update,nc:_godot_js_display_touchscreen_is_available,Hb:_godot_js_display_tts_available,Pa:_godot_js_display_vk_available,Jb:_godot_js_display_vk_cb,lc:_godot_js_display_vk_hide,mc:_godot_js_display_vk_show,Mb:_godot_js_display_window_blur_cb,Ra:_godot_js_display_window_icon_set,Oa:_godot_js_display_window_size_get,Db:_godot_js_display_window_title_set,Ve:_godot_js_eval,xb:_godot_js_fetch_create,Na:_godot_js_fetch_free,ub:_godot_js_fetch_http_status_get,wb:_godot_js_fetch_is_chunked,vb:_godot_js_fetch_read_chunk,df:_godot_js_fetch_read_headers,wa:_godot_js_fetch_state_get,Qb:_godot_js_input_drop_files_cb,Pb:_godot_js_input_gamepad_cb,yb:_godot_js_input_gamepad_sample,ic:_godot_js_input_gamepad_sample_count,hc:_godot_js_input_gamepad_sample_get,Sb:_godot_js_input_key_cb,Xb:_godot_js_input_mouse_button_cb,Wb:_godot_js_input_mouse_move_cb,Ub:_godot_js_input_mouse_wheel_cb,Rb:_godot_js_input_paste_cb,Tb:_godot_js_input_touch_cb,He:_godot_js_input_vibrate_handheld,Sa:_godot_js_is_ime_focused,Se:_godot_js_os_download_buffer,Le:_godot_js_os_execute,sb:_godot_js_os_finish_async,De:_godot_js_os_fs_is_persistent,Me:_godot_js_os_fs_sync,Je:_godot_js_os_has_feature,Ke:_godot_js_os_hw_concurrency_get,ac:_godot_js_os_request_quit_cb,Ie:_godot_js_os_shell_open,Ee:_godot_js_pwa_cb,Ge:_godot_js_pwa_update,rb:_godot_js_rtc_datachannel_close,se:_godot_js_rtc_datachannel_connect,pe:_godot_js_rtc_datachannel_destroy,ue:_godot_js_rtc_datachannel_get_buffered_amount,ye:_godot_js_rtc_datachannel_id_get,ve:_godot_js_rtc_datachannel_is_negotiated,ze:_godot_js_rtc_datachannel_is_ordered,re:_godot_js_rtc_datachannel_label_get,xe:_godot_js_rtc_datachannel_max_packet_lifetime_get,we:_godot_js_rtc_datachannel_max_retransmits_get,qe:_godot_js_rtc_datachannel_protocol_get,Be:_godot_js_rtc_datachannel_ready_state_get,Ae:_godot_js_rtc_datachannel_send,qb:_godot_js_rtc_pc_close,je:_godot_js_rtc_pc_create,ie:_godot_js_rtc_pc_datachannel_create,pb:_godot_js_rtc_pc_destroy,le:_godot_js_rtc_pc_ice_candidate_add,ne:_godot_js_rtc_pc_local_description_set,oe:_godot_js_rtc_pc_offer_create,me:_godot_js_rtc_pc_remote_description_set,kc:_godot_js_set_ime_active,Ob:_godot_js_set_ime_cb,jc:_godot_js_set_ime_position,zc:_godot_js_tts_get_voices,Ac:_godot_js_tts_is_paused,Bc:_godot_js_tts_is_speaking,xc:_godot_js_tts_pause,wc:_godot_js_tts_resume,yc:_godot_js_tts_speak,uc:_godot_js_tts_stop,Wc:_godot_js_webmidi_close_midi_inputs,cd:_godot_js_webmidi_open_midi_inputs,fe:_godot_js_websocket_buffered_amount,ee:_godot_js_websocket_close,he:_godot_js_websocket_create,ob:_godot_js_websocket_destroy,ge:_godot_js_websocket_send,Ze:_godot_js_wrapper_create_cb,Xe:_godot_js_wrapper_create_object,Ye:_godot_js_wrapper_interface_get,$e:_godot_js_wrapper_object_call,bf:_godot_js_wrapper_object_get,tb:_godot_js_wrapper_object_getvar,Ue:_godot_js_wrapper_object_is_buffer,cf:_godot_js_wrapper_object_set,_e:_godot_js_wrapper_object_set_cb_ret,af:_godot_js_wrapper_object_setvar,Te:_godot_js_wrapper_object_transfer_buffer,Re:_godot_js_wrapper_object_unref,ab:_godot_webgl2_glFramebufferTextureMultisampleMultiviewOVR,W:_godot_webgl2_glFramebufferTextureMultiviewOVR,qa:_godot_webgl2_glGetBufferSubData,be:_godot_webxr_get_bounds_geometry,Sd:_godot_webxr_get_color_texture,Rd:_godot_webxr_get_depth_texture,$d:_godot_webxr_get_frame_rate,Ud:_godot_webxr_get_projection_for_view,Vd:_godot_webxr_get_render_target_size,Zd:_godot_webxr_get_supported_frame_rates,mb:_godot_webxr_get_transform_for_view,Qd:_godot_webxr_get_velocity_texture,nb:_godot_webxr_get_view_count,ce:_godot_webxr_get_visibility_state,Xd:_godot_webxr_initialize,de:_godot_webxr_is_session_supported,Yd:_godot_webxr_is_supported,Wd:_godot_webxr_uninitialize,Pd:_godot_webxr_update_input_source,_d:_godot_webxr_update_target_frame_rate,Lc:_proc_exit};var wasmExports=createWasm();var ___wasm_call_ctors=()=>(___wasm_call_ctors=wasmExports["jf"])();var _free=a0=>(_free=wasmExports["kf"])(a0);var __Z14godot_web_mainiPPc=Module["__Z14godot_web_mainiPPc"]=(a0,a1)=>(__Z14godot_web_mainiPPc=Module["__Z14godot_web_mainiPPc"]=wasmExports["lf"])(a0,a1);var _main=Module["_main"]=(a0,a1)=>(_main=Module["_main"]=wasmExports["mf"])(a0,a1);var _malloc=a0=>(_malloc=wasmExports["nf"])(a0);var _fflush=a0=>(_fflush=wasmExports["of"])(a0);var __emwebxr_on_input_event=Module["__emwebxr_on_input_event"]=(a0,a1)=>(__emwebxr_on_input_event=Module["__emwebxr_on_input_event"]=wasmExports["pf"])(a0,a1);var __emwebxr_on_simple_event=Module["__emwebxr_on_simple_event"]=a0=>(__emwebxr_on_simple_event=Module["__emwebxr_on_simple_event"]=wasmExports["qf"])(a0);var ___funcs_on_exit=()=>(___funcs_on_exit=wasmExports["sf"])();var __emscripten_stack_restore=a0=>(__emscripten_stack_restore=wasmExports["tf"])(a0);var __emscripten_stack_alloc=a0=>(__emscripten_stack_alloc=wasmExports["uf"])(a0);var _emscripten_stack_get_current=()=>(_emscripten_stack_get_current=wasmExports["vf"])();Module["callMain"]=callMain;Module["cwrap"]=cwrap;var calledRun;dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller};function callMain(args=[]){var entryFunction=_main;args.unshift(thisProgram);var argc=args.length;var argv=stackAlloc((argc+1)*4);var argv_ptr=argv;args.forEach(arg=>{HEAPU32[argv_ptr>>2]=stringToUTF8OnStack(arg);argv_ptr+=4});HEAPU32[argv_ptr>>2]=0;try{var ret=entryFunction(argc,argv);exitJS(ret,true);return ret}catch(e){return handleException(e)}}function run(args=arguments_){if(runDependencies>0){return}preRun();if(runDependencies>0){return}function doRun(){if(calledRun)return;calledRun=true;Module["calledRun"]=true;if(ABORT)return;initRuntime();preMain();readyPromiseResolve(Module);Module["onRuntimeInitialized"]?.();if(shouldRunNow)callMain(args);postRun()}if(Module["setStatus"]){Module["setStatus"]("Running...");setTimeout(function(){setTimeout(function(){Module["setStatus"]("")},1);doRun()},1)}else{doRun()}}if(Module["preInit"]){if(typeof Module["preInit"]=="function")Module["preInit"]=[Module["preInit"]];while(Module["preInit"].length>0){Module["preInit"].pop()()}}var shouldRunNow=false;if(Module["noInitialRun"])shouldRunNow=false;run();moduleRtn=readyPromise;


  return moduleRtn;
}
);
})();
if (typeof exports === 'object' && typeof module === 'object')
  module.exports = Godot;
else if (typeof define === 'function' && define['amd'])
  define([], () => Godot);

const Features = {
    /**
     * Check whether WebGL is available. Optionally, specify a particular version of WebGL to check for.
     *
     * @param {number=} [majorVersion=1] The major WebGL version to check for.
     * @returns {boolean} If the given major version of WebGL is available.
     * @function Engine.isWebGLAvailable
     */
    isWebGLAvailable: function (majorVersion = 1) {
        try {
            return !!document.createElement('canvas').getContext(['webgl', 'webgl2'][majorVersion - 1]);
        } catch (e) { /* Not available */ }
        return false;
    },

    /**
     * Check whether the Fetch API available and supports streaming responses.
     *
     * @returns {boolean} If the Fetch API is available and supports streaming responses.
     * @function Engine.isFetchAvailable
     */
    isFetchAvailable: function () {
        return 'fetch' in window && 'Response' in window && 'body' in window.Response.prototype;
    },

    /**
     * Check whether the engine is running in a Secure Context.
     *
     * @returns {boolean} If the engine is running in a Secure Context.
     * @function Engine.isSecureContext
     */
    isSecureContext: function () {
        return window['isSecureContext'] === true;
    },

    /**
     * Check whether the engine is cross origin isolated.
     * This value is dependent on Cross-Origin-Opener-Policy and Cross-Origin-Embedder-Policy headers sent by the server.
     *
     * @returns {boolean} If the engine is running in a Secure Context.
     * @function Engine.isSecureContext
     */
    isCrossOriginIsolated: function () {
        return window['crossOriginIsolated'] === true;
    },

    /**
     * Check whether SharedBufferArray is available.
     *
     * Most browsers require the page to be running in a secure context, and the
     * the server to provide specific CORS headers for SharedArrayBuffer to be available.
     *
     * @returns {boolean} If SharedArrayBuffer is available.
     * @function Engine.isSharedArrayBufferAvailable
     */
    isSharedArrayBufferAvailable: function () {
        return 'SharedArrayBuffer' in window;
    },

    /**
     * Check whether the AudioContext supports AudioWorkletNodes.
     *
     * @returns {boolean} If AudioWorkletNode is available.
     * @function Engine.isAudioWorkletAvailable
     */
    isAudioWorkletAvailable: function () {
        return 'AudioContext' in window && 'audioWorklet' in AudioContext.prototype;
    },

    /**
     * Return an array of missing required features (as string).
     *
     * @returns {Array<string>} A list of human-readable missing features.
     * @function Engine.getMissingFeatures
     * @param {{threads: (boolean|undefined)}} supportedFeatures
     */
    getMissingFeatures: function (supportedFeatures = {}) {
        const {
            // Quotes are needed for the Closure compiler.
            'threads': supportsThreads = true,
        } = supportedFeatures;

        const missing = [];
        if (!Features.isWebGLAvailable(2)) {
            missing.push('WebGL2 - Check web browser configuration and hardware support');
        }
        if (!Features.isFetchAvailable()) {
            missing.push('Fetch - Check web browser version');
        }
        if (!Features.isSecureContext()) {
            missing.push('Secure Context - Check web server configuration (use HTTPS)');
        }

        if (supportsThreads) {
            if (!Features.isCrossOriginIsolated()) {
                missing.push('Cross-Origin Isolation - Check that the web server configuration sends the correct headers.');
            }
            if (!Features.isSharedArrayBufferAvailable()) {
                missing.push('SharedArrayBuffer - Check that the web server configuration sends the correct headers.');
            }
        }

        // Audio is normally optional since we have a dummy fallback.
        return missing;
    },
};

const Preloader = /** @constructor */ function () { // eslint-disable-line no-unused-vars
    function getTrackedResponse(response, load_status) {
        function onloadprogress(reader, controller) {
            return reader.read().then(function (result) {
                if (load_status.done) {
                    return Promise.resolve();
                }
                if (result.value) {
                    controller.enqueue(result.value);
                    load_status.loaded += result.value.length;
                }
                if (!result.done) {
                    return onloadprogress(reader, controller);
                }
                load_status.done = true;
                return Promise.resolve();
            });
        }
        const reader = response.body.getReader();
        return new Response(new ReadableStream({
            start: function (controller) {
                onloadprogress(reader, controller).then(function () {
                    controller.close();
                });
            },
        }), { headers: response.headers });
    }

    function loadFetch(file, tracker, fileSize, raw) {
        tracker[file] = {
            total: fileSize || 0,
            loaded: 0,
            done: false,
        };
        return fetch(file).then(function (response) {
            if (!response.ok) {
                return Promise.reject(new Error(`Failed loading file '${file}'`));
            }
            const tr = getTrackedResponse(response, tracker[file]);
            if (raw) {
                return Promise.resolve(tr);
            }
            return tr.arrayBuffer();
        });
    }

    function retry(func, attempts = 1) {
        function onerror(err) {
            if (attempts <= 1) {
                return Promise.reject(err);
            }
            return new Promise(function (resolve, reject) {
                setTimeout(function () {
                    retry(func, attempts - 1).then(resolve).catch(reject);
                }, 1000);
            });
        }
        return func().catch(onerror);
    }

    const DOWNLOAD_ATTEMPTS_MAX = 4;
    const loadingFiles = {};
    const lastProgress = { loaded: 0, total: 0 };
    let progressFunc = null;

    const animateProgress = function () {
        let loaded = 0;
        let total = 0;
        let totalIsValid = true;
        let progressIsFinal = true;

        Object.keys(loadingFiles).forEach(function (file) {
            const stat = loadingFiles[file];
            if (!stat.done) {
                progressIsFinal = false;
            }
            if (!totalIsValid || stat.total === 0) {
                totalIsValid = false;
                total = 0;
            } else {
                total += stat.total;
            }
            loaded += stat.loaded;
        });
        if (loaded !== lastProgress.loaded || total !== lastProgress.total) {
            lastProgress.loaded = loaded;
            lastProgress.total = total;
            if (typeof progressFunc === 'function') {
                progressFunc(loaded, total);
            }
        }
        if (!progressIsFinal) {
            requestAnimationFrame(animateProgress);
        }
    };

    this.animateProgress = animateProgress;

    this.setProgressFunc = function (callback) {
        progressFunc = callback;
    };

    this.loadPromise = function (file, fileSize, raw = false) {
        return retry(loadFetch.bind(null, file, loadingFiles, fileSize, raw), DOWNLOAD_ATTEMPTS_MAX);
    };

    this.preloadedFiles = [];
    this.preload = function (pathOrBuffer, destPath, fileSize) {
        let buffer = null;
        if (typeof pathOrBuffer === 'string') {
            const me = this;
            return this.loadPromise(pathOrBuffer, fileSize).then(function (buf) {
                me.preloadedFiles.push({
                    path: destPath || pathOrBuffer,
                    buffer: buf,
                });
                return Promise.resolve();
            });
        } else if (pathOrBuffer instanceof ArrayBuffer) {
            buffer = new Uint8Array(pathOrBuffer);
        } else if (ArrayBuffer.isView(pathOrBuffer)) {
            buffer = new Uint8Array(pathOrBuffer.buffer);
        }
        if (buffer) {
            this.preloadedFiles.push({
                path: destPath,
                buffer: pathOrBuffer,
            });
            return Promise.resolve();
        }
        return Promise.reject(new Error('Invalid object for preloading'));
    };
};

/**
 * An object used to configure the Engine instance based on godot export options, and to override those in custom HTML
 * templates if needed.
 *
 * @header Engine configuration
 * @summary The Engine configuration object. This is just a typedef, create it like a regular object, e.g.:
 *
 * ``const MyConfig = { executable: 'godot', unloadAfterInit: false }``
 *
 * @typedef {Object} EngineConfig
 */
const EngineConfig = {}; // eslint-disable-line no-unused-vars

/**
 * @struct
 * @constructor
 * @ignore
 */
const InternalConfig = function (initConfig) { // eslint-disable-line no-unused-vars
    const cfg = /** @lends {InternalConfig.prototype} */ {
        /**
         * Whether to unload the engine automatically after the instance is initialized.
         *
         * @memberof EngineConfig
         * @default
         * @type {boolean}
         */
        unloadAfterInit: true,
        /**
         * The HTML DOM Canvas object to use.
         *
         * By default, the first canvas element in the document will be used is none is specified.
         *
         * @memberof EngineConfig
         * @default
         * @type {?HTMLCanvasElement}
         */
        canvas: null,
        /**
         * The name of the WASM file without the extension. (Set by Godot Editor export process).
         *
         * @memberof EngineConfig
         * @default
         * @type {string}
         */
        executable: '',
        /**
         * An alternative name for the game pck to load. The executable name is used otherwise.
         *
         * @memberof EngineConfig
         * @default
         * @type {?string}
         */
        mainPack: null,
        /**
         * Specify a language code to select the proper localization for the game.
         *
         * The browser locale will be used if none is specified. See complete list of
         * :ref:`supported locales <doc_locales>`.
         *
         * @memberof EngineConfig
         * @type {?string}
         * @default
         */
        locale: null,
        /**
         * The canvas resize policy determines how the canvas should be resized by Godot.
         *
         * ``0`` means Godot won't do any resizing. This is useful if you want to control the canvas size from
         * javascript code in your template.
         *
         * ``1`` means Godot will resize the canvas on start, and when changing window size via engine functions.
         *
         * ``2`` means Godot will adapt the canvas size to match the whole browser window.
         *
         * @memberof EngineConfig
         * @type {number}
         * @default
         */
        canvasResizePolicy: 2,
        /**
         * The arguments to be passed as command line arguments on startup.
         *
         * See :ref:`command line tutorial <doc_command_line_tutorial>`.
         *
         * **Note**: :js:meth:`startGame <Engine.prototype.startGame>` will always add the ``--main-pack`` argument.
         *
         * @memberof EngineConfig
         * @type {Array<string>}
         * @default
         */
        args: [],
        /**
         * When enabled, the game canvas will automatically grab the focus when the engine starts.
         *
         * @memberof EngineConfig
         * @type {boolean}
         * @default
         */
        focusCanvas: true,
        /**
         * When enabled, this will turn on experimental virtual keyboard support on mobile.
         *
         * @memberof EngineConfig
         * @type {boolean}
         * @default
         */
        experimentalVK: false,
        /**
         * The progressive web app service worker to install.
         * @memberof EngineConfig
         * @default
         * @type {string}
         */
        serviceWorker: '',
        /**
         * @ignore
         * @type {Array.<string>}
         */
        persistentPaths: ['/userfs'],
        /**
         * @ignore
         * @type {boolean}
         */
        persistentDrops: false,
        /**
         * @ignore
         * @type {Array.<string>}
         */
        gdextensionLibs: [],
        /**
         * @ignore
         * @type {Array.<string>}
         */
        fileSizes: [],
        /**
         * A callback function for handling Godot's ``OS.execute`` calls.
         *
         * This is for example used in the Web Editor template to switch between project manager and editor, and for running the game.
         *
         * @callback EngineConfig.onExecute
         * @param {string} path The path that Godot's wants executed.
         * @param {Array.<string>} args The arguments of the "command" to execute.
         */
        /**
         * @ignore
         * @type {?function(string, Array.<string>)}
         */
        onExecute: null,
        /**
         * A callback function for being notified when the Godot instance quits.
         *
         * **Note**: This function will not be called if the engine crashes or become unresponsive.
         *
         * @callback EngineConfig.onExit
         * @param {number} status_code The status code returned by Godot on exit.
         */
        /**
         * @ignore
         * @type {?function(number)}
         */
        onExit: null,
        /**
         * A callback function for displaying download progress.
         *
         * The function is called once per frame while downloading files, so the usage of ``requestAnimationFrame()``
         * is not necessary.
         *
         * If the callback function receives a total amount of bytes as 0, this means that it is impossible to calculate.
         * Possible reasons include:
         *
         * -  Files are delivered with server-side chunked compression
         * -  Files are delivered with server-side compression on Chromium
         * -  Not all file downloads have started yet (usually on servers without multi-threading)
         *
         * @callback EngineConfig.onProgress
         * @param {number} current The current amount of downloaded bytes so far.
         * @param {number} total The total amount of bytes to be downloaded.
         */
        /**
         * @ignore
         * @type {?function(number, number)}
         */
        onProgress: null,
        /**
         * A callback function for handling the standard output stream. This method should usually only be used in debug pages.
         *
         * By default, ``console.log()`` is used.
         *
         * @callback EngineConfig.onPrint
         * @param {...*} [var_args] A variadic number of arguments to be printed.
         */
        /**
         * @ignore
         * @type {?function(...*)}
         */
        onPrint: function () {
            console.log.apply(console, Array.from(arguments)); // eslint-disable-line no-console
        },
        /**
         * A callback function for handling the standard error stream. This method should usually only be used in debug pages.
         *
         * By default, ``console.error()`` is used.
         *
         * @callback EngineConfig.onPrintError
         * @param {...*} [var_args] A variadic number of arguments to be printed as errors.
        */
        /**
         * @ignore
         * @type {?function(...*)}
         */
        onPrintError: function (var_args) {
            console.error.apply(console, Array.from(arguments)); // eslint-disable-line no-console
        },
    };

    /**
     * @ignore
     * @struct
     * @constructor
     * @param {EngineConfig} opts
     */
    function Config(opts) {
        this.update(opts);
    }

    Config.prototype = cfg;

    /**
     * @ignore
     * @param {EngineConfig} opts
     */
    Config.prototype.update = function (opts) {
        const config = opts || {};
        // NOTE: We must explicitly pass the default, accessing it via
        // the key will fail due to closure compiler renames.
        function parse(key, def) {
            if (typeof (config[key]) === 'undefined') {
                return def;
            }
            return config[key];
        }
        // Module config
        this.unloadAfterInit = parse('unloadAfterInit', this.unloadAfterInit);
        this.onPrintError = parse('onPrintError', this.onPrintError);
        this.onPrint = parse('onPrint', this.onPrint);
        this.onProgress = parse('onProgress', this.onProgress);

        // Godot config
        this.canvas = parse('canvas', this.canvas);
        this.executable = parse('executable', this.executable);
        this.mainPack = parse('mainPack', this.mainPack);
        this.locale = parse('locale', this.locale);
        this.canvasResizePolicy = parse('canvasResizePolicy', this.canvasResizePolicy);
        this.persistentPaths = parse('persistentPaths', this.persistentPaths);
        this.persistentDrops = parse('persistentDrops', this.persistentDrops);
        this.experimentalVK = parse('experimentalVK', this.experimentalVK);
        this.focusCanvas = parse('focusCanvas', this.focusCanvas);
        this.serviceWorker = parse('serviceWorker', this.serviceWorker);
        this.gdextensionLibs = parse('gdextensionLibs', this.gdextensionLibs);
        this.fileSizes = parse('fileSizes', this.fileSizes);
        this.args = parse('args', this.args);
        this.onExecute = parse('onExecute', this.onExecute);
        this.onExit = parse('onExit', this.onExit);
    };

    /**
     * @ignore
     * @param {string} loadPath
     * @param {Response} response
     */
    Config.prototype.getModuleConfig = function (loadPath, response) {
        let r = response;
        const gdext = this.gdextensionLibs;
        return {
            'print': this.onPrint,
            'printErr': this.onPrintError,
            'thisProgram': this.executable,
            'noExitRuntime': false,
            'dynamicLibraries': [`${loadPath}.side.wasm`].concat(this.gdextensionLibs),
            'instantiateWasm': function (imports, onSuccess) {
                function done(result) {
                    onSuccess(result['instance'], result['module']);
                }
                if (typeof (WebAssembly.instantiateStreaming) !== 'undefined') {
                    WebAssembly.instantiateStreaming(Promise.resolve(r), imports).then(done);
                } else {
                    r.arrayBuffer().then(function (buffer) {
                        WebAssembly.instantiate(buffer, imports).then(done);
                    });
                }
                r = null;
                return {};
            },
            'locateFile': function (path) {
                if (!path.startsWith('godot.')) {
                    return path;
                } else if (path.endsWith('.audio.worklet.js')) {
                    return `${loadPath}.audio.worklet.js`;
                } else if (path.endsWith('.audio.position.worklet.js')) {
                    return `${loadPath}.audio.position.worklet.js`;
                } else if (path.endsWith('.js')) {
                    return `${loadPath}.js`;
                } else if (path in gdext) {
                    return path;
                } else if (path.endsWith('.side.wasm')) {
                    return `${loadPath}.side.wasm`;
                } else if (path.endsWith('.wasm')) {
                    return `${loadPath}.wasm`;
                }
                return path;
            },
        };
    };

    /**
     * @ignore
     * @param {function()} cleanup
     */
    Config.prototype.getGodotConfig = function (cleanup) {
        // Try to find a canvas
        if (!(this.canvas instanceof HTMLCanvasElement)) {
            const nodes = document.getElementsByTagName('canvas');
            if (nodes.length && nodes[0] instanceof HTMLCanvasElement) {
                const first = nodes[0];
                this.canvas = /** @type {!HTMLCanvasElement} */ (first);
            }
            if (!this.canvas) {
                throw new Error('No canvas found in page');
            }
        }
        // Canvas can grab focus on click, or key events won't work.
        if (this.canvas.tabIndex < 0) {
            this.canvas.tabIndex = 0;
        }

        // Browser locale, or custom one if defined.
        let locale = this.locale;
        if (!locale) {
            locale = navigator.languages ? navigator.languages[0] : navigator.language;
            locale = locale.split('.')[0];
        }
        locale = locale.replace('-', '_');
        const onExit = this.onExit;

        // Godot configuration.
        return {
            'canvas': this.canvas,
            'canvasResizePolicy': this.canvasResizePolicy,
            'locale': locale,
            'persistentDrops': this.persistentDrops,
            'virtualKeyboard': this.experimentalVK,
            'focusCanvas': this.focusCanvas,
            'onExecute': this.onExecute,
            'onExit': function (p_code) {
                cleanup(); // We always need to call the cleanup callback to free memory.
                if (typeof (onExit) === 'function') {
                    onExit(p_code);
                }
            },
        };
    };
    return new Config(initConfig);
};

/**
 * Projects exported for the Web expose the :js:class:`Engine` class to the JavaScript environment, that allows
 * fine control over the engine's start-up process.
 *
 * This API is built in an asynchronous manner and requires basic understanding
 * of `Promises <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises>`__.
 *
 * @module Engine
 * @header Web export JavaScript reference
 */
const Engine = (function () {
    const preloader = new Preloader();

    let loadPromise = null;
    let loadPath = '';
    let initPromise = null;

    /**
     * @classdesc The ``Engine`` class provides methods for loading and starting exported projects on the Web. For default export
     * settings, this is already part of the exported HTML page. To understand practical use of the ``Engine`` class,
     * see :ref:`Custom HTML page for Web export <doc_customizing_html5_shell>`.
     *
     * @description Create a new Engine instance with the given configuration.
     *
     * @global
     * @constructor
     * @param {EngineConfig} initConfig The initial config for this instance.
     */
    function Engine(initConfig) { // eslint-disable-line no-shadow
        this.config = new InternalConfig(initConfig);
        this.rtenv = null;
    }

    /**
     * Load the engine from the specified base path.
     *
     * @param {string} basePath Base path of the engine to load.
     * @param {number=} [size=0] The file size if known.
     * @returns {Promise} A Promise that resolves once the engine is loaded.
     *
     * @function Engine.load
     */
    Engine.load = function (basePath, size) {
        if (loadPromise == null) {
            loadPath = basePath;
            loadPromise = preloader.loadPromise(`${loadPath}.wasm`, size, true);
            requestAnimationFrame(preloader.animateProgress);
        }
        return loadPromise;
    };

    /**
     * Unload the engine to free memory.
     *
     * This method will be called automatically depending on the configuration. See :js:attr:`unloadAfterInit`.
     *
     * @function Engine.unload
     */
    Engine.unload = function () {
        loadPromise = null;
    };

    /**
     * Safe Engine constructor, creates a new prototype for every new instance to avoid prototype pollution.
     * @ignore
     * @constructor
     */
    function SafeEngine(initConfig) {
        const proto = /** @lends Engine.prototype */ {
            /**
             * Initialize the engine instance. Optionally, pass the base path to the engine to load it,
             * if it hasn't been loaded yet. See :js:meth:`Engine.load`.
             *
             * @param {string=} basePath Base path of the engine to load.
             * @return {Promise} A ``Promise`` that resolves once the engine is loaded and initialized.
             */
            init: function (basePath) {
                if (initPromise) {
                    return initPromise;
                }
                if (loadPromise == null) {
                    if (!basePath) {
                        initPromise = Promise.reject(new Error('A base path must be provided when calling `init` and the engine is not loaded.'));
                        return initPromise;
                    }
                    Engine.load(basePath, this.config.fileSizes[`${basePath}.wasm`]);
                }
                const me = this;
                function doInit(promise) {
                    // Care! Promise chaining is bogus with old emscripten versions.
                    // This caused a regression with the Mono build (which uses an older emscripten version).
                    // Make sure to test that when refactoring.
                    return new Promise(function (resolve, reject) {
                        promise.then(function (response) {
                            const cloned = new Response(response.clone().body, { 'headers': [['content-type', 'application/wasm']] });
                            Godot(me.config.getModuleConfig(loadPath, cloned)).then(function (module) {
                                const paths = me.config.persistentPaths;
                                module['initFS'](paths).then(function (err) {
                                    me.rtenv = module;
                                    if (me.config.unloadAfterInit) {
                                        Engine.unload();
                                    }
                                    resolve();
                                });
                            });
                        });
                    });
                }
                preloader.setProgressFunc(this.config.onProgress);
                initPromise = doInit(loadPromise);
                return initPromise;
            },

            /**
             * Load a file so it is available in the instance's file system once it runs. Must be called **before** starting the
             * instance.
             *
             * If not provided, the ``path`` is derived from the URL of the loaded file.
             *
             * @param {string|ArrayBuffer} file The file to preload.
             *
             * If a ``string`` the file will be loaded from that path.
             *
             * If an ``ArrayBuffer`` or a view on one, the buffer will used as the content of the file.
             *
             * @param {string=} path Path by which the file will be accessible. Required, if ``file`` is not a string.
             *
             * @returns {Promise} A Promise that resolves once the file is loaded.
             */
            preloadFile: function (file, path) {
                return preloader.preload(file, path, this.config.fileSizes[file]);
            },

            /**
             * Start the engine instance using the given override configuration (if any).
             * :js:meth:`startGame <Engine.prototype.startGame>` can be used in typical cases instead.
             *
             * This will initialize the instance if it is not initialized. For manual initialization, see :js:meth:`init <Engine.prototype.init>`.
             * The engine must be loaded beforehand.
             *
             * Fails if a canvas cannot be found on the page, or not specified in the configuration.
             *
             * @param {EngineConfig} override An optional configuration override.
             * @return {Promise} Promise that resolves once the engine started.
             */
            start: function (override) {
                this.config.update(override);
                const me = this;
                return me.init().then(function () {
                    if (!me.rtenv) {
                        return Promise.reject(new Error('The engine must be initialized before it can be started'));
                    }

                    let config = {};
                    try {
                        config = me.config.getGodotConfig(function () {
                            me.rtenv = null;
                        });
                    } catch (e) {
                        return Promise.reject(e);
                    }
                    // Godot configuration.
                    me.rtenv['initConfig'](config);

                    // Preload GDExtension libraries.
                    if (me.config.gdextensionLibs.length > 0 && !me.rtenv['loadDynamicLibrary']) {
                        return Promise.reject(new Error('GDExtension libraries are not supported by this engine version. '
                            + 'Enable "Extensions Support" for your export preset and/or build your custom template with "dlink_enabled=yes".'));
                    }
                    return new Promise(function (resolve, reject) {
                        for (const file of preloader.preloadedFiles) {
                            me.rtenv['copyToFS'](file.path, file.buffer);
                        }
                        preloader.preloadedFiles.length = 0; // Clear memory
                        me.rtenv['callMain'](me.config.args);
                        initPromise = null;
                        me.installServiceWorker();
                        resolve();
                    });
                });
            },

            /**
             * Start the game instance using the given configuration override (if any).
             *
             * This will initialize the instance if it is not initialized. For manual initialization, see :js:meth:`init <Engine.prototype.init>`.
             *
             * This will load the engine if it is not loaded, and preload the main pck.
             *
             * This method expects the initial config (or the override) to have both the :js:attr:`executable` and :js:attr:`mainPack`
             * properties set (normally done by the editor during export).
             *
             * @param {EngineConfig} override An optional configuration override.
             * @return {Promise} Promise that resolves once the game started.
             */
            startGame: function (override) {
                this.config.update(override);
                // Add main-pack argument.
                const exe = this.config.executable;
                const pack = this.config.mainPack || `${exe}.pck`;
                this.config.args = ['--main-pack', pack].concat(this.config.args);
                // Start and init with execName as loadPath if not inited.
                const me = this;
                return Promise.all([
                    this.init(exe),
                    this.preloadFile(pack, pack),
                ]).then(function () {
                    return me.start.apply(me);
                });
            },

            /**
             * Create a file at the specified ``path`` with the passed as ``buffer`` in the instance's file system.
             *
             * @param {string} path The location where the file will be created.
             * @param {ArrayBuffer} buffer The content of the file.
             */
            copyToFS: function (path, buffer) {
                if (this.rtenv == null) {
                    throw new Error('Engine must be inited before copying files');
                }
                this.rtenv['copyToFS'](path, buffer);
            },

            /**
             * Request that the current instance quit.
             *
             * This is akin the user pressing the close button in the window manager, and will
             * have no effect if the engine has crashed, or is stuck in a loop.
             *
             */
            requestQuit: function () {
                if (this.rtenv) {
                    this.rtenv['request_quit']();
                }
            },

            /**
             * Install the progressive-web app service worker.
             * @returns {Promise} The service worker registration promise.
             */
            installServiceWorker: function () {
                if (this.config.serviceWorker && 'serviceWorker' in navigator) {
                    try {
                        return navigator.serviceWorker.register(this.config.serviceWorker);
                    } catch (e) {
                        return Promise.reject(e);
                    }
                }
                return Promise.resolve();
            },
        };

        Engine.prototype = proto;
        // Closure compiler exported instance methods.
        Engine.prototype['init'] = Engine.prototype.init;
        Engine.prototype['preloadFile'] = Engine.prototype.preloadFile;
        Engine.prototype['start'] = Engine.prototype.start;
        Engine.prototype['startGame'] = Engine.prototype.startGame;
        Engine.prototype['copyToFS'] = Engine.prototype.copyToFS;
        Engine.prototype['requestQuit'] = Engine.prototype.requestQuit;
        Engine.prototype['installServiceWorker'] = Engine.prototype.installServiceWorker;
        // Also expose static methods as instance methods
        Engine.prototype['load'] = Engine.load;
        Engine.prototype['unload'] = Engine.unload;
        return new Engine(initConfig);
    }

    // Closure compiler exported static methods.
    SafeEngine['load'] = Engine.load;
    SafeEngine['unload'] = Engine.unload;

    // Feature-detection utilities.
    SafeEngine['isWebGLAvailable'] = Features.isWebGLAvailable;
    SafeEngine['isFetchAvailable'] = Features.isFetchAvailable;
    SafeEngine['isSecureContext'] = Features.isSecureContext;
    SafeEngine['isCrossOriginIsolated'] = Features.isCrossOriginIsolated;
    SafeEngine['isSharedArrayBufferAvailable'] = Features.isSharedArrayBufferAvailable;
    SafeEngine['isAudioWorkletAvailable'] = Features.isAudioWorkletAvailable;
    SafeEngine['getMissingFeatures'] = Features.getMissingFeatures;

    return SafeEngine;
}());
if (typeof window !== 'undefined') {
    window['Engine'] = Engine;
}
</file>

<file path="icon.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="128" height="128"><rect width="124" height="124" x="2" y="2" fill="#363d52" stroke="#212532" stroke-width="4" rx="14"/><g fill="#fff" transform="translate(12.322 12.322)scale(.101)"><path d="M105 673v33q407 354 814 0v-33z"/><path fill="#478cbf" d="m105 673 152 14q12 1 15 14l4 67 132 10 8-61q2-11 15-15h162q13 4 15 15l8 61 132-10 4-67q3-13 15-14l152-14V427q30-39 56-81-35-59-83-108-43 20-82 47-40-37-88-64 7-51 8-102-59-28-123-42-26 43-46 89-49-7-98 0-20-46-46-89-64 14-123 42 1 51 8 102-48 27-88 64-39-27-82-47-48 49-83 108 26 42 56 81zm0 33v39c0 276 813 276 814 0v-39l-134 12-5 69q-2 10-14 13l-162 11q-12 0-16-11l-10-65H446l-10 65q-4 11-16 11l-162-11q-12-3-14-13l-5-69z"/><path d="M483 600c0 34 58 34 58 0v-86c0-34-58-34-58 0z"/><circle cx="725" cy="526" r="90"/><circle cx="299" cy="526" r="90"/></g><g fill="#414042" transform="translate(12.322 12.322)scale(.101)"><circle cx="307" cy="532" r="60"/><circle cx="717" cy="532" r="60"/></g></svg>
</file>

<file path="icon.svg.import">
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://bw7rqy1rxpkyt"
path="res://.godot/imported/icon.svg-218a8f2b3041327d8a5756f3a245f83b.ctex"
metadata={
"vram_texture": false
}

[deps]

source_file="res://icon.svg"
dest_files=["res://.godot/imported/icon.svg-218a8f2b3041327d8a5756f3a245f83b.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=1.0
editor/scale_with_editor_scale=false
editor/convert_colors_with_editor_theme=false
</file>

<file path="scripts/game_over_ui.gd.uid">
uid://cc8x1tg73jmw1
</file>

<file path="scripts/game.gd.uid">
uid://dm3iihye8a3wy
</file>

<file path="scripts/ladder.gd.uid">
uid://xiu1moqcmuwf
</file>

<file path="scripts/pause_menu.gd.uid">
uid://djiyhe0r48jcv
</file>

<file path="scripts/player.gd.uid">
uid://cq0ybetkfcej5
</file>

<file path="scripts/save_game_data.gd.uid">
uid://c6aifpq7h0k5m
</file>

<file path="scripts/ShopOffer.gd.uid">
uid://chflva3ovnshi
</file>

<file path="scripts/ShopOfferItemUI.gd.uid">
uid://b0e73hbbbsvfc
</file>

<file path="scripts/ShopUI.gd.uid">
uid://u5it44tntj4c
</file>

<file path="scripts/title_screen.gd.uid">
uid://jpbvw88086wp
</file>

<file path="scripts/ui.gd.uid">
uid://cmf651j7qk52t
</file>

<file path="shaders/crt.gdshader.uid">
uid://dtcblh51mq0of
</file>

<file path="shaders/grayscale_shader.gdshader">
shader_type canvas_item;

uniform sampler2D SCREEN_TEXTURE : hint_screen_texture, filter_linear_mipmap;
// render_mode unshaded; // Możesz zostawić lub usunąć

void fragment() {
    // Teraz odwołanie do SCREEN_TEXTURE w tej linii jest poprawne,
    // bo zadeklarowaliśmy uniform o tej nazwie powyżej.
    vec4 original_color = texture(SCREEN_TEXTURE, SCREEN_UV);

    // Oblicz wartość skali szarości (standardowa formuła luminancji)
    float grayscale = dot(original_color.rgb, vec3(0.299, 0.587, 0.114));
    // Ustaw kolor wyjściowy na odcień szarości, zachowując oryginalną alfę
    COLOR = vec4(vec3(grayscale), original_color.a);
}
</file>

<file path="shaders/grayscale_shader.gdshader.uid">
uid://clgqqxru7jg8
</file>

<file path=".gitignore">
# Godot 4+ specific ignores
.godot/
/android/

# Godot-specific ignores
.import/
export.cfg
export_presets.cfg

# Imported translations (automatically generated from CSV files)
*.translation

# Mono-specific ignores
.mono/
data_*/
mono_crash.*.json
</file>

<file path="addons/Inventory/UI/InventoryGridUI/InventoryGridUI.tscn">
[gd_scene load_steps=2 format=3 uid="uid://dp2tfsw1nyc3v"]

[ext_resource type="Script" uid="uid://b5hdti82wmmgi" path="res://addons/Inventory/UI/SimpleInventoryItemUI.gd" id="1_d6dd7"]

[node name="InventoryGridUI" type="BoxContainer"]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
vertical = true
script = ExtResource("1_d6dd7")

[node name="GridContainer" type="GridContainer" parent="."]
layout_mode = 2
columns = 2
</file>

<file path="assets/inventory/ammolite.tres">
[gd_resource type="Resource" script_class="InventoryItemType" load_steps=4 format=3 uid="uid://cyu80pqqds688"]

[ext_resource type="Script" uid="uid://c2kq0x5odumur" path="res://addons/Inventory/InventoryItemType.gd" id="1_13b4e"]
[ext_resource type="Texture2D" uid="uid://ccy1yfxd6dm23" path="res://assets/sprites/Miner16Bit_AllFiles_v1/Miner16Bit_WorldTiles_01.png" id="2_ybrhv"]

[sub_resource type="AtlasTexture" id="AtlasTexture_e8185"]
atlas = ExtResource("2_ybrhv")
region = Rect2(48, 0, 16, 16)

[resource]
script = ExtResource("1_13b4e")
name = "Ammolite"
description = "A precious stone with a relatively low price."
texture = SubResource("AtlasTexture_e8185")
weight = 1
stackable = true
max_stack_size = 99
metadata/_custom_type_script = "uid://c2kq0x5odumur"
</file>

<file path="assets/inventory/crystal.tres">
[gd_resource type="Resource" script_class="InventoryItemType" load_steps=4 format=3 uid="uid://c1cj60mykpbgg"]

[ext_resource type="Script" uid="uid://c2kq0x5odumur" path="res://addons/Inventory/InventoryItemType.gd" id="1_e3xol"]
[ext_resource type="Texture2D" uid="uid://cbyde4wxvjcuu" path="res://assets/sprites/Miner16Bit_AllFiles_v1/Miner16Bit_WorldTiles_02_stones.png" id="2_4bjxa"]

[sub_resource type="AtlasTexture" id="AtlasTexture_e8185"]
atlas = ExtResource("2_4bjxa")
region = Rect2(192, 127.7, 16, 16)

[resource]
script = ExtResource("1_e3xol")
name = "Crystal"
description = "The rarest stone in the world, very valuable, everyone dreams of obtaining it"
texture = SubResource("AtlasTexture_e8185")
weight = 1
stackable = true
max_stack_size = 99
metadata/_custom_type_script = "uid://c2kq0x5odumur"
</file>

<file path="assets/inventory/jasper.tres">
[gd_resource type="Resource" script_class="InventoryItemType" load_steps=4 format=3 uid="uid://tfimc524r0vo"]

[ext_resource type="Script" uid="uid://c2kq0x5odumur" path="res://addons/Inventory/InventoryItemType.gd" id="1_nfvar"]
[ext_resource type="Texture2D" uid="uid://cbyde4wxvjcuu" path="res://assets/sprites/Miner16Bit_AllFiles_v1/Miner16Bit_WorldTiles_02_stones.png" id="2_hk6sh"]

[sub_resource type="AtlasTexture" id="AtlasTexture_e8185"]
atlas = ExtResource("2_hk6sh")
region = Rect2(192, 0.47, 16, 16)

[resource]
script = ExtResource("1_nfvar")
name = "Jasper"
description = "A rarer stone that occurs in the deeper layers of the world."
texture = SubResource("AtlasTexture_e8185")
weight = 1
stackable = true
max_stack_size = 99
metadata/_custom_type_script = "uid://c2kq0x5odumur"
</file>

<file path="assets/inventory/ladder.tres">
[gd_resource type="Resource" script_class="InventoryItemType" load_steps=4 format=3 uid="uid://pmkg1u7amds4"]

[ext_resource type="Script" uid="uid://c2kq0x5odumur" path="res://addons/Inventory/InventoryItemType.gd" id="1_bqfb1"]
[ext_resource type="Texture2D" uid="uid://bcm1qkp4dydjd" path="res://assets/sprites/Miner16Bit_AllFiles_v1/Miner16Bit_WorldTiles_02.png" id="2_ubyk3"]

[sub_resource type="AtlasTexture" id="AtlasTexture_x35jx"]
atlas = ExtResource("2_ubyk3")
region = Rect2(112, 80, 16, 16)

[resource]
script = ExtResource("1_bqfb1")
name = "Ladder"
description = "Wooden ladder used for climbing"
texture = SubResource("AtlasTexture_x35jx")
weight = 1
stackable = true
max_stack_size = 99
metadata/_custom_type_script = "uid://c2kq0x5odumur"
</file>

<file path="assets/inventory/malachite.tres">
[gd_resource type="Resource" script_class="InventoryItemType" load_steps=4 format=3 uid="uid://dstqfk7foojlw"]

[ext_resource type="Script" uid="uid://c2kq0x5odumur" path="res://addons/Inventory/InventoryItemType.gd" id="1_hufkg"]
[ext_resource type="Texture2D" uid="uid://cbyde4wxvjcuu" path="res://assets/sprites/Miner16Bit_AllFiles_v1/Miner16Bit_WorldTiles_02_stones.png" id="2_euvsr"]

[sub_resource type="AtlasTexture" id="AtlasTexture_e8185"]
atlas = ExtResource("2_euvsr")
region = Rect2(192, 63.88, 16, 16)

[resource]
script = ExtResource("1_hufkg")
name = "Malachite"
description = "A rare stone that only the most persistent can obtain."
texture = SubResource("AtlasTexture_e8185")
weight = 1
stackable = true
max_stack_size = 99
metadata/_custom_type_script = "uid://c2kq0x5odumur"
</file>

<file path="assets/scenes/InventoryGridUI.tscn">
[gd_scene load_steps=3 format=3 uid="uid://dp2tfsw1nyc3v"]

[ext_resource type="Script" uid="uid://dwyndp832h061" path="res://addons/Inventory/UI/SimpleInventoryUI.gd" id="1_d6dd7"]
[ext_resource type="PackedScene" uid="uid://bt4wvwr8oqckg" path="res://assets/scenes/InventoryGridItemUI.tscn" id="2_rtvfl"]

[node name="InventoryGridUI" type="BoxContainer"]
top_level = true
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
vertical = true
script = ExtResource("1_d6dd7")
ItemScene = ExtResource("2_rtvfl")
container_target_node = NodePath("GridContainer")

[node name="GridContainer" type="GridContainer" parent="."]
layout_mode = 2
columns = 2
</file>

<file path="assets/scenes/InventoryListUI.tscn">
[gd_scene load_steps=11 format=3 uid="uid://bd4oyxo6udxfd"]

[ext_resource type="Script" uid="uid://b40dmy1axmbj1" path="res://addons/Inventory/UI/List/InventoryListUI.gd" id="1_j88ox"]
[ext_resource type="PackedScene" uid="uid://dx0nelbl5t6pt" path="res://assets/scenes/InventoryListItemUI.tscn" id="2_cj375"]
[ext_resource type="Script" uid="uid://drdwdl32kthr4" path="res://addons/Inventory/Inventory.gd" id="3_b7gc8"]
[ext_resource type="Script" uid="uid://c31st5sfn50qu" path="res://addons/Inventory/InventoryItem.gd" id="3_ivh56"]
[ext_resource type="Script" uid="uid://c2kq0x5odumur" path="res://addons/Inventory/InventoryItemType.gd" id="4_t8n1e"]

[sub_resource type="Resource" id="Resource_hfwgv"]
script = ExtResource("4_t8n1e")
name = "Unknown Item with very long text"
description = ""
weight = 1
stackable = true
max_stack_size = 99

[sub_resource type="Resource" id="Resource_ib6o5"]
script = ExtResource("3_ivh56")
item_type = SubResource("Resource_hfwgv")
custom_name = ""

[sub_resource type="Resource" id="Resource_0lq4p"]
script = ExtResource("4_t8n1e")
name = "Iron Sword"
description = ""
weight = 1
stackable = true
max_stack_size = 99

[sub_resource type="Resource" id="Resource_33y3e"]
script = ExtResource("3_ivh56")
item_type = SubResource("Resource_0lq4p")
custom_name = ""

[sub_resource type="Resource" id="Resource_fp4j3"]
script = ExtResource("3_b7gc8")
capacity = 5

[node name="InventoryListUI" type="ScrollContainer"]
custom_minimum_size = Vector2(50, 50)
size_flags_horizontal = 3
size_flags_vertical = 3
horizontal_scroll_mode = 0
script = ExtResource("1_j88ox")
InventoryListItemUI = ExtResource("2_cj375")
initial_items = Array[ExtResource("3_ivh56")]([SubResource("Resource_ib6o5"), SubResource("Resource_33y3e"), SubResource("Resource_33y3e")])
inventory = SubResource("Resource_fp4j3")

[node name="VBoxContainer" type="VBoxContainer" parent="."]
layout_mode = 2
</file>

<file path="assets/scenes/player.tscn">
[gd_scene load_steps=44 format=3 uid="uid://d00swspj35t6w"]

[ext_resource type="Script" uid="uid://cq0ybetkfcej5" path="res://scripts/player.gd" id="1_g2els"]
[ext_resource type="Resource" uid="uid://pmkg1u7amds4" path="res://assets/inventory/ladder.tres" id="2_60g6h"]
[ext_resource type="Texture2D" uid="uid://owxmkmo3hff" path="res://assets/sprites/Miner16Bit_AllFiles_v1/Miner_AllAnimations_SpriteSheet.png" id="2_g2els"]
[ext_resource type="PackedScene" uid="uid://c5jhyxyopykhd" path="res://assets/scenes/ladder.tscn" id="3_hrrj1"]
[ext_resource type="AudioStream" uid="uid://ympmury34vme" path="res://assets/sounds/ladder-climbing.mp3" id="3_qhqgy"]
[ext_resource type="Script" uid="uid://drdwdl32kthr4" path="res://addons/Inventory/Inventory.gd" id="4_hrrj1"]
[ext_resource type="AudioStream" uid="uid://bawabjij02gso" path="res://assets/sounds/jump.wav" id="4_qlg0r"]
[ext_resource type="AudioStream" uid="uid://b6hbsvqkflhua" path="res://assets/sounds/walk3.ogg" id="5_qlg0r"]
[ext_resource type="AudioStream" uid="uid://bbhbi0jxvy13x" path="res://assets/sounds/ladder-create.ogg" id="6_fjrip"]
[ext_resource type="AudioStream" uid="uid://y63k8i7xjsa6" path="res://assets/sounds/ladder-destroy.ogg" id="7_smehm"]
[ext_resource type="AudioStream" uid="uid://b0grpfvqb5ua1" path="res://assets/sounds/dig1.mp3" id="8_16a80"]

[sub_resource type="Resource" id="Resource_hrrj1"]
script = ExtResource("4_hrrj1")
capacity = 5
metadata/_custom_type_script = "uid://drdwdl32kthr4"

[sub_resource type="AtlasTexture" id="AtlasTexture_y4r1p"]
atlas = ExtResource("2_g2els")
region = Rect2(0, 80, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_d2wvv"]
atlas = ExtResource("2_g2els")
region = Rect2(16, 80, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_3v2ag"]
atlas = ExtResource("2_g2els")
region = Rect2(32, 80, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_jej6c"]
atlas = ExtResource("2_g2els")
region = Rect2(48, 80, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_60mlk"]
atlas = ExtResource("2_g2els")
region = Rect2(0, 96, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_i4ail"]
atlas = ExtResource("2_g2els")
region = Rect2(16, 96, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_a38lo"]
atlas = ExtResource("2_g2els")
region = Rect2(32, 96, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_4ni07"]
atlas = ExtResource("2_g2els")
region = Rect2(48, 96, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_l71n6"]
atlas = ExtResource("2_g2els")
region = Rect2(64, 96, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_f1ej7"]
atlas = ExtResource("2_g2els")
region = Rect2(0, 32, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_oprun"]
atlas = ExtResource("2_g2els")
region = Rect2(16, 32, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_a8ls1"]
atlas = ExtResource("2_g2els")
region = Rect2(32, 32, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_qfm1y"]
atlas = ExtResource("2_g2els")
region = Rect2(48, 32, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_fulsm"]
atlas = ExtResource("2_g2els")
region = Rect2(64, 32, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_4r5pv"]
atlas = ExtResource("2_g2els")
region = Rect2(80, 32, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_ke2ow"]
atlas = ExtResource("2_g2els")
region = Rect2(0, 48, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_ujl30"]
atlas = ExtResource("2_g2els")
region = Rect2(16, 48, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_31cv2"]
atlas = ExtResource("2_g2els")
region = Rect2(32, 48, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_pf23h"]
atlas = ExtResource("2_g2els")
region = Rect2(48, 48, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_dt7fs"]
atlas = ExtResource("2_g2els")
region = Rect2(64, 48, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_wqfne"]
atlas = ExtResource("2_g2els")
region = Rect2(80, 48, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_qhqgy"]
atlas = ExtResource("2_g2els")
region = Rect2(0, 0, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_dqkch"]
atlas = ExtResource("2_g2els")
region = Rect2(176, 0, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_g2els"]
atlas = ExtResource("2_g2els")
region = Rect2(0, 0, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_qlg0r"]
atlas = ExtResource("2_g2els")
region = Rect2(16, 0, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_tuyoq"]
atlas = ExtResource("2_g2els")
region = Rect2(32, 0, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_fjrip"]
atlas = ExtResource("2_g2els")
region = Rect2(48, 0, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_smehm"]
atlas = ExtResource("2_g2els")
region = Rect2(64, 0, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_ur7pv"]
atlas = ExtResource("2_g2els")
region = Rect2(80, 0, 16, 16)

[sub_resource type="SpriteFrames" id="SpriteFrames_ur7pv"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_y4r1p")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_d2wvv")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_3v2ag")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_jej6c")
}],
"loop": false,
"name": &"climb",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_60mlk")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_i4ail")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_a38lo")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_4ni07")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_l71n6")
}],
"loop": true,
"name": &"death",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_f1ej7")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_oprun")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_a8ls1")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_qfm1y")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_fulsm")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_4r5pv")
}],
"loop": true,
"name": &"dig",
"speed": 10.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_ke2ow")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ujl30")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_31cv2")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_pf23h")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_dt7fs")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_wqfne")
}],
"loop": true,
"name": &"dig_under",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_qhqgy")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_dqkch")
}],
"loop": true,
"name": &"idle",
"speed": 0.7
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_g2els")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_qlg0r")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_tuyoq")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_fjrip")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_smehm")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ur7pv")
}],
"loop": true,
"name": &"walk",
"speed": 7.0
}]

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_g2els"]
radius = 3.0
height = 12.0

[node name="Player" type="CharacterBody2D"]
z_index = 1
collision_layer = 2
script = ExtResource("1_g2els")
inventory = SubResource("Resource_hrrj1")
ladder_scene = ExtResource("3_hrrj1")
ladder_item_type = ExtResource("2_60g6h")

[node name="AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
position = Vector2(0, -8)
sprite_frames = SubResource("SpriteFrames_ur7pv")
animation = &"dig"
autoplay = "idle"

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(0, -6)
shape = SubResource("CapsuleShape2D_g2els")

[node name="LadderClimbSound" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource("3_qhqgy")

[node name="JumpSound" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource("4_qlg0r")
volume_db = -15.951

[node name="WalkSound" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource("5_qlg0r")
volume_db = 5.019

[node name="LadderPlaceSound" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource("6_fjrip")

[node name="LadderRemoveSound" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource("7_smehm")

[node name="DigSound" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource("8_16a80")
volume_db = -8.19
</file>

<file path="assets/shop_offers/buy_health_potion.tres">
[gd_resource type="Resource" script_class="ShopOffer" load_steps=4 format=3 uid="uid://dtks8ngi8s0p"]

[ext_resource type="Texture2D" uid="uid://chv5cfq33cho" path="res://assets/sprites/icons/red-potions.png" id="1_uwpbh"]
[ext_resource type="Script" uid="uid://chflva3ovnshi" path="res://scripts/ShopOffer.gd" id="2_5dvet"]

[sub_resource type="AtlasTexture" id="AtlasTexture_evy74"]
atlas = ExtResource("1_uwpbh")
region = Rect2(0, 0.079, 16, 16)

[resource]
resource_name = "shop_offer_unlock_level_2_digging"
script = ExtResource("2_5dvet")
offer_name = "Buy Health Potion"
description = "A bubbling potion that restores 50 health points. Costs 100 coins."
cost_amount = 100
reward_type = 3
reward_string_data = "HEALTH_POTION_PURCHASE"
reward_float_data = 0.0
unique_id = "SHOP_OFFER_BUY_HEALTH_POTION"
display_icon = SubResource("AtlasTexture_evy74")
level_number = 0
</file>

<file path="assets/shop_offers/buy_ladder.tres">
[gd_resource type="Resource" script_class="ShopOffer" load_steps=4 format=3 uid="uid://biui08uv4h0d0"]

[ext_resource type="Texture2D" uid="uid://ccy1yfxd6dm23" path="res://assets/sprites/Miner16Bit_AllFiles_v1/Miner16Bit_WorldTiles_01.png" id="1_rjkt3"]
[ext_resource type="Script" uid="uid://chflva3ovnshi" path="res://scripts/ShopOffer.gd" id="2_evy74"]

[sub_resource type="AtlasTexture" id="AtlasTexture_evy74"]
atlas = ExtResource("1_rjkt3")
region = Rect2(111.1, 80, 16, 16)

[resource]
resource_name = "shop_offer_unlock_level_2_digging"
script = ExtResource("2_evy74")
offer_name = "Buy Ladder"
description = "Purchase a wooden ladder for 40 coins."
cost_amount = 40
reward_type = 3
reward_string_data = "LADDER_ITEM_PURCHASE"
reward_float_data = 0.0
unique_id = "SHOP_OFFER_BUY_LADDER"
display_icon = SubResource("AtlasTexture_evy74")
level_number = 0
</file>

<file path="assets/shop_offers/upgrade_pickaxe_damage_2.tres">
[gd_resource type="Resource" script_class="ShopOffer" load_steps=3 format=3 uid="uid://dggg7w0kcbl64"]

[ext_resource type="Script" uid="uid://chflva3ovnshi" path="res://scripts/ShopOffer.gd" id="1_0ucdo"]
[ext_resource type="Texture2D" uid="uid://3a6cnv81gv41" path="res://assets/sprites/icons/pickaxe2.tres" id="1_1lo4t"]

[resource]
resource_name = "shop_offer_unlock_level_2_digging"
script = ExtResource("1_0ucdo")
offer_name = "Upgrade Pickaxe (Lvl 3)"
description = "Increases pickaxe digging power, allowing for faster mining through rocks
Cost: 33 Coins"
cost_amount = 33
reward_type = 2
reward_string_data = "PICKAXE_LEVEL_PROGRESS"
reward_float_data = 18.0
unique_id = "PICKAOFFER_PICKAXE_LVL_2"
display_icon = ExtResource("1_1lo4t")
level_number = 2
</file>

<file path="assets/shop_offers/upgrade_pickaxe_damage_3.tres">
[gd_resource type="Resource" script_class="ShopOffer" load_steps=3 format=3 uid="uid://c8jctau0md60g"]

[ext_resource type="Texture2D" uid="uid://dyt11erv83mp" path="res://assets/sprites/icons/pickaxe3.tres" id="1_8dxao"]
[ext_resource type="Script" uid="uid://chflva3ovnshi" path="res://scripts/ShopOffer.gd" id="1_gylkb"]

[resource]
resource_name = "shop_offer_unlock_level_3_digging"
script = ExtResource("1_gylkb")
offer_name = "Upgrade Pickaxe (Lvl 4)"
description = "Increases pickaxe digging power, allowing for faster mining through rocks
Cost: 36 Coins"
cost_amount = 36
reward_type = 2
reward_string_data = "PICKAXE_LEVEL_PROGRESS"
reward_float_data = 27.0
unique_id = "OFFER_PICKAXE_LVL_3"
display_icon = ExtResource("1_8dxao")
level_number = 3
</file>

<file path="assets/sprites/icons/pickaxe_icon.tres">
[gd_resource type="AtlasTexture" load_steps=2 format=3 uid="uid://dro778sicup7b"]

[ext_resource type="Texture2D" uid="uid://lg1fw7bpjkf" path="res://assets/sprites/icons/pickaxe.png" id="1_3eruf"]

[resource]
atlas = ExtResource("1_3eruf")
region = Rect2(377.908, -4.76367, 203.313, 1.2102)
</file>

<file path="LICENSE">
MIT License

Copyright (c) 2025 Jonasz Lazar, Konrad Skowron and Mateusz Staszków

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
</file>

<file path="scripts/ShopOffer.gd">
# res://scripts/ShopOffer.gd
class_name ShopOffer extends Resource

enum RewardType { UNLOCK_DIGGING, INCREASE_MAX_HP, PICKAXE_30, OTHER }

@export var offer_name: String = "Offer Name"
@export_multiline var description: String = "Offer description."

@export var cost_item: InventoryItemType
@export var cost_amount: int = 1 # Jeśli cost_item jest null, to jest to koszt w monetach

@export var reward_type: RewardType = RewardType.OTHER
# reward_string_data: może być używane jako klucz identyfikujący typ ulepszenia, np. "PICKAXE_LEVEL_PROGRESS"
@export var reward_string_data: String = "" 
# reward_float_data: wartość nagrody, np. nowy mnożnik obrażeń dla kilofa
@export var reward_float_data: float = 0.0  

@export var unique_id: String = "unique_offer_id_for_this_specific_offer" # ID tej konkretnej oferty/poziomu

# NOWE POLA:
@export var display_icon: Texture2D # Ikona do pokazania dla tej konkretnej oferty (np. ikona kilofa Lvl 2)
@export var level_number: int = 0 # Numer poziomu, który ta oferta odblokowuje (1 dla Lvl 1, 2 dla Lvl 2 itd.)
                                  # 0 może oznaczać, że nie dotyczy/jednorazowe ulepszenie
</file>

<file path="addons/Inventory/Inventory.gd">
class_name Inventory extends Resource

var slots: Array[InventorySlot] = []
@export var capacity: int = 5  # Maximum weight capacity of the inventory

signal item_added(item:InventoryItem, slot_idx:int)
signal item_removed(item:InventoryItem, slot_idx:int)
signal capacity_changed(from:int, to:int)

# Returns true if all items in the array are of the same InventoryItemType
static func is_items_of_same_type(items: Array[InventoryItem]) -> bool:
    # If the array is empty, return true (no conflicting types)
    if items.size() == 0:
        return true
    
    # Store the type of the first item
    var item_type = items[0].item_type
    # Loop through the rest of the items and check their type
    for i in range(1, items.size()):
        if items[i].item_type != item_type:
            return false
    
    return true

# Initialize the slots with empty InventorySlots
func _init():
    for i in range(capacity):
        var slot = InventorySlot.new()
        slots.append(slot)
        slot.item_added.connect(_on_slot_item_added.bind(i))
        slot.item_removed.connect(_on_slot_item_removed.bind(i))
    emit_changed()  # Emit change when initializing the inventory

# Signal handler for when an item is added to a slot
func _on_slot_item_added(item:InventoryItem, slot_idx:int):
    item_added.emit(item, slot_idx)
    emit_changed()

# Signal handler for when an item is removed from a slot
func _on_slot_item_removed(item:InventoryItem, slot_idx:int):
    item_removed.emit(item, slot_idx)
    emit_changed()

# Sorts all items by type in ascending order.
# Items are temporarily removed from their slots and reinserted after sorting.
func sort():
    var items = take_all_items()
    items.sort_custom(_custom_sort_item_type)
    
    for item in items:
        put(item)
    emit_changed()

# Custom sorting method to compare item types by name
func _custom_sort_item_type(a:InventoryItem, b:InventoryItem) -> bool:
    var names = [a.item_type.name, b.item_type.name]
    names.sort()
    return names[0] == a.name

# Get all items from all slots in the inventory
func get_all_items() -> Array[InventoryItem]:
    var items : Array[InventoryItem] = []
    
    for slot in slots:
        items.append_array(slot.items)
    
    return items

# Take all items from the inventory and empty all slots
func take_all_items() -> Array[InventoryItem]:
    var items :Array[InventoryItem] = []
    
    for slot in slots:
        items.append_array(slot.take_all())
    
    emit_changed()
    return items

# Get the total count of items in the inventory
func get_count() -> int:
    var count = 0
    for slot in slots:
        count += slot.count
    
    return count

# Check if the inventory is empty
func is_empty() -> bool:
    return get_count() == 0

# Change the capacity of the inventory and resize the slots array
func resize(new_capacity: int):
    if new_capacity == capacity:
        return
    
    var old_capacity = capacity
    
    if new_capacity < capacity:
        slots.resize(new_capacity)  # Remove excess slots
    else:
        for i in range(capacity, new_capacity):
            slots.append(InventorySlot.new())  # Add new empty slots
    capacity = new_capacity

    capacity_changed.emit(old_capacity, new_capacity)
    emit_changed()

# Check if the inventory has space for a given item
func has_space_for_item(item: InventoryItem) -> bool:
    for slot in slots:
        if slot.type == null or (slot.type == item and slot.type.stackable and slot.available_stacks() > 0):
            return true
    return false

# Put an item into the inventory
func put(item: InventoryItem) -> bool:
    if item.item_type == null:
        printerr("Inventory.put(): otrzymałem InventoryItem bez ustawionego item_type!")
        return false

    
    # Try to stack the item in an existing slot
    for slot in slots:
        if slot.type == item.item_type and item.item_type.stackable:
            if slot.available_stacks() > 0:
                slot.put(item)
                emit_changed()
                return true
    
    # If stacking isn't possible, find an empty slot
    for slot in slots:
        if slot.type == null:
            slot.put(item)
            emit_changed()
            return true
    
    return false

# Check if there is space for multiple items in the inventory
func has_space_for_items(items: Array[InventoryItem]) -> bool:
    for item in items:
        if not has_space_for_item(item):
            return false
    return true

# Put multiple items into the inventory at once
func put_many(items: Array[InventoryItem]) -> bool:
    if not has_space_for_items(items):
        return false
    
    for item in items:
        if not put(item):
            return false
    emit_changed()
    return true

# Remove a specific item from the inventory
func take(item: InventoryItem):
    if item == null: # Dobre sprawdzenie
        printerr("Inventory.take(): Attempted to take a null item!")
        return

    # Zmieniamy pętlę, żeby mieć indeks 'i'
    for i in range(slots.size()): 
        var slot = slots[i] # Pobieramy slot używając indeksu
        
        if item in slot.items: # Sprawdzamy czy ten konkretny item jest w tym slocie
            slot.take(item) # Usuwamy item z listy wewnętrznej slotu

            item_removed.emit(item, i) # Emitujemy sygnał dla UI, podając item i INDEKS slotu 'i'
            
            emit_changed() # Sygnał dla edytora Godot
            return # Znaleziono i usunięto, wychodzimy

# Take all items from a specific slot
func take_all_from_slot(slot_idx: int) -> Array[InventoryItem]:
    var slot = slots[slot_idx]
    var items: Array[InventoryItem] = []
    if slot.item != null:
        items.append(slot.item)
        slot.clear()
    emit_changed()
    return items

# Get all items of a specific type from the inventory
func get_of_type(type: InventoryItemType) -> Array[InventoryItem]:
    var items: Array[InventoryItem] = []
    for slot in slots:
        if slot.item != null and slot.item.item_type == type:
            items.append(slot.item)
    return items

# Check if a specific item exists in the inventory
func has_item(item: InventoryItem) -> bool:
    for slot in slots:
        if slot.item == item:
            return true
    return false

# Check if an item Qof a specific type exists in the inventory
func has_item_of_type(type: InventoryItemType) -> bool:
    for slot in slots:
        if not slot.is_empty() and slot.type == type:
            return true
    return false

# Get the total amount of a specific item type in the inventory
func get_amount_of_item_type(type: InventoryItemType) -> int:
    var amount = 0
    for slot in slots:
        if not slot.is_empty():
            if slot.type == type:
                amount += slot.count
    return amount

# Move an item from one slot to another
func move(item: InventoryItem, new_slot_idx: int):
    for i in range(slots.size()):
        if slots[i].items.has(item):  # Check if the current slot contains the item
            var current_slot = slots[i]
            var new_slot = slots[new_slot_idx]
            
            # If the new slot contains the same item type and the item is stackable, try to stack
            if new_slot.type == item.item_type and item.item_type.stackable:
                # Transfer as many items as possible
                var remaining_items = current_slot.take_many(new_slot.available_stacks())
                new_slot.put_all(remaining_items)
                
                # Clear current slot if empty
                if current_slot.is_empty():
                    current_slot.clear()
            else:
                # Swap the items if they cannot be stacked
                var temp_items = new_slot.take_all()  # Take all items from the new slot
                new_slot.put_all(current_slot.take_all())  # Move all items from the current slot to the new slot
                current_slot.put_all(temp_items)  # Put the previously taken items into the original slot
            
            emit_changed()
            return

# Get the total weight of all items in the inventory
func get_total_weight() -> int:
    var total_weight: int = 0
    for slot in slots:
        total_weight += slot.weight
    return total_weight
</file>

<file path="addons/Inventory/UI/InventoryGridUI/InventoryPopupTooltip.gd">
class_name InventoryPopupTooltip extends PanelContainer

@export var offset := Vector2(8, 8)

func _process(delta):
    var vp_size := get_viewport_rect().size
    var mouse := get_global_mouse_position()
    
    var pos = mouse
    
    # horizontally
    if mouse.x <= vp_size.x / 2:
        pos.x = mouse.x + offset.x
    else:
        pos.x = mouse.x - size.x - offset.x
    
    # vertically
    if mouse.y > vp_size.y / 2:
        pos.y = mouse.y - size.y - offset.y
    else:
        pos.y = mouse.y + offset.y
    
    global_position = pos
</file>

<file path="assets/scenes/crt_shader.tscn">
[gd_scene load_steps=3 format=3 uid="uid://cfjwdbp0vsk1a"]

[ext_resource type="Shader" uid="uid://dtcblh51mq0of" path="res://shaders/crt.gdshader" id="1_70rfk"]

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ne4ig"]
shader = ExtResource("1_70rfk")
shader_parameter/resolution = Vector2(800, 450)
shader_parameter/scan_line_amount = 1.0
shader_parameter/warp_amount = 0.1
shader_parameter/noise_amount = 0.03
shader_parameter/interference_amount = 0.2
shader_parameter/grille_amount = 0.1
shader_parameter/grille_size = 1.0
shader_parameter/vignette_amount = 0.6
shader_parameter/vignette_intensity = 0.4
shader_parameter/aberation_amount = 0.5
shader_parameter/roll_line_amount = 0.0
shader_parameter/roll_speed = 1.0
shader_parameter/scan_line_strength = -8.0
shader_parameter/pixel_strength = -2.0

[node name="CRT_Shader" type="CanvasLayer"]

[node name="ColorRect" type="ColorRect" parent="."]
material = SubResource("ShaderMaterial_ne4ig")
offset_left = -7664.0
offset_top = -8037.0
offset_right = 7777.0
offset_bottom = 45440.0
mouse_filter = 2
</file>

<file path="assets/scenes/ladder.tscn">
[gd_scene load_steps=5 format=3 uid="uid://c5jhyxyopykhd"]

[ext_resource type="Script" uid="uid://xiu1moqcmuwf" path="res://scripts/ladder.gd" id="1_xb1tl"]
[ext_resource type="Texture2D" uid="uid://bcm1qkp4dydjd" path="res://assets/sprites/Miner16Bit_AllFiles_v1/Miner16Bit_WorldTiles_02.png" id="1_xxwne"]

[sub_resource type="AtlasTexture" id="AtlasTexture_xxwne"]
atlas = ExtResource("1_xxwne")

[sub_resource type="RectangleShape2D" id="RectangleShape2D_xb1tl"]
size = Vector2(9.4, 8.6)

[node name="Ladder" type="Area2D" groups=["ladders"]]
script = ExtResource("1_xb1tl")

[node name="Sprite2D" type="Sprite2D" parent="."]
texture = SubResource("AtlasTexture_xxwne")
region_enabled = true
region_rect = Rect2(112, 80, 16, 16)

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_xb1tl")

[connection signal="body_entered" from="." to="." method="_on_body_entered"]
[connection signal="body_exited" from="." to="." method="_on_body_exited"]
</file>

<file path="assets/scenes/title_screen.tscn">
[gd_scene load_steps=3 format=3 uid="uid://do4jih7oduo1b"]

[ext_resource type="Texture2D" uid="uid://dy5ixplrptlvo" path="res://img/background_image.png" id="1_j8fbj"]
[ext_resource type="Script" uid="uid://jpbvw88086wp" path="res://scripts/title_screen.gd" id="1_tlwn0"]

[node name="TitleScreen" type="Control"]
layout_mode = 3
anchors_preset = 0
offset_right = 40.0
offset_bottom = 40.0
script = ExtResource("1_tlwn0")

[node name="BackgroundImage" type="TextureRect" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = -204.0
offset_right = 1316.0
offset_bottom = 608.0
grow_horizontal = 2
grow_vertical = 2
texture = ExtResource("1_j8fbj")
expand_mode = 3
stretch_mode = 5

[node name="NewGameButton" type="Button" parent="."]
layout_mode = 0
offset_left = 720.0
offset_top = 260.0
offset_right = 948.0
offset_bottom = 325.0
theme_override_font_sizes/font_size = 40
text = "New Game"

[node name="LoadGameButton" type="Button" parent="."]
layout_mode = 0
offset_left = 721.0
offset_top = 332.0
offset_right = 949.0
offset_bottom = 397.0
theme_override_font_sizes/font_size = 40
text = "Load Game"

[node name="QuitButton" type="Button" parent="."]
layout_mode = 0
offset_left = 720.0
offset_top = 406.0
offset_right = 948.0
offset_bottom = 471.0
theme_override_font_sizes/font_size = 40
text = "Quit Game"

[connection signal="pressed" from="NewGameButton" to="." method="_on_new_game_button_pressed"]
[connection signal="pressed" from="LoadGameButton" to="." method="_on_continue_button_pressed"]
[connection signal="pressed" from="QuitButton" to="." method="_on_quit_button_pressed"]
</file>

<file path="assets/shop_offers/upgrade_pickaxe_damage_1.tres">
[gd_resource type="Resource" script_class="ShopOffer" load_steps=3 format=3 uid="uid://dw27tqjbk4k2l"]

[ext_resource type="Script" uid="uid://chflva3ovnshi" path="res://scripts/ShopOffer.gd" id="1_jxdfa"]
[ext_resource type="Texture2D" uid="uid://7opkbvyekt60" path="res://assets/sprites/icons/pickaxe1.tres" id="1_wevv1"]

[resource]
resource_name = "shop_offer_unlock_level_2_digging"
script = ExtResource("1_jxdfa")
offer_name = "Upgrade Pickaxe (Lvl 2)"
description = "Increases pickaxe digging power, allowing for faster mining through rocks
Cost: 30 Coins"
cost_amount = 30
reward_type = 2
reward_string_data = "PICKAXE_LEVEL_PROGRESS"
reward_float_data = 9.0
unique_id = "OFFER_PICKAXE_LVL_1"
display_icon = ExtResource("1_wevv1")
level_number = 1
</file>

<file path="assets/sprites/other/scenes/game.tscn">
[gd_scene load_steps=23 format=4 uid="uid://cc0knlk71rl7n"]

[ext_resource type="PackedScene" uid="uid://4yp0qu72jr2b" path="res://assets/sprites/other/scenes/player.tscn" id="1_uwrxv"]
[ext_resource type="Script" uid="uid://dm3iihye8a3wy" path="res://scripts/game.gd" id="1_vtaks"]
[ext_resource type="Texture2D" uid="uid://bcm1qkp4dydjd" path="res://assets/sprites/Miner16Bit_AllFiles_v1/Miner16Bit_WorldTiles_02.png" id="1_yqjtg"]
[ext_resource type="PackedScene" uid="uid://dubr81815qgi" path="res://assets/sprites/other/scenes/crt_shader.tscn" id="2_gee14"]
[ext_resource type="Texture2D" uid="uid://c637msvthmlc2" path="res://assets/sprites/other/sheet.png" id="2_lnu2h"]
[ext_resource type="Texture2D" uid="uid://4upmho5qau0g" path="res://assets/sprites/other/Tileset_Cave.png" id="3_iywne"]
[ext_resource type="Texture2D" uid="uid://7a3no0tyqneu" path="res://assets/sprites/other/tilesetcave.png" id="4_p57ef"]
[ext_resource type="Script" uid="uid://cc8x1tg73jmw1" path="res://scripts/game_over_ui.gd" id="5_dinhu"]
[ext_resource type="Shader" uid="uid://clgqqxru7jg8" path="res://shaders/grayscale_shader.gdshader" id="5_kvpfn"]
[ext_resource type="AudioStream" uid="uid://bs1k4f7ulp015" path="res://assets/music/steam_gardens_slowed.wav" id="6_p57ef"]
[ext_resource type="PackedScene" uid="uid://dmf6diflfftrc" path="res://assets/sprites/other/scenes/ladder.tscn" id="7_u5sy4"]
[ext_resource type="Script" uid="uid://cmf651j7qk52t" path="res://scripts/ui.gd" id="9_0tnpc"]
[ext_resource type="Script" uid="uid://drdwdl32kthr4" path="res://addons/Inventory/Inventory.gd" id="12_bbsot"]

[sub_resource type="WorldBoundaryShape2D" id="WorldBoundaryShape2D_yqjtg"]
distance = -356.0

[sub_resource type="WorldBoundaryShape2D" id="WorldBoundaryShape2D_lnu2h"]
distance = -524.0

[sub_resource type="ShaderMaterial" id="ShaderMaterial_dinhu"]
shader = ExtResource("5_kvpfn")

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_lnu2h"]
texture = ExtResource("1_yqjtg")
0:0/0 = 0
0:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
0:0/0/custom_data_0 = true
0:0/0/custom_data_1 = 1.0
2:0/0 = 0
2:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
2:0/0/custom_data_0 = true
2:0/0/custom_data_1 = 1.0
3:0/0 = 0
3:0/0/custom_data_0 = true
3:0/0/custom_data_1 = 10.0
4:0/0 = 0
4:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
4:0/0/custom_data_0 = true
4:0/0/custom_data_1 = 1.0
5:0/0 = 0
5:0/0/custom_data_0 = true
5:0/0/custom_data_1 = 1.0
6:0/0 = 0
6:0/0/custom_data_0 = true
6:0/0/custom_data_1 = 1.0
7:0/0 = 0
0:1/0 = 0
0:1/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
0:1/0/custom_data_0 = true
0:1/0/custom_data_1 = 1.0
1:1/0 = 0
1:1/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
1:1/0/custom_data_0 = true
1:1/0/custom_data_1 = 1.0
2:1/0 = 0
2:1/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
2:1/0/custom_data_0 = true
2:1/0/custom_data_1 = 1.0
4:1/0 = 0
4:1/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
4:1/0/custom_data_0 = true
4:1/0/custom_data_1 = 1.0
5:1/0 = 0
5:1/0/custom_data_0 = true
5:1/0/custom_data_1 = 1.0
6:1/0 = 0
6:1/0/custom_data_0 = true
6:1/0/custom_data_1 = 1.0
7:1/0 = 0
0:2/0 = 0
0:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
0:2/0/custom_data_0 = true
0:2/0/custom_data_1 = 1.0
1:2/0 = 0
1:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
1:2/0/custom_data_0 = true
1:2/0/custom_data_1 = 1.0
2:2/0 = 0
2:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
2:2/0/custom_data_0 = true
2:2/0/custom_data_1 = 1.0
3:2/0 = 0
3:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
3:2/0/custom_data_0 = true
3:2/0/custom_data_1 = 1.0
4:2/0 = 0
4:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
4:2/0/custom_data_0 = true
4:2/0/custom_data_1 = 1.0
5:2/0 = 0
5:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
5:2/0/custom_data_0 = true
5:2/0/custom_data_1 = 1.0
6:2/0 = 0
6:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
6:2/0/custom_data_0 = true
6:2/0/custom_data_1 = 1.0
7:2/0 = 0
0:3/0 = 0
1:3/0 = 0
2:3/0 = 0
3:3/0 = 0
4:3/0 = 0
4:3/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
4:3/0/custom_data_0 = true
5:3/0 = 0
0:4/0 = 0
2:4/0 = 0
3:4/0 = 0
5:4/0 = 0
0:5/0 = 0
1:5/0 = 0
2:5/0 = 0
3:5/0 = 0
5:5/0 = 0
7:5/0 = 0
0:6/0 = 0
1:6/0 = 0
3:6/0 = 0
5:6/0 = 0
6:6/0 = 0
7:6/0 = 0
3:7/0 = 0
5:7/0 = 0
6:7/0 = 0
7:7/0 = 0
1:0/0 = 0
1:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
1:0/0/custom_data_0 = true
1:0/0/custom_data_1 = 1.0

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_lbhrr"]
texture = ExtResource("2_lnu2h")
0:0/0 = 0
1:0/0 = 0
2:0/0 = 0
3:0/0 = 0
4:0/0 = 0
5:0/0 = 0
6:0/0 = 0
7:0/0 = 0
8:0/0 = 0
9:0/0 = 0
10:0/0 = 0
11:0/0 = 0
12:0/0 = 0
13:0/0 = 0
14:0/0 = 0
15:0/0 = 0
16:0/0 = 0
0:1/0 = 0
1:1/0 = 0
2:1/0 = 0
3:1/0 = 0
4:1/0 = 0
5:1/0 = 0
7:1/0 = 0
8:1/0 = 0
9:1/0 = 0
10:1/0 = 0
11:1/0 = 0
12:1/0 = 0
13:1/0 = 0
14:1/0 = 0
15:1/0 = 0
16:1/0 = 0
2:2/0 = 0
3:2/0 = 0
4:2/0 = 0
7:2/0 = 0
8:2/0 = 0
9:2/0 = 0
10:2/0 = 0
11:2/0 = 0
12:2/0 = 0
13:2/0 = 0
14:2/0 = 0
15:2/0 = 0
16:2/0 = 0
3:3/0 = 0
4:3/0 = 0
5:3/0 = 0
7:3/0 = 0
8:3/0 = 0
9:3/0 = 0
10:3/0 = 0
11:3/0 = 0
12:3/0 = 0
13:3/0 = 0
14:3/0 = 0
15:3/0 = 0
16:3/0 = 0
3:4/0 = 0
4:4/0 = 0
5:4/0 = 0
7:4/0 = 0
8:4/0 = 0
9:4/0 = 0
10:4/0 = 0
11:4/0 = 0
12:4/0 = 0
13:4/0 = 0
14:4/0 = 0
15:4/0 = 0
16:4/0 = 0
3:5/0 = 0
4:5/0 = 0
7:5/0 = 0
8:5/0 = 0
9:5/0 = 0
10:5/0 = 0
11:5/0 = 0
12:5/0 = 0
13:5/0 = 0
14:5/0 = 0
15:5/0 = 0
16:5/0 = 0
3:6/0 = 0
4:6/0 = 0
7:6/0 = 0
8:6/0 = 0
9:6/0 = 0
10:6/0 = 0
11:6/0 = 0
12:6/0 = 0
13:6/0 = 0
14:6/0 = 0
15:6/0 = 0
16:6/0 = 0
2:7/0 = 0
3:7/0 = 0
4:7/0 = 0
5:7/0 = 0

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_u5sy4"]
texture = ExtResource("3_iywne")
0:0/0 = 0
1:0/0 = 0
2:0/0 = 0
3:0/0 = 0
4:0/0 = 0
5:0/0 = 0
6:0/0 = 0
7:0/0 = 0
8:0/0 = 0
0:1/0 = 0
1:1/0 = 0
2:1/0 = 0
3:1/0 = 0
4:1/0 = 0
5:1/0 = 0
6:1/0 = 0
7:1/0 = 0
8:1/0 = 0
0:2/0 = 0
1:2/0 = 0
2:2/0 = 0
3:2/0 = 0
4:2/0 = 0
5:2/0 = 0
0:3/0 = 0
1:3/0 = 0
2:3/0 = 0

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_gee14"]
texture = ExtResource("4_p57ef")
4:1/0 = 0
5:1/0 = 0
6:1/0 = 0
7:1/0 = 0
4:2/0 = 0
5:2/0 = 0
6:2/0 = 0
7:2/0 = 0
4:4/0 = 0
5:4/0 = 0
7:4/0 = 0
8:4/0 = 0
9:4/0 = 0
10:4/0 = 0
11:4/0 = 0
12:4/0 = 0
4:5/0 = 0
5:5/0 = 0
7:5/0 = 0
8:5/0 = 0
9:5/0 = 0
10:5/0 = 0
11:5/0 = 0
12:5/0 = 0
4:6/0 = 0
5:6/0 = 0
7:6/0 = 0
8:6/0 = 0
9:6/0 = 0
10:6/0 = 0
11:6/0 = 0
12:6/0 = 0
4:7/0 = 0
5:7/0 = 0
7:7/0 = 0
8:7/0 = 0
9:7/0 = 0
10:7/0 = 0
11:7/0 = 0
12:7/0 = 0
4:8/0 = 0
5:8/0 = 0
7:8/0 = 0
8:8/0 = 0
9:8/0 = 0
10:8/0 = 0
11:8/0 = 0
12:8/0 = 0
4:9/0 = 0
5:9/0 = 0
7:9/0 = 0
8:9/0 = 0
9:9/0 = 0
10:9/0 = 0
11:9/0 = 0
12:9/0 = 0
7:11/0 = 0
8:11/0 = 0
9:11/0 = 0
10:11/0 = 0
11:11/0 = 0
12:11/0 = 0
7:12/0 = 0
8:12/0 = 0
9:12/0 = 0
10:12/0 = 0
11:12/0 = 0
12:12/0 = 0

[sub_resource type="TileSet" id="TileSet_lbhrr"]
physics_layer_0/collision_layer = 1
custom_data_layer_0/name = "diggable"
custom_data_layer_0/type = 1
custom_data_layer_1/name = "dig_time"
custom_data_layer_1/type = 3
sources/3 = SubResource("TileSetAtlasSource_lnu2h")
sources/4 = SubResource("TileSetAtlasSource_lbhrr")
sources/5 = SubResource("TileSetAtlasSource_u5sy4")
sources/6 = SubResource("TileSetAtlasSource_gee14")

[sub_resource type="Resource" id="Resource_nq78w"]
script = ExtResource("12_bbsot")
capacity = 15
metadata/_custom_type_script = "uid://drdwdl32kthr4"

[node name="Game" type="Node2D"]
script = ExtResource("1_vtaks")

[node name="LeftBoundry" type="StaticBody2D" parent="."]
position = Vector2(0, -9)

[node name="CollisionShape2D" type="CollisionShape2D" parent="LeftBoundry"]
position = Vector2(-137, -5)
rotation = 1.5708
shape = SubResource("WorldBoundaryShape2D_yqjtg")

[node name="RightBoundry" type="StaticBody2D" parent="."]
position = Vector2(0, -9)

[node name="CollisionShape2D" type="CollisionShape2D" parent="RightBoundry"]
position = Vector2(0, -4)
rotation = -1.5708
shape = SubResource("WorldBoundaryShape2D_lnu2h")

[node name="Music" type="AudioStreamPlayer" parent="."]
stream = ExtResource("6_p57ef")
volume_db = -30.0
autoplay = true

[node name="CRT_Shader" parent="." instance=ExtResource("2_gee14")]
z_index = 4096
offset_left = -551.0
offset_top = -325.0
offset_right = 753.0
offset_bottom = 453.0

[node name="UI" type="CanvasLayer" parent="."]
script = ExtResource("9_0tnpc")

[node name="LadderCountLabel" type="Label" parent="UI"]
offset_left = 10.0
offset_top = 10.0
offset_right = 50.0
offset_bottom = 33.0
theme_override_font_sizes/font_size = 34
text = "Drabiny: 5"

[node name="HealthLabel" type="Label" parent="UI"]
offset_left = 10.0
offset_top = 60.0
offset_right = 281.0
offset_bottom = 107.0
theme_override_font_sizes/font_size = 34
text = "HP: 100/100"

[node name="GameOverLayer" type="CanvasLayer" parent="."]
process_mode = 3
layer = 10
script = ExtResource("5_dinhu")

[node name="GrayscaleEffectRect" type="ColorRect" parent="GameOverLayer"]
material = SubResource("ShaderMaterial_dinhu")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
color = Color(1, 1, 1, 0)

[node name="GameOverLabel" type="Label" parent="GameOverLayer"]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_font_sizes/font_size = 100
text = "GAME OVER"
horizontal_alignment = 1
vertical_alignment = 1

[node name="RestartButton" type="Button" parent="GameOverLayer"]
process_mode = 3
anchors_preset = 7
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
offset_left = -87.5
offset_top = -198.0
offset_right = 87.5
offset_bottom = -135.0
grow_horizontal = 2
grow_vertical = 0
theme_override_font_sizes/font_size = 40
text = "RESTART"

[node name="WorldContainer" type="Node2D" parent="."]

[node name="TileMap" type="Node2D" parent="WorldContainer"]

[node name="Background" type="TileMapLayer" parent="WorldContainer/TileMap"]
light_mask = 0
z_index = -1
use_parent_material = true
tile_map_data = PackedByteArray("")
tile_set = SubResource("TileSet_lbhrr")

[node name="Ground" type="TileMapLayer" parent="WorldContainer/TileMap"]
use_parent_material = true
tile_map_data = PackedByteArray("")
tile_set = SubResource("TileSet_lbhrr")

[node name="Player" parent="WorldContainer" groups=["player", "players"] instance=ExtResource("1_uwrxv")]
position = Vector2(0, -19)
collision_layer = 1
inventory = SubResource("Resource_nq78w")

[node name="Camera2D" type="Camera2D" parent="WorldContainer/Player"]
position = Vector2(0, -8)
zoom = Vector2(4, 4)
position_smoothing_enabled = true

[node name="Ladders" type="Node" parent="WorldContainer"]

[node name="Ladder" parent="WorldContainer/Ladders" instance=ExtResource("7_u5sy4")]
position = Vector2(57, 40)

[node name="Ladder2" parent="WorldContainer/Ladders" instance=ExtResource("7_u5sy4")]
position = Vector2(57, 24)

[node name="Ladder3" parent="WorldContainer/Ladders" instance=ExtResource("7_u5sy4")]
position = Vector2(57, 8)

[node name="Ladder4" parent="WorldContainer/Ladders" instance=ExtResource("7_u5sy4")]
position = Vector2(25, 72)

[node name="Ladder5" parent="WorldContainer/Ladders" instance=ExtResource("7_u5sy4")]
position = Vector2(25, 56)

[node name="Ladder6" parent="WorldContainer/Ladders" instance=ExtResource("7_u5sy4")]
position = Vector2(25, 40)

[connection signal="pressed" from="GameOverLayer/RestartButton" to="GameOverLayer" method="_on_restart_button_pressed"]
</file>

<file path="scripts/save_game_data.gd">
# res://scripts/save_game_data.gd
class_name SaveGameData extends Resource

# Use @export so Godot knows how to save/load these variables
@export var save_format_version: float = 1.0
@export var player_data: Dictionary = {}  # Will store player pos, hp, inventory resource
@export var world_data: Dictionary = {}   # Will store tilemap state, ladder positions
@export var purchased_upgrades: Array[String] = []
@export var purchased_upgrades_data: Dictionary = {}
</file>

<file path="shaders/crt.gdshader">
/*
Shader from Godot Shaders - the free shader library.

This shader is under CC0 license. Feel free to use, improve and
change this shader according to your needs and consider sharing
the modified result to godotshaders.com.

Optimised and packed by @c64cosmin
If you do use this please share it with me
Would love to see what you're making with it <3

It's a combination of these two shaders
~godotshaders.com/shader/VHS-and-CRT-monitor-effect
godotshaders.com/shader/crt-shader-with-realistic-blurring/

CRT grille and rolling lines made by @c64cosmin
Vignette and warping effect was made by pend00
Scanlines are from "TimothyLottes" FROM SHADERTOY
Then ported by AHOPNESS (@ahopness)
https://www.shadertoy.com/view/MsjXzh
*/

shader_type canvas_item;

uniform sampler2D SCREEN_TEXTURE: hint_screen_texture;

uniform vec2 resolution = vec2(320.0, 180.0);

uniform float scan_line_amount :hint_range(0.0, 1.0) = 1.0;
uniform float warp_amount :hint_range(0.0, 5.0) = 0.1;
uniform float noise_amount :hint_range(0.0, 0.3) = 0.03;
uniform float interference_amount :hint_range(0.0, 1.0) = 0.2;
uniform float grille_amount :hint_range(0.0, 1.0) = 0.1;
uniform float grille_size :hint_range(1.0, 5.0) = 1.0;
uniform float vignette_amount :hint_range(0.0, 2.0) = 0.6;
uniform float vignette_intensity : hint_range(0.0, 1.0) = 0.4;
uniform float aberation_amount :hint_range(0.0, 1.0) = 0.5;
uniform float roll_line_amount :hint_range(0.0, 1.0) = 0.3;
uniform float roll_speed :hint_range(-8.0, 8.0) = 1.0;
uniform float scan_line_strength :hint_range(-12.0, -1.0) = -8.0;
uniform float pixel_strength :hint_range(-4.0, 0.0) = -2.0;

float random(vec2 uv){
    return fract(cos(uv.x * 83.4827 + uv.y * 92.2842) * 43758.5453123);
}

vec3 fetch_pixel(vec2 uv, vec2 off){
    vec2 pos = floor(uv * resolution + off) / resolution + vec2(0.5) / resolution;

    float noise = 0.0;
    if(noise_amount > 0.0){
        noise = random(pos + fract(TIME)) * noise_amount;
    }

    if(max(abs(pos.x - 0.5), abs(pos.y - 0.5)) > 0.5){
        return vec3(0.0, 0.0, 0.0);
    }

    vec3 clr = texture(SCREEN_TEXTURE , pos, -16.0).rgb + noise;
    return clr;
}

// Distance in emulated pixels to nearest texel.
vec2 Dist(vec2 pos){
    pos = pos * resolution;
    return - ((pos - floor(pos)) - vec2(0.5));
}

// 1D Gaussian.
float Gaus(float pos, float scale){ return exp2(scale * pos * pos); }

// 3-tap Gaussian filter along horz line.
vec3 Horz3(vec2 pos, float off){
    vec3 b = fetch_pixel(pos, vec2(-1.0, off));
    vec3 c = fetch_pixel(pos, vec2( 0.0, off));
    vec3 d = fetch_pixel(pos, vec2( 1.0, off));
    float dst = Dist(pos).x;

    // Convert distance to weight.
    float scale = pixel_strength;
    float wb = Gaus(dst - 1.0, scale);
    float wc = Gaus(dst + 0.0, scale);
    float wd = Gaus(dst + 1.0, scale);

    // Return filtered sample.
    return (b * wb + c * wc + d * wd) / (wb + wc + wd);
}

// Return scanline weight.
float Scan(vec2 pos, float off){
    float dst = Dist(pos).y;

    return Gaus(dst + off, scan_line_strength);
}

// Allow nearest three lines to effect pixel.
vec3 Tri(vec2 pos){
    vec3 clr = fetch_pixel(pos, vec2(0.0));
    if(scan_line_amount > 0.0){
        vec3 a = Horz3(pos,-1.0);
        vec3 b = Horz3(pos, 0.0);
        vec3 c = Horz3(pos, 1.0);

        float wa = Scan(pos,-1.0);
        float wb = Scan(pos, 0.0);
        float wc = Scan(pos, 1.0);

        vec3 scanlines = a * wa + b * wb + c * wc;
        clr = mix(clr, scanlines, scan_line_amount);
    }
    return clr;
}

// Takes in the UV and warps the edges, creating the spherized effect
vec2 warp(vec2 uv){
    vec2 delta = uv - 0.5;
    float delta2 = dot(delta.xy, delta.xy);
    float delta4 = delta2 * delta2;
    float delta_offset = delta4 * warp_amount;

    vec2 warped = uv + delta * delta_offset;
    return (warped - 0.5) / mix(1.0,1.2,warp_amount/5.0) + 0.5;
}

float vignette(vec2 uv){
    uv *= 1.0 - uv.xy;
    float vignette = uv.x * uv.y * 15.0;
    return pow(vignette, vignette_intensity * vignette_amount);
}

float floating_mod(float a, float b){
    return a - b * floor(a/b);
}

vec3 grille(vec2 uv){
    float unit = PI / 3.0;
    float scale = 2.0*unit/grille_size;
    float r = smoothstep(0.5, 0.8, cos(uv.x*scale - unit));
    float g = smoothstep(0.5, 0.8, cos(uv.x*scale + unit));
    float b = smoothstep(0.5, 0.8, cos(uv.x*scale + 3.0*unit));
    return mix(vec3(1.0), vec3(r,g,b), grille_amount);
}

float roll_line(vec2 uv){
    float x = uv.y * 3.0 - TIME * roll_speed;
    float f = cos(x) * cos(x * 2.35 + 1.1) * cos(x * 4.45 + 2.3);
    float roll_line = smoothstep(0.5, 0.9, f);
    return roll_line * roll_line_amount;
}

void fragment(){
    vec2 pix = FRAGCOORD.xy;
    vec2 pos = warp(SCREEN_UV);

    float line = 0.0;
    if(roll_line_amount > 0.0){
        line = roll_line(pos);
    }

    vec2 sq_pix = floor(pos * resolution) / resolution + vec2(0.5) / resolution;
    if(interference_amount + roll_line_amount > 0.0){
        float interference = random(sq_pix.yy + fract(TIME));
        pos.x += (interference * (interference_amount + line * 6.0)) / resolution.x;
    }

    vec3 clr = Tri(pos);
    if(aberation_amount > 0.0){
        float chromatic = aberation_amount + line * 2.0;
        vec2 chromatic_x = vec2(chromatic,0.0) / resolution.x;
        vec2 chromatic_y = vec2(0.0, chromatic/2.0) / resolution.y;
        float r = Tri(pos - chromatic_x).r;
        float g = Tri(pos + chromatic_y).g;
        float b = Tri(pos + chromatic_x).b;
        clr = vec3(r,g,b);
    }

    if(grille_amount > 0.0)clr *= grille(pix);
    clr *= 1.0 + scan_line_amount * 0.6 + line * 3.0 + grille_amount * 2.0;
    if(vignette_amount > 0.0)clr *= vignette(pos);

    COLOR.rgb = clr;
    COLOR.a = 1.0;
}
</file>

<file path="addons/Inventory/UI/List/InventoryListUI.gd">
class_name InventoryListUI extends ScrollContainer

@export var InventoryListItemUI: PackedScene
@export var initial_items: Array[InventoryItem]
@export var inventory: Inventory : set = set_inventory

@onready var vbox: VBoxContainer = $VBoxContainer


# Set the inventory and initialize UI
func set_inventory(it: Inventory):
    if inventory == it:
        return
    
    inventory = it
    
    if is_inside_tree():
        _clear_ui()
        _create_ui()
        if initial_items:
            inventory.put_many(initial_items)

# Clear all the UI elements
func _clear_ui():
    for itemUI in vbox.get_children():
        itemUI.queue_free()

# Create the initial UI for the inventory
func _create_ui():
    for item in inventory.get_all_items():
        _create_inventory_list_item_ui(item)
    
    inventory.item_added.connect(_on_inventory_item_added)
    inventory.item_removed.connect(_on_inventory_item_removed)

# Handle when an item is added to the inventory
func _on_inventory_item_added(item: InventoryItem, slot: int):
    # Check if the item is stackable
    if item.item_type.stackable:
        # Find if the UI already exists for this item
        var itemUI = get_item_ui(item)
        if itemUI != null:
            # Update the stack count of the existing UI
            itemUI.stack_count = inventory.get_amount_of_item_type(item.item_type)
        else:
            # If no UI exists, create a new one
            _create_inventory_list_item_ui(item)
    else:
        # If the item is not stackable, create a new UI
        _create_inventory_list_item_ui(item)

# Handle when an item is removed from the inventory
func _on_inventory_item_removed(item: InventoryItem, slot: int):
    var itemUI = get_item_ui(item)
    if itemUI != null:
        vbox.remove_child(itemUI)
        itemUI.queue_free()

# Create a new UI element for an item
func _create_inventory_list_item_ui(item: InventoryItem):
    var itemUI: InventoryListItemUI = InventoryListItemUI.instantiate()
    itemUI.item = item
    itemUI.stack_count = inventory.get_amount_of_item_type(item.item_type) if item.item_type.stackable else 1
    vbox.add_child(itemUI)

# Retrieve the UI element associated with a specific item
func get_item_ui(item: InventoryItem) -> InventoryListItemUI:
    for child in vbox.get_children():
        if child is InventoryListItemUI and child.item == item:
            return child
    return null

# Ready function to initialize UI
func _ready():
    _clear_ui()
    _create_ui()
    if initial_items:
        inventory.put_many(initial_items)
</file>

<file path="assets/sprites/other/scenes/player.tscn">
[gd_scene load_steps=45 format=3 uid="uid://4yp0qu72jr2b"]

[ext_resource type="Script" uid="uid://cq0ybetkfcej5" path="res://scripts/player.gd" id="1_g2els"]
[ext_resource type="Texture2D" uid="uid://owxmkmo3hff" path="res://assets/sprites/Miner16Bit_AllFiles_v1/Miner_AllAnimations_SpriteSheet.png" id="2_g2els"]
[ext_resource type="PackedScene" uid="uid://dmf6diflfftrc" path="res://assets/sprites/other/scenes/ladder.tscn" id="2_mpqlg"]
[ext_resource type="Resource" uid="uid://pmkg1u7amds4" path="res://assets/inventory/ladder.tres" id="3_l2ycw"]
[ext_resource type="AudioStream" uid="uid://ympmury34vme" path="res://assets/sounds/ladder-climbing.mp3" id="3_qhqgy"]
[ext_resource type="AudioStream" uid="uid://bawabjij02gso" path="res://assets/sounds/jump.wav" id="4_qlg0r"]
[ext_resource type="AudioStream" uid="uid://b6hbsvqkflhua" path="res://assets/sounds/walk3.ogg" id="5_qlg0r"]
[ext_resource type="AudioStream" uid="uid://bbhbi0jxvy13x" path="res://assets/sounds/ladder-create.ogg" id="6_fjrip"]
[ext_resource type="AudioStream" uid="uid://y63k8i7xjsa6" path="res://assets/sounds/ladder-destroy.ogg" id="7_smehm"]
[ext_resource type="AudioStream" uid="uid://dqu0216h86oxu" path="res://assets/sounds/dig2.mp3" id="8_16a80"]

[sub_resource type="AtlasTexture" id="AtlasTexture_y4r1p"]
atlas = ExtResource("2_g2els")
region = Rect2(0, 80, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_d2wvv"]
atlas = ExtResource("2_g2els")
region = Rect2(16, 80, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_3v2ag"]
atlas = ExtResource("2_g2els")
region = Rect2(32, 80, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_jej6c"]
atlas = ExtResource("2_g2els")
region = Rect2(48, 80, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_60mlk"]
atlas = ExtResource("2_g2els")
region = Rect2(0, 96, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_i4ail"]
atlas = ExtResource("2_g2els")
region = Rect2(16, 96, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_a38lo"]
atlas = ExtResource("2_g2els")
region = Rect2(32, 96, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_4ni07"]
atlas = ExtResource("2_g2els")
region = Rect2(48, 96, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_l71n6"]
atlas = ExtResource("2_g2els")
region = Rect2(64, 96, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_f1ej7"]
atlas = ExtResource("2_g2els")
region = Rect2(0, 32, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_oprun"]
atlas = ExtResource("2_g2els")
region = Rect2(16, 32, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_a8ls1"]
atlas = ExtResource("2_g2els")
region = Rect2(32, 32, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_qfm1y"]
atlas = ExtResource("2_g2els")
region = Rect2(48, 32, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_fulsm"]
atlas = ExtResource("2_g2els")
region = Rect2(64, 32, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_4r5pv"]
atlas = ExtResource("2_g2els")
region = Rect2(80, 32, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_ke2ow"]
atlas = ExtResource("2_g2els")
region = Rect2(0, 48, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_ujl30"]
atlas = ExtResource("2_g2els")
region = Rect2(16, 48, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_31cv2"]
atlas = ExtResource("2_g2els")
region = Rect2(32, 48, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_pf23h"]
atlas = ExtResource("2_g2els")
region = Rect2(48, 48, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_dt7fs"]
atlas = ExtResource("2_g2els")
region = Rect2(64, 48, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_wqfne"]
atlas = ExtResource("2_g2els")
region = Rect2(80, 48, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_qhqgy"]
atlas = ExtResource("2_g2els")
region = Rect2(0, 0, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_dqkch"]
atlas = ExtResource("2_g2els")
region = Rect2(176, 0, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_g2els"]
atlas = ExtResource("2_g2els")
region = Rect2(0, 0, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_qlg0r"]
atlas = ExtResource("2_g2els")
region = Rect2(16, 0, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_tuyoq"]
atlas = ExtResource("2_g2els")
region = Rect2(32, 0, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_fjrip"]
atlas = ExtResource("2_g2els")
region = Rect2(48, 0, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_smehm"]
atlas = ExtResource("2_g2els")
region = Rect2(64, 0, 16, 16)

[sub_resource type="AtlasTexture" id="AtlasTexture_ur7pv"]
atlas = ExtResource("2_g2els")
region = Rect2(80, 0, 16, 16)

[sub_resource type="SpriteFrames" id="SpriteFrames_ur7pv"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_y4r1p")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_d2wvv")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_3v2ag")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_jej6c")
}],
"loop": false,
"name": &"climb",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_60mlk")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_i4ail")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_a38lo")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_4ni07")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_l71n6")
}],
"loop": true,
"name": &"death",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_f1ej7")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_oprun")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_a8ls1")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_qfm1y")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_fulsm")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_4r5pv")
}],
"loop": true,
"name": &"dig",
"speed": 10.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_ke2ow")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ujl30")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_31cv2")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_pf23h")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_dt7fs")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_wqfne")
}],
"loop": true,
"name": &"dig_under",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_qhqgy")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_dqkch")
}],
"loop": true,
"name": &"idle",
"speed": 0.7
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_g2els")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_qlg0r")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_tuyoq")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_fjrip")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_smehm")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ur7pv")
}],
"loop": true,
"name": &"walk",
"speed": 7.0
}]

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_g2els"]
radius = 3.0
height = 12.0

[sub_resource type="Shader" id="Shader_hs3jg"]
code = "shader_type canvas_item;

render_mode blend_mix, unshaded;

uniform float progress: hint_range(0,1) = 0.0;
uniform float speed: hint_range(0,10) = 2.0;
uniform vec4 main_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform sampler2D noise_tex;

void fragment() {
    vec2 uv = UV;
    float noise_val = texture(noise_tex, uv).r;
    // Używamy smoothstep z marginesem, aby uzyskać płynne przejście.
    float dissolve_factor = smoothstep(progress - 0.1, progress + 0.1, noise_val);
    // Interpolujemy między pełnym kolorem a przezroczystością:
    COLOR = mix(main_color, vec4(0.0), dissolve_factor);
}

"

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_psqw3"]

[sub_resource type="ShaderMaterial" id="ShaderMaterial_a0lea"]
shader = SubResource("Shader_hs3jg")
shader_parameter/progress = 0.0
shader_parameter/speed = 2.0
shader_parameter/main_color = Vector4(1, 1, 1, 1)
shader_parameter/noise_tex = SubResource("CompressedTexture2D_psqw3")

[node name="Player" type="CharacterBody2D"]
z_index = 1
collision_layer = 2
script = ExtResource("1_g2els")
ladder_scene = ExtResource("2_mpqlg")
ladder_item_type = ExtResource("3_l2ycw")

[node name="AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
position = Vector2(0, -8)
sprite_frames = SubResource("SpriteFrames_ur7pv")
animation = &"dig"
autoplay = "idle"

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(0, -6)
shape = SubResource("CapsuleShape2D_g2els")

[node name="LadderClimbSound" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource("3_qhqgy")

[node name="JumpSound" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource("4_qlg0r")
volume_db = -15.951

[node name="WalkSound" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource("5_qlg0r")
volume_db = 5.019

[node name="LadderPlaceSound" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource("6_fjrip")

[node name="LadderRemoveSound" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource("7_smehm")

[node name="DigProgressSprite" type="Sprite2D" parent="."]
material = SubResource("ShaderMaterial_a0lea")

[node name="DigSound" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource("8_16a80")
volume_db = 0.599
</file>

<file path="scripts/ladder.gd">
extends Area2D

signal entered_ladder
signal exited_ladder

func _ready() -> void:
    add_to_group("ladders")

func _on_body_entered(body: Node) -> void:
    if body.is_in_group("player"):
        entered_ladder.emit(body)

func _on_body_exited(body: Node) -> void:
    if body.is_in_group("player"):
        exited_ladder.emit(body)
</file>

<file path="scripts/pause_menu.gd">
# pause_menu.gd
extends Control

const TITLE_SCREEN_PATH = "res://assets/scenes/title_screen.tscn"

# Need a reference to the main game node to call save/load
# Assuming Game node is the grandparent: PauseMenuLayer -> Game
@onready var game_node = get_parent().get_parent() as Node2D

# Funkcja do ukrywania menu i odpauzowywania gry
func resume_game():
    get_tree().paused = false
    hide() # Ukrywa węzeł PauseMenu (i jego dzieci)

# Funkcja do wyjścia do menu głównego
func quit_to_menu():
    # WAŻNE: Najpierw odpauzuj, zanim zmienisz scenę
    get_tree().paused = false
    var error = get_tree().change_scene_to_file(TITLE_SCREEN_PATH)
    if error != OK:
        printerr("Failed to change scene to title screen! Error code: ", error)

# Podłącz sygnały przycisków do tych funkcji w edytorze!
func _on_resume_button_pressed():
    print("Resume button pressed")
    resume_game()


func _on_quit_to_menu_button_pressed():
    print("Quit to Menu button pressed")
    quit_to_menu()

func _on_save_game_button_pressed():
    if game_node and game_node.has_method("save_game"):
        game_node.save_game()
        # Optionally keep menu open or close it
        # resume_game()
    else:
        printerr("PauseMenu cannot find game_node or save_game method!")

func _on_load_game_button_pressed():
    if game_node and game_node.has_method("load_game"):
        # Unpause BEFORE loading if loading from pause menu
        get_tree().paused = false
        hide() # Hide menu immediately
        # Call load_game on the main game node
        game_node.load_game()
        # Loading might change nodes, so don't assume 'self' is still valid in complex scenarios
    else:
        printerr("PauseMenu cannot find game_node or load_game method!")

func _unhandled_input(event):
    if Input.is_action_just_pressed("ui_cancel") and get_tree().paused and self.visible: # Only resume if pause menu is visible
        resume_game()
        get_viewport().set_input_as_handled()
</file>

<file path="assets/scenes/ShopOfferItemUI.tscn">
[gd_scene load_steps=6 format=3 uid="uid://dsrfhls2ntqa5"]

[ext_resource type="Script" uid="uid://b0e73hbbbsvfc" path="res://scripts/ShopOfferItemUI.gd" id="1_qays3"]

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_rxfgc"]

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_qays3"]
bg_color = Color(0.574998, 0.574998, 0.574998, 1)
corner_radius_top_left = 5
corner_radius_top_right = 5
corner_radius_bottom_right = 5
corner_radius_bottom_left = 5

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_ivp4n"]

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_c5aka"]
bg_color = Color(0.221302, 0.221302, 0.221302, 1)
corner_radius_top_left = 5
corner_radius_top_right = 5
corner_radius_bottom_right = 5
corner_radius_bottom_left = 5

[node name="ShopOfferItemUi" type="VBoxContainer"]
custom_minimum_size = Vector2(64, 64)
offset_right = 64.0
offset_bottom = 89.0
mouse_filter = 0
script = ExtResource("1_qays3")

[node name="BackgroundButton" type="Button" parent="."]
layout_mode = 2
size_flags_vertical = 3
focus_mode = 0
mouse_filter = 1
mouse_default_cursor_shape = 2
theme_override_styles/hover_pressed_mirrored = SubResource("StyleBoxFlat_rxfgc")
theme_override_styles/hover_pressed = SubResource("StyleBoxFlat_qays3")
theme_override_styles/hover_mirrored = SubResource("StyleBoxFlat_ivp4n")
theme_override_styles/hover = SubResource("StyleBoxFlat_c5aka")

[node name="CenterContainer" type="CenterContainer" parent="BackgroundButton"]
layout_mode = 2
offset_top = 14.0
offset_right = 64.0
offset_bottom = 89.0
mouse_filter = 2

[node name="IconAndCountVBox" type="VBoxContainer" parent="BackgroundButton/CenterContainer"]
layout_mode = 2
mouse_filter = 2

[node name="ItemIcon" type="TextureRect" parent="BackgroundButton/CenterContainer/IconAndCountVBox"]
custom_minimum_size = Vector2(48, 48)
layout_mode = 2
stretch_mode = 5

[node name="CountLabel" type="Label" parent="BackgroundButton/CenterContainer/IconAndCountVBox"]
layout_mode = 2
horizontal_alignment = 1
</file>

<file path="scripts/title_screen.gd">
# title_screen.gd
extends Control

# Paths defined as constants for clarity
const GAME_SCENE_PATH = "res://assets/scenes/game.tscn"
const SAVE_PATH = "res://savegame.res" # Make sure this matches game.gd

# Get references to the buttons (use % syntax if they are direct children,
# otherwise adjust paths or use @onready)
@onready var continue_button: Button = $LoadGameButton # Adjust path if needed
@onready var new_game_button: Button = $NewGameButton   # Adjust path if needed
@onready var quit_button: Button = $QuitButton       # Adjust path if needed

func _ready():
    # Disable the "Continue" button if no save file exists
    continue_button.disabled = not FileAccess.file_exists(SAVE_PATH)
    
    #if not continue_button.disabled:
        #continue_button.grab_focus()
    #else:
        #new_game_button.grab_focus()


func _on_new_game_button_pressed():
    print("New Game button pressed!")
    # Delete existing save file if it exists
    if FileAccess.file_exists(SAVE_PATH):
        var err = DirAccess.remove_absolute(ProjectSettings.globalize_path(SAVE_PATH))
        if err == OK:
            print("Existing save file deleted.")
        else:
            printerr("Failed to delete existing save file! Error code: ", err)
            # Optionally show an error to the user, but proceed anyway for a new game

    # Change scene to start the game fresh
    var error = get_tree().change_scene_to_file(GAME_SCENE_PATH)
    if error != OK:
        printerr("Failed to change scene to game! Error code: ", error)


func _on_continue_button_pressed(): # Renamed from _on_start_button_pressed
    print("Continue button pressed! Loading game scene...")
    # Just change scene. game.gd's _ready() will handle loading the save.
    var error = get_tree().change_scene_to_file(GAME_SCENE_PATH)
    if error != OK:
        printerr("Failed to change scene to game! Error code: ", error)


func _on_quit_button_pressed():
    print("Quit button pressed! Exiting application...")
    get_tree().quit()
</file>

<file path="addons/Inventory/UI/List/InventoryListItemUI.gd">
@tool
class_name InventoryListItemUI extends PanelContainer

@export var item:InventoryItem:
    set = set_item

@onready var nameLabel:PingPongScroller = $BoxContainer/Name
@onready var stackLabel:Label = $BoxContainer/Stack

@export var stack_count:int = 1:
    set = set_stack_count

func _ready():
    _update_ui()

func set_item(_item:InventoryItem):
    item = _item
    if is_inside_tree():
        _update_ui()

func set_stack_count(count:int):
    if stack_count != count:
        stack_count = count
        stackLabel.text = str(stack_count)
        stackLabel.visible = stack_count > 1

func _gui_input(event: InputEvent) -> void:
    pass

func _update_ui():
    nameLabel.text = item.name
</file>

<file path="assets/scenes/InventoryGridItemUI.tscn">
[gd_scene load_steps=6 format=3 uid="uid://bt4wvwr8oqckg"]

[ext_resource type="Script" uid="uid://caosp0lfxj55a" path="res://addons/Inventory/UI/InventoryGridUI/InventoryGridItemUI.gd" id="1_ttkqk"]
[ext_resource type="Script" uid="uid://cg0mxyfmmwwak" path="res://addons/Inventory/UI/InventoryGridUI/InventoryPopupTooltip.gd" id="3_ntwrb"]

[sub_resource type="AtlasTexture" id="AtlasTexture_v0o4h"]
region = Rect2(0, 0, 8, 8)

[sub_resource type="LabelSettings" id="LabelSettings_q2gjs"]
font_size = 8

[sub_resource type="LabelSettings" id="LabelSettings_21oa0"]

[node name="InventoryGridItemUI" type="PanelContainer"]
custom_minimum_size = Vector2(32, 32)
offset_right = 12.0
offset_bottom = 12.0
script = ExtResource("1_ttkqk")

[node name="Icon" type="TextureRect" parent="."]
custom_minimum_size = Vector2(8, 0)
layout_mode = 2
texture = SubResource("AtlasTexture_v0o4h")
stretch_mode = 5

[node name="Count" type="Label" parent="Icon"]
layout_mode = 1
anchors_preset = 1
anchor_left = 1.0
anchor_right = 1.0
offset_left = -6.0
offset_top = 21.0
offset_right = -1.0
offset_bottom = 33.0
grow_horizontal = 0
size_flags_horizontal = 4
text = "0"
label_settings = SubResource("LabelSettings_q2gjs")
horizontal_alignment = 1
vertical_alignment = 1

[node name="Tooltip" type="CanvasLayer" parent="."]
layer = 20

[node name="Container" type="PanelContainer" parent="Tooltip"]
custom_minimum_size = Vector2(187, 0)
offset_right = 200.0
offset_bottom = 63.0
size_flags_vertical = 4
mouse_filter = 2
script = ExtResource("3_ntwrb")

[node name="MarginContainer" type="MarginContainer" parent="Tooltip/Container"]
layout_mode = 2
size_flags_vertical = 4
theme_override_constants/margin_left = 10
theme_override_constants/margin_top = 8
theme_override_constants/margin_right = 10
theme_override_constants/margin_bottom = 8

[node name="VBoxContainer" type="VBoxContainer" parent="Tooltip/Container/MarginContainer"]
layout_mode = 2
size_flags_vertical = 4
mouse_filter = 2
theme_override_constants/separation = 0

[node name="Title" type="Label" parent="Tooltip/Container/MarginContainer/VBoxContainer"]
custom_minimum_size = Vector2(1, 0)
layout_mode = 2
text = "Title"
label_settings = SubResource("LabelSettings_21oa0")
autowrap_mode = 2

[node name="Text" type="RichTextLabel" parent="Tooltip/Container/MarginContainer/VBoxContainer"]
layout_mode = 2
size_flags_vertical = 4
mouse_filter = 2
theme_override_colors/default_color = Color(0.856067, 0.856067, 0.856067, 1)
theme_override_colors/font_selected_color = Color(0.396889, 0.396889, 0.396889, 1)
theme_override_constants/line_separation = 0
theme_override_font_sizes/normal_font_size = 14
text = "Tooltip description here..."
fit_content = true
scroll_active = false
autowrap_mode = 2
tab_size = 1
shortcut_keys_enabled = false
vertical_alignment = 2
</file>

<file path="assets/scenes/ShopUI.tscn">
[gd_scene load_steps=3 format=3 uid="uid://bfc6wq7lwjhxj"]

[ext_resource type="Script" uid="uid://u5it44tntj4c" path="res://scripts/ShopUI.gd" id="1_fr6wt"]

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_fr6wt"]
bg_color = Color(0.109804, 0.109804, 0.109804, 0.937255)
border_width_left = 2
border_width_top = 2
border_width_right = 2
border_width_bottom = 2
border_color = Color(0, 0, 0, 1)
corner_radius_top_left = 5
corner_radius_top_right = 5
corner_radius_bottom_right = 5
corner_radius_bottom_left = 5

[node name="ShopUI" type="Control"]
process_mode = 2
custom_minimum_size = Vector2(600, 400)
layout_mode = 3
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("1_fr6wt")

[node name="Background" type="PanelContainer" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_styles/panel = SubResource("StyleBoxFlat_fr6wt")

[node name="MarginContainer" type="MarginContainer" parent="Background"]
layout_mode = 2
theme_override_constants/margin_left = 25
theme_override_constants/margin_top = 25
theme_override_constants/margin_right = 25
theme_override_constants/margin_bottom = 25

[node name="VBoxContainer" type="VBoxContainer" parent="Background/MarginContainer"]
layout_mode = 2
mouse_filter = 0
theme_override_constants/separation = 10

[node name="TitleLabel" type="Label" parent="Background/MarginContainer/VBoxContainer"]
layout_mode = 2
size_flags_vertical = 0
text = "Miner's Shop"
horizontal_alignment = 1

[node name="SwitchModeButton" type="Button" parent="Background/MarginContainer/VBoxContainer"]
layout_mode = 2
size_flags_horizontal = 4
text = "Switch to Buy Mode"

[node name="HSeparator" type="HSeparator" parent="Background/MarginContainer/VBoxContainer"]
layout_mode = 2
size_flags_vertical = 4

[node name="OffersScroll" type="ScrollContainer" parent="Background/MarginContainer/VBoxContainer"]
layout_mode = 2
size_flags_vertical = 3
mouse_filter = 2
horizontal_scroll_mode = 0

[node name="OffersContainer" type="GridContainer" parent="Background/MarginContainer/VBoxContainer/OffersScroll"]
custom_minimum_size = Vector2(0, 200)
layout_mode = 2
size_flags_vertical = 3
columns = 7

[node name="CloseButton" type="Button" parent="Background/MarginContainer"]
process_mode = 2
layout_mode = 2
size_flags_vertical = 8
focus_mode = 0
text = "Close"
</file>

<file path="scripts/game_over_ui.gd">
# game_over_ui.gd
extends CanvasLayer

const TITLE_SCREEN_PATH = "res://assets/scenes/title_screen.tscn"

# Called when the node enters the scene tree for the first time.
func _ready() -> void:
    pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta: float) -> void:
    pass


# Ta funkcja zostanie wywołana po kliknięciu przycisku "RESTART"
func _on_restart_button_pressed():
    print("Restart button pressed!")
    # WAŻNE: Najpierw od-pauzuj grę, inaczej przeładowana scena też będzie spauzowana!
    get_tree().paused = false
    # Przeładuj bieżącą scenę (czyli całą scenę 'game.tscn')
    var error = get_tree().reload_current_scene()
    if error != OK:
        printerr("Failed to reload scene! Error code: ", error)


func _on_quit_button_pressed() -> void:
    get_tree().paused = false
    get_tree().change_scene_to_file(TITLE_SCREEN_PATH)
</file>

<file path="scripts/ui.gd">
# scripts/ui.gd
extends CanvasLayer

@onready var ladder_label: Label = $LadderCountLabel
@onready var health_label: Label = $HealthLabel
@onready var coins_label: Label = $CoinsLabel # Upewnij się, że ten Label istnieje w scenie UI
@onready var player := get_tree().get_first_node_in_group("player") as CharacterBody2D # ODzkomentuj to
func _ready():
    if not is_instance_valid(player):
        printerr("UI: nie znaleziono Playera lub nie jest typu 'Player'!")
        if is_instance_valid(ladder_label): ladder_label.text = "Drabiny: -"
        if is_instance_valid(health_label): health_label.text = "❤️ -/-"
        if is_instance_valid(coins_label): coins_label.text = "🪙 -"
        return

    # Ekwipunek
    if player.inventory is Inventory: # Bezpośredni dostęp do właściwości
        if not player.inventory.item_added.is_connected(_on_inventory_changed):
            player.inventory.item_added.connect(_on_inventory_changed)
        if not player.inventory.item_removed.is_connected(_on_inventory_changed):
            player.inventory.item_removed.connect(_on_inventory_changed)
        _on_inventory_changed(null, 0)
    else:
        printerr("UI: Player.inventory nie jest typu Inventory.")
        if is_instance_valid(ladder_label): ladder_label.text = "Drabiny: BŁĄD"

    # Zdrowie
    if player.has_signal("health_updated"):
        if not player.health_updated.is_connected(_on_player_health_updated):
            player.health_updated.connect(_on_player_health_updated)
        _on_player_health_updated(player.current_hp, player.max_hp) # Bezpośredni dostęp
    else:
        printerr("UI: Player nie ma sygnału 'health_updated'.")
        if is_instance_valid(health_label): health_label.text = "❤️ BŁĄD"

    # Monety
    if player.has_signal("coins_updated"):
        if not player.coins_updated.is_connected(_on_player_coins_updated):
            player.coins_updated.connect(_on_player_coins_updated)
        _on_player_coins_updated(player.coins) # Bezpośredni dostęp
    else:
        printerr("UI: Player nie ma sygnału 'coins_updated'.")
        if is_instance_valid(coins_label): coins_label.text = "Monety: BŁĄD"


func _on_inventory_changed(item: InventoryItem, slot_idx: int) -> void:
    if not is_instance_valid(player) or not (player.inventory is Inventory):
        if is_instance_valid(ladder_label): ladder_label.text = "Drabiny: ?"
        return
    if not is_instance_valid(player.ladder_item_type): # Bezpośredni dostęp
        if is_instance_valid(ladder_label): ladder_label.text = "Drabiny: (Brak typu)"
        return

    var inv := player.inventory as Inventory
    var ladder_type = player.ladder_item_type as InventoryItemType

    if not is_instance_valid(ladder_type):
        if is_instance_valid(ladder_label): ladder_label.text = "Drabiny: (Błąd typu)"
        return

    var count := inv.get_amount_of_item_type(ladder_type)
    if is_instance_valid(ladder_label):
        ladder_label.text = "Drabiny: %d" % count


func _on_player_health_updated(new_hp: float, max_hp_value: float):
    if not is_instance_valid(health_label):
        printerr("UI: HealthLabel nie jest ważny")
        return
    health_label.text = "❤️ %d/%d" % [int(new_hp), int(max_hp_value)]


func _on_player_coins_updated(new_coin_amount: int):
    if not is_instance_valid(coins_label):
        printerr("UI: CoinsLabel nie jest ważny!") # Dodaj wykrzyknik dla podkreślenia
        return
    coins_label.text = "🪙 %d" % new_coin_amount
</file>

<file path="README.md">
# Hollow Depths
![Engine: Godot](https://img.shields.io/badge/engine-godot4-blue?logo=godot-engine)
![License: MIT](https://img.shields.io/badge/license-MIT-green)
![Status: Beta](https://img.shields.io/badge/status-Beta-yellow)
![Platform: PC](https://img.shields.io/badge/platform-PC-lightgrey)
![Style: Pixel Art](https://img.shields.io/badge/style-pixel--art-critical)
![Genre: Platformer / Exploration](https://img.shields.io/badge/genre-Platformer_|_Exploration-ff69b4)

## 🎮 About the Game
*Hollow Depths* is a 2D pixel-art platformer with deep exploration and resource management elements. You play as a miner digging deep underground in search of precious materials like ammolite and stone. Plan your descent and return to the surface using limited resources such as ladders, and upgrade your gear by trading your findings in the surface shop. The game combines satisfying digging mechanics with strategic resource management, exploration, and character/tool progression through a shop system.

## 🎬 Gameplay Trailer (Beta Version)
[![Watch the Beta gameplay](https://img.youtube.com/vi/GdrwuZvxL4g/maxresdefault.jpg)](https://youtu.be/AftyFicKM6k)

## 🧱 Key Features
- **Mining System:** Dig through various block types, each with different durability. A visual indicator highlights the targeted block.
- **Advanced Inventory System:** Manage collected resources (e.g., ammolite, stone) and tools like ladders in a dedicated UI, accessible with a hotkey.
- **Strategic Building:** Place and retrieve ladders from your inventory to navigate treacherous vertical shafts.
- **Shop & Upgrade Mechanics:** Interact with a shop to trade gathered resources for essential items and crucial upgrades (e.g., improved digging capabilities).
- **Save/Load System:** Persist your progress and resume your underground adventures at any time.
- **Health and Fall Damage:** Manage your miner's health and be cautious of long drops.
- **Comprehensive UI:** Includes a HUD with health and a quick-access inventory bar, plus dedicated screens for full inventory management, shop interaction, main menu, and pause menu.
- **Exploration Focus:** Delve into underground cave systems, discovering resources and planning your routes. (Future: Procedural generation and diverse biomes).
- **Retro-Style Pixel Graphics (16x16)** and an ambient lo-fi soundtrack to set the mood.
- Fully playable and tested single-player experience with a complete core gameplay loop.

## 💻 Built With
- **Engine**: [Godot 4](https://godotengine.org/)
- **Language**: GDScript
- **Graphics**: Pixel-art assets primarily by [DK Productions](https://dkproductions.itch.io/16bit-miner-animated-character), with additional community assets.
- **Audio**: Lo-fi ambient soundtrack (royalty-free) and custom sound effects.
- **Key Addons/Modules**: Custom Inventory System, BetterTerrain (for advanced tilemap features).

## 👥 Team

| Name             | Role                                                                 |
|------------------|----------------------------------------------------------------------|
| **Konrad Skowron**   | Core gameplay mechanics, digging system, inventory & save/load system |
| **Jonasz Lazar**     | Level logic, ladder & climbing system, gameplay loop integration, UI   |
| **Mateusz Staszków** | Art direction, animation, UI design, NPC/shop system implementation     |

## 🚀 Getting Started

To run the project locally:

1. Download and install [Godot 4.x](https://godotengine.org/download).
2. Clone this repository:
   ```bash
   git clone https://github.com/jonasz-lazar-pwr/hollow-depths-game.git
   ```
3. Open the project in Godot Engine and run the main scene (title_screen.tscn)

## 📝 License

This project is licensed under the terms of the **MIT License**. See the [LICENSE](LICENSE) file for details.
</file>

<file path="addons/Inventory/UI/InventoryGridUI/InventoryGridItemUI.gd">
class_name InventoryGridItemUI extends Control

var item: InventoryItem:
    set = set_item

var count: int = 1:
    set = set_count

@onready var icon: TextureRect = $Icon
@onready var countLabel: Label = $Icon/Count
@onready var tooltip: CanvasLayer = $Tooltip 
@onready var tooltip_container: PanelContainer = $Tooltip/Container # Dodajemy referencję do PanelContainer
@onready var tooltipTitle: Label = $Tooltip/Container/MarginContainer/VBoxContainer/Title
@onready var tooltipText: RichTextLabel = $Tooltip/Container/MarginContainer/VBoxContainer/Text
# @onready var vbox_container_tooltip: VBoxContainer = $Tooltip/Container/MarginContainer/VBoxContainer # Ta referencja może nie być już potrzebna do debugowania rozmiaru

signal request_select(item)


func set_item(i: InventoryItem):
    item = i
    if is_inside_tree():
        _update_item_content() # Zmieniamy nazwę, aby odróżnić od aktualizacji UI

func set_count(c: int):
    count = c
    if is_inside_tree() and is_instance_valid(countLabel): # Dodatkowe sprawdzenie dla countLabel
        countLabel.text = str(count)
        if count == 0:
            countLabel.hide()
        else:
            countLabel.show()

# Funkcja do ustawiania zawartości tekstowej tooltipa
func _update_item_content():
    if not is_instance_valid(icon) or \
       not is_instance_valid(tooltipTitle) or \
       not is_instance_valid(tooltipText) or \
       not is_instance_valid(countLabel):
        print_rich("[color=orange]InventoryGridItemUI: One or more UI elements not ready in _update_item_content().[/color]")
        return

    if not item or not item.item_type:
        icon.texture = null
        tooltipTitle.text = ""
        tooltipText.text = " " # RichTextLabel nie lubi pustego stringa, jeśli używamy BBCode
        countLabel.text = "0"
        countLabel.hide()
        return
    
    icon.texture = item.item_type.texture
    tooltipTitle.text = item.name
    tooltipText.text = item.item_type.description # Upewnij się, że description nie jest null
    
    # Aktualizujemy countLabel tutaj też, na wszelki wypadek
    if is_instance_valid(countLabel):
        countLabel.text = str(count)
        countLabel.visible = count > 0

func _ready():
    # Sprawdzenie, czy wszystkie @onready zmienne są zainicjowane
    if not is_instance_valid(tooltip) or \
       not is_instance_valid(tooltip_container) or \
       not is_instance_valid(tooltipTitle) or \
       not is_instance_valid(tooltipText) or \
       not is_instance_valid(icon) or \
       not is_instance_valid(countLabel):
        print_rich("[color=red]InventoryGridItemUI: CRITICAL - Not all @onready nodes are valid in _ready(). Check paths![/color]")
        return # Nie kontynuuj, jeśli brakuje kluczowych węzłów

    mouse_entered.connect(_on_mouse_entered)
    mouse_exited.connect(_on_mouse_exited)
    
    _update_item_content() # Ustaw zawartość, ale tooltip jest jeszcze ukryty

    # === KLUCZOWA POPRAWKA Z TWOJEGO KODU ===
    # Ukrywamy tooltip na starcie, aby nie był widoczny od razu
    tooltip.hide() 
    # === KONIEC KLUCZOWEJ POPRAWKI ===


func _on_mouse_entered():
    if not item or not item.item_type: # Nie pokazuj tooltipa dla pustych slotów
        return

    if is_instance_valid(tooltip) and is_instance_valid(tooltip_container):
        # 1. Upewnij się, że teksty są aktualne
        _update_item_content()

        # 2. Pokaż CanvasLayer
        tooltip.show()

        # 3. === KLUCZOWA ZMIANA: POCZEKAJ JEDNĄ KLATKĘ ===
        # Dajemy silnikowi czas na przetworzenie zmian (np. obliczenie rozmiaru RichTextLabel)
        # po tym, jak tooltip stał się widoczny i teksty zostały ustawione.
        await get_tree().process_frame 
        # === KONIEC KLUCZOWEJ ZMIANY ===

        # 4. Teraz, gdy kontrolki wewnętrzne miały szansę się przeliczyć,			
        #    zresetuj rozmiar głównego kontenera tooltipa.
        tooltip_container.reset_size()

func _on_mouse_exited():
    if is_instance_valid(tooltip):
        tooltip.hide()
</file>

<file path="addons/Inventory/UI/SimpleInventoryUI.gd">
class_name SimpleInventoryUI extends BoxContainer

@export var ItemScene:PackedScene

@export var initial_items:Array[InventoryItem]

@export var inventory:Inventory:set = set_inventory
@export var container_target_node:NodePath
var container_target:Node

func set_inventory(it:Inventory):
    if inventory == it:
        return
    
    inventory = it
    
    if is_inside_tree():
        _clear_ui()
        _create_ui()
        if initial_items:
            inventory.put_many(initial_items)


func _clear_ui():
    for itemUI in container_target.get_children():
        itemUI.queue_free()


func _create_ui():
    if inventory:
        for slot_id in range(inventory.slots.size()):
            for item in inventory.slots[slot_id].items:
                _create_inventory_list_item_ui(item, slot_id)
        
        inventory.item_added.connect(_on_inventory_item_added)
        inventory.item_removed.connect(_on_inventory_item_removed)


func _on_inventory_item_added(item:InventoryItem, slot:int):
    if item.item_type.stackable:
        # can we stack?
        var current_item_ui = get_first_item_ui_by_type(item.item_type)
        if current_item_ui and slot == current_item_ui.get_meta("inventory_slot"):
            current_item_ui.count += 1
            return
    
    _create_inventory_list_item_ui(item, slot)


func _on_inventory_item_removed(item: InventoryItem, slot: int):
    # Dodajmy sprawdzenie null dla bezpieczeństwa
    if item == null or item.item_type == null:
        printerr("SimpleInventoryUI: Received null item or item without type in _on_inventory_item_removed.")
        return

    if item.item_type.stackable:
        # Przedmiot jest stackowalny: Znajdź UI dla tego typu
        var stack_ui = get_first_item_ui_by_type(item.item_type)
        if stack_ui:
            # Zmniejsz licznik na znalezionym UI
            stack_ui.count -= 1
            print("SimpleInventoryUI: Decremented count for ", item.item_type.name, " UI. New count: ", stack_ui.count)

            # Jeśli licznik spadł do zera, usuń całe UI dla tego stosu
            if stack_ui.count <= 0:
                print("SimpleInventoryUI: Stack count is 0, removing UI element for ", item.item_type.name)
                # Bezpieczne usunięcie z kontenera przed queue_free
                if is_instance_valid(container_target):
                    container_target.remove_child(stack_ui)
                stack_ui.queue_free()
        else:
            # To nie powinno się zdarzyć, jeśli dodawanie działa poprawnie
            printerr("SimpleInventoryUI: Could not find stack UI to decrement count for stackable item: ", item.item_type.name)
    else:
        # Przedmiot nie jest stackowalny: Znajdź konkretne UI dla tego obiektu
        var itemUI = get_item_ui(item)
        if itemUI:
            print("SimpleInventoryUI: Removing UI element for non-stackable item: ", item.name)
            # Bezpieczne usunięcie z kontenera przed queue_free
            if is_instance_valid(container_target):
                container_target.remove_child(itemUI)
            itemUI.queue_free()
        else:
            # To też nie powinno się zdarzyć dla non-stackable
            printerr("SimpleInventoryUI: Could not find specific UI element for non-stackable item: ", item.name)


func _create_inventory_list_item_ui(item:InventoryItem, slot:int):
    if not ItemScene:
        printerr("SimpleInventoryUI: ItemScene is not assigned!")
        return
    if not is_instance_valid(container_target):
        printerr("SimpleInventoryUI: Cannot add item UI, container_target is invalid!")
        return

    print("SimpleInventoryUI: Creating UI for item: ", item.name if item else "NULL ITEM", " in slot: ", slot) # Dodaj sprawdzenie `if item`
    var itemUI:Control = ItemScene.instantiate()
    itemUI.set_meta("inventory_slot", slot)
    itemUI.item = item
    container_target.add_child(itemUI)
    print("SimpleInventoryUI: Item UI added as child.")


func get_item_ui(item:InventoryItem) -> Control:
    for child in container_target.get_children():
        if child.item == item:
            return child
    return null


func get_first_item_ui_by_type(type:InventoryItemType) -> InventoryGridItemUI:
    for child in container_target.get_children():
        if child.item.item_type == type:
            return child
    
    return null


func _ready():
    print("SimpleInventoryUI: _ready start")
    if container_target_node:
        container_target = get_node(container_target_node)
        print("SimpleInventoryUI: Container target node found: ", container_target)
    else:
        printerr("SimpleInventoryUI: container_target_node not set!")
        return # Ważne, żeby nie kontynuować bez celu

    if container_target:
        _clear_ui()
        _create_ui()
        if initial_items:
            if inventory: # Dodaj sprawdzenie, czy inventory istnieje
                inventory.put_many(initial_items)
            else:
                printerr("SimpleInventoryUI: Cannot put initial_items, inventory is null!")
    else:
        printerr("SimpleInventoryUI: container_target is null!")
    print("SimpleInventoryUI: _ready end")
</file>

<file path="scripts/ShopOfferItemUI.gd">
# res://scripts/ui/ShopOfferItemUI.gd
extends Control

signal purchase_requested(offer: ShopOffer)
signal show_tooltip_requested(text_title: String, text_description: String, item_global_rect: Rect2)
signal hide_tooltip_requested()

@onready var item_icon_rect: TextureRect = $BackgroundButton/CenterContainer/IconAndCountVBox/ItemIcon
@onready var count_label: Label = $BackgroundButton/CenterContainer/IconAndCountVBox/CountLabel
@onready var background_button: Button = $BackgroundButton

const COLOR_NORMAL_CAN_AFFORD_BUY: Color = Color(0.85, 0.85, 0.85, 1.0)
const COLOR_NORMAL_CANT_AFFORD: Color = Color(0.8, 0.2, 0.2, 1.0)
const COLOR_NORMAL_OWNED: Color = Color(0.3, 0.3, 0.3, 1.0) # Rzadko używane dla BUY w nowym systemie

const COLOR_HOVER_CAN_AFFORD_BUY: Color = Color("6a6a6a")
const COLOR_HOVER_CANT_AFFORD: Color = Color(0.9, 0.3, 0.3, 1.0) # Rzadko używane dla BUY

const COLOR_SELL_AVAILABLE_NORMAL: Color = Color.WHITE
const COLOR_SELL_AVAILABLE_HOVER: Color = Color(0.95, 0.95, 0.95, 1.0)
const ALPHA_UNAVAILABLE: float = 0.5

var current_offer: ShopOffer = null
var player_inventory_ref: Inventory = null

var _is_owned: bool = false # <<< POPRAWIONA DEKLARACJA (było _is_owned_this_specific_offer w użyciu, ale nie w deklaracji)
var _can_afford: bool = false
var _is_mouse_over: bool = false
var _shop_mode_cached: int # 0 dla SELL, 1 dla BUY (ShopUI.ShopMode enum)

func _ready() -> void:
    if is_instance_valid(background_button):
        background_button.pressed.connect(_on_item_pressed)
        if not background_button.mouse_entered.is_connected(_on_mouse_entered_item_area):
            background_button.mouse_entered.connect(_on_mouse_entered_item_area)
        if not background_button.mouse_exited.is_connected(_on_mouse_exited_item_area):
            background_button.mouse_exited.connect(_on_mouse_exited_item_area)
    else: printerr("ShopOfferItemUI: BackgroundButton not valid!")


func _on_item_pressed() -> void:
    if current_offer and not background_button.disabled:
        purchase_requested.emit(current_offer)


func setup_offer(offer: ShopOffer, p_inventory: Inventory, already_purchased_this_offer: bool, can_afford_this_offer: bool, shop_mode_from_caller: int) -> void:
    current_offer = offer
    player_inventory_ref = p_inventory
    _is_owned = already_purchased_this_offer # <<< UŻYCIE POPRAWIONEJ ZMIENNEJ
    _can_afford = can_afford_this_offer
    _shop_mode_cached = shop_mode_from_caller

    if not is_instance_valid(current_offer):
        if is_instance_valid(background_button): background_button.disabled = true
        if is_instance_valid(count_label): count_label.text = "Error"
        if is_instance_valid(item_icon_rect): item_icon_rect.texture = null
        _update_visual_state(); return

    if is_instance_valid(item_icon_rect):
        var icon_tex = null
        if _shop_mode_cached == ShopUI.ShopMode.SELL: # Użyj enum z ShopUI dla czytelności
            if is_instance_valid(offer.cost_item) and is_instance_valid(offer.cost_item.texture):
                icon_tex = offer.cost_item.texture
        else: # BUY mode
            if is_instance_valid(offer.display_icon):
                icon_tex = offer.display_icon
            elif is_instance_valid(offer.cost_item) and is_instance_valid(offer.cost_item.texture):
                icon_tex = offer.cost_item.texture
        item_icon_rect.texture = icon_tex

    if is_instance_valid(count_label):
        if _shop_mode_cached == ShopUI.ShopMode.BUY:
            if offer.level_number > 0:
                count_label.text = "Lvl. %d" % offer.level_number
            else:
                count_label.text = ""
        elif _shop_mode_cached == ShopUI.ShopMode.SELL:
            count_label.text = "x%d" % offer.cost_amount
    
    _update_visual_state()

func _update_visual_state() -> void:
    if not is_instance_valid(background_button) or \
       not is_instance_valid(item_icon_rect) or \
       not is_instance_valid(count_label): return

    var current_normal_color: Color
    var current_hover_color: Color
    var label_text_color_override: Color = Color.WHITE
    var icon_modulate_color: Color = Color.WHITE     

    if _is_owned: # <<< UŻYCIE POPRAWIONEJ ZMIENNEJ
        current_normal_color = COLOR_NORMAL_OWNED
        current_hover_color = COLOR_NORMAL_OWNED 
        background_button.disabled = true
        # Tekst "Owned" jest teraz bardziej ogólny, bo setup_offer ustawi "Lvl. X" dla kupna
        # if is_instance_valid(count_label): count_label.text = "Owned" 
        label_text_color_override = Color(0.7, 0.7, 0.7, 1.0) 
        icon_modulate_color = Color(1.0, 1.0, 1.0, ALPHA_UNAVAILABLE)
    else:
        background_button.disabled = not _can_afford
        
        if _shop_mode_cached == ShopUI.ShopMode.SELL:
            if _can_afford:
                current_normal_color = COLOR_SELL_AVAILABLE_NORMAL
                current_hover_color = COLOR_SELL_AVAILABLE_HOVER
            else:
                current_normal_color = COLOR_NORMAL_CANT_AFFORD
                current_hover_color = COLOR_HOVER_CANT_AFFORD
                label_text_color_override = Color(1.0, 1.0, 1.0, ALPHA_UNAVAILABLE)
                icon_modulate_color = Color(1.0, 1.0, 1.0, ALPHA_UNAVAILABLE)
        else: # BUY mode
            if _can_afford: 
                current_normal_color = COLOR_NORMAL_CAN_AFFORD_BUY
                current_hover_color = COLOR_HOVER_CAN_AFFORD_BUY
            else: 
                current_normal_color = COLOR_NORMAL_CANT_AFFORD
                current_hover_color = COLOR_HOVER_CANT_AFFORD
                label_text_color_override = Color(1.0, 1.0, 1.0, ALPHA_UNAVAILABLE)
                icon_modulate_color = Color(1.0, 1.0, 1.0, ALPHA_UNAVAILABLE)
        
        if _is_mouse_over and _can_afford:
            background_button.modulate = current_hover_color
        else:
            background_button.modulate = current_normal_color
    
    if is_instance_valid(count_label):
        count_label.add_theme_color_override("font_color", label_text_color_override)
    if is_instance_valid(item_icon_rect):
        item_icon_rect.modulate = icon_modulate_color

func _on_mouse_entered_item_area() -> void:
    _is_mouse_over = true
    if current_offer != null:
        show_tooltip_requested.emit(current_offer.offer_name, current_offer.description, get_global_rect())
        # Usunięto _is_owned_this_specific_offer z logu, używamy _is_owned
        print("DEBUG ShopOfferItemUI: Mouse ENTERED '", current_offer.offer_name, "'. Can afford: ", _can_afford, ", Is owned (this specific offer): ", _is_owned, ", ShopMode: ", _shop_mode_cached)

    _update_visual_state()

func _on_mouse_exited_item_area() -> void:
    _is_mouse_over = false
    hide_tooltip_requested.emit()
    if current_offer != null:
        # Usunięto _is_owned_this_specific_offer z logu, używamy _is_owned
        print("DEBUG ShopOfferItemUI: Mouse EXITED '", current_offer.offer_name, "'. Can afford: ", _can_afford, ", Is owned (this specific offer): ", _is_owned, ", ShopMode: ", _shop_mode_cached)

    _update_visual_state()

# Ta funkcja nie jest już potrzebna, jeśli setup_offer poprawnie ustawia ikonę z offer.display_icon
# func set_display_icon(texture: Texture2D) -> void:
# 	if is_instance_valid(item_icon_rect):
# 		item_icon_rect.texture = texture
# 	else:
# 		printerr("ShopOfferItemUI: item_icon_rect is not valid in set_display_icon().")
</file>

<file path="scripts/ShopUI.gd">
# res://scripts/ui/ShopUI.gd
class_name ShopUI
extends Control

enum ShopMode { SELL, BUY } # SELL = 0, BUY = 1
var current_shop_mode: ShopMode = ShopMode.SELL

@onready var offers_container: Container = $Background/MarginContainer/VBoxContainer/OffersScroll/OffersContainer
@onready var close_button: Button = $Background/MarginContainer/CloseButton
@onready var offers_scroll: ScrollContainer = $Background/MarginContainer/VBoxContainer/OffersScroll
@onready var switch_mode_button: Button = $Background/MarginContainer/VBoxContainer/SwitchModeButton
@onready var title_label: Label = $Background/MarginContainer/VBoxContainer/TitleLabel

var player_inventory: Inventory = null
var game_manager: Node = null

var _player_inventory_ref_for_setup: Inventory = null
var _game_manager_ref_for_setup: Node = null
var _is_ready_for_data_setup: bool = false

# Zasoby dla ofert sprzedaży
var ammolite_item_type_ref: InventoryItemType = preload("res://assets/inventory/ammolite.tres")
var jasper_item_type_ref: InventoryItemType = preload("res://assets/inventory/jasper.tres")
var malachite_item_type_ref: InventoryItemType = preload("res://assets/inventory/malachite.tres")
var crystal_item_type_ref: InventoryItemType = preload("res://assets/inventory/crystal.tres")

# Zasoby dla ofert zakupu
@export var pickaxe_upgrade_offers_list: Array[ShopOffer] = [
    preload("res://assets/shop_offers/upgrade_pickaxe_damage_1.tres"),
    preload("res://assets/shop_offers/upgrade_pickaxe_damage_2.tres"),
    preload("res://assets/shop_offers/upgrade_pickaxe_damage_3.tres"),
]
var buy_ladder_offer_ref: ShopOffer = preload("res://assets/shop_offers/buy_ladder.tres")
var ladder_item_type_for_purchase: InventoryItemType = preload("res://assets/inventory/ladder.tres")
var buy_health_potion_offer_ref: ShopOffer = preload("res://assets/shop_offers/buy_health_potion.tres") # <<< NOWA REFERENCJA

var offer_item_scene_ref: PackedScene = preload("res://assets/scenes/ShopOfferItemUI.tscn")

var _ui_to_offer_map: Dictionary = {}

func _ready() -> void:
    print("ShopUI _ready CALLED.")
    if is_instance_valid(close_button):
        if not close_button.pressed.is_connected(close_ui):
            close_button.pressed.connect(close_ui)
    else: printerr("ShopUI _ready ERROR: CloseButton not found!")

    if is_instance_valid(switch_mode_button):
        if not switch_mode_button.pressed.is_connected(_on_switch_mode_button_pressed):
            switch_mode_button.pressed.connect(_on_switch_mode_button_pressed)
    else: printerr("ShopUI _ready ERROR: SwitchModeButton not found!")

    hide()
    if _is_ready_for_data_setup: _perform_actual_shop_setup()


func set_initial_data_for_shop(p_inventory: Inventory, p_game_manager: Node) -> void:
    print("ShopUI set_initial_data_for_shop CALLED.")
    _player_inventory_ref_for_setup = p_inventory
    _game_manager_ref_for_setup = p_game_manager
    _is_ready_for_data_setup = true

    if is_inside_tree() and get_tree() != null:
        if is_instance_valid(title_label) and is_instance_valid(switch_mode_button) and is_instance_valid(offers_container):
            _perform_actual_shop_setup()
        else: printerr("ShopUI set_initial_data_for_shop ERROR: @onready vars NOT valid yet.")
    else: print("ShopUI set_initial_data_for_shop: Node not in tree yet. Setup via _ready.")

func _perform_actual_shop_setup():
    print("ShopUI _perform_actual_shop_setup CALLED.")
    if not is_instance_valid(_player_inventory_ref_for_setup) or not is_instance_valid(_game_manager_ref_for_setup):
        printerr("ShopUI _perform_actual_shop_setup ERROR: Missing refs!")
        return
    player_inventory = _player_inventory_ref_for_setup
    game_manager = _game_manager_ref_for_setup
    _update_ui_for_mode()
    populate_offers()


func _on_switch_mode_button_pressed():
    if current_shop_mode == ShopMode.SELL:
        current_shop_mode = ShopMode.BUY
    else:
        current_shop_mode = ShopMode.SELL
    _update_ui_for_mode()
    populate_offers()

func _update_ui_for_mode():
    if not is_instance_valid(title_label) or not is_instance_valid(switch_mode_button): return
    if current_shop_mode == ShopMode.SELL:
        title_label.text = "Miner's Exchange - Sell Items"
        switch_mode_button.text = "Switch to Buy Mode"
    else:
        title_label.text = "Miner's Shop - Buy Upgrades & Items" # Zmiana tytułu
        switch_mode_button.text = "Switch to Sell Mode"
    #switch_mode_button.grab_focus()

func populate_offers() -> void:
    print("ShopUI populate_offers. Mode: ", current_shop_mode)
    if not is_instance_valid(offers_container): return
    for child in offers_container.get_children(): child.queue_free()
    _ui_to_offer_map.clear()
    if not player_inventory or not game_manager: return
    
    var sellable_items_config = [
        [ammolite_item_type_ref, "Sell All Ammolite", "SELL_ALL_AMMOLITE_DYNAMIC", 30],
        [jasper_item_type_ref, "Sell All Jasper", "SELL_ALL_JASPER_DYNAMIC", 50],
        [malachite_item_type_ref, "Sell All Malachite", "SELL_ALL_MALACHITE_DYNAMIC", 100],
        [crystal_item_type_ref, "Sell All Crystal", "SELL_ALL_CRYSTAL_DYNAMIC", 200]
    ]

    if current_shop_mode == ShopMode.SELL:
        for item_config in sellable_items_config:
            var item_type: InventoryItemType = item_config[0]
            var offer_name: String = item_config[1]
            var offer_id: String = item_config[2]
            var price_per_unit: int = item_config[3]

            if not is_instance_valid(item_type):
                printerr("ShopUI: Invalid ItemType in sellable_items_config for ID '", offer_id, "'. Expected: ", item_type)
                continue
            var items_owned = player_inventory.get_amount_of_item_type(item_type)
            var dynamic_sell_offer = ShopOffer.new()
            dynamic_sell_offer.offer_name = offer_name
            dynamic_sell_offer.description = "Sell all your %s for %d coins each." % [item_type.name, price_per_unit]
            dynamic_sell_offer.cost_item = item_type
            dynamic_sell_offer.cost_amount = items_owned
            dynamic_sell_offer.unique_id = offer_id
            dynamic_sell_offer.display_icon = item_type.texture
            var offer_item_ui_sell = offer_item_scene_ref.instantiate()
            offers_container.add_child(offer_item_ui_sell)
            
            _ui_to_offer_map[offer_item_ui_sell] = dynamic_sell_offer
            if offer_item_ui_sell.has_method("setup_offer"):
                var can_actually_sell = items_owned > 0
                offer_item_ui_sell.setup_offer(dynamic_sell_offer, player_inventory, false, can_actually_sell, int(current_shop_mode))
                if offer_item_ui_sell.has_signal("purchase_requested") and not offer_item_ui_sell.purchase_requested.is_connected(_on_any_offer_item_pressed):
                    offer_item_ui_sell.purchase_requested.connect(_on_any_offer_item_pressed)
                _connect_tooltip_signals(offer_item_ui_sell, dynamic_sell_offer)

    elif current_shop_mode == ShopMode.BUY:
        var player_current_coins = 0
        if game_manager.has_method("get_player_coins"):
            player_current_coins = game_manager.get_player_coins()

        # 1. Oferta zakupu drabinki
        if is_instance_valid(buy_ladder_offer_ref):
            var offer_item_ui_ladder = offer_item_scene_ref.instantiate()
            offers_container.add_child(offer_item_ui_ladder)
            _ui_to_offer_map[offer_item_ui_ladder] = buy_ladder_offer_ref
            var can_afford_ladder = player_current_coins >= buy_ladder_offer_ref.cost_amount
            offer_item_ui_ladder.setup_offer(buy_ladder_offer_ref, player_inventory, false, can_afford_ladder, int(current_shop_mode))
            if offer_item_ui_ladder.has_signal("purchase_requested") and not offer_item_ui_ladder.purchase_requested.is_connected(_on_any_offer_item_pressed):
                offer_item_ui_ladder.purchase_requested.connect(_on_any_offer_item_pressed)
            _connect_tooltip_signals(offer_item_ui_ladder, buy_ladder_offer_ref)

        # 2. Oferta zakupu mikstury zdrowia
        if is_instance_valid(buy_health_potion_offer_ref):
            var offer_item_ui_potion = offer_item_scene_ref.instantiate()
            offers_container.add_child(offer_item_ui_potion)
            _ui_to_offer_map[offer_item_ui_potion] = buy_health_potion_offer_ref
            var can_afford_potion = player_current_coins >= buy_health_potion_offer_ref.cost_amount
            # Dla mikstury, `already_purchased_this_offer` jest zawsze false, bo można kupować wielokrotnie
            offer_item_ui_potion.setup_offer(buy_health_potion_offer_ref, player_inventory, false, can_afford_potion, int(current_shop_mode))
            if offer_item_ui_potion.has_signal("purchase_requested") and not offer_item_ui_potion.purchase_requested.is_connected(_on_any_offer_item_pressed):
                offer_item_ui_potion.purchase_requested.connect(_on_any_offer_item_pressed)
            _connect_tooltip_signals(offer_item_ui_potion, buy_health_potion_offer_ref)

        # 3. Oferty ulepszeń kilofa
        var current_pickaxe_lvl = 0
        if game_manager.has_method("get_upgrade_level"):
            current_pickaxe_lvl = game_manager.get_upgrade_level("PICKAXE_LEVEL_PROGRESS")
        var next_pickaxe_offer_to_display: ShopOffer = null
        if current_pickaxe_lvl < pickaxe_upgrade_offers_list.size():
            next_pickaxe_offer_to_display = pickaxe_upgrade_offers_list[current_pickaxe_lvl]
        
        if is_instance_valid(next_pickaxe_offer_to_display):
            var offer_item_ui_pickaxe = offer_item_scene_ref.instantiate()
            offers_container.add_child(offer_item_ui_pickaxe)
            _ui_to_offer_map[offer_item_ui_pickaxe] = next_pickaxe_offer_to_display
            var can_afford_pickaxe_upgrade = player_current_coins >= next_pickaxe_offer_to_display.cost_amount
            offer_item_ui_pickaxe.setup_offer(next_pickaxe_offer_to_display, player_inventory, false, can_afford_pickaxe_upgrade, int(current_shop_mode))
            if offer_item_ui_pickaxe.has_signal("purchase_requested") and not offer_item_ui_pickaxe.purchase_requested.is_connected(_on_any_offer_item_pressed):
                offer_item_ui_pickaxe.purchase_requested.connect(_on_any_offer_item_pressed)
            _connect_tooltip_signals(offer_item_ui_pickaxe, next_pickaxe_offer_to_display)
        
        # Komunikat, jeśli nie ma ŻADNYCH ofert w trybie BUY
        if offers_container.get_child_count() == 0 :
            var no_offers_label = Label.new()
            no_offers_label.text = "No items or upgrades available for purchase."
            no_offers_label.horizontal_alignment = HORIZONTAL_ALIGNMENT_CENTER
            no_offers_label.custom_minimum_size.y = 50
            offers_container.add_child(no_offers_label)

    if is_instance_valid(offers_scroll): offers_scroll.scroll_vertical = 0
    

func _on_any_offer_item_pressed(offer_to_purchase: ShopOffer) -> void:
    if not is_instance_valid(offer_to_purchase) or not player_inventory or not game_manager: return
    print("ShopUI: Purchase attempt for: '%s'" % offer_to_purchase.offer_name)

    var sell_price_per_item = 0
    var item_type_to_sell: InventoryItemType = null

    if offer_to_purchase.unique_id == "SELL_ALL_AMMOLITE_DYNAMIC":
        item_type_to_sell = ammolite_item_type_ref
        sell_price_per_item = 30
    elif offer_to_purchase.unique_id == "SELL_ALL_JASPER_DYNAMIC":
        item_type_to_sell = jasper_item_type_ref
        sell_price_per_item = 50
    elif offer_to_purchase.unique_id == "SELL_ALL_MALACHITE_DYNAMIC":
        item_type_to_sell = malachite_item_type_ref
        sell_price_per_item = 100
    elif offer_to_purchase.unique_id == "SELL_ALL_CRYSTAL_DYNAMIC":
        item_type_to_sell = crystal_item_type_ref
        sell_price_per_item = 200

    if current_shop_mode == ShopMode.SELL:
        if is_instance_valid(item_type_to_sell) and sell_price_per_item > 0:
            var amount_to_sell = player_inventory.get_amount_of_item_type(item_type_to_sell)
            if amount_to_sell > 0:
                if game_manager.has_method("remove_items_by_type") and \
                   game_manager.remove_items_by_type(item_type_to_sell, amount_to_sell):
                    if game_manager.has_method("add_player_coins"):
                        var coins_earned = amount_to_sell * sell_price_per_item
                        game_manager.add_player_coins(coins_earned)
                        print("ShopUI: Sold %d %s for %d coins." % [amount_to_sell, item_type_to_sell.name, coins_earned])
                        populate_offers()
                    else: printerr("ShopUI (SELL) ERROR: game_manager missing add_player_coins method.")
                else: printerr("ShopUI (SELL) ERROR: Failed to remove items from player inventory or game_manager missing remove_items_by_type.")
            else: print("ShopUI (SELL): No %s to sell." % item_type_to_sell.name)

    elif current_shop_mode == ShopMode.BUY:
        var player_current_coins = 0
        if game_manager.has_method("get_player_coins"):
            player_current_coins = game_manager.get_player_coins()
        
        if player_current_coins < offer_to_purchase.cost_amount:
            print("ShopUI: Not enough coins for '%s'." % offer_to_purchase.offer_name)
            return

        var purchase_successful = false
        if game_manager.has_method("remove_player_coins"):
            if game_manager.remove_player_coins(offer_to_purchase.cost_amount):
                purchase_successful = true
            else:
                printerr("ShopUI (BUY) ERROR: Failed to remove coins for offer '%s'." % offer_to_purchase.offer_name)
        else:
            printerr("ShopUI (BUY) ERROR: game_manager missing remove_player_coins method.")
            return # Nie można kontynuować bez odejmowania monet

        if purchase_successful:
            if offer_to_purchase.reward_string_data == "PICKAXE_LEVEL_PROGRESS":
                if game_manager.has_method("grant_leveled_upgrade"):
                    game_manager.grant_leveled_upgrade(
                        offer_to_purchase.reward_string_data,
                        offer_to_purchase.level_number,
                        offer_to_purchase.reward_float_data
                    )
                else: printerr("ShopUI (BUY PICKAXE): game_manager missing grant_leveled_upgrade method.")
            
            elif offer_to_purchase.reward_string_data == "LADDER_ITEM_PURCHASE":
                if is_instance_valid(ladder_item_type_for_purchase):
                    var new_ladder_item = InventoryItem.new()
                    new_ladder_item.item_type = ladder_item_type_for_purchase
                    if not player_inventory.put(new_ladder_item):
                        printerr("ShopUI (BUY LADDER) ERROR: Could not add ladder to inventory. Refunding coins.")
                        game_manager.add_player_coins(offer_to_purchase.cost_amount)
                else: printerr("ShopUI (BUY LADDER): ladder_item_type_for_purchase is invalid.")

            elif offer_to_purchase.reward_string_data == "HEALTH_POTION_PURCHASE":
                # Potrzebujemy dostępu do obiektu gracza, aby wywołać add_health
                # Zakładamy, że game_manager to np. scena 'Game', która ma referencję do gracza
                var player_node = null
                if game_manager.has_node("WorldContainer/Player"): # Dostosuj ścieżkę, jeśli jest inna
                    player_node = game_manager.get_node("WorldContainer/Player")
                
                if is_instance_valid(player_node) and player_node.has_method("add_health"):
                    player_node.add_health(50.0) # Przywróć 50 HP
                    print("ShopUI: Used Health Potion, restored 50 HP.")
                else:
                    printerr("ShopUI (BUY POTION) ERROR: Player node not found or missing add_health method. Refunding coins.")
                    game_manager.add_player_coins(offer_to_purchase.cost_amount)
            
            else:
                printerr("ShopUI (BUY): Unknown offer reward_string_data: '%s'" % offer_to_purchase.reward_string_data)
                # Jeśli był to nieznany typ oferty, a monety zostały odjęte, powinniśmy je zwrócić
                game_manager.add_player_coins(offer_to_purchase.cost_amount)
                print("ShopUI (BUY): Refunded coins due to unknown offer type after payment.")

            populate_offers() # Odśwież UI sklepu po każdej udanej lub częściowo udanej transakcji

func _connect_tooltip_signals(item_ui_instance: Control, offer_data: ShopOffer):
    if not is_instance_valid(item_ui_instance) or not is_instance_valid(offer_data): return
    if item_ui_instance.has_signal("show_tooltip_requested"):
        if not item_ui_instance.show_tooltip_requested.is_connected(_on_item_show_tooltip_requested):
            item_ui_instance.show_tooltip_requested.connect(_on_item_show_tooltip_requested)
    if item_ui_instance.has_signal("hide_tooltip_requested"):
        if not item_ui_instance.hide_tooltip_requested.is_connected(_on_item_hide_tooltip_requested):
            item_ui_instance.hide_tooltip_requested.connect(_on_item_hide_tooltip_requested)

func close_ui() -> void:
    if is_instance_valid(game_manager):
        if game_manager.has_method("close_shop_ui"):
            game_manager.close_shop_ui()
        else:
            printerr("ShopUI close_ui ERROR: game_manager does not have close_shop_ui method!")
            hide(); get_tree().paused = false
    else:
        printerr("ShopUI close_ui ERROR: game_manager is not valid.")
        hide(); get_tree().paused = false

func _on_item_show_tooltip_requested(text_title: String, text_description: String, item_global_rect: Rect2) -> void:
    if is_instance_valid(game_manager) and game_manager.has_method("show_and_update_global_tooltip_content"):
        game_manager.show_and_update_global_tooltip_content(text_title, text_description, item_global_rect)
    else:
        if not is_instance_valid(game_manager): printerr("ShopUI Tooltip ERROR: game_manager is null.")
        elif not game_manager.has_method("show_and_update_global_tooltip_content"): printerr("ShopUI Tooltip ERROR: game_manager missing 'show_and_update_global_tooltip_content'.")

func _on_item_hide_tooltip_requested() -> void:
    if is_instance_valid(game_manager) and game_manager.has_method("hide_global_tooltip"):
        game_manager.hide_global_tooltip()
    else:
        printerr("ShopUI Tooltip ERROR: Cannot hide tooltip, game_manager invalid or missing hide_global_tooltip method.")

func _input(event: InputEvent) -> void:
    if not self.visible: return
    if event is InputEventKey and event.is_pressed() and not event.is_echo():
        var should_pass_to_game = false
        if event.is_action_pressed("ui_cancel"):
            should_pass_to_game = true
            get_viewport().set_input_as_handled()
        elif event.is_action_pressed("interact"):
            should_pass_to_game = true
            get_viewport().set_input_as_handled()
        if should_pass_to_game:
            if is_instance_valid(game_manager) and game_manager.has_method("handle_shop_shortcut"):
                game_manager.handle_shop_shortcut(event)
            else:
                printerr("ShopUI _input ERROR: Cannot forward event, game_manager invalid or missing handle_shop_shortcut method.")
            return
</file>

<file path="project.godot">
; Engine configuration file.
; It's best edited using the editor UI and not directly,
; since the parameters that go here are not all obvious.
;
; Format:
;   [section] ; section goes between []
;   param=value ; assign values to parameters

config_version=5

[application]

config/name="Hollow Depths"
run/main_scene="uid://do4jih7oduo1b"
config/features=PackedStringArray("4.4", "Forward Plus")
config/icon="res://icon.svg"

[autoload]

BetterTerrain="*res://addons/better-terrain/BetterTerrain.gd"

[display]

window/stretch/mode="canvas_items"
mouse_cursor/custom_image="uid://gei1i1drur6h"

[editor_plugins]

enabled=PackedStringArray("res://addons/better-terrain/plugin.cfg")

[global_group]

ladders=""
player=""

[importer_defaults]

texture={
"compress/channel_pack": 0,
"compress/hdr_compression": 1,
"compress/high_quality": false,
"compress/lossy_quality": 0.7,
"compress/mode": 0,
"compress/normal_map": 0,
"detect_3d/compress_to": 0,
"mipmaps/generate": false,
"mipmaps/limit": -1,
"process/fix_alpha_border": true,
"process/hdr_as_srgb": false,
"process/hdr_clamp_exposure": false,
"process/normal_map_invert_y": false,
"process/premult_alpha": false,
"process/size_limit": 0,
"roughness/mode": 0,
"roughness/src_normal": ""
}

[input]

ui_accept={
"deadzone": 0.5,
"events": [Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":0,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":4194309,"physical_keycode":0,"key_label":0,"unicode":0,"location":0,"echo":false,"script":null)
, Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":0,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":4194310,"physical_keycode":0,"key_label":0,"unicode":0,"location":0,"echo":false,"script":null)
, Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":0,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":32,"physical_keycode":0,"key_label":0,"unicode":32,"location":0,"echo":false,"script":null)
, Object(InputEventJoypadButton,"resource_local_to_scene":false,"resource_name":"","device":-1,"button_index":0,"pressure":0.0,"pressed":true,"script":null)
]
}
ui_cancel={
"deadzone": 0.5,
"events": [Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":0,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":4194305,"physical_keycode":0,"key_label":0,"unicode":0,"location":0,"echo":false,"script":null)
, Object(InputEventJoypadButton,"resource_local_to_scene":false,"resource_name":"","device":-1,"button_index":4,"pressure":0.0,"pressed":true,"script":null)
]
}
left={
"deadzone": 0.2,
"events": [Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":0,"physical_keycode":65,"key_label":0,"unicode":97,"location":0,"echo":false,"script":null)
, Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":0,"physical_keycode":4194319,"key_label":0,"unicode":0,"location":0,"echo":false,"script":null)
, Object(InputEventJoypadButton,"resource_local_to_scene":false,"resource_name":"","device":-1,"button_index":13,"pressure":0.0,"pressed":true,"script":null)
, Object(InputEventJoypadMotion,"resource_local_to_scene":false,"resource_name":"","device":-1,"axis":0,"axis_value":-1.0,"script":null)
]
}
right={
"deadzone": 0.2,
"events": [Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":0,"physical_keycode":68,"key_label":0,"unicode":100,"location":0,"echo":false,"script":null)
, Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":0,"physical_keycode":4194321,"key_label":0,"unicode":0,"location":0,"echo":false,"script":null)
, Object(InputEventJoypadButton,"resource_local_to_scene":false,"resource_name":"","device":-1,"button_index":14,"pressure":0.0,"pressed":true,"script":null)
, Object(InputEventJoypadMotion,"resource_local_to_scene":false,"resource_name":"","device":-1,"axis":0,"axis_value":1.0,"script":null)
]
}
up={
"deadzone": 0.2,
"events": [Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":0,"physical_keycode":87,"key_label":0,"unicode":119,"location":0,"echo":false,"script":null)
, Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":0,"physical_keycode":4194320,"key_label":0,"unicode":0,"location":0,"echo":false,"script":null)
, Object(InputEventJoypadButton,"resource_local_to_scene":false,"resource_name":"","device":-1,"button_index":11,"pressure":0.0,"pressed":true,"script":null)
, Object(InputEventJoypadMotion,"resource_local_to_scene":false,"resource_name":"","device":-1,"axis":1,"axis_value":-1.0,"script":null)
]
}
down={
"deadzone": 0.2,
"events": [Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":0,"physical_keycode":83,"key_label":0,"unicode":115,"location":0,"echo":false,"script":null)
, Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":0,"physical_keycode":4194322,"key_label":0,"unicode":0,"location":0,"echo":false,"script":null)
, Object(InputEventJoypadButton,"resource_local_to_scene":false,"resource_name":"","device":-1,"button_index":12,"pressure":0.0,"pressed":true,"script":null)
, Object(InputEventJoypadMotion,"resource_local_to_scene":false,"resource_name":"","device":-1,"axis":1,"axis_value":1.0,"script":null)
]
}
jump={
"deadzone": 0.2,
"events": [Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":0,"physical_keycode":32,"key_label":0,"unicode":32,"location":0,"echo":false,"script":null)
, Object(InputEventJoypadButton,"resource_local_to_scene":false,"resource_name":"","device":-1,"button_index":0,"pressure":0.0,"pressed":true,"script":null)
]
}
dig={
"deadzone": 0.2,
"events": [Object(InputEventMouseButton,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"button_mask":0,"position":Vector2(0, 0),"global_position":Vector2(0, 0),"factor":1.0,"button_index":1,"canceled":false,"pressed":false,"double_click":false,"script":null)
, Object(InputEventJoypadMotion,"resource_local_to_scene":false,"resource_name":"","device":-1,"axis":5,"axis_value":1.0,"script":null)
]
}
ui_inventory={
"deadzone": 0.2,
"events": [Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":0,"physical_keycode":73,"key_label":0,"unicode":105,"location":0,"echo":false,"script":null)
, Object(InputEventJoypadButton,"resource_local_to_scene":false,"resource_name":"","device":-1,"button_index":3,"pressure":0.0,"pressed":true,"script":null)
]
}
interact={
"deadzone": 0.2,
"events": [Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":0,"physical_keycode":69,"key_label":0,"unicode":101,"location":0,"echo":false,"script":null)
, Object(InputEventJoypadButton,"resource_local_to_scene":false,"resource_name":"","device":-1,"button_index":2,"pressure":0.0,"pressed":true,"script":null)
]
}
place_ladder={
"deadzone": 0.2,
"events": [Object(InputEventMouseButton,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"button_mask":0,"position":Vector2(0, 0),"global_position":Vector2(0, 0),"factor":1.0,"button_index":2,"canceled":false,"pressed":false,"double_click":false,"script":null)
, Object(InputEventJoypadMotion,"resource_local_to_scene":false,"resource_name":"","device":-1,"axis":4,"axis_value":1.0,"script":null)
]
}
aim_left={
"deadzone": 0.2,
"events": [Object(InputEventJoypadMotion,"resource_local_to_scene":false,"resource_name":"","device":-1,"axis":2,"axis_value":-1.0,"script":null)
]
}
aim_right={
"deadzone": 0.2,
"events": [Object(InputEventJoypadMotion,"resource_local_to_scene":false,"resource_name":"","device":-1,"axis":2,"axis_value":1.0,"script":null)
]
}
aim_up={
"deadzone": 0.2,
"events": [Object(InputEventJoypadMotion,"resource_local_to_scene":false,"resource_name":"","device":-1,"axis":3,"axis_value":-1.0,"script":null)
]
}
aim_down={
"deadzone": 0.2,
"events": [Object(InputEventJoypadMotion,"resource_local_to_scene":false,"resource_name":"","device":-1,"axis":3,"axis_value":1.0,"script":null)
]
}

[rendering]

textures/canvas_textures/default_texture_filter=0
renderer/rendering_method="gl_compatibility"
renderer/rendering_method.mobile="gl_compatibility"
</file>

<file path="scripts/game.gd">
extends Node2D

@onready var player = $WorldContainer/Player
@onready var game_over_layer = $GameOverLayer
@onready var pause_menu = $PauseMenuLayer/PauseMenu
@onready var global_tooltip_panel: PanelContainer = $UI/GlobalTooltip
@onready var global_tooltip_title: Label = $UI/GlobalTooltip/TooltipMargin/TooltipVBox/TooltipTitle
@onready var global_tooltip_description: Label = $UI/GlobalTooltip/TooltipMargin/TooltipVBox/TooltipDescription
@onready var global_tooltip_vbox: VBoxContainer = $UI/GlobalTooltip/TooltipMargin/TooltipVBox
@onready var global_tooltip_margin_container: MarginContainer = $UI/GlobalTooltip/TooltipMargin
@export var highlight_source_id: int = 3
@export var highlight_atlas_coords: Vector2i = Vector2i(0, 7)
@export var highlight_modulate: Color = Color(1.0, 1.0, 1.0, 1.0)
@export var purchased_upgrades_data: Dictionary = {}
@export var save_format_version: float = 1.0 # Możesz zmienić na 1.1, jeśli chcesz oznaczyć zmianę formatu
@export var player_data: Dictionary = {}
@export var world_data: Dictionary = {}
var highlighted_dig_cell: Vector2i = Vector2i(-1, -1)
var current_purchased_upgrades_data: Dictionary = {} # Używamy tylko tego do przechowywania ulepszeń
@onready var ground_tilemap = $WorldContainer/TileMap/Ground

const SAVE_PATH = "res://savegame.res"
var current_tooltip_instance: PanelContainer = null 
const SaveGameDataResource = preload("res://scripts/save_game_data.gd")
# Usunięto: var current_purchased_upgrades: Array[String] = []

func save_game():
    if not is_instance_valid(player):
        printerr("Cannot save: Player node is invalid.")
        return

    var ground_tilemap_node = $WorldContainer/TileMap/Ground as TileMapLayer
    if not is_instance_valid(ground_tilemap_node):
        printerr("Cannot save: Ground TileMap node is invalid.")
        return

    var player_data_dict = {
        "position_x": player.global_position.x,
        "position_y": player.global_position.y,
        "current_hp": player.current_hp,
        "inventory": player.inventory, 
        "coins": player.coins,
        "current_pickaxe_damage": player.current_digging_damage # Zapisz aktualne obrażenia kilofa
    }

    var tilemap_ground_state = {}
    var used_cells = ground_tilemap_node.get_used_cells()
    for cell_coords in used_cells:
        var source_id = ground_tilemap_node.get_cell_source_id(cell_coords)
        if source_id != -1:
            tilemap_ground_state[cell_coords] = {
                "source_id": source_id,
                "atlas_coords": ground_tilemap_node.get_cell_atlas_coords(cell_coords),
                "alternative": ground_tilemap_node.get_cell_alternative_tile(cell_coords)
            }

    var ladder_positions = []
    for ladder_node in get_tree().get_nodes_in_group("ladders"):
        if is_instance_valid(ladder_node):
            ladder_positions.append({
                "x": ladder_node.global_position.x,
                "y": ladder_node.global_position.y
                })

    var world_data_dict = {
        "tilemap_ground_state": tilemap_ground_state,
        "ladders": ladder_positions
    }

    var save_resource = SaveGameDataResource.new()
    save_resource.save_format_version = self.save_format_version 
    save_resource.player_data = player_data_dict
    save_resource.world_data = world_data_dict
    save_resource.purchased_upgrades_data = current_purchased_upgrades_data.duplicate(true) # Kluczowe dla ulepszeń
    
    var error = ResourceSaver.save(save_resource, SAVE_PATH)
    if error == OK:
        print("Game saved successfully to: ", ProjectSettings.globalize_path(SAVE_PATH))
    else:
        printerr("Error saving game: ", error)

func load_game() -> bool:
    if not FileAccess.file_exists(SAVE_PATH):
        print("No save file found at: ", SAVE_PATH)
        return false

    var loaded_resource = ResourceLoader.load(SAVE_PATH, "", ResourceLoader.CACHE_MODE_IGNORE)
    
    if not loaded_resource is SaveGameData:
        printerr("Failed to load save data: incorrect resource type at path: %s. Loaded: %s" % [SAVE_PATH, loaded_resource])
        return false

    var loaded_save_version = loaded_resource.save_format_version
    print("Save file resource loaded. Version: ", loaded_save_version)
    
    current_purchased_upgrades_data.clear() # Wyczyść przed wczytaniem

    # Wczytaj dane ulepszeń
    var loaded_upgrades_dict = loaded_resource.purchased_upgrades_data
    if loaded_upgrades_dict is Dictionary:
        current_purchased_upgrades_data = loaded_upgrades_dict.duplicate(true)
        print("Loaded upgrades data: ", current_purchased_upgrades_data)
    else:
        printerr("Loaded 'purchased_upgrades_data' is not a Dictionary or is missing. Upgrades might be default.")
        current_purchased_upgrades_data["PICKAXE_LEVEL_PROGRESS"] = 0 # Ustaw domyślny, jeśli brakuje

    # Wczytaj dane gracza
    if not is_instance_valid(player):
        printerr("Player node is not valid during load_game(). Aborting player data load.")
    else:
        var pd = loaded_resource.player_data
        if pd is Dictionary:
            player.global_position = Vector2(pd.get("position_x", player.global_position.x), pd.get("position_y", player.global_position.y))
            player.current_hp = pd.get("current_hp", player.max_hp)
            player.coins = pd.get("coins", 0)
            
            # Wczytaj bezpośrednio obrażenia kilofa, jeśli zapisane
            if pd.has("current_pickaxe_damage"):
                if player.has_method("apply_pickaxe_damage_upgrade"):
                    var saved_damage = pd.get("current_pickaxe_damage", player.base_digging_damage)
                    player.apply_pickaxe_damage_upgrade(saved_damage, false) # false, bo to bezpośrednia wartość
                    print("Loaded and applied current_pickaxe_damage directly to player: ", saved_damage)
            else:
                # Jeśli current_pickaxe_damage nie było zapisane, odtwórz na podstawie poziomu
                # To wymaga dostępu do listy ofert, co jest problematyczne tutaj.
                # Najlepiej jest upewnić się, że current_pickaxe_damage JEST zapisywane.
                # Jeśli musisz to zrobić, game.gd musiałoby znać mnożniki dla każdego poziomu.
                print("WARN: current_pickaxe_damage not found in save. Player damage may not be correct unless set by other means.")


            var loaded_inventory_res = pd.get("inventory", null)
            if loaded_inventory_res is Inventory:
                player.inventory = loaded_inventory_res
            else:
                player.inventory = Inventory.new() # Utwórz nowy, jeśli brak lub zły typ
                if loaded_inventory_res != null:
                    printerr("Loaded inventory data was not of type Inventory. Creating new.")
        else:
            printerr("Loaded 'player_data' is not a Dictionary or is missing. Player state might be default.")

    # Wczytaj dane świata (TileMap, Drabiny)
    var ground_tilemap_node = $WorldContainer/TileMap/Ground as TileMapLayer
    var ladders_container_node = $WorldContainer/Ladders

    if is_instance_valid(ground_tilemap_node): ground_tilemap_node.clear()
    else: printerr("Ground TileMap node is not valid during load_game(). Cannot load tilemap state.")

    if is_instance_valid(ladders_container_node):
        for existing_ladder in ladders_container_node.get_children(): existing_ladder.queue_free()
    else: printerr("Ladders container node is not valid during load_game(). Cannot load ladders.")

    var wd = loaded_resource.world_data
    if wd is Dictionary:
        if is_instance_valid(ground_tilemap_node):
            var loaded_tilemap_state = wd.get("tilemap_ground_state", {})
            if loaded_tilemap_state is Dictionary:
                for cell_coords_variant in loaded_tilemap_state:
                    if cell_coords_variant is Vector2i:
                        var cell_coords: Vector2i = cell_coords_variant
                        var tile_info = loaded_tilemap_state[cell_coords]
                        if tile_info is Dictionary:
                            ground_tilemap_node.set_cell(
                                cell_coords,
                                tile_info.get("source_id", -1),
                                tile_info.get("atlas_coords", Vector2i(-1, -1)),
                                tile_info.get("alternative", 0)
                            )
        if is_instance_valid(ladders_container_node) and is_instance_valid(player) and player.ladder_scene:
            var loaded_ladders_array = wd.get("ladders", [])
            if loaded_ladders_array is Array:
                for ladder_pos_data in loaded_ladders_array:
                    if ladder_pos_data is Dictionary:
                        var ladder_instance = player.ladder_scene.instantiate()
                        ladder_instance.global_position = Vector2(
                            ladder_pos_data.get("x", 0.0),
                            ladder_pos_data.get("y", 0.0)
                        )
                        ladders_container_node.add_child(ladder_instance)
                        if not ladder_instance.entered_ladder.is_connected(player._on_ladder_entered):
                            ladder_instance.entered_ladder.connect(player._on_ladder_entered)
                        if not ladder_instance.exited_ladder.is_connected(player._on_ladder_exited):
                            ladder_instance.exited_ladder.connect(player._on_ladder_exited)
    
    # Zastosuj ponownie efekty ulepszeń (jeśli nie zostały już wczytane bezpośrednio, np. current_pickaxe_damage)
    # W tym momencie, jeśli current_pickaxe_damage było w save, to już jest ustawione.
    # Jeśli nie, to player.gd musiałby mieć logikę do odtworzenia obrażeń na podstawie poziomu.
    # Na przykład, w player.gd _ready() lub specjalna funkcja:
    # func reapply_pickaxe_level_effect(level: int):
    #     var multiplier = 1.0 # Default
    #     if level == 1: multiplier = 1.5
    #     elif level == 2: multiplier = 2.0
    #     # etc.
    #     apply_pickaxe_damage_upgrade(base_digging_damage * multiplier, false) # false bo to już obliczona wartość
    #
    # W game.gd load_game() można by wywołać:
    # if is_instance_valid(player) and not pd.has("current_pickaxe_damage"):
    #     player.reapply_pickaxe_level_effect(get_upgrade_level("PICKAXE_LEVEL_PROGRESS"))


    if is_instance_valid(player):
        player.health_updated.emit(player.current_hp, player.max_hp)
        player.coins_updated.emit(player.coins)
        if player.inventory: player.inventory_updated.emit(player.inventory)
        player.stop_digging() 
    
    _reconnect_inventory_signals() 

    print("Game loaded successfully (full process completed).")
    get_tree().paused = false
    return true

# Metoda do przyznawania ulepszeń poziomowych
func grant_leveled_upgrade(upgrade_key: String, purchased_level: int, effect_value: float) -> void:
    var current_stored_level = current_purchased_upgrades_data.get(upgrade_key, 0)

    if purchased_level > current_stored_level:
        current_purchased_upgrades_data[upgrade_key] = purchased_level # Zapisz nowy poziom
        print("Game: Granted leveled upgrade '%s' to Lvl. %d." % [upgrade_key, purchased_level])
        
        if upgrade_key == "PICKAXE_LEVEL_PROGRESS": # Teraz ten warunek powinien być spełniony
            if is_instance_valid(player) and player.has_method("apply_pickaxe_damage_upgrade"):
                # effect_value to mnożnik obrażeń zdefiniowany w ShopOffer.reward_float_data
                player.apply_pickaxe_damage_upgrade(effect_value, true) # true, bo to mnożnik
                print("Game: Applied pickaxe Lvl. %d effect. Effect value (multiplier): %s. Player new damage: %s" % [purchased_level, effect_value, player.current_digging_damage]) # Dodatkowy log
            else:
                printerr("Game: Player instance or apply_pickaxe_damage_upgrade method not found for PICKAXE_LEVEL_PROGRESS.")
        # Możesz dodać obsługę innych typów ulepszeń poziomowych tutaj
    else:
        printerr("Game: Attempted to grant %s Lvl. %d, but Lvl. %d (or higher) is already owned or invalid." % [upgrade_key, purchased_level, current_stored_level])
# Metoda do sprawdzania aktualnego poziomu ulepszenia
func get_upgrade_level(upgrade_key: String) -> int:
    return current_purchased_upgrades_data.get(upgrade_key, 0) # Zwraca 0 jeśli klucz nie istnieje (brak ulepszeń)


# Stara funkcja grant_upgrade - zostawiona dla kompatybilności lub innych typów ulepszeń
# Jeśli używasz tylko nowego systemu dla kilofa, możesz ją usunąć lub dostosować.
func grant_upgrade(upgrade_id: String, value = true, is_new_purchase: bool = true) -> void:
    # Ta funkcja może być używana dla prostych, jednorazowych ulepszeń (niepoziomowych)
    # Jeśli 'upgrade_id' to np. "PICKAXE_LEVEL_PROGRESS", to ta funkcja nie jest odpowiednia
    # i powinna być użyta grant_leveled_upgrade.

    if upgrade_id == "PICKAXE_LEVEL_PROGRESS": # Przekieruj do nowej funkcji, jeśli to stary save
        if value is int and value > 0: # Zakładamy, że 'value' to stary poziom
            printerr("Game: grant_upgrade called for PICKAXE_LEVEL_PROGRESS with value %s. This should use grant_leveled_upgrade. Attempting conversion if possible." % str(value))
            # Potrzebowałbyś tu logiki do znalezienia mnożnika dla danego poziomu `value`
            # i wywołania grant_leveled_upgrade. To skomplikowane dla starego formatu.
            # Na razie zignorujemy, zakładając, że nowe save'y używają `purchased_upgrades_data` poprawnie.
        return

    # Logika dla innych, prostych ulepszeń
    if not current_purchased_upgrades_data.has(upgrade_id) or is_new_purchase:
        if is_new_purchase:
            print("Game: Granted simple upgrade: '%s' with value: %s" % [upgrade_id, str(value)])
        else:
            print("Game: Applying loaded simple upgrade: '%s' with value: %s" % [upgrade_id, str(value)])
        current_purchased_upgrades_data[upgrade_id] = value
        # Dodaj logikę efektu dla tego prostego ulepszenia, jeśli jest potrzebna
    elif not is_new_purchase and current_purchased_upgrades_data.has(upgrade_id):
        print("Game: Re-applying (verifying) already loaded simple upgrade: '%s'" % upgrade_id)


# --- Reszta funkcji game.gd (bez zmian w stosunku do Twojej wersji) ---
# _ready, _process, _draw, open_shop_ui, close_shop_ui, add_player_coins, remove_player_coins,
# show_and_update_global_tooltip_content, _finalize_tooltip_layout_and_position,
# _position_and_finalize_tooltip, hide_global_tooltip, _on_player_died,
# _unhandled_input, _on_InventoryButton_pressed, remove_items_by_type,
# _on_shop_area_body_entered, _on_shop_area_body_exited, handle_shop_shortcut,
# _reconnect_inventory_signals, has_upgrade, get_player_coins

# --- Nowa funkcja do dodawania monet (wywoływana przez ShopUI) ---
func add_player_coins(amount: int):
    if is_instance_valid(player):
        player.add_coins(amount)
    else:
        printerr("Game: Cannot add coins, player instance is invalid.")
        
# --- Nowa funkcja do usuwania monet (wywoływana przez ShopUI) ---
func remove_player_coins(amount: int) -> bool:
    if is_instance_valid(player):
        return player.remove_coins(amount)
    else:
        printerr("Game: Cannot remove coins, player instance is invalid.")
        return false
        
func open_shop_ui() -> void:
    print("DEBUG: open_shop_ui() called.") # Czy funkcja jest w ogóle wywoływana?

    if not is_instance_valid(player):
        printerr("Cannot open shop: Player is invalid")
        return
    print("DEBUG: Player is valid.")

    if not player.inventory: # Zakładając, że player.inventory to zasób Inventory
        printerr("Cannot open shop: Player inventory is invalid or null")
        return
    print("DEBUG: Player inventory is valid.")

    if not is_instance_valid(shop_ui_instance):
        print("DEBUG: shop_ui_instance is not valid, attempting to instantiate.")
        if not shop_ui_scene:
            printerr("Shop UI scene (shop_ui_scene variable) not preloaded or assigned!")
            return
        print("DEBUG: shop_ui_scene is loaded.")

        shop_ui_instance = shop_ui_scene.instantiate()
        if not is_instance_valid(shop_ui_instance):
            printerr("Failed to instantiate shop_ui_scene!")
            return
        print("DEBUG: shop_ui_instance instantiated successfully: ", shop_ui_instance)

        # WAŻNE: Upewnij się, że $UI to poprawna ścieżka do węzła,
        # który ma być rodzicem dla UI sklepu.
        # Może to być np. CanvasLayer lub główny Control node dla UI.
        var ui_parent_node = $UI # Zastąp $UI właściwą ścieżką, jeśli jest inna
        if is_instance_valid(ui_parent_node):
            ui_parent_node.add_child(shop_ui_instance)
            print("DEBUG: shop_ui_instance added as child to: ", ui_parent_node.name)
        else:
            printerr("Parent node for Shop UI ($UI or your path) not found!")
            shop_ui_instance.queue_free() # Ważne, aby zwolnić pamięć
            return
    else:
        print("DEBUG: shop_ui_instance is already valid.")


    if shop_ui_instance.has_method("set_initial_data_for_shop"):
        print("DEBUG: Calling set_initial_data_for_shop on shop_ui_instance.")
        shop_ui_instance.set_initial_data_for_shop(player.inventory, self)
    else:
        printerr("ShopUI instance (shop_ui_instance) does not have a 'set_initial_data_for_shop' method!")

    shop_ui_instance.show()
    print("DEBUG: shop_ui_instance.show() called. Is it visible on screen?")
    get_tree().paused = true
    print("Game paused. Shop UI should be open.")
func _initialize_new_game_state():
    print("Initializing new game state...")
    current_purchased_upgrades_data.clear()
    # Ustawiamy bazowy poziom dla ulepszeń, które mają poziomy
    current_purchased_upgrades_data["PICKAXE_LEVEL_PROGRESS"] = 0 # 0 oznacza brak ulepszeń kilofa
    
    if is_instance_valid(player):
        player.global_position = Vector2.ZERO # Lub inna pozycja startowa
        player.current_hp = player.max_hp
        player.coins = 0 
        if player.inventory: 
            player.inventory.take_all_items()
            if player.ladder_item_type and player.initial_ladders > 0:
                for i in range(player.initial_ladders):
                    var it = InventoryItem.new()
                    it.item_type = player.ladder_item_type
                    player.inventory.put(it)
        
        if player.has_method("apply_pickaxe_damage_upgrade"):
            player.apply_pickaxe_damage_upgrade(1.0, true) # Bazowy mnożnik 1.0 dla poziomu 0
        
        player.stop_digging()

        var ui_node = $UI
        if ui_node:
            if player.has_signal("health_updated") and ui_node.has_method("_on_player_health_updated"):
                if not player.health_updated.is_connected(ui_node._on_player_health_updated): 
                    player.health_updated.connect(ui_node._on_player_health_updated)
            if player.has_signal("coins_updated") and ui_node.has_method("_on_player_coins_updated"):
                if not player.coins_updated.is_connected(ui_node._on_player_coins_updated): 
                    player.coins_updated.connect(ui_node._on_player_coins_updated)
        
        if player.has_signal("player_died"):
            if not player.player_died.is_connected(_on_player_died): 
                player.player_died.connect(_on_player_died)
        
        _reconnect_inventory_signals()

        player.health_updated.emit(player.current_hp, player.max_hp)
        player.coins_updated.emit(player.coins)
        if player.inventory: player.inventory_updated.emit(player.inventory)
    else:
        printerr("Game script: Cannot initialize new game state, Player node is invalid!")

func close_shop_ui() -> void:
    print("DEBUG game.gd: close_shop_ui() CALLED.")
    if is_instance_valid(shop_ui_instance):
        print("DEBUG game.gd: shop_ui_instance is valid. Calling hide(). Currently visible: ", shop_ui_instance.visible)
        shop_ui_instance.hide()
        print("DEBUG game.gd: shop_ui_instance.hide() called. Now visible: ", shop_ui_instance.visible)
    else:
        print("DEBUG game.gd: shop_ui_instance is NOT valid in close_shop_ui().")

    if get_tree() != null:
        print("DEBUG game.gd: Unpausing game. Current get_tree().paused state: ", get_tree().paused)
        get_tree().paused = false
        print("DEBUG game.gd: Game unpaused. New get_tree().paused state: ", get_tree().paused)
    else:
        print("DEBUG game.gd: get_tree() is null in close_shop_ui(). Cannot unpause.")
    print("Game unpaused state should be false. Shop UI should be closed.")
    
# Optional helper function to reconnect inventory signals after loading
func _reconnect_inventory_signals():
    if player and player.inventory:
        var ui_node = $UI # Assuming UI script is attached here
        if ui_node and ui_node.has_method("_on_inventory_changed"):
            if not player.inventory.item_added.is_connected(ui_node._on_inventory_changed):
                player.inventory.item_added.connect(ui_node._on_inventory_changed)
            if not player.inventory.item_removed.is_connected(ui_node._on_inventory_changed):
                player.inventory.item_removed.connect(ui_node._on_inventory_changed)
        # Remove the passthrough connection if it exists, as UI connects directly now
        # (Or adjust based on your actual signal flow)
        #if player.inventory.item_added.is_connected(_on_inventory_changed_passthrough):
        #	player.inventory.item_added.disconnect(_on_inventory_changed_passthrough)
        #if player.inventory.item_removed.is_connected(_on_inventory_changed_passthrough):
        #	player.inventory.item_removed.disconnect(_on_inventory_changed_passthrough)


# Remove the _on_inventory_changed_passthrough function if not needed

func _ready():
    if is_instance_valid(global_tooltip_panel): global_tooltip_panel.visible = false
    else: printerr("Game: GlobalTooltipPanel not found!")
    if is_instance_valid(global_tooltip_description): global_tooltip_description.autowrap_mode = TextServer.AUTOWRAP_WORD_SMART
    else: printerr("Game: global_tooltip_description Label not found!")

    if FileAccess.file_exists(SAVE_PATH):
        print("Save file found, attempting to load...")
        if not load_game(): 
            print("Load failed or save file corrupted, starting new game.")
            _initialize_new_game_state()
    else:
        print("No save file found, starting new game.")
        _initialize_new_game_state()

    if is_instance_valid(game_over_layer): game_over_layer.visible = false
    if is_instance_valid(pause_menu): pause_menu.hide()
    else: printerr("Game script cannot find PauseMenu node!")
    
    var gt_map = $WorldContainer/TileMap/Ground as TileMapLayer # Zmieniona nazwa zmiennej, aby uniknąć konfliktu
    if is_instance_valid(gt_map) and is_instance_valid(gt_map.tile_set):
        var cell_4_n2_center = gt_map.map_to_local(Vector2i(4, -2))
        var tile_size_float: Vector2 = Vector2(gt_map.tile_set.tile_size)
        var top_left_of_cell_4_n2 = cell_4_n2_center - tile_size_float / 2.0
        var shop_area_center_pos = top_left_of_cell_4_n2 + tile_size_float
        print("Obliczona pozycja ShopArea: ", shop_area_center_pos)
        # Ustawienie pozycji ShopArea (jeśli to robisz w kodzie)
        # var shop_area_node = $WorldContainer/ShopArea
        # if is_instance_valid(shop_area_node):
        #     shop_area_node.global_position = shop_area_center_pos
    else:
        if not is_instance_valid(gt_map):
            printerr("Ground TileMap not found for ShopArea position calculation!")
        elif not is_instance_valid(gt_map.tile_set):
            printerr("TileSet on Ground TileMap not found for ShopArea position calculation!")


func show_and_update_global_tooltip_content(text_title: String, text_description: String, item_global_rect: Rect2) -> void:
    if not is_instance_valid(global_tooltip_panel):
        printerr("Game: show_and_update_global_tooltip_content - GlobalTooltipPanel is not valid.")
        return

    # 1. Ukryj panel i zresetuj minimalne rozmiary kontenerów i etykiet
    global_tooltip_panel.visible = false
    global_tooltip_panel.custom_minimum_size = Vector2.ZERO
    if is_instance_valid(global_tooltip_margin_container):
        global_tooltip_margin_container.custom_minimum_size = Vector2.ZERO
    if is_instance_valid(global_tooltip_vbox):
        global_tooltip_vbox.custom_minimum_size = Vector2.ZERO

    # 2. Ustaw nową zawartość tekstową i autowrap dla opisu
    if is_instance_valid(global_tooltip_title):
        global_tooltip_title.custom_minimum_size = Vector2.ZERO
        global_tooltip_title.text = text_title # Ustaw tekst tytułu
    
    if is_instance_valid(global_tooltip_description):
        global_tooltip_description.custom_minimum_size = Vector2.ZERO
        
        var is_short_text = text_description.length() < 60 and not "\n" in text_description
        if is_short_text:
            global_tooltip_description.autowrap_mode = TextServer.AUTOWRAP_OFF
        else:
            global_tooltip_description.autowrap_mode = TextServer.AUTOWRAP_WORD_SMART
        
        global_tooltip_description.text = text_description # Ustaw tekst opisu

    # Usunięto stąd wywołania update_minimum_size() i fit_child_in_rect()

    # 3. Uczyń panel widocznym (ale jego rozmiar jeszcze nie jest finalny)
    global_tooltip_panel.visible = true

    # 4. Użyj call_deferred do finalnego obliczenia rozmiaru i pozycjonowania
    #	Przekazujemy teraz także oryginalne teksty, aby mieć pewność, że używamy właściwych w logach
    call_deferred("_finalize_tooltip_layout_and_position", text_title, text_description, item_global_rect)
    
    print("Tooltip content set. Title: '", text_title, "'. Deferred finalization scheduled.")


# Zmieniona nazwa i logika funkcji wywoływanej przez call_deferred
func _finalize_tooltip_layout_and_position(final_text_title: String, final_text_description: String, item_global_rect: Rect2) -> void:
    if not is_instance_valid(global_tooltip_panel):
        printerr("Game _finalize_tooltip_layout_and_position: global_tooltip_panel is not valid.")
        return

    print("--- Finalizing Tooltip Layout ---")
    print("  Input Title: '", final_text_title, "'")
    print("  Input Description: '", final_text_description.substr(0,50), "...'")

    # 1. Upewnij się, że dzieci mają aktualne minimalne rozmiary
    if is_instance_valid(global_tooltip_title):
        if global_tooltip_title.text != final_text_title:
            global_tooltip_title.text = final_text_title 
        global_tooltip_title.update_minimum_size()
        print("    Title Label min_size:", global_tooltip_title.get_combined_minimum_size(), " current_size:", global_tooltip_title.size)

    if is_instance_valid(global_tooltip_description):
        var expected_autowrap = TextServer.AUTOWRAP_WORD_SMART
        if final_text_description.length() < 60 and not "\n" in final_text_description:
            expected_autowrap = TextServer.AUTOWRAP_OFF
        
        if global_tooltip_description.text != final_text_description or global_tooltip_description.autowrap_mode != expected_autowrap:
            global_tooltip_description.autowrap_mode = expected_autowrap
            global_tooltip_description.text = final_text_description
            
        global_tooltip_description.update_minimum_size()
        print("    Description Label min_size:", global_tooltip_description.get_combined_minimum_size(), " current_size:", global_tooltip_description.size, " (Autowrap: ", global_tooltip_description.autowrap_mode, ")")

    if is_instance_valid(global_tooltip_vbox):
        global_tooltip_vbox.update_minimum_size() 
        print("  VBox min_size:", global_tooltip_vbox.get_combined_minimum_size(), " current_size:", global_tooltip_vbox.size)

    if is_instance_valid(global_tooltip_margin_container):
        global_tooltip_margin_container.update_minimum_size()
        print("  MarginContainer min_size:", global_tooltip_margin_container.get_combined_minimum_size(), " current_size:", global_tooltip_margin_container.size)

    var panel_calculated_min_size = Vector2.ZERO
    if is_instance_valid(global_tooltip_panel):
        global_tooltip_panel.update_minimum_size() 
        panel_calculated_min_size = global_tooltip_panel.get_combined_minimum_size()
        print("  PanelContainer calculated_min_size (from children):", panel_calculated_min_size)
        
        # Ustaw custom_minimum_size, aby dać wskazówkę systemowi layoutu
        global_tooltip_panel.custom_minimum_size = panel_calculated_min_size
        print("  Set PanelContainer custom_minimum_size to:", panel_calculated_min_size)

    # Poczekaj na zakończenie cyklu layoutu
    await get_tree().process_frame 

    var tooltip_size: Vector2
    if is_instance_valid(global_tooltip_panel):
        var current_panel_size = global_tooltip_panel.size
        # Używamy panel_calculated_min_size, bo to jest minimalny rozmiar zawartości
        var target_content_size = panel_calculated_min_size 

        var style_min_size = Vector2.ZERO
        var panel_stylebox = global_tooltip_panel.get_theme_stylebox("panel")
        if panel_stylebox:
            style_min_size = panel_stylebox.get_minimum_size()
        
        var expected_actual_size = target_content_size + style_min_size
        print("    StyleBox min_size:", style_min_size, " Expected Actual Size (content_min + style_min):", expected_actual_size)

        if (current_panel_size - expected_actual_size).abs().length_squared() > 0.1 :
            print("    WARN: Panel size [", current_panel_size, "] not matching expected_actual_size [", expected_actual_size, "].")
            print("    Attempting to set size directly (LAST RESORT). Ensure Size Flags are SHRINK.")
            global_tooltip_panel.size = expected_actual_size # <--- RĘCZNE USTAWIENIE ROZMIARU
            # Po ręcznym ustawieniu rozmiaru, może być potrzebna kolejna klatka na ustabilizowanie
            await get_tree().process_frame 
            tooltip_size = global_tooltip_panel.size # Pobierz rozmiar ponownie
        else:
            tooltip_size = current_panel_size
    else:
        tooltip_size = Vector2.ZERO

    print("  PanelContainer final_size for positioning:", tooltip_size)
    # Pozycjonowanie
    var tooltip_pos: Vector2 = item_global_rect.position + Vector2(item_global_rect.size.x + 10, 0)
    var viewport_size: Vector2 = get_viewport_rect().size
    
    if tooltip_pos.x + tooltip_size.x > viewport_size.x:
        tooltip_pos.x = item_global_rect.position.x - tooltip_size.x - 10
    if tooltip_pos.x < 0:
        tooltip_pos.x = 5
        
    if tooltip_pos.y + tooltip_size.y > viewport_size.y:
        tooltip_pos.y = viewport_size.y - tooltip_size.y - 5
    if tooltip_pos.y < 0:
        tooltip_pos.y = 5

    global_tooltip_panel.global_position = tooltip_pos
    print("--- Tooltip Positioned. Final Panel Actual Size:", global_tooltip_panel.size, "---")
func _position_and_finalize_tooltip(item_global_rect: Rect2) -> void:
    if not is_instance_valid(global_tooltip_panel):
        printerr("Game _position_and_finalize_tooltip: global_tooltip_panel is not valid.")
        return

    print("--- Tooltip Finalization ---")
    if is_instance_valid(global_tooltip_title):
        print("  Title: '", global_tooltip_title.text, "'")
        print("    Title Label min_size:", global_tooltip_title.get_combined_minimum_size(), " size:", global_tooltip_title.size)
    if is_instance_valid(global_tooltip_description):
        print("  Description: '", global_tooltip_description.text.substr(0, 50), "...'") # Pokaż tylko początek długiego opisu
        print("    Description Label min_size:", global_tooltip_description.get_combined_minimum_size(), " size:", global_tooltip_description.size)
    if is_instance_valid(global_tooltip_vbox):
        print("  VBox min_size:", global_tooltip_vbox.get_combined_minimum_size(), " size:", global_tooltip_vbox.size)
    if is_instance_valid(global_tooltip_margin_container):
        print("  MarginContainer min_size:", global_tooltip_margin_container.get_combined_minimum_size(), " size:", global_tooltip_margin_container.size)
    
    var tooltip_size: Vector2 = global_tooltip_panel.size 
    print("  PanelContainer final_size:", tooltip_size)
    
    if tooltip_size.y > 300 and global_tooltip_description.text.length() < 70: # Bardziej rygorystyczny warunek
        print("  Tooltip WARN: Panel.size (", tooltip_size, ") still seems too large for short content.")

    var tooltip_pos: Vector2 = item_global_rect.position + Vector2(item_global_rect.size.x + 10, 0)
    var viewport_size: Vector2 = get_viewport_rect().size
    
    if tooltip_pos.x + tooltip_size.x > viewport_size.x:
        tooltip_pos.x = item_global_rect.position.x - tooltip_size.x - 10
    if tooltip_pos.x < 0:
        tooltip_pos.x = 5
        
    if tooltip_pos.y + tooltip_size.y > viewport_size.y:
        tooltip_pos.y = viewport_size.y - tooltip_size.y - 5
    if tooltip_pos.y < 0:
        tooltip_pos.y = 5

    global_tooltip_panel.global_position = tooltip_pos
    print("--- Tooltip Positioned ---")
    
func hide_global_tooltip() -> void:
    if is_instance_valid(global_tooltip_panel):
        global_tooltip_panel.visible = false
        global_tooltip_panel.custom_minimum_size = Vector2.ZERO
        if is_instance_valid(global_tooltip_margin_container):
            global_tooltip_margin_container.custom_minimum_size = Vector2.ZERO
        if is_instance_valid(global_tooltip_vbox):
            global_tooltip_vbox.custom_minimum_size = Vector2.ZERO
        if is_instance_valid(global_tooltip_title): # Dodaj to
            global_tooltip_title.custom_minimum_size = Vector2.ZERO
        if is_instance_valid(global_tooltip_description): # Dodaj to
            global_tooltip_description.custom_minimum_size = Vector2.ZERO
        print("Tooltip hidden and ALL container/label sizes reset.")

func _on_player_died():
    print("Game Over sequence started.")

    # 1. Zatrzymaj główną logikę gry
    get_tree().paused = true

    # 2. Pokaż warstwę Game Over (która teraz zawiera efekt grayscale i napis)
    if is_instance_valid(game_over_layer):
        game_over_layer.visible = true
        print("GameOverLayer visibility set to true.") # Dodaj log dla pewności
    else:
        printerr("game_over_layer is not valid, cannot show Game Over screen!")

    # 3. TODO: Odtwórz dźwięk "Game Over"
    # 4. TODO: Przyciski Restart/Quit

# Ta funkcja przechwytuje input, który nie został obsłużony gdzie indziej
# game.gd
func _unhandled_input(event: InputEvent): # Dodanie typu dla 'event' dla jasności
    # Pauza / ESC
    # Dla akcji globalnych jak ESC, lepiej używać Input, bo event może być np. ruchem myszy
    if Input.is_action_just_pressed("ui_cancel"): # POPRAWKA TUTAJ
        get_viewport().set_input_as_handled() # Ważne, aby zrobić to na początku, jeśli obsługujemy
        if get_tree().paused:
            if is_instance_valid(shop_ui_instance) and shop_ui_instance.visible:
                print("DEBUG game.gd: ESC pressed, shop UI is open. Closing shop.")
                close_shop_ui()
            elif pause_menu and pause_menu.visible:
                pause_menu.resume_game()
        else:
            print("DEBUG game.gd: ESC pressed, game not paused. Opening pause menu.")
            get_tree().paused = true
            if pause_menu:
                pause_menu.show()
                #pause_menu.get_node("ButtonContainer/ResumeButton").grab_focus()
        return

    # Przełącz ekwipunek klawiszem I
    if Input.is_action_just_pressed("ui_inventory"): # POPRAWKA TUTAJ
        get_viewport().set_input_as_handled() # Ważne
        if is_instance_valid(shop_ui_instance) and shop_ui_instance.visible:
            print("DEBUG game.gd: 'I' pressed, but shop is open. Doing nothing with inventory.")
            return

        print("DEBUG game.gd: 'I' (ui_inventory) action JUST pressed.")
        var inv_ui = $UI/InventoryGridUI  
        if is_instance_valid(inv_ui):
            inv_ui.visible = not inv_ui.visible
            print("DEBUG game.gd: InventoryGridUI visibility toggled to: ", inv_ui.visible)
        else:
            printerr("DEBUG game.gd: InventoryGridUI node not found at $UI/InventoryGridUI")
        return

    # Interakcja (np. otwieranie/zamykanie sklepu klawiszem E)
    # Tutaj również używamy Input, ponieważ event może nie być Key press,
    # a my chcemy zareagować na akcję zdefiniowaną w InputMap.
    if Input.is_action_just_pressed("interact"): # POPRAWKA TUTAJ
        get_viewport().set_input_as_handled() # Ważne
        print("DEBUG game.gd: Global Input 'interact' (E) action JUST pressed.")
        if player_in_shop_area:
            print("DEBUG game.gd: Player IS in shop area.")
            if is_instance_valid(shop_ui_instance) and shop_ui_instance.visible:
                print("DEBUG game.gd: Shop UI is valid and VISIBLE. Attempting to CLOSE via 'E'...")
                close_shop_ui()
            elif (not is_instance_valid(shop_ui_instance)) or (is_instance_valid(shop_ui_instance) and not shop_ui_instance.visible):
                print("DEBUG game.gd: Shop UI is not valid OR not visible. Attempting to OPEN via 'E'...")
                open_shop_ui()
            else:
                print("DEBUG game.gd: 'interact' (E) pressed in shop area, but shop state is unexpected.")
        else:
            print("DEBUG game.gd: 'interact' (E) pressed, but player NOT in shop area.")
        return


#
#func _on_player_died():
    #print("Game Over sequence started.")
    ## Upewnij się, że menu pauzy jest ukryte, gdy pojawi się Game Over
    #if pause_menu and pause_menu.visible:
        #pause_menu.hide()
    ## ... (reszta logiki game over) ...
    #get_tree().paused = true
    ## ... (reszta logiki game over) ...


func _on_InventoryButton_pressed():
 # Znajdź node z UI ekwipunku:
    var inv_ui = $UI/InventoryGridUI
    print("Znaleziono Inventory UI node: ", inv_ui) # Sprawdź, czy nie jest null
    if inv_ui:
        inv_ui.visible = not inv_ui.visible
        print("Ustawiono visible na: ", inv_ui.visible)
    else:
        printerr("Nie znaleziono node'a InventoryGridUI pod ścieżką $UI/InventoryGridUI!")
    
# game.gd
# ... (reszta kodu na górze) ...
# Sprawdza, czy gracz posiada dane ulepszenie
func has_upgrade(upgrade_id: String) -> bool:
    return current_purchased_upgrades_data.has(upgrade_id)
# W game.gd
func get_player_coins() -> int:
    if is_instance_valid(player):
        return player.coins
    return 0 # Zwróć 0, jeśli gracz nie jest dostępny
# Przyznaje graczowi ulepszenie

# Reszta funkcji (add_player_coins, remove_player_coins, open_shop_ui, close_shop_ui, 
# _reconnect_inventory_signals, show_and_update_global_tooltip_content, _finalize_tooltip_layout_and_position,
# _position_and_finalize_tooltip, hide_global_tooltip, _on_player_died, _unhandled_input,
# _on_InventoryButton_pressed, remove_items_by_type, _process, _draw, _on_shop_area_body_entered,
# _on_shop_area_body_exited, handle_shop_shortcut)
# pozostaje taka sama jak w Twojej ostatniej wersji, chyba że chcesz je również przejrzeć pod kątem zmian.
func remove_items_by_type(item_type: InventoryItemType, amount: int) -> bool:
    if not is_instance_valid(player) or not player.inventory:
        printerr("Cannot remove items: Player or inventory invalid.")
        return false

    if player.inventory.get_amount_of_item_type(item_type) < amount:
        printerr("Cannot remove items: Not enough items in inventory (should have been checked earlier).")
        return false # Chociaż to powinno być sprawdzone w UI

    var items_to_remove: Array[InventoryItem] = []
    # Znajdź konkretne instancje przedmiotów do usunięcia
    for slot in player.inventory.slots:
        if slot.type == item_type:
            for item in slot.items:
                if items_to_remove.size() < amount:
                    items_to_remove.append(item)
                else:
                    break # Mamy już wystarczającą ilość
        if items_to_remove.size() >= amount:
            break # Mamy już wystarczającą ilość

    if items_to_remove.size() != amount:
        printerr("Inventory logic error: Could not find exact amount of items to remove.")
         # To może się zdarzyć przy błędach w logice Inventory
        return false

    # Usuń znalezione przedmioty
    for item_instance in items_to_remove:
        player.inventory.take(item_instance) # take powinien emitować sygnał

    print("Removed %d items of type %s" % [amount, item_type.name])
    # Sygnał inventory_updated powinien zostać wyemitowany przez inventory.take
    # player.emit_signal("inventory_updated", player.inventory) # Niepotrzebne jeśli take emituje
    return true
    
func _process(delta: float) -> void:
    # --- Logika podświetlania kopania ---
    var new_highlight_cell = Vector2i(-1, -1) # Domyślnie brak podświetlenia

    # Sprawdź, czy gracz i tilemap są nadal poprawne
    if not is_instance_valid(player) or not is_instance_valid(ground_tilemap):
        if highlighted_dig_cell != Vector2i(-1, -1): # Jeśli coś było podświetlone, zaktualizuj
            highlighted_dig_cell = Vector2i(-1, -1)
            queue_redraw() # Odśwież, aby usunąć stare podświetlenie
        return # Zakończ, jeśli brakuje gracza lub tilemapy

    var mouse_pos = get_global_mouse_position()
    var mouse_cell = ground_tilemap.local_to_map(ground_tilemap.to_local(mouse_pos))
    var player_cell = ground_tilemap.local_to_map(ground_tilemap.to_local(player.global_position))
    var distance = abs(mouse_cell.x - player_cell.x) + abs(mouse_cell.y - player_cell.y)

    # DEBUG PRINT: Zobaczmy koordynaty i dystans
    # print("Mouse Cell: ", mouse_cell, " Player Cell: ", player_cell, " Distance: ", distance)

    if distance <= 1:
        # Sprawdź, czy w komórce jest kafelek
        var source_id = ground_tilemap.get_cell_source_id(mouse_cell)
        if source_id != -1:
            # Sprawdź, czy kafelek jest 'diggable'
            var tile_data = ground_tilemap.get_cell_tile_data(mouse_cell)
            var is_diggable = tile_data and tile_data.get_custom_data("diggable")

            # DEBUG PRINT: Sprawdźmy dane kafelka
            # print("  Tile Source ID: ", source_id, " Is Diggable: ", is_diggable)

            if is_diggable:
                # Sprawdź, czy to nie jest komórka z drabiną
                var is_ladder = false
                for ladder in get_tree().get_nodes_in_group("ladders"):
                    if not is_instance_valid(ladder): continue # Dodatkowe zabezpieczenie
                    var ladder_cell = ground_tilemap.local_to_map(ground_tilemap.to_local(ladder.global_position))
                    if ladder_cell == mouse_cell:
                        is_ladder = true
                        # DEBUG PRINT:
                        # print("  Detected Ladder at cell.")
                        break
                if not is_ladder:
                    new_highlight_cell = mouse_cell # Ustaw tę komórkę do podświetlenia
                    # DEBUG PRINT:
                    # print("  Setting highlight cell to: ", new_highlight_cell)

    # Zaktualizuj podświetlenie tylko jeśli się zmieniło
    if new_highlight_cell != highlighted_dig_cell:
        # DEBUG PRINT:
        # print("Highlight changed! Old: ", highlighted_dig_cell, " New: ", new_highlight_cell, " Requesting redraw.")
        highlighted_dig_cell = new_highlight_cell
        queue_redraw() # Poproś o przerysowanie

# --- Funkcja rysowania ---
func _draw() -> void:
    # DEBUG PRINT:
    # print("_draw() called. Highlighted cell: ", highlighted_dig_cell)

    if highlighted_dig_cell != Vector2i(-1, -1) and is_instance_valid(ground_tilemap) and ground_tilemap.tile_set:
        var tile_set = ground_tilemap.tile_set
        var tile_size = tile_set.tile_size

        # Oblicz pozycję i rozmiar docelowy na ekranie
        # Ważne: map_to_local daje ŚRODEK komórki dla map kwadratowych/prostokątnych
        var draw_pos_center = ground_tilemap.map_to_local(highlighted_dig_cell)
        # Potrzebujemy lewego górnego rogu do rysowania
        var dest_rect = Rect2(draw_pos_center - tile_size / 2.0, tile_size)

        # --- DEBUG: Rysuj prosty prostokąt zamiast tekstury ---
        #print("  Drawing SIMPLE RED RECT at: ", dest_rect)
        #draw_rect(dest_rect, Color.RED, false, 2.0) # Rysuj czerwony kontur
        # -------------------------------------------------------

        # --- Oryginalne rysowanie tekstury ---
        if not tile_set.has_source(highlight_source_id):
            print("Highlight Error: TileSet does not have source ID: ", highlight_source_id) # Zmieniono z printerr na print dla testów
            return
        var source = tile_set.get_source(highlight_source_id)
        if not source is TileSetAtlasSource:
            print("Highlight Error: Source ID ", highlight_source_id, " is not a TileSetAtlasSource.") # Zmieniono z printerr na print dla testów
            return
        var atlas_texture = source.texture
        if not atlas_texture:
            print("Highlight Error: AtlasSource with ID ", highlight_source_id, " has no texture.") # Zmieniono z printerr na print dla testów
            return
        var src_rect = source.get_tile_texture_region(highlight_atlas_coords, 0)
        if src_rect == Rect2i(0,0,0,0) and not source.has_tile(highlight_atlas_coords):
            print("Highlight Error: Atlas Coords ", highlight_atlas_coords, " not found in source ID ", highlight_source_id) # Zmieniono z printerr na print dla testów
            return
        #print("  Drawing highlight texture: ", atlas_texture.resource_path if atlas_texture else "null", " SrcRect: ", src_rect, " DestRect: ", dest_rect, " Modulate: ", highlight_modulate)
        draw_texture_rect_region(atlas_texture, dest_rect, src_rect, highlight_modulate)
        # --- Koniec oryginalnego rysowania ---

    #else: # DEBUG PRINT:
        #if highlighted_dig_cell == Vector2i(-1,-1):
            #print("  Not drawing highlight: cell is invalid.")
        #elif not is_instance_valid(ground_tilemap):
            #print("  Not drawing highlight: ground_tilemap invalid.")
        #elif not ground_tilemap.tile_set:
            #print("  Not drawing highlight: no tileset on ground_tilemap.")
var player_in_shop_area: bool = false
var shop_ui_scene: PackedScene = preload("res://assets/scenes/ShopUI.tscn")
var shop_ui_instance: Control = null # Instancja UI sklepu
func _on_shop_area_body_entered(body: Node2D) -> void:
    if body == player: # Sprawdź, czy to gracz wszedł
        player_in_shop_area = true
        print("Player entered shop area")
        # Możesz dodać jakiś wizualny wskaźnik, np. tekst "Press E to shop"
        # get_node("UI/ShopPromptLabel").visible = true

func _on_shop_area_body_exited(body: Node2D) -> void:
    if body == player:
        player_in_shop_area = false
        print("Player exited shop area")
        # Ukryj wskaźnik
        # get_node("UI/ShopPromptLabel").visible = false
        # Jeśli UI sklepu jest otwarte, zamknij je
        if is_instance_valid(shop_ui_instance) and shop_ui_instance.visible:
            close_shop_ui()
            
# game.gd
# Dodaj tę nową funkcję gdzieś w skrypcie game.gd

func handle_shop_shortcut(event: InputEvent):
    # Ta funkcja jest wywoływana RĘCZNIE przez ShopUI._input
    print(">>> game.gd handle_shop_shortcut: Received forwarded event: ", event)

    # Sprawdź, jaka akcja odpowiada temu zdarzeniu
    # Musimy użyć Input.is_action... bo sam event tego nie powie bezpośrednio
    if Input.is_action_just_pressed("ui_cancel"):
        print(">>> game.gd handle_shop_shortcut: Handling forwarded 'ui_cancel' (ESC).")
        if is_instance_valid(shop_ui_instance) and shop_ui_instance.visible:
            print("DEBUG game.gd (via shortcut): ESC detected, shop open. Closing.")
            close_shop_ui()
        else:
            print("DEBUG game.gd (via shortcut): ESC detected, but shop not open/visible?")
        # Nie musimy tutaj robić set_input_as_handled, bo ShopUI już to zrobiło
        return

    if Input.is_action_just_pressed("interact"):
        print(">>> game.gd handle_shop_shortcut: Handling forwarded 'interact' (E).")
        # Zakładamy, że skoro ShopUI jest otwarte, to gracz jest w strefie
        if is_instance_valid(shop_ui_instance) and shop_ui_instance.visible:
            print("DEBUG game.gd (via shortcut): 'interact' (E) detected, shop open. Closing.")
            close_shop_ui()
        else:
            print("DEBUG game.gd (via shortcut): 'interact' (E) detected, but shop not open/visible?")
        # Nie musimy tutaj robić set_input_as_handled
        return

    # Możesz dodać obsługę innych akcji przekazanych przez ShopUI, jeśli zajdzie potrzeba


func _on_end_game_trigger_body_entered(body: Node) -> void:
    # Sprawdzamy, czy obiekt, który wszedł, to na pewno gracz
    if body.is_in_group("player"):
        print("Player has reached the bottom! Starting final cutscene.")
        
        # Upewniamy się, że gra nie jest spauzowana
        get_tree().paused = false
        
        # Zmieniamy scenę na filmik końcowy
        var error = get_tree().change_scene_to_file("res://assets/scenes/end_cutscene.tscn")
        if error != OK:
            printerr("Failed to change to final cutscene. Error: ", error)
</file>

<file path="assets/scenes/game.tscn">
[gd_scene load_steps=24 format=4 uid="uid://bjs34cbfgjo1f"]

[ext_resource type="PackedScene" uid="uid://d00swspj35t6w" path="res://assets/scenes/player.tscn" id="1_uwrxv"]
[ext_resource type="Script" uid="uid://dm3iihye8a3wy" path="res://scripts/game.gd" id="1_vtaks"]
[ext_resource type="Texture2D" uid="uid://bcm1qkp4dydjd" path="res://assets/sprites/Miner16Bit_AllFiles_v1/Miner16Bit_WorldTiles_02.png" id="1_yqjtg"]
[ext_resource type="PackedScene" uid="uid://cfjwdbp0vsk1a" path="res://assets/scenes/crt_shader.tscn" id="2_gee14"]
[ext_resource type="Script" uid="uid://cc8x1tg73jmw1" path="res://scripts/game_over_ui.gd" id="5_dinhu"]
[ext_resource type="FontFile" uid="uid://vuhp4ap3r2kd" path="res://assets/fonts/Noto_Color_Emoji/NotoColorEmoji-Regular.ttf" id="5_i358u"]
[ext_resource type="Shader" uid="uid://clgqqxru7jg8" path="res://shaders/grayscale_shader.gdshader" id="5_kvpfn"]
[ext_resource type="PackedScene" uid="uid://dp2tfsw1nyc3v" path="res://assets/scenes/InventoryGridUI.tscn" id="5_s2rys"]
[ext_resource type="Resource" uid="uid://tc2oqyms7jt2" path="res://assets/scenes/player_inventory.tres" id="6_fc420"]
[ext_resource type="AudioStream" uid="uid://bs1k4f7ulp015" path="res://assets/music/steam_gardens_slowed.wav" id="6_p57ef"]
[ext_resource type="PackedScene" uid="uid://c5jhyxyopykhd" path="res://assets/scenes/ladder.tscn" id="7_u5sy4"]
[ext_resource type="Script" uid="uid://cmf651j7qk52t" path="res://scripts/ui.gd" id="9_0tnpc"]
[ext_resource type="Script" uid="uid://djiyhe0r48jcv" path="res://scripts/pause_menu.gd" id="13_i358u"]

[sub_resource type="WorldBoundaryShape2D" id="WorldBoundaryShape2D_yqjtg"]
distance = -356.0

[sub_resource type="WorldBoundaryShape2D" id="WorldBoundaryShape2D_lnu2h"]
distance = -524.0

[sub_resource type="SystemFont" id="SystemFont_pkhv0"]
fallbacks = Array[Font]([ExtResource("5_i358u")])

[sub_resource type="FontVariation" id="FontVariation_i358u"]
fallbacks = Array[Font]([ExtResource("5_i358u")])

[sub_resource type="LabelSettings" id="LabelSettings_fc420"]
font_size = 12
font_color = Color(0.74768, 0.74768, 0.74768, 1)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_dinhu"]
shader = ExtResource("5_kvpfn")

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_lnu2h"]
texture = ExtResource("1_yqjtg")
0:0/0 = 0
0:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
0:0/0/custom_data_0 = true
0:0/0/custom_data_1 = 100
0:0/0/metadata/_better_terrain = {
0: [0],
4: [0],
&"type": 1
}
2:0/0 = 0
2:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
2:0/0/custom_data_0 = true
2:0/0/custom_data_1 = 100
2:0/0/metadata/_better_terrain = {
4: [0],
8: [0],
&"type": 1
}
3:0/0 = 0
3:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
3:0/0/custom_data_0 = true
3:0/0/custom_data_1 = 500
3:0/0/custom_data_2 = "res://assets/inventory/ammolite.tres"
3:0/0/metadata/_better_terrain = {
0: [0],
4: [0],
8: [0],
12: [0],
&"type": 2
}
4:0/0 = 0
4:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
4:0/0/custom_data_0 = true
4:0/0/custom_data_1 = 100
4:0/0/metadata/_better_terrain = {
4: [0],
&"type": 1
}
5:0/0 = 0
6:0/0 = 0
7:0/0 = 0
0:1/0 = 0
0:1/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
0:1/0/custom_data_0 = true
0:1/0/custom_data_1 = 100
0:1/0/metadata/_better_terrain = {
0: [0],
4: [0],
12: [0],
&"type": 1
}
1:1/0 = 0
1:1/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
1:1/0/custom_data_0 = true
1:1/0/custom_data_1 = 100
1:1/0/metadata/_better_terrain = {
0: [0],
4: [0],
8: [0],
12: [0],
&"type": 1
}
2:1/0 = 0
2:1/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
2:1/0/custom_data_0 = true
2:1/0/custom_data_1 = 100
2:1/0/metadata/_better_terrain = {
4: [0],
8: [0],
12: [0],
&"type": 1
}
4:1/0 = 0
4:1/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
4:1/0/custom_data_0 = true
4:1/0/custom_data_1 = 100
4:1/0/metadata/_better_terrain = {
4: [0],
12: [0],
&"type": 1
}
5:1/0 = 0
6:1/0 = 0
7:1/0 = 0
0:2/0 = 0
0:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
0:2/0/custom_data_0 = true
0:2/0/custom_data_1 = 100
0:2/0/metadata/_better_terrain = {
0: [0],
12: [0],
&"type": 1
}
1:2/0 = 0
1:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
1:2/0/custom_data_0 = true
1:2/0/custom_data_1 = 100
1:2/0/metadata/_better_terrain = {
0: [0],
8: [0],
12: [0],
&"type": 1
}
2:2/0 = 0
2:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
2:2/0/custom_data_0 = true
2:2/0/custom_data_1 = 100
2:2/0/metadata/_better_terrain = {
8: [0],
12: [0],
&"type": 1
}
3:2/0 = 0
3:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
3:2/0/custom_data_0 = true
3:2/0/custom_data_1 = 100
3:2/0/metadata/_better_terrain = {
0: [0],
&"type": 1
}
4:2/0 = 0
4:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
4:2/0/custom_data_0 = true
4:2/0/custom_data_1 = 100
4:2/0/metadata/_better_terrain = {
&"type": 1
}
5:2/0 = 0
5:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
5:2/0/custom_data_0 = true
5:2/0/custom_data_1 = 100
5:2/0/metadata/_better_terrain = {
0: [0],
8: [0],
&"type": 1
}
6:2/0 = 0
6:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
6:2/0/custom_data_0 = true
6:2/0/custom_data_1 = 100
6:2/0/metadata/_better_terrain = {
8: [0],
&"type": 1
}
7:2/0 = 0
0:3/0 = 0
1:3/0 = 0
2:3/0 = 0
3:3/0 = 0
4:3/0 = 0
4:3/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
4:3/0/custom_data_0 = true
4:3/0/custom_data_1 = 100
4:3/0/metadata/_better_terrain = {
12: [0],
&"type": 1
}
5:3/0 = 0
0:4/0 = 0
2:4/0 = 0
3:4/0 = 0
5:4/0 = 0
0:5/0 = 0
1:5/0 = 0
2:5/0 = 0
3:5/0 = 0
5:5/0 = 0
7:5/0 = 0
0:6/0 = 0
1:6/0 = 0
3:6/0 = 0
5:6/0 = 0
6:6/0 = 0
7:6/0 = 0
3:7/0 = 0
5:7/0 = 0
6:7/0 = 0
7:7/0 = 0
1:0/0 = 0
1:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
1:0/0/custom_data_0 = true
1:0/0/custom_data_1 = 100
1:0/0/metadata/_better_terrain = {
0: [0],
4: [0],
8: [0],
&"type": 1
}
0:7/0 = 0
9:0/0 = 0
9:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
9:0/0/custom_data_0 = true
9:0/0/custom_data_1 = 1000
9:0/0/metadata/_better_terrain = {
0: [0],
4: [0],
&"type": 3
}
10:0/0 = 0
10:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
10:0/0/custom_data_0 = true
10:0/0/custom_data_1 = 1000
10:0/0/metadata/_better_terrain = {
0: [0],
4: [0],
8: [0],
&"type": 3
}
9:1/0 = 0
9:1/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
9:1/0/custom_data_0 = true
9:1/0/custom_data_1 = 1000
9:1/0/metadata/_better_terrain = {
0: [0],
4: [0],
12: [0],
&"type": 3
}
10:1/0 = 0
10:1/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
10:1/0/custom_data_0 = true
10:1/0/custom_data_1 = 1000
10:1/0/metadata/_better_terrain = {
0: [0],
4: [0],
8: [0],
12: [0],
&"type": 3
}
11:1/0 = 0
11:1/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
11:1/0/custom_data_0 = true
11:1/0/custom_data_1 = 1000
11:1/0/metadata/_better_terrain = {
4: [0],
8: [0],
12: [0],
&"type": 3
}
11:0/0 = 0
11:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
11:0/0/custom_data_0 = true
11:0/0/custom_data_1 = 1000
11:0/0/metadata/_better_terrain = {
4: [0],
8: [0],
&"type": 3
}
12:0/0 = 0
12:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
12:0/0/custom_data_0 = true
12:0/0/custom_data_1 = 3300
12:0/0/custom_data_2 = "res://assets/inventory/jasper.tres"
12:0/0/metadata/_better_terrain = {
0: [0],
4: [0],
8: [0],
12: [0],
&"type": 4
}
13:0/0 = 0
13:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
13:0/0/custom_data_0 = true
13:0/0/custom_data_1 = 1000
13:0/0/metadata/_better_terrain = {
4: [0],
&"type": 3
}
13:1/0 = 0
13:1/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
13:1/0/custom_data_0 = true
13:1/0/custom_data_1 = 1000
13:1/0/metadata/_better_terrain = {
4: [0],
12: [0],
&"type": 3
}
14:1/0 = 0
15:1/0 = 0
15:0/0 = 0
14:0/0 = 0
14:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
14:0/0/custom_data_0 = true
14:0/0/custom_data_1 = 1000
14:0/0/metadata/_better_terrain = {
12: [0],
&"type": 3
}
12:1/0 = 0
9:2/0 = 0
9:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
9:2/0/custom_data_0 = true
9:2/0/custom_data_1 = 1000
9:2/0/metadata/_better_terrain = {
0: [0],
12: [0],
&"type": 3
}
10:2/0 = 0
10:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
10:2/0/custom_data_0 = true
10:2/0/custom_data_1 = 1000
10:2/0/metadata/_better_terrain = {
0: [0],
8: [0],
12: [0],
&"type": 3
}
11:2/0 = 0
11:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
11:2/0/custom_data_0 = true
11:2/0/custom_data_1 = 1000
11:2/0/metadata/_better_terrain = {
8: [0],
12: [0],
&"type": 3
}
12:2/0 = 0
12:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
12:2/0/custom_data_0 = true
12:2/0/custom_data_1 = 1000
12:2/0/metadata/_better_terrain = {
0: [0],
&"type": 3
}
13:2/0 = 0
13:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
13:2/0/custom_data_0 = true
13:2/0/custom_data_1 = 1000
13:2/0/metadata/_better_terrain = {
&"type": 3
}
14:2/0 = 0
14:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
14:2/0/custom_data_0 = true
14:2/0/custom_data_1 = 1000
14:2/0/metadata/_better_terrain = {
0: [0],
8: [0],
&"type": 3
}
15:2/0 = 0
15:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
15:2/0/custom_data_0 = true
15:2/0/custom_data_1 = 1000
15:2/0/metadata/_better_terrain = {
8: [0],
&"type": 3
}
15:4/0 = 0
14:4/0 = 0
14:4/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
14:4/0/custom_data_0 = true
14:4/0/custom_data_1 = 4000
14:4/0/metadata/_better_terrain = {
12: [0],
&"type": 5
}
13:4/0 = 0
13:4/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
13:4/0/custom_data_0 = true
13:4/0/custom_data_1 = 4000
13:4/0/metadata/_better_terrain = {
4: [0],
&"type": 5
}
13:5/0 = 0
13:5/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
13:5/0/custom_data_0 = true
13:5/0/custom_data_1 = 4000
13:5/0/metadata/_better_terrain = {
4: [0],
12: [0],
&"type": 5
}
13:6/0 = 0
13:6/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
13:6/0/custom_data_0 = true
13:6/0/custom_data_1 = 4000
13:6/0/metadata/_better_terrain = {
&"type": 5
}
14:6/0 = 0
14:6/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
14:6/0/custom_data_0 = true
14:6/0/custom_data_1 = 4000
14:6/0/metadata/_better_terrain = {
0: [0],
8: [0],
&"type": 5
}
14:5/0 = 0
15:5/0 = 0
15:6/0 = 0
15:6/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
15:6/0/custom_data_0 = true
15:6/0/custom_data_1 = 4000
15:6/0/metadata/_better_terrain = {
8: [0],
&"type": 5
}
12:6/0 = 0
12:6/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
12:6/0/custom_data_0 = true
12:6/0/custom_data_1 = 4000
12:6/0/metadata/_better_terrain = {
0: [0],
&"type": 5
}
12:5/0 = 0
12:4/0 = 0
12:4/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
12:4/0/custom_data_0 = true
12:4/0/custom_data_1 = 6600
12:4/0/custom_data_2 = "res://assets/inventory/malachite.tres"
12:4/0/metadata/_better_terrain = {
0: [0],
4: [0],
8: [0],
12: [0],
&"type": 6
}
11:4/0 = 0
11:4/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
11:4/0/custom_data_0 = true
11:4/0/custom_data_1 = 4000
11:4/0/metadata/_better_terrain = {
4: [0],
8: [0],
&"type": 5
}
10:4/0 = 0
10:4/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
10:4/0/custom_data_0 = true
10:4/0/custom_data_1 = 4000
10:4/0/metadata/_better_terrain = {
0: [0],
4: [0],
8: [0],
&"type": 5
}
9:4/0 = 0
9:4/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
9:4/0/custom_data_0 = true
9:4/0/custom_data_1 = 4000
9:4/0/metadata/_better_terrain = {
0: [0],
4: [0],
&"type": 5
}
9:5/0 = 0
9:5/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
9:5/0/custom_data_0 = true
9:5/0/custom_data_1 = 4000
9:5/0/metadata/_better_terrain = {
0: [0],
4: [0],
12: [0],
&"type": 5
}
10:5/0 = 0
10:5/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
10:5/0/custom_data_0 = true
10:5/0/custom_data_1 = 4000
10:5/0/metadata/_better_terrain = {
0: [0],
4: [0],
8: [0],
12: [0],
&"type": 5
}
11:5/0 = 0
11:5/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
11:5/0/custom_data_0 = true
11:5/0/custom_data_1 = 4000
11:5/0/metadata/_better_terrain = {
4: [0],
8: [0],
12: [0],
&"type": 5
}
11:6/0 = 0
11:6/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
11:6/0/custom_data_0 = true
11:6/0/custom_data_1 = 4000
11:6/0/metadata/_better_terrain = {
8: [0],
12: [0],
&"type": 5
}
10:6/0 = 0
10:6/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
10:6/0/custom_data_0 = true
10:6/0/custom_data_1 = 4000
10:6/0/metadata/_better_terrain = {
0: [0],
8: [0],
12: [0],
&"type": 5
}
9:6/0 = 0
9:6/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
9:6/0/custom_data_0 = true
9:6/0/custom_data_1 = 4000
9:6/0/metadata/_better_terrain = {
0: [0],
12: [0],
&"type": 5
}
9:8/0 = 0
9:8/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
9:8/0/custom_data_0 = true
9:8/0/custom_data_1 = 7000
9:8/0/metadata/_better_terrain = {
0: [0],
4: [0],
&"type": 7
}
10:8/0 = 0
10:8/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
10:8/0/custom_data_0 = true
10:8/0/custom_data_1 = 7000
10:8/0/metadata/_better_terrain = {
0: [0],
4: [0],
8: [0],
&"type": 7
}
10:9/0 = 0
10:9/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
10:9/0/custom_data_0 = true
10:9/0/custom_data_1 = 7000
10:9/0/metadata/_better_terrain = {
0: [0],
4: [0],
8: [0],
12: [0],
&"type": 7
}
9:9/0 = 0
9:9/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
9:9/0/custom_data_0 = true
9:9/0/custom_data_1 = 7000
9:9/0/metadata/_better_terrain = {
0: [0],
4: [0],
12: [0],
&"type": 7
}
9:10/0 = 0
9:10/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
9:10/0/custom_data_0 = true
9:10/0/custom_data_1 = 7000
9:10/0/metadata/_better_terrain = {
0: [0],
12: [0],
&"type": 7
}
10:10/0 = 0
10:10/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
10:10/0/custom_data_0 = true
10:10/0/custom_data_1 = 7000
10:10/0/metadata/_better_terrain = {
0: [0],
8: [0],
12: [0],
&"type": 7
}
11:10/0 = 0
11:10/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
11:10/0/custom_data_0 = true
11:10/0/custom_data_1 = 7000
11:10/0/metadata/_better_terrain = {
8: [0],
12: [0],
&"type": 7
}
11:9/0 = 0
11:9/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
11:9/0/custom_data_0 = true
11:9/0/custom_data_1 = 7000
11:9/0/metadata/_better_terrain = {
4: [0],
8: [0],
12: [0],
&"type": 7
}
11:8/0 = 0
11:8/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
11:8/0/custom_data_0 = true
11:8/0/custom_data_1 = 7000
11:8/0/metadata/_better_terrain = {
4: [0],
8: [0],
&"type": 7
}
12:8/0 = 0
12:8/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
12:8/0/custom_data_0 = true
12:8/0/custom_data_1 = 9900
12:8/0/custom_data_2 = "res://assets/inventory/crystal.tres"
12:8/0/metadata/_better_terrain = {
0: [0],
4: [0],
8: [0],
12: [0],
&"type": 8
}
12:9/0 = 0
12:10/0 = 0
12:10/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
12:10/0/custom_data_0 = true
12:10/0/custom_data_1 = 7000
12:10/0/metadata/_better_terrain = {
0: [0],
&"type": 7
}
13:10/0 = 0
13:10/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
13:10/0/custom_data_0 = true
13:10/0/custom_data_1 = 7000
13:10/0/metadata/_better_terrain = {
&"type": 7
}
13:9/0 = 0
13:9/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
13:9/0/custom_data_0 = true
13:9/0/custom_data_1 = 7000
13:9/0/metadata/_better_terrain = {
4: [0],
12: [0],
&"type": 7
}
13:8/0 = 0
13:8/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
13:8/0/custom_data_0 = true
13:8/0/custom_data_1 = 7000
13:8/0/metadata/_better_terrain = {
4: [0],
&"type": 7
}
14:8/0 = 0
14:8/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
14:8/0/custom_data_0 = true
14:8/0/custom_data_1 = 7000
14:8/0/metadata/_better_terrain = {
12: [0],
&"type": 7
}
15:8/0 = 0
15:9/0 = 0
14:9/0 = 0
14:10/0 = 0
14:10/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
14:10/0/custom_data_0 = true
14:10/0/custom_data_1 = 7000
14:10/0/metadata/_better_terrain = {
0: [0],
8: [0],
&"type": 7
}
15:10/0 = 0
15:10/0/physics_layer_0/polygon_0/points = PackedVector2Array(-8, -8, 8, -8, 8, 8, -8, 8)
15:10/0/custom_data_0 = true
15:10/0/custom_data_1 = 7000
15:10/0/metadata/_better_terrain = {
8: [0],
&"type": 7
}

[sub_resource type="TileSet" id="TileSet_lbhrr"]
physics_layer_0/collision_layer = 1
custom_data_layer_0/name = "diggable"
custom_data_layer_0/type = 1
custom_data_layer_1/name = "durability"
custom_data_layer_1/type = 2
custom_data_layer_2/name = "resource_item_path"
custom_data_layer_2/type = 4
sources/3 = SubResource("TileSetAtlasSource_lnu2h")
metadata/_better_terrain = {
&"decoration": ["Decoration", Color(0.411765, 0.411765, 0.411765, 1), 3, [], {
&"path": "res://addons/better-terrain/icons/Decoration.svg"
}],
&"terrains": [["Ground", Color(0.0913593, 0.446622, 0.824805, 1), 2, [], {
&"path": ""
}], ["Dirt", Color(0.22927, 0.441406, 0.2276, 1), 0, [0], {
&"coord": Vector2i(1, 0),
&"source_id": 3
}], ["Treasure", Color(0.761109, 0.824219, 0.202835, 1), 0, [0], {
&"coord": Vector2i(3, 0),
&"source_id": 3
}], ["Jungle", Color(1, 1, 1, 1), 0, [0], {
&"coord": Vector2i(10, 0),
&"source_id": 3
}], ["Treasure1", Color(0.267147, 0.480583, 0.78631, 1), 0, [0], {
&"path": ""
}], ["Ice", Color(0.675781, 0, 0.205902, 1), 0, [0], {
&"coord": Vector2i(10, 4),
&"source_id": 3
}], ["Treasure2", Color(0.579682, 0.33978, 0.609743, 1), 0, [0], {
&"coord": Vector2i(12, 4),
&"source_id": 3
}], ["Lava", Color(0, 1, 0.986347, 1), 0, [0], {
&"coord": Vector2i(10, 8),
&"source_id": 3
}], ["Treasure3", Color(0.0176841, 0.699837, 0.262404, 1), 0, [0], {
&"path": ""
}]],
&"version": "0.2"
}

[sub_resource type="RectangleShape2D" id="RectangleShape2D_fc420"]
size = Vector2(32, 32)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_i358u"]
size = Vector2(1247, 58.5)

[node name="Game" type="Node2D"]
script = ExtResource("1_vtaks")

[node name="LeftBoundry" type="StaticBody2D" parent="."]
position = Vector2(0, -9)

[node name="CollisionShape2D" type="CollisionShape2D" parent="LeftBoundry"]
position = Vector2(-137, -5)
rotation = 1.5708
shape = SubResource("WorldBoundaryShape2D_yqjtg")

[node name="RightBoundry" type="StaticBody2D" parent="."]
position = Vector2(0, -9)

[node name="CollisionShape2D" type="CollisionShape2D" parent="RightBoundry"]
position = Vector2(0, -4)
rotation = -1.5708
shape = SubResource("WorldBoundaryShape2D_lnu2h")

[node name="Music" type="AudioStreamPlayer" parent="."]
stream = ExtResource("6_p57ef")
volume_db = -30.0
autoplay = true

[node name="CRT_Shader" parent="." instance=ExtResource("2_gee14")]

[node name="UI" type="CanvasLayer" parent="."]
layer = 0
script = ExtResource("9_0tnpc")

[node name="LadderCountLabel" type="Label" parent="UI"]
visible = false
offset_left = 10.0
offset_top = 10.0
offset_right = 50.0
offset_bottom = 33.0
theme_override_font_sizes/font_size = 34
text = "Drabiny: 5"

[node name="HealthLabel" type="Label" parent="UI"]
show_behind_parent = true
offset_left = 20.0
offset_top = 15.0
offset_right = 206.0
offset_bottom = 62.0
theme_override_fonts/font = SubResource("SystemFont_pkhv0")
theme_override_font_sizes/font_size = 34
text = "❤️ 100/100"

[node name="CoinsLabel" type="Label" parent="UI"]
offset_left = 20.0
offset_top = 70.0
offset_right = 104.0
offset_bottom = 117.0
theme_override_fonts/font = SubResource("FontVariation_i358u")
theme_override_font_sizes/font_size = 34
text = "🪙 0"

[node name="InventoryButton" type="Button" parent="UI"]
visible = false
anchors_preset = 1
anchor_left = 1.0
anchor_right = 1.0
offset_left = -8.0
offset_bottom = 8.0
grow_horizontal = 0

[node name="InventoryGridUI" parent="UI" instance=ExtResource("5_s2rys")]
z_index = 2000
custom_minimum_size = Vector2(300, 0)
offset_left = 500.0
offset_top = 10.0
offset_right = 184.0
offset_bottom = -286.0
scale = Vector2(1.7, 1.7)
inventory = ExtResource("6_fc420")

[node name="GridContainer" parent="UI/InventoryGridUI" index="0"]
columns = 5

[node name="GlobalTooltip" type="PanelContainer" parent="UI"]
visible = false
z_index = 100
offset_right = 40.0
offset_bottom = 58.0
size_flags_horizontal = 4
size_flags_vertical = 4
mouse_filter = 2

[node name="TooltipMargin" type="MarginContainer" parent="UI/GlobalTooltip"]
layout_mode = 2
size_flags_vertical = 4
theme_override_constants/margin_left = 7
theme_override_constants/margin_top = 7
theme_override_constants/margin_right = 7
theme_override_constants/margin_bottom = 7

[node name="TooltipVBox" type="VBoxContainer" parent="UI/GlobalTooltip/TooltipMargin"]
layout_mode = 2
size_flags_vertical = 4

[node name="TooltipTitle" type="Label" parent="UI/GlobalTooltip/TooltipMargin/TooltipVBox"]
layout_mode = 2

[node name="TooltipDescription" type="Label" parent="UI/GlobalTooltip/TooltipMargin/TooltipVBox"]
custom_minimum_size = Vector2(10, 20)
layout_mode = 2
size_flags_stretch_ratio = 2.75
text = " "
label_settings = SubResource("LabelSettings_fc420")
autowrap_mode = 2

[node name="GameOverLayer" type="CanvasLayer" parent="."]
process_mode = 3
layer = 10
script = ExtResource("5_dinhu")

[node name="GrayscaleEffectRect" type="ColorRect" parent="GameOverLayer"]
material = SubResource("ShaderMaterial_dinhu")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
color = Color(1, 1, 1, 0)

[node name="GameOverLabel" type="Label" parent="GameOverLayer"]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_font_sizes/font_size = 100
text = "GAME OVER"
horizontal_alignment = 1
vertical_alignment = 1

[node name="ContinueButton" type="Button" parent="GameOverLayer"]
process_mode = 3
anchors_preset = 7
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
offset_left = -106.0
offset_top = -228.0
offset_right = 114.0
offset_bottom = -163.0
grow_horizontal = 2
grow_vertical = 0
theme_override_font_sizes/font_size = 40
text = "Continue"

[node name="QuitButton" type="Button" parent="GameOverLayer"]
anchors_preset = 7
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
offset_left = -106.0
offset_top = -148.0
offset_right = 114.0
offset_bottom = -83.0
grow_horizontal = 2
grow_vertical = 0
theme_override_font_sizes/font_size = 40
text = "Quit"

[node name="WorldContainer" type="Node2D" parent="."]

[node name="TileMap" type="Node2D" parent="WorldContainer"]

[node name="Background" type="TileMapLayer" parent="WorldContainer/TileMap"]
light_mask = 0
z_index = -1
use_parent_material = true
tile_map_data = PackedByteArray("")
tile_set = SubResource("TileSet_lbhrr")

[node name="Ground" type="TileMapLayer" parent="WorldContainer/TileMap"]
z_index = -1
use_parent_material = true
tile_map_data = PackedByteArray("")
tile_set = SubResource("TileSet_lbhrr")

[node name="Player" parent="WorldContainer" groups=["player", "players"] instance=ExtResource("1_uwrxv")]
position = Vector2(0, -19)
collision_layer = 1
inventory = ExtResource("6_fc420")

[node name="Camera2D" type="Camera2D" parent="WorldContainer/Player"]
position = Vector2(0, -8)
zoom = Vector2(4, 4)
position_smoothing_enabled = true

[node name="Ladders" type="Node" parent="WorldContainer"]

[node name="Ladder" parent="WorldContainer/Ladders" instance=ExtResource("7_u5sy4")]
position = Vector2(57, 40)

[node name="Ladder2" parent="WorldContainer/Ladders" instance=ExtResource("7_u5sy4")]
position = Vector2(57, 24)

[node name="Ladder3" parent="WorldContainer/Ladders" instance=ExtResource("7_u5sy4")]
position = Vector2(57, 8)

[node name="Ladder4" parent="WorldContainer/Ladders" instance=ExtResource("7_u5sy4")]
position = Vector2(25, 72)

[node name="Ladder5" parent="WorldContainer/Ladders" instance=ExtResource("7_u5sy4")]
position = Vector2(25, 56)

[node name="Ladder6" parent="WorldContainer/Ladders" instance=ExtResource("7_u5sy4")]
position = Vector2(25, 40)

[node name="ShopArea" type="Area2D" parent="WorldContainer"]
position = Vector2(80, -16)

[node name="CollisionShape2D" type="CollisionShape2D" parent="WorldContainer/ShopArea"]
shape = SubResource("RectangleShape2D_fc420")

[node name="PauseMenuLayer" type="CanvasLayer" parent="."]
process_mode = 2

[node name="PauseMenu" type="Control" parent="PauseMenuLayer"]
layout_mode = 3
anchors_preset = 0
offset_right = 40.0
offset_bottom = 40.0
script = ExtResource("13_i358u")

[node name="DimBackground" type="ColorRect" parent="PauseMenuLayer/PauseMenu"]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
offset_right = 1112.0
offset_bottom = 608.0
grow_horizontal = 2
grow_vertical = 2
color = Color(0, 0, 0, 0.588235)

[node name="ButtonContainer" type="VBoxContainer" parent="PauseMenuLayer/PauseMenu"]
layout_mode = 1
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = 412.5
offset_top = 236.0
offset_right = 699.5
offset_bottom = 372.0
grow_horizontal = 2
grow_vertical = 2
theme_override_constants/separation = 10
alignment = 1

[node name="ResumeButton" type="Button" parent="PauseMenuLayer/PauseMenu/ButtonContainer"]
layout_mode = 2
theme_override_font_sizes/font_size = 40
text = "Resume"

[node name="SaveGameButton" type="Button" parent="PauseMenuLayer/PauseMenu/ButtonContainer"]
layout_mode = 2
theme_override_font_sizes/font_size = 40
text = "Save"

[node name="LoadGameButton" type="Button" parent="PauseMenuLayer/PauseMenu/ButtonContainer"]
layout_mode = 2
theme_override_font_sizes/font_size = 40
text = "Load"

[node name="QuitToMenuButton" type="Button" parent="PauseMenuLayer/PauseMenu/ButtonContainer"]
layout_mode = 2
theme_override_font_sizes/font_size = 40
text = "Quit to Menu"

[node name="EndGameTrigger" type="Area2D" parent="."]

[node name="CollisionShape2D" type="CollisionShape2D" parent="EndGameTrigger"]
position = Vector2(-641, -4)
shape = SubResource("RectangleShape2D_i358u")

[connection signal="pressed" from="UI/InventoryButton" to="." method="_on_InventoryButton_pressed"]
[connection signal="pressed" from="GameOverLayer/ContinueButton" to="GameOverLayer" method="_on_restart_button_pressed"]
[connection signal="pressed" from="GameOverLayer/QuitButton" to="GameOverLayer" method="_on_quit_button_pressed"]
[connection signal="body_entered" from="WorldContainer/ShopArea" to="." method="_on_shop_area_body_entered"]
[connection signal="body_exited" from="WorldContainer/ShopArea" to="." method="_on_shop_area_body_exited"]
[connection signal="pressed" from="PauseMenuLayer/PauseMenu/ButtonContainer/ResumeButton" to="PauseMenuLayer/PauseMenu" method="_on_resume_button_pressed"]
[connection signal="pressed" from="PauseMenuLayer/PauseMenu/ButtonContainer/SaveGameButton" to="PauseMenuLayer/PauseMenu" method="_on_save_game_button_pressed"]
[connection signal="pressed" from="PauseMenuLayer/PauseMenu/ButtonContainer/LoadGameButton" to="PauseMenuLayer/PauseMenu" method="_on_load_game_button_pressed"]
[connection signal="pressed" from="PauseMenuLayer/PauseMenu/ButtonContainer/QuitToMenuButton" to="PauseMenuLayer/PauseMenu" method="_on_quit_to_menu_button_pressed"]
[connection signal="child_entered_tree" from="EndGameTrigger/CollisionShape2D" to="." method="_on_end_game_trigger_body_entered"]

[editable path="UI/InventoryGridUI"]
</file>

<file path="scripts/player.gd">
class_name Player
extends CharacterBody2D

const SPEED = 50.0
const JUMP_VELOCITY = -75.0
const CLIMB_SPEED = 30.0

const TILE_HEIGHT: float = 16.0 # Wysokość jednego kafelka w pikselach
const MIN_FALL_TILES_FOR_DAMAGE: int = 3 # Minimalna liczba kafelków spadku, aby otrzymać obrażenia
const DAMAGE_PER_EXTRA_TILE_PERCENT: float = 10.0 # Procent HP odejmowany za każdy dodatkowy kafelek ponad próg

var ladder_stack = 0
@export var inventory: Inventory

var max_hp: float = 100.0  # Maksymalne punkty życia
var current_hp: float = 100.0 # Aktualne punkty życia
var coins: int = 0 # Dodajemy monety gracza
signal coins_updated(new_coin_amount: int) # Sygnał do aktualizacji UI monet

var is_currently_falling: bool = false # Flaga śledząca stan spadania
var fall_start_position_y: float = 0.0 # Pozycja Y, z której rozpoczął się upadek
# --- ZMIANY DLA ULEPSZENIA KILOF ---
var base_digging_damage: float = 25.0       # Bazowa siła kilofa
var current_digging_damage: float = 25.0    # Aktualna siła kilofa, inicjalizowana bazową
# ------------------------------------
# Używamy systemu kopania z wersji kolegi
var digging_blocks = {} # Słownik śledzący stan kopanych bloków: {Vector2i(map_coords): current_durability}
var digging_timer = null # Timer do kontroli kopania
var digging_interval = 0.4 # Częstotliwość "uderzeń" (w sekundach)
var digging_target = null # Aktualne koordynaty kopiowanego bloku
var digging_damage = 25.0 # Ile "uderzenie" zmniejsza wytrzymałość
var digging_animation = "dig"

const BLOCK_HEALTH_BAR_SCENE = preload("res://assets/scenes/BlockHealthBarUI.tscn")
var current_block_health_bar: ProgressBar = null # Referencja do aktywnego paska
var current_digging_block_initial_hp: float = 100.0 # Przechowamy tu początkowe HP kopanego bloku

@export var ladder_scene: PackedScene
@onready var ground_tilemap: TileMapLayer = $"../TileMap/Ground"
@onready var collision_shape: CollisionShape2D = $CollisionShape2D
@export var ladder_item_type: InventoryItemType  # <<< to dodaj
@export var initial_ladders: int = 5

# Dźwięki – Twoje dodatki:
@onready var LadderClimbSound: AudioStreamPlayer2D = $LadderClimbSound
@onready var WalkSound: AudioStreamPlayer2D = $WalkSound
@onready var JumpSound: AudioStreamPlayer2D = $JumpSound
@onready var LadderPlaceSound: AudioStreamPlayer2D = $LadderPlaceSound
@onready var LadderRemoveSound: AudioStreamPlayer2D = $LadderRemoveSound
@onready var DigSound: AudioStreamPlayer2D = $DigSound

signal inventory_updated(current_inventory)  # Sygnał aktualizacji ekwipunku
signal health_updated(new_hp, max_hp_value)     # Sygnał aktualizacji HP
signal player_died                             # Sygnał śmierci gracza


func _ready() -> void:
    # 1) Jeżeli ktoś zapomniał podpiąć Inventory w Inspectorze,
    #    to utwórz je programowo:
    if inventory == null:
        inventory = Inventory.new()
    if ladder_scene == null:
        ladder_scene = preload("res://assets/scenes/ladder.tscn")
    if ladder_item_type == null:
        ladder_item_type = preload("res://assets/inventory/ladder.tres")
    # ground_tilemap – przykład z gotową ścieżką:
    if not is_instance_valid(ground_tilemap):
        ground_tilemap = get_parent().get_node("TileMap/Ground") as TileMapLayer
    # 2) Wypakuj drabinki do ekwipunku:
    if ladder_item_type:
        for i in range(initial_ladders):
            var it = InventoryItem.new()
            it.item_type = ladder_item_type
            inventory.put(it)
        # bezpośrednio po wsadzeniu początkowych drabinek:
        emit_signal("inventory_updated", inventory)
        
    current_digging_damage = base_digging_damage
    
    # Podłączanie sygnałów drabin już istniejących na scenie
    for ladder in get_tree().get_nodes_in_group("ladders"):
        if not ladder.entered_ladder.is_connected(_on_ladder_entered):
            ladder.entered_ladder.connect(_on_ladder_entered)
        if not ladder.exited_ladder.is_connected(_on_ladder_exited):
            ladder.exited_ladder.connect(_on_ladder_exited)
    
    health_updated.emit(current_hp, max_hp)
    
    # Inicjalizacja timera kopania
    digging_timer = Timer.new()
    digging_timer.wait_time = digging_interval
    digging_timer.one_shot = false
    digging_timer.connect("timeout", Callable(self, "_on_digging_timer_timeout"))
    add_child(digging_timer)


func _input(event: InputEvent) -> void:
    if get_tree().paused:
        return
    if event.is_action_pressed("dig"):
        handle_digging()
    elif event.is_action_released("dig"):
        stop_digging()
    if event.is_action_pressed("place_ladder"):
        handle_ladder_placement()


func _physics_process(delta: float) -> void:
    if get_tree().paused:
        return
    # --- Grawitacja i śledzenie spadania ---
    if not is_on_floor() and ladder_stack == 0:
        velocity += get_gravity() * delta / 6
        if not is_currently_falling:
            is_currently_falling = true
            fall_start_position_y = global_position.y
    elif is_on_floor() and is_currently_falling:
        is_currently_falling = false
        var fall_end_position_y = global_position.y
        var fall_distance_pixels = fall_end_position_y - fall_start_position_y
        if fall_distance_pixels > 0:
            var fall_distance_tiles = floor(fall_distance_pixels / TILE_HEIGHT)
            if fall_distance_tiles >= MIN_FALL_TILES_FOR_DAMAGE:
                var extra_tiles = fall_distance_tiles - (MIN_FALL_TILES_FOR_DAMAGE - 1)
                var damage_percent = extra_tiles * DAMAGE_PER_EXTRA_TILE_PERCENT
                print("Fall damage calculated: ", damage_percent, "% for falling ", fall_distance_tiles, " tiles.")
                apply_fall_damage(damage_percent)
    elif ladder_stack > 0:
        if is_currently_falling:
            is_currently_falling = false

    # --- Skok ---
    if Input.is_action_just_pressed("jump") and is_on_floor():
        velocity.y = JUMP_VELOCITY
        JumpSound.play()
        is_currently_falling = false

    # --- Ruch na drabinie ---
    if ladder_stack >= 1:
        set_collision_mask_value(1, false)
        velocity.y = 0
        
        var direction_y = Input.get_axis("up", "down")
        var direction_x = Input.get_axis("left", "right")
        
        # Dodajemy dźwięk wspinania się po drabinie:
        if abs(direction_y) > 0.1:
            if not LadderClimbSound.playing:
                LadderClimbSound.play()
        else:
            if LadderClimbSound.playing:
                LadderClimbSound.stop()
        
        var can_move_vertically = true
        var can_move_horizontally = true
        
        if direction_y != 0:
            var check_pos_world_v: Vector2
            var collider_center_y = collision_shape.global_position.y
            var half_collider_height = collision_shape.shape.height / 2
            var check_margin_v = 1.0
            if direction_y > 0:
                check_pos_world_v = Vector2(global_position.x, collider_center_y + half_collider_height + check_margin_v)
            else:
                check_pos_world_v = Vector2(global_position.x, collider_center_y - half_collider_height - check_margin_v)
            var target_map_coords_v = ground_tilemap.local_to_map(check_pos_world_v)
            if ground_tilemap.get_cell_source_id(target_map_coords_v) != -1:
                var tile_data_v = ground_tilemap.get_cell_tile_data(target_map_coords_v)
                if tile_data_v and tile_data_v.get_collision_polygons_count(0) > 0:
                    can_move_vertically = false
        if direction_x != 0:
            var collider_center_y = collision_shape.global_position.y
            var collider_center_x = collision_shape.global_position.x
            var collider_radius = collision_shape.shape.radius
            var check_margin_h = 1.0
            var check_offset_x = sign(direction_x) * (collider_radius + check_margin_h)
            var check_pos_world_h = Vector2(collider_center_x + check_offset_x, collider_center_y)
            var target_map_coords_h = ground_tilemap.local_to_map(check_pos_world_h)
            if ground_tilemap.get_cell_source_id(target_map_coords_h) != -1:
                var tile_data_h = ground_tilemap.get_cell_tile_data(target_map_coords_h)
                if tile_data_h and tile_data_h.get_collision_polygons_count(0) > 0:
                    can_move_horizontally = false
        
        if can_move_vertically and direction_y != 0:
            velocity.y = direction_y * CLIMB_SPEED
        if can_move_horizontally and direction_x != 0:
            velocity.x = direction_x * SPEED
        elif not can_move_horizontally:
            velocity.x = move_toward(velocity.x, 0, SPEED)
        else:
            velocity.x = move_toward(velocity.x, 0, SPEED)
        
        if direction_y != 0 or (can_move_horizontally and direction_x != 0):
            $AnimatedSprite2D.animation = "climb"
            if not $AnimatedSprite2D.is_playing():
                $AnimatedSprite2D.play()
            $AnimatedSprite2D.speed_scale = 1
        else:
            $AnimatedSprite2D.animation = "climb"
            if $AnimatedSprite2D.is_playing():
                $AnimatedSprite2D.stop()
            $AnimatedSprite2D.frame = 0
        if direction_x != 0:
            $AnimatedSprite2D.flip_h = direction_x < 0

    # --- Ruch na ziemi/w powietrzu (poza drabiną) ---
    else:
        set_collision_mask_value(1, true)
        
        var direction_x = Input.get_axis("left", "right")
        if direction_x:
            velocity.x = direction_x * SPEED
            if is_on_floor() and not WalkSound.playing:
                WalkSound.play()
        else:
            velocity.x = move_toward(velocity.x, 0, SPEED)
            if WalkSound.playing:
                WalkSound.stop()
        
        # Jeśli trwa kopanie, ustaw animację kopania i zakończ tutaj dalsze zmiany animacji
        if Input.is_action_pressed("dig") and digging_target != null:
            $AnimatedSprite2D.animation = digging_animation
            if not $AnimatedSprite2D.is_playing():
                $AnimatedSprite2D.play()
            move_and_slide()
            return

        if is_on_floor():
            if direction_x != 0:
                $AnimatedSprite2D.animation = "walk"
                $AnimatedSprite2D.flip_h = direction_x < 0
                if not $AnimatedSprite2D.is_playing() or $AnimatedSprite2D.animation != "walk":
                    $AnimatedSprite2D.play("walk")
            else:
                $AnimatedSprite2D.animation = "idle"
                if not $AnimatedSprite2D.is_playing() or $AnimatedSprite2D.animation != "idle":
                    $AnimatedSprite2D.play("idle")
        else:
            $AnimatedSprite2D.animation = "idle"
            if not $AnimatedSprite2D.is_playing() or $AnimatedSprite2D.animation != "idle":
                $AnimatedSprite2D.play("idle")
    
    move_and_slide()
    
    if not is_on_floor() and not is_currently_falling and ladder_stack == 0:
        is_currently_falling = true
        fall_start_position_y = global_position.y


func _on_digging_timer_timeout() -> void:
    if digging_target == null:
        digging_timer.stop()
        return
    dig_block_progress(digging_target)


func handle_digging() -> void:
    if ground_tilemap == null:
        return

    # 1) Mysz → lokal TileMap → komórka
    var mouse_local = ground_tilemap.to_local(get_global_mouse_position())
    var cell = ground_tilemap.local_to_map(mouse_local)

    # 2) Sprawdź odległość od gracza (1 kafelek max)
    var player_cell = ground_tilemap.local_to_map(ground_tilemap.to_local(global_position))
    if (abs(cell.x - player_cell.x) + abs(cell.y - player_cell.y)) > 1:
        stop_digging()
        return

    # 3) Zebranie drabiny (jeśli jest Area2D w grupie "ladders")
    for ladder in get_tree().get_nodes_in_group("ladders"):
        var ladder_cell = ground_tilemap.local_to_map(ground_tilemap.to_local(ladder.global_position))
        if ladder_cell == cell:
            # wrzuć do ekwipunku
            var itm = InventoryItem.new()
            itm.item_type = ladder_item_type
            inventory.put(itm)
            ladder.queue_free()
            LadderRemoveSound.play()
            emit_signal("inventory_updated", inventory)
            stop_digging()
            return

    # 4) Kopanie terenu
    var tile_id = ground_tilemap.get_cell_source_id(cell) # 'cell' zamiast 'target_map_coords' z twojego kodu
    if tile_id == -1:
        stop_digging()
        return

    var tile_data = ground_tilemap.get_cell_tile_data(cell)
    if tile_data and tile_data.get_custom_data("diggable"):
        # >>> DODAJ TE LINIE <<<
        var mouse_pos = get_global_mouse_position() # Potrzebujemy pozycji myszy
        $AnimatedSprite2D.flip_h = mouse_pos.x < global_position.x # Odwróć sprite jeśli trzeba
        if mouse_pos.y > global_position.y + 4: # Sprawdź czy mysz jest znacząco poniżej gracza (dodaj mały offset np. 4 piksele)
            digging_animation = "dig_under"
            print("Setting animation to dig_under") # Debug
        else:
            digging_animation = "dig"
            print("Setting animation to dig") # Debug


        # uruchom timer
        start_digging(cell) # 'cell' zamiast 'target_map_coords'
    else:
        stop_digging()

func add_coins(amount: int):
    coins += amount
    coins_updated.emit(coins)
    print("Player received %d coins. Total coins: %d" % [amount, coins])

func remove_coins(amount: int) -> bool:
    if coins >= amount:
        coins -= amount
        coins_updated.emit(coins)
        print("Player spent %d coins. Total coins: %d" % [amount, coins])
        return true
    return false
    
func start_digging(map_coords: Vector2i) -> void:
    if digging_target != null and digging_target != map_coords:
        stop_digging() # To już powinno usuwać stary pasek (zobaczymy w modyfikacji stop_digging)

    digging_target = map_coords

    if not digging_blocks.has(map_coords):
        var tile_data = ground_tilemap.get_cell_tile_data(map_coords)
        var base_durability = 100.0 # Domyślna wartość, jeśli kafelek nie ma zdefiniowanej
        if tile_data and tile_data.has_custom_data("durability"):
            base_durability = float(tile_data.get_custom_data("durability")) # Upewnij się, że to float
        
        # NOWOŚĆ: Zapisz początkowe HP bloku
        current_digging_block_initial_hp = base_durability
        digging_blocks[map_coords] = base_durability
    else:
        # NOWOŚĆ: Jeśli blok był już częściowo kopany, odzyskaj jego początkowe HP
        # To wymagałoby zmiany struktury digging_blocks lub ponownego odczytu z TileData
        # Na razie załóżmy, że zawsze odczytujemy z TileData przy rozpoczęciu nowego kopania dla paska.
        var tile_data = ground_tilemap.get_cell_tile_data(map_coords)
        if tile_data and tile_data.has_custom_data("durability"):
            current_digging_block_initial_hp = float(tile_data.get_custom_data("durability"))
        else:
            current_digging_block_initial_hp = 100.0 # Domyślna wartość

    # NOWOŚĆ: Tworzenie i konfiguracja paska zdrowia bloku
    if current_block_health_bar != null and is_instance_valid(current_block_health_bar):
        current_block_health_bar.queue_free() # Usuń stary pasek, jeśli istnieje
    
    current_block_health_bar = BLOCK_HEALTH_BAR_SCENE.instantiate().get_node("HealthBar") as ProgressBar
    if current_block_health_bar:
        # Dodajemy pasek do głównego drzewa sceny (Game), aby nie poruszał się z graczem
        # i był nad innymi elementami. Można też stworzyć dedykowany CanvasLayer.
        get_tree().current_scene.add_child(current_block_health_bar.get_parent()) # Dodajemy rodzica (BlockHealthBarUI)
        
        current_block_health_bar.max_value = current_digging_block_initial_hp
        current_block_health_bar.value = digging_blocks[map_coords]
        
        # Pozycjonowanie paska nad blokiem
        # Używamy ground_tilemap do konwersji koordynatów mapy na pozycję w świecie
        var block_world_pos = ground_tilemap.map_to_local(map_coords)
        # Ustaw pozycję rodzica paska (BlockHealthBarUI)
        # Offset, aby był lekko nad środkiem bloku
        current_block_health_bar.get_parent().global_position = block_world_pos + Vector2(0, -TILE_HEIGHT * 0.75) 
        current_block_health_bar.get_parent().show()
    else:
        printerr("Failed to instantiate or find HealthBar in BlockHealthBarUI scene!")


    # Wykonaj pierwsze uderzenie natychmiast
    dig_block_progress(map_coords) # Ta funkcja zaktualizuje wartość paska
    digging_timer.start()


func stop_digging() -> void:
    digging_target = null
    digging_timer.stop()
    
    # NOWOŚĆ: Usuń pasek zdrowia, gdy kopanie jest zatrzymane
    if current_block_health_bar != null and is_instance_valid(current_block_health_bar):
        current_block_health_bar.get_parent().queue_free() # Usuwamy rodzica (BlockHealthBarUI)
        current_block_health_bar = null


func dig_block_progress(map_coords: Vector2i) -> void:
    if not digging_blocks.has(map_coords):
        stop_digging()
        return

    if not DigSound.playing: DigSound.play()

    # === KLUCZOWA ZMIANA: UŻYJ current_digging_damage ===
    digging_blocks[map_coords] -= current_digging_damage
    # ====================================================
    print("Digging block at %s - Durability: %s (Damage: %s)" % [map_coords, digging_blocks[map_coords], current_digging_damage])

    if current_block_health_bar != null and is_instance_valid(current_block_health_bar):
        if current_block_health_bar.max_value != current_digging_block_initial_hp:
            current_block_health_bar.max_value = current_digging_block_initial_hp
        current_block_health_bar.value = digging_blocks[map_coords]
        
        # === ZMIANA: Sprawdzenie typu StyleBoxu ===
        var fill_stylebox = current_block_health_bar.get_theme_stylebox("fill")
        if fill_stylebox is StyleBoxFlat: 
            if digging_blocks[map_coords] < 0.3 * current_block_health_bar.max_value:
                fill_stylebox.bg_color = Color.RED
            else:
                fill_stylebox.bg_color = Color.DARK_GOLDENROD 
        # else: # Opcjonalny printerr, jeśli styl nie jest StyleBoxFlat
        # 	printerr("HealthBar fill is not a StyleBoxFlat, cannot change bg_color directly.")
        # =========================================

    if digging_blocks[map_coords] <= 0:
        print("Block destroyed at", map_coords) # Debug

        # --- POCZĄTEK TWOJEJ ISTNIEJĄCEJ LOGIKI DODAWANIA PRZEDMIOTU ---
        # Pobierz dane zniszczonego kafelka
        var tile_data = ground_tilemap.get_cell_tile_data(map_coords)

        # Sprawdź, czy kafelek ma przypisaną ścieżkę do zasobu
        if tile_data and tile_data.has_custom_data("resource_item_path"):
            # Pobierz ścieżkę jako string
            var item_path = tile_data.get_custom_data("resource_item_path") as String

            # Sprawdź, czy ścieżka nie jest pusta
            if not item_path.is_empty():
                # Załaduj zasób InventoryItemType ze ścieżki
                var item_type = load(item_path) as InventoryItemType

                # Sprawdź, czy zasób został poprawnie załadowany
                if item_type:
                    print("Granting item based on tile data:", item_type.name) # Debug

                    # Stwórz nowy obiekt InventoryItem
                    var new_item = InventoryItem.new()
                    new_item.item_type = item_type # Przypisz załadowany typ

                    # Dodaj nowy przedmiot do ekwipunku gracza
                    if inventory.put(new_item):
                        print("Item successfully added to inventory:", item_type.name) # Debug
                         # Sygnał 'inventory_updated' jest wysyłany automatycznie przez inventory.put()
                         # Możesz tu dodać np. dźwięk podniesienia przedmiotu, jeśli chcesz
                         # pickup_sound.play()
                    else:
                         # Jeśli ekwipunek jest pełny, przedmiot nie zostanie dodany
                        printerr("Could not add item to inventory (maybe full?) for type:", item_type.name)
                         # Opcjonalnie: Można by tu zaimplementować upuszczenie przedmiotu na ziemię
                else:
                    # Błąd, jeśli nie udało się załadować zasobu ze ścieżki
                    printerr("Failed to load InventoryItemType from path specified in TileData:", item_path)
            # else: # Komentarz: nie ma potrzeby logować, jeśli kafelek po prostu nic nie daje
            #	print("Tile has empty resource_item_path.")
        # else: # Komentarz: nie ma potrzeby logować, jeśli kafelek nie ma tej warstwy
        #	print("Tile has no resource_item_path custom data.")
        # --- KONIEC TWOJEJ ISTNIEJĄCEJ LOGIKI DODAWANIA PRZEDMIOTU ---
        
        # Usuń kafelek z mapy
        ground_tilemap.erase_cell(map_coords) # Zmienione z set_cell(-1) na erase_cell dla pewności
        
        # Usuń informacje o kopanym bloku
        digging_blocks.erase(map_coords)
        
        # Zaktualizuj teren (jeśli używasz BetterTerrain)
        if BetterTerrain: # Sprawdź, czy autoload BetterTerrain istnieje
            BetterTerrain.update_terrain_cell(ground_tilemap, map_coords, true)
        
        # NOWOŚĆ: Usuń pasek zdrowia, gdy blok jest zniszczony
        if current_block_health_bar != null and is_instance_valid(current_block_health_bar):
            current_block_health_bar.get_parent().queue_free() # Usuwamy rodzica (BlockHealthBarUI)
            current_block_health_bar = null
        
        stop_digging() # To zatrzyma timer i wyczyści digging_target, pasek też powinien być już usunięty


func handle_ladder_placement() -> void:
    if ground_tilemap == null or ladder_scene == null:
        return

    # 1) Ile drabinek w Inventory?
    var have = inventory.get_amount_of_item_type(ladder_item_type)
    if have <= 0:
        print("Nie masz drabinek")
        return

    # 2) Mysz → lokal → komórka
    var cell = ground_tilemap.local_to_map(ground_tilemap.to_local(get_global_mouse_position()))
    var player_cell = ground_tilemap.local_to_map(ground_tilemap.to_local(global_position))
    if (abs(cell.x - player_cell.x) + abs(cell.y - player_cell.y)) > 1:
        return  

    # 3) Czy już jest drabina?
    for ladder in get_tree().get_nodes_in_group("ladders"):
        var ladder_cell = ground_tilemap.local_to_map(ground_tilemap.to_local(ladder.global_position))
        if ladder_cell == cell:
            return

    # 4) Czy pod spodem jest ziemia?
    if ground_tilemap.get_cell_source_id(cell) != -1:
        return
    # 5a) Najpierw Instantiate
    var inst = ladder_scene.instantiate()
    if not inst: # Sprawdzenie czy instancja się udała
        printerr("Failed to instantiate ladder scene!")
        return
    # 5b) Oblicz pozycję bazową (lewy górny róg)
    var center_pos: Vector2 = ground_tilemap.map_to_local(cell)
    var cell_size_i: Vector2i = ground_tilemap.tile_set.tile_size
    var cell_size_f: Vector2 = Vector2(cell_size_i) 
    #var offset_to_top_left: Vector2 = cell_size_f / 2.0
    var base_position: Vector2 = center_pos

    # 5c) Ustaw ostateczną pozycję z przesunięciem
    inst.position = base_position + Vector2(1.1, 0.0) 
    
    # 5d) Dodaj do sceny i grupy, podłącz sygnały
    var parent_node = get_parent() # Bezpieczniej jest pobrać rodzica
    if is_instance_valid(parent_node):
        parent_node.add_child(inst)
        print("Added ladder instance:", inst.name, "at position:", inst.position, "to parent:", parent_node.name) # Debug
    else:
        printerr("Player has no valid parent to add ladder to!")
        inst.queue_free() # Zwolnij pamięć, jeśli nie można dodać
        return
    inst.add_to_group("ladders")
    if not inst.entered_ladder.is_connected(_on_ladder_entered):
        inst.entered_ladder.connect(_on_ladder_entered)
    if not inst.exited_ladder.is_connected(_on_ladder_exited):
        inst.exited_ladder.connect(_on_ladder_exited)
    # 6) Odejmij 1 drabinę z Inventory
    var list = inventory.get_of_type(ladder_item_type)
    if list.size() > 0:
        inventory.take(list[0])
        emit_signal("inventory_updated", inventory)
    LadderPlaceSound.play()

func apply_pickaxe_damage_upgrade(upgrade_value: float, is_multiplier: bool = true) -> void:
    if is_multiplier:
        current_digging_damage = base_digging_damage * upgrade_value
    else:
        current_digging_damage = upgrade_value 

    print("Player: Pickaxe damage upgraded. New digging damage: ", current_digging_damage)
    
func apply_fall_damage(damage_percent: float) -> void:
    if current_hp <= 0:
        return
    var damage_amount = (damage_percent / 100.0) * max_hp
    current_hp -= damage_amount
    current_hp = max(current_hp, 0)
    print("Took ", damage_amount, " fall damage. HP left: ", current_hp)
    health_updated.emit(current_hp, max_hp)
    if current_hp <= 0:
        handle_death()


func handle_death() -> void:
    print("Player has died!")
    player_died.emit()
    $AnimatedSprite2D.play("death")
    set_physics_process(false)
    set_process_input(false)


func _on_ladder_entered(body):
    if body == self:
        ladder_stack += 1


func _on_ladder_exited(body):
    if body == self:
        ladder_stack -= 1
        if ladder_stack < 0:
            ladder_stack = 0
        set_collision_mask_value(1, true)
        if LadderClimbSound.playing:
            LadderClimbSound.stop()

func add_health(amount: float):
    if current_hp <= 0: # Nie lecz trupa
        return
    current_hp += amount
    current_hp = min(current_hp, max_hp) # Nie przekraczaj max HP
    health_updated.emit(current_hp, max_hp)
    print("Player healed for ", amount, " HP. Current HP: ", current_hp)
</file>

</files>
